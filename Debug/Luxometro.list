
Luxometro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000077fc  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002a14  0800790c  0800790c  0001790c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a320  0800a320  000200c4  2**0
                  CONTENTS
  4 .ARM          00000000  0800a320  0800a320  000200c4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a320  0800a320  000200c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a320  0800a320  0001a320  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a324  0800a324  0001a324  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c4  20000000  0800a328  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005a4  200000c4  0800a3ec  000200c4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000668  0800a3ec  00020668  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f1eb  00000000  00000000  000200ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023e4  00000000  00000000  0002f2d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f60  00000000  00000000  000316c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e60  00000000  00000000  00032620  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018a54  00000000  00000000  00033480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011a27  00000000  00000000  0004bed4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c7f1  00000000  00000000  0005d8fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ea0ec  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000046a4  00000000  00000000  000ea13c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200000c4 	.word	0x200000c4
 800012c:	00000000 	.word	0x00000000
 8000130:	080078f4 	.word	0x080078f4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200000c8 	.word	0x200000c8
 800014c:	080078f4 	.word	0x080078f4

08000150 <__aeabi_fmul>:
 8000150:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000154:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000158:	bf1e      	ittt	ne
 800015a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800015e:	ea92 0f0c 	teqne	r2, ip
 8000162:	ea93 0f0c 	teqne	r3, ip
 8000166:	d06f      	beq.n	8000248 <__aeabi_fmul+0xf8>
 8000168:	441a      	add	r2, r3
 800016a:	ea80 0c01 	eor.w	ip, r0, r1
 800016e:	0240      	lsls	r0, r0, #9
 8000170:	bf18      	it	ne
 8000172:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000176:	d01e      	beq.n	80001b6 <__aeabi_fmul+0x66>
 8000178:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800017c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000180:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000184:	fba0 3101 	umull	r3, r1, r0, r1
 8000188:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800018c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000190:	bf3e      	ittt	cc
 8000192:	0049      	lslcc	r1, r1, #1
 8000194:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000198:	005b      	lslcc	r3, r3, #1
 800019a:	ea40 0001 	orr.w	r0, r0, r1
 800019e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80001a2:	2afd      	cmp	r2, #253	; 0xfd
 80001a4:	d81d      	bhi.n	80001e2 <__aeabi_fmul+0x92>
 80001a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001aa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001ae:	bf08      	it	eq
 80001b0:	f020 0001 	biceq.w	r0, r0, #1
 80001b4:	4770      	bx	lr
 80001b6:	f090 0f00 	teq	r0, #0
 80001ba:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001be:	bf08      	it	eq
 80001c0:	0249      	lsleq	r1, r1, #9
 80001c2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001c6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001ca:	3a7f      	subs	r2, #127	; 0x7f
 80001cc:	bfc2      	ittt	gt
 80001ce:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001d2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001d6:	4770      	bxgt	lr
 80001d8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001dc:	f04f 0300 	mov.w	r3, #0
 80001e0:	3a01      	subs	r2, #1
 80001e2:	dc5d      	bgt.n	80002a0 <__aeabi_fmul+0x150>
 80001e4:	f112 0f19 	cmn.w	r2, #25
 80001e8:	bfdc      	itt	le
 80001ea:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80001ee:	4770      	bxle	lr
 80001f0:	f1c2 0200 	rsb	r2, r2, #0
 80001f4:	0041      	lsls	r1, r0, #1
 80001f6:	fa21 f102 	lsr.w	r1, r1, r2
 80001fa:	f1c2 0220 	rsb	r2, r2, #32
 80001fe:	fa00 fc02 	lsl.w	ip, r0, r2
 8000202:	ea5f 0031 	movs.w	r0, r1, rrx
 8000206:	f140 0000 	adc.w	r0, r0, #0
 800020a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800020e:	bf08      	it	eq
 8000210:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000214:	4770      	bx	lr
 8000216:	f092 0f00 	teq	r2, #0
 800021a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800021e:	bf02      	ittt	eq
 8000220:	0040      	lsleq	r0, r0, #1
 8000222:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000226:	3a01      	subeq	r2, #1
 8000228:	d0f9      	beq.n	800021e <__aeabi_fmul+0xce>
 800022a:	ea40 000c 	orr.w	r0, r0, ip
 800022e:	f093 0f00 	teq	r3, #0
 8000232:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000236:	bf02      	ittt	eq
 8000238:	0049      	lsleq	r1, r1, #1
 800023a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800023e:	3b01      	subeq	r3, #1
 8000240:	d0f9      	beq.n	8000236 <__aeabi_fmul+0xe6>
 8000242:	ea41 010c 	orr.w	r1, r1, ip
 8000246:	e78f      	b.n	8000168 <__aeabi_fmul+0x18>
 8000248:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800024c:	ea92 0f0c 	teq	r2, ip
 8000250:	bf18      	it	ne
 8000252:	ea93 0f0c 	teqne	r3, ip
 8000256:	d00a      	beq.n	800026e <__aeabi_fmul+0x11e>
 8000258:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800025c:	bf18      	it	ne
 800025e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000262:	d1d8      	bne.n	8000216 <__aeabi_fmul+0xc6>
 8000264:	ea80 0001 	eor.w	r0, r0, r1
 8000268:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800026c:	4770      	bx	lr
 800026e:	f090 0f00 	teq	r0, #0
 8000272:	bf17      	itett	ne
 8000274:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000278:	4608      	moveq	r0, r1
 800027a:	f091 0f00 	teqne	r1, #0
 800027e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000282:	d014      	beq.n	80002ae <__aeabi_fmul+0x15e>
 8000284:	ea92 0f0c 	teq	r2, ip
 8000288:	d101      	bne.n	800028e <__aeabi_fmul+0x13e>
 800028a:	0242      	lsls	r2, r0, #9
 800028c:	d10f      	bne.n	80002ae <__aeabi_fmul+0x15e>
 800028e:	ea93 0f0c 	teq	r3, ip
 8000292:	d103      	bne.n	800029c <__aeabi_fmul+0x14c>
 8000294:	024b      	lsls	r3, r1, #9
 8000296:	bf18      	it	ne
 8000298:	4608      	movne	r0, r1
 800029a:	d108      	bne.n	80002ae <__aeabi_fmul+0x15e>
 800029c:	ea80 0001 	eor.w	r0, r0, r1
 80002a0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002a4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002a8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002ac:	4770      	bx	lr
 80002ae:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002b2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_drsub>:
 80002b8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002bc:	e002      	b.n	80002c4 <__adddf3>
 80002be:	bf00      	nop

080002c0 <__aeabi_dsub>:
 80002c0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002c4 <__adddf3>:
 80002c4:	b530      	push	{r4, r5, lr}
 80002c6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002ca:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002ce:	ea94 0f05 	teq	r4, r5
 80002d2:	bf08      	it	eq
 80002d4:	ea90 0f02 	teqeq	r0, r2
 80002d8:	bf1f      	itttt	ne
 80002da:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002de:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002e2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002e6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002ea:	f000 80e2 	beq.w	80004b2 <__adddf3+0x1ee>
 80002ee:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002f2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002f6:	bfb8      	it	lt
 80002f8:	426d      	neglt	r5, r5
 80002fa:	dd0c      	ble.n	8000316 <__adddf3+0x52>
 80002fc:	442c      	add	r4, r5
 80002fe:	ea80 0202 	eor.w	r2, r0, r2
 8000302:	ea81 0303 	eor.w	r3, r1, r3
 8000306:	ea82 0000 	eor.w	r0, r2, r0
 800030a:	ea83 0101 	eor.w	r1, r3, r1
 800030e:	ea80 0202 	eor.w	r2, r0, r2
 8000312:	ea81 0303 	eor.w	r3, r1, r3
 8000316:	2d36      	cmp	r5, #54	; 0x36
 8000318:	bf88      	it	hi
 800031a:	bd30      	pophi	{r4, r5, pc}
 800031c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000320:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000324:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000328:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800032c:	d002      	beq.n	8000334 <__adddf3+0x70>
 800032e:	4240      	negs	r0, r0
 8000330:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000334:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000338:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800033c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000340:	d002      	beq.n	8000348 <__adddf3+0x84>
 8000342:	4252      	negs	r2, r2
 8000344:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000348:	ea94 0f05 	teq	r4, r5
 800034c:	f000 80a7 	beq.w	800049e <__adddf3+0x1da>
 8000350:	f1a4 0401 	sub.w	r4, r4, #1
 8000354:	f1d5 0e20 	rsbs	lr, r5, #32
 8000358:	db0d      	blt.n	8000376 <__adddf3+0xb2>
 800035a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800035e:	fa22 f205 	lsr.w	r2, r2, r5
 8000362:	1880      	adds	r0, r0, r2
 8000364:	f141 0100 	adc.w	r1, r1, #0
 8000368:	fa03 f20e 	lsl.w	r2, r3, lr
 800036c:	1880      	adds	r0, r0, r2
 800036e:	fa43 f305 	asr.w	r3, r3, r5
 8000372:	4159      	adcs	r1, r3
 8000374:	e00e      	b.n	8000394 <__adddf3+0xd0>
 8000376:	f1a5 0520 	sub.w	r5, r5, #32
 800037a:	f10e 0e20 	add.w	lr, lr, #32
 800037e:	2a01      	cmp	r2, #1
 8000380:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000384:	bf28      	it	cs
 8000386:	f04c 0c02 	orrcs.w	ip, ip, #2
 800038a:	fa43 f305 	asr.w	r3, r3, r5
 800038e:	18c0      	adds	r0, r0, r3
 8000390:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	d507      	bpl.n	80003aa <__adddf3+0xe6>
 800039a:	f04f 0e00 	mov.w	lr, #0
 800039e:	f1dc 0c00 	rsbs	ip, ip, #0
 80003a2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003a6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003aa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003ae:	d31b      	bcc.n	80003e8 <__adddf3+0x124>
 80003b0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003b4:	d30c      	bcc.n	80003d0 <__adddf3+0x10c>
 80003b6:	0849      	lsrs	r1, r1, #1
 80003b8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003bc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c0:	f104 0401 	add.w	r4, r4, #1
 80003c4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003cc:	f080 809a 	bcs.w	8000504 <__adddf3+0x240>
 80003d0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003d4:	bf08      	it	eq
 80003d6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003da:	f150 0000 	adcs.w	r0, r0, #0
 80003de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003e2:	ea41 0105 	orr.w	r1, r1, r5
 80003e6:	bd30      	pop	{r4, r5, pc}
 80003e8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003ec:	4140      	adcs	r0, r0
 80003ee:	eb41 0101 	adc.w	r1, r1, r1
 80003f2:	3c01      	subs	r4, #1
 80003f4:	bf28      	it	cs
 80003f6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003fa:	d2e9      	bcs.n	80003d0 <__adddf3+0x10c>
 80003fc:	f091 0f00 	teq	r1, #0
 8000400:	bf04      	itt	eq
 8000402:	4601      	moveq	r1, r0
 8000404:	2000      	moveq	r0, #0
 8000406:	fab1 f381 	clz	r3, r1
 800040a:	bf08      	it	eq
 800040c:	3320      	addeq	r3, #32
 800040e:	f1a3 030b 	sub.w	r3, r3, #11
 8000412:	f1b3 0220 	subs.w	r2, r3, #32
 8000416:	da0c      	bge.n	8000432 <__adddf3+0x16e>
 8000418:	320c      	adds	r2, #12
 800041a:	dd08      	ble.n	800042e <__adddf3+0x16a>
 800041c:	f102 0c14 	add.w	ip, r2, #20
 8000420:	f1c2 020c 	rsb	r2, r2, #12
 8000424:	fa01 f00c 	lsl.w	r0, r1, ip
 8000428:	fa21 f102 	lsr.w	r1, r1, r2
 800042c:	e00c      	b.n	8000448 <__adddf3+0x184>
 800042e:	f102 0214 	add.w	r2, r2, #20
 8000432:	bfd8      	it	le
 8000434:	f1c2 0c20 	rsble	ip, r2, #32
 8000438:	fa01 f102 	lsl.w	r1, r1, r2
 800043c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000440:	bfdc      	itt	le
 8000442:	ea41 010c 	orrle.w	r1, r1, ip
 8000446:	4090      	lslle	r0, r2
 8000448:	1ae4      	subs	r4, r4, r3
 800044a:	bfa2      	ittt	ge
 800044c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000450:	4329      	orrge	r1, r5
 8000452:	bd30      	popge	{r4, r5, pc}
 8000454:	ea6f 0404 	mvn.w	r4, r4
 8000458:	3c1f      	subs	r4, #31
 800045a:	da1c      	bge.n	8000496 <__adddf3+0x1d2>
 800045c:	340c      	adds	r4, #12
 800045e:	dc0e      	bgt.n	800047e <__adddf3+0x1ba>
 8000460:	f104 0414 	add.w	r4, r4, #20
 8000464:	f1c4 0220 	rsb	r2, r4, #32
 8000468:	fa20 f004 	lsr.w	r0, r0, r4
 800046c:	fa01 f302 	lsl.w	r3, r1, r2
 8000470:	ea40 0003 	orr.w	r0, r0, r3
 8000474:	fa21 f304 	lsr.w	r3, r1, r4
 8000478:	ea45 0103 	orr.w	r1, r5, r3
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	f1c4 040c 	rsb	r4, r4, #12
 8000482:	f1c4 0220 	rsb	r2, r4, #32
 8000486:	fa20 f002 	lsr.w	r0, r0, r2
 800048a:	fa01 f304 	lsl.w	r3, r1, r4
 800048e:	ea40 0003 	orr.w	r0, r0, r3
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	fa21 f004 	lsr.w	r0, r1, r4
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	f094 0f00 	teq	r4, #0
 80004a2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004a6:	bf06      	itte	eq
 80004a8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004ac:	3401      	addeq	r4, #1
 80004ae:	3d01      	subne	r5, #1
 80004b0:	e74e      	b.n	8000350 <__adddf3+0x8c>
 80004b2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004b6:	bf18      	it	ne
 80004b8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004bc:	d029      	beq.n	8000512 <__adddf3+0x24e>
 80004be:	ea94 0f05 	teq	r4, r5
 80004c2:	bf08      	it	eq
 80004c4:	ea90 0f02 	teqeq	r0, r2
 80004c8:	d005      	beq.n	80004d6 <__adddf3+0x212>
 80004ca:	ea54 0c00 	orrs.w	ip, r4, r0
 80004ce:	bf04      	itt	eq
 80004d0:	4619      	moveq	r1, r3
 80004d2:	4610      	moveq	r0, r2
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	ea91 0f03 	teq	r1, r3
 80004da:	bf1e      	ittt	ne
 80004dc:	2100      	movne	r1, #0
 80004de:	2000      	movne	r0, #0
 80004e0:	bd30      	popne	{r4, r5, pc}
 80004e2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004e6:	d105      	bne.n	80004f4 <__adddf3+0x230>
 80004e8:	0040      	lsls	r0, r0, #1
 80004ea:	4149      	adcs	r1, r1
 80004ec:	bf28      	it	cs
 80004ee:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004f2:	bd30      	pop	{r4, r5, pc}
 80004f4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f8:	bf3c      	itt	cc
 80004fa:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004fe:	bd30      	popcc	{r4, r5, pc}
 8000500:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000504:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000508:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800050c:	f04f 0000 	mov.w	r0, #0
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000516:	bf1a      	itte	ne
 8000518:	4619      	movne	r1, r3
 800051a:	4610      	movne	r0, r2
 800051c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000520:	bf1c      	itt	ne
 8000522:	460b      	movne	r3, r1
 8000524:	4602      	movne	r2, r0
 8000526:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800052a:	bf06      	itte	eq
 800052c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000530:	ea91 0f03 	teqeq	r1, r3
 8000534:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	bf00      	nop

0800053c <__aeabi_ui2d>:
 800053c:	f090 0f00 	teq	r0, #0
 8000540:	bf04      	itt	eq
 8000542:	2100      	moveq	r1, #0
 8000544:	4770      	bxeq	lr
 8000546:	b530      	push	{r4, r5, lr}
 8000548:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000550:	f04f 0500 	mov.w	r5, #0
 8000554:	f04f 0100 	mov.w	r1, #0
 8000558:	e750      	b.n	80003fc <__adddf3+0x138>
 800055a:	bf00      	nop

0800055c <__aeabi_i2d>:
 800055c:	f090 0f00 	teq	r0, #0
 8000560:	bf04      	itt	eq
 8000562:	2100      	moveq	r1, #0
 8000564:	4770      	bxeq	lr
 8000566:	b530      	push	{r4, r5, lr}
 8000568:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000570:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000574:	bf48      	it	mi
 8000576:	4240      	negmi	r0, r0
 8000578:	f04f 0100 	mov.w	r1, #0
 800057c:	e73e      	b.n	80003fc <__adddf3+0x138>
 800057e:	bf00      	nop

08000580 <__aeabi_f2d>:
 8000580:	0042      	lsls	r2, r0, #1
 8000582:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000586:	ea4f 0131 	mov.w	r1, r1, rrx
 800058a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800058e:	bf1f      	itttt	ne
 8000590:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000594:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000598:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800059c:	4770      	bxne	lr
 800059e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005a2:	bf08      	it	eq
 80005a4:	4770      	bxeq	lr
 80005a6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005aa:	bf04      	itt	eq
 80005ac:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b0:	4770      	bxeq	lr
 80005b2:	b530      	push	{r4, r5, lr}
 80005b4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005bc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c0:	e71c      	b.n	80003fc <__adddf3+0x138>
 80005c2:	bf00      	nop

080005c4 <__aeabi_ul2d>:
 80005c4:	ea50 0201 	orrs.w	r2, r0, r1
 80005c8:	bf08      	it	eq
 80005ca:	4770      	bxeq	lr
 80005cc:	b530      	push	{r4, r5, lr}
 80005ce:	f04f 0500 	mov.w	r5, #0
 80005d2:	e00a      	b.n	80005ea <__aeabi_l2d+0x16>

080005d4 <__aeabi_l2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005e2:	d502      	bpl.n	80005ea <__aeabi_l2d+0x16>
 80005e4:	4240      	negs	r0, r0
 80005e6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ea:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ee:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005f2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005f6:	f43f aed8 	beq.w	80003aa <__adddf3+0xe6>
 80005fa:	f04f 0203 	mov.w	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000612:	f1c2 0320 	rsb	r3, r2, #32
 8000616:	fa00 fc03 	lsl.w	ip, r0, r3
 800061a:	fa20 f002 	lsr.w	r0, r0, r2
 800061e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000622:	ea40 000e 	orr.w	r0, r0, lr
 8000626:	fa21 f102 	lsr.w	r1, r1, r2
 800062a:	4414      	add	r4, r2
 800062c:	e6bd      	b.n	80003aa <__adddf3+0xe6>
 800062e:	bf00      	nop

08000630 <__aeabi_dmul>:
 8000630:	b570      	push	{r4, r5, r6, lr}
 8000632:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000636:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800063a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800063e:	bf1d      	ittte	ne
 8000640:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000644:	ea94 0f0c 	teqne	r4, ip
 8000648:	ea95 0f0c 	teqne	r5, ip
 800064c:	f000 f8de 	bleq	800080c <__aeabi_dmul+0x1dc>
 8000650:	442c      	add	r4, r5
 8000652:	ea81 0603 	eor.w	r6, r1, r3
 8000656:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800065a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800065e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000662:	bf18      	it	ne
 8000664:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000668:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800066c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000670:	d038      	beq.n	80006e4 <__aeabi_dmul+0xb4>
 8000672:	fba0 ce02 	umull	ip, lr, r0, r2
 8000676:	f04f 0500 	mov.w	r5, #0
 800067a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800067e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000682:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000686:	f04f 0600 	mov.w	r6, #0
 800068a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800068e:	f09c 0f00 	teq	ip, #0
 8000692:	bf18      	it	ne
 8000694:	f04e 0e01 	orrne.w	lr, lr, #1
 8000698:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800069c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006a4:	d204      	bcs.n	80006b0 <__aeabi_dmul+0x80>
 80006a6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006aa:	416d      	adcs	r5, r5
 80006ac:	eb46 0606 	adc.w	r6, r6, r6
 80006b0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006b4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006bc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006c4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c8:	bf88      	it	hi
 80006ca:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006ce:	d81e      	bhi.n	800070e <__aeabi_dmul+0xde>
 80006d0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006d4:	bf08      	it	eq
 80006d6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006da:	f150 0000 	adcs.w	r0, r0, #0
 80006de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e8:	ea46 0101 	orr.w	r1, r6, r1
 80006ec:	ea40 0002 	orr.w	r0, r0, r2
 80006f0:	ea81 0103 	eor.w	r1, r1, r3
 80006f4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f8:	bfc2      	ittt	gt
 80006fa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006fe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000702:	bd70      	popgt	{r4, r5, r6, pc}
 8000704:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000708:	f04f 0e00 	mov.w	lr, #0
 800070c:	3c01      	subs	r4, #1
 800070e:	f300 80ab 	bgt.w	8000868 <__aeabi_dmul+0x238>
 8000712:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000716:	bfde      	ittt	le
 8000718:	2000      	movle	r0, #0
 800071a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800071e:	bd70      	pople	{r4, r5, r6, pc}
 8000720:	f1c4 0400 	rsb	r4, r4, #0
 8000724:	3c20      	subs	r4, #32
 8000726:	da35      	bge.n	8000794 <__aeabi_dmul+0x164>
 8000728:	340c      	adds	r4, #12
 800072a:	dc1b      	bgt.n	8000764 <__aeabi_dmul+0x134>
 800072c:	f104 0414 	add.w	r4, r4, #20
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f305 	lsl.w	r3, r0, r5
 8000738:	fa20 f004 	lsr.w	r0, r0, r4
 800073c:	fa01 f205 	lsl.w	r2, r1, r5
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000748:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800074c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000750:	fa21 f604 	lsr.w	r6, r1, r4
 8000754:	eb42 0106 	adc.w	r1, r2, r6
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f1c4 040c 	rsb	r4, r4, #12
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f304 	lsl.w	r3, r0, r4
 8000770:	fa20 f005 	lsr.w	r0, r0, r5
 8000774:	fa01 f204 	lsl.w	r2, r1, r4
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000784:	f141 0100 	adc.w	r1, r1, #0
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f1c4 0520 	rsb	r5, r4, #32
 8000798:	fa00 f205 	lsl.w	r2, r0, r5
 800079c:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a0:	fa20 f304 	lsr.w	r3, r0, r4
 80007a4:	fa01 f205 	lsl.w	r2, r1, r5
 80007a8:	ea43 0302 	orr.w	r3, r3, r2
 80007ac:	fa21 f004 	lsr.w	r0, r1, r4
 80007b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b4:	fa21 f204 	lsr.w	r2, r1, r4
 80007b8:	ea20 0002 	bic.w	r0, r0, r2
 80007bc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f094 0f00 	teq	r4, #0
 80007d0:	d10f      	bne.n	80007f2 <__aeabi_dmul+0x1c2>
 80007d2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007d6:	0040      	lsls	r0, r0, #1
 80007d8:	eb41 0101 	adc.w	r1, r1, r1
 80007dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e0:	bf08      	it	eq
 80007e2:	3c01      	subeq	r4, #1
 80007e4:	d0f7      	beq.n	80007d6 <__aeabi_dmul+0x1a6>
 80007e6:	ea41 0106 	orr.w	r1, r1, r6
 80007ea:	f095 0f00 	teq	r5, #0
 80007ee:	bf18      	it	ne
 80007f0:	4770      	bxne	lr
 80007f2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007f6:	0052      	lsls	r2, r2, #1
 80007f8:	eb43 0303 	adc.w	r3, r3, r3
 80007fc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000800:	bf08      	it	eq
 8000802:	3d01      	subeq	r5, #1
 8000804:	d0f7      	beq.n	80007f6 <__aeabi_dmul+0x1c6>
 8000806:	ea43 0306 	orr.w	r3, r3, r6
 800080a:	4770      	bx	lr
 800080c:	ea94 0f0c 	teq	r4, ip
 8000810:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000814:	bf18      	it	ne
 8000816:	ea95 0f0c 	teqne	r5, ip
 800081a:	d00c      	beq.n	8000836 <__aeabi_dmul+0x206>
 800081c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000820:	bf18      	it	ne
 8000822:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000826:	d1d1      	bne.n	80007cc <__aeabi_dmul+0x19c>
 8000828:	ea81 0103 	eor.w	r1, r1, r3
 800082c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000830:	f04f 0000 	mov.w	r0, #0
 8000834:	bd70      	pop	{r4, r5, r6, pc}
 8000836:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800083a:	bf06      	itte	eq
 800083c:	4610      	moveq	r0, r2
 800083e:	4619      	moveq	r1, r3
 8000840:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000844:	d019      	beq.n	800087a <__aeabi_dmul+0x24a>
 8000846:	ea94 0f0c 	teq	r4, ip
 800084a:	d102      	bne.n	8000852 <__aeabi_dmul+0x222>
 800084c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000850:	d113      	bne.n	800087a <__aeabi_dmul+0x24a>
 8000852:	ea95 0f0c 	teq	r5, ip
 8000856:	d105      	bne.n	8000864 <__aeabi_dmul+0x234>
 8000858:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800085c:	bf1c      	itt	ne
 800085e:	4610      	movne	r0, r2
 8000860:	4619      	movne	r1, r3
 8000862:	d10a      	bne.n	800087a <__aeabi_dmul+0x24a>
 8000864:	ea81 0103 	eor.w	r1, r1, r3
 8000868:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800086c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000870:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000874:	f04f 0000 	mov.w	r0, #0
 8000878:	bd70      	pop	{r4, r5, r6, pc}
 800087a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800087e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000882:	bd70      	pop	{r4, r5, r6, pc}

08000884 <__aeabi_ddiv>:
 8000884:	b570      	push	{r4, r5, r6, lr}
 8000886:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800088a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800088e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000892:	bf1d      	ittte	ne
 8000894:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000898:	ea94 0f0c 	teqne	r4, ip
 800089c:	ea95 0f0c 	teqne	r5, ip
 80008a0:	f000 f8a7 	bleq	80009f2 <__aeabi_ddiv+0x16e>
 80008a4:	eba4 0405 	sub.w	r4, r4, r5
 80008a8:	ea81 0e03 	eor.w	lr, r1, r3
 80008ac:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008b4:	f000 8088 	beq.w	80009c8 <__aeabi_ddiv+0x144>
 80008b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008bc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008c4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008cc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008d4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008dc:	429d      	cmp	r5, r3
 80008de:	bf08      	it	eq
 80008e0:	4296      	cmpeq	r6, r2
 80008e2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008e6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008ea:	d202      	bcs.n	80008f2 <__aeabi_ddiv+0x6e>
 80008ec:	085b      	lsrs	r3, r3, #1
 80008ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f2:	1ab6      	subs	r6, r6, r2
 80008f4:	eb65 0503 	sbc.w	r5, r5, r3
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000902:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 000c 	orrcs.w	r0, r0, ip
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000960:	ea55 0e06 	orrs.w	lr, r5, r6
 8000964:	d018      	beq.n	8000998 <__aeabi_ddiv+0x114>
 8000966:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800096a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800096e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000972:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000976:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800097a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800097e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000982:	d1c0      	bne.n	8000906 <__aeabi_ddiv+0x82>
 8000984:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000988:	d10b      	bne.n	80009a2 <__aeabi_ddiv+0x11e>
 800098a:	ea41 0100 	orr.w	r1, r1, r0
 800098e:	f04f 0000 	mov.w	r0, #0
 8000992:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000996:	e7b6      	b.n	8000906 <__aeabi_ddiv+0x82>
 8000998:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800099c:	bf04      	itt	eq
 800099e:	4301      	orreq	r1, r0
 80009a0:	2000      	moveq	r0, #0
 80009a2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009a6:	bf88      	it	hi
 80009a8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009ac:	f63f aeaf 	bhi.w	800070e <__aeabi_dmul+0xde>
 80009b0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009b4:	bf04      	itt	eq
 80009b6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ba:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009be:	f150 0000 	adcs.w	r0, r0, #0
 80009c2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	pop	{r4, r5, r6, pc}
 80009c8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009cc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009d4:	bfc2      	ittt	gt
 80009d6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009de:	bd70      	popgt	{r4, r5, r6, pc}
 80009e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009e4:	f04f 0e00 	mov.w	lr, #0
 80009e8:	3c01      	subs	r4, #1
 80009ea:	e690      	b.n	800070e <__aeabi_dmul+0xde>
 80009ec:	ea45 0e06 	orr.w	lr, r5, r6
 80009f0:	e68d      	b.n	800070e <__aeabi_dmul+0xde>
 80009f2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009f6:	ea94 0f0c 	teq	r4, ip
 80009fa:	bf08      	it	eq
 80009fc:	ea95 0f0c 	teqeq	r5, ip
 8000a00:	f43f af3b 	beq.w	800087a <__aeabi_dmul+0x24a>
 8000a04:	ea94 0f0c 	teq	r4, ip
 8000a08:	d10a      	bne.n	8000a20 <__aeabi_ddiv+0x19c>
 8000a0a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a0e:	f47f af34 	bne.w	800087a <__aeabi_dmul+0x24a>
 8000a12:	ea95 0f0c 	teq	r5, ip
 8000a16:	f47f af25 	bne.w	8000864 <__aeabi_dmul+0x234>
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	e72c      	b.n	800087a <__aeabi_dmul+0x24a>
 8000a20:	ea95 0f0c 	teq	r5, ip
 8000a24:	d106      	bne.n	8000a34 <__aeabi_ddiv+0x1b0>
 8000a26:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a2a:	f43f aefd 	beq.w	8000828 <__aeabi_dmul+0x1f8>
 8000a2e:	4610      	mov	r0, r2
 8000a30:	4619      	mov	r1, r3
 8000a32:	e722      	b.n	800087a <__aeabi_dmul+0x24a>
 8000a34:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a38:	bf18      	it	ne
 8000a3a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a3e:	f47f aec5 	bne.w	80007cc <__aeabi_dmul+0x19c>
 8000a42:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a46:	f47f af0d 	bne.w	8000864 <__aeabi_dmul+0x234>
 8000a4a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a4e:	f47f aeeb 	bne.w	8000828 <__aeabi_dmul+0x1f8>
 8000a52:	e712      	b.n	800087a <__aeabi_dmul+0x24a>

08000a54 <__aeabi_d2uiz>:
 8000a54:	004a      	lsls	r2, r1, #1
 8000a56:	d211      	bcs.n	8000a7c <__aeabi_d2uiz+0x28>
 8000a58:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a5c:	d211      	bcs.n	8000a82 <__aeabi_d2uiz+0x2e>
 8000a5e:	d50d      	bpl.n	8000a7c <__aeabi_d2uiz+0x28>
 8000a60:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a64:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a68:	d40e      	bmi.n	8000a88 <__aeabi_d2uiz+0x34>
 8000a6a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a6e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a72:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a76:	fa23 f002 	lsr.w	r0, r3, r2
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d102      	bne.n	8000a8e <__aeabi_d2uiz+0x3a>
 8000a88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a8c:	4770      	bx	lr
 8000a8e:	f04f 0000 	mov.w	r0, #0
 8000a92:	4770      	bx	lr

08000a94 <__aeabi_d2f>:
 8000a94:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a98:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a9c:	bf24      	itt	cs
 8000a9e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aa2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aa6:	d90d      	bls.n	8000ac4 <__aeabi_d2f+0x30>
 8000aa8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aac:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ab0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ab4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ab8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000abc:	bf08      	it	eq
 8000abe:	f020 0001 	biceq.w	r0, r0, #1
 8000ac2:	4770      	bx	lr
 8000ac4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ac8:	d121      	bne.n	8000b0e <__aeabi_d2f+0x7a>
 8000aca:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ace:	bfbc      	itt	lt
 8000ad0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ad4:	4770      	bxlt	lr
 8000ad6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ada:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ade:	f1c2 0218 	rsb	r2, r2, #24
 8000ae2:	f1c2 0c20 	rsb	ip, r2, #32
 8000ae6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aea:	fa20 f002 	lsr.w	r0, r0, r2
 8000aee:	bf18      	it	ne
 8000af0:	f040 0001 	orrne.w	r0, r0, #1
 8000af4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000af8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000afc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b00:	ea40 000c 	orr.w	r0, r0, ip
 8000b04:	fa23 f302 	lsr.w	r3, r3, r2
 8000b08:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b0c:	e7cc      	b.n	8000aa8 <__aeabi_d2f+0x14>
 8000b0e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b12:	d107      	bne.n	8000b24 <__aeabi_d2f+0x90>
 8000b14:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b18:	bf1e      	ittt	ne
 8000b1a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b1e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b22:	4770      	bxne	lr
 8000b24:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b28:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop

08000b34 <__aeabi_frsub>:
 8000b34:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b38:	e002      	b.n	8000b40 <__addsf3>
 8000b3a:	bf00      	nop

08000b3c <__aeabi_fsub>:
 8000b3c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b40 <__addsf3>:
 8000b40:	0042      	lsls	r2, r0, #1
 8000b42:	bf1f      	itttt	ne
 8000b44:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b48:	ea92 0f03 	teqne	r2, r3
 8000b4c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b50:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b54:	d06a      	beq.n	8000c2c <__addsf3+0xec>
 8000b56:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b5a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b5e:	bfc1      	itttt	gt
 8000b60:	18d2      	addgt	r2, r2, r3
 8000b62:	4041      	eorgt	r1, r0
 8000b64:	4048      	eorgt	r0, r1
 8000b66:	4041      	eorgt	r1, r0
 8000b68:	bfb8      	it	lt
 8000b6a:	425b      	neglt	r3, r3
 8000b6c:	2b19      	cmp	r3, #25
 8000b6e:	bf88      	it	hi
 8000b70:	4770      	bxhi	lr
 8000b72:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b76:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b7a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b7e:	bf18      	it	ne
 8000b80:	4240      	negne	r0, r0
 8000b82:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b86:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b8a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b8e:	bf18      	it	ne
 8000b90:	4249      	negne	r1, r1
 8000b92:	ea92 0f03 	teq	r2, r3
 8000b96:	d03f      	beq.n	8000c18 <__addsf3+0xd8>
 8000b98:	f1a2 0201 	sub.w	r2, r2, #1
 8000b9c:	fa41 fc03 	asr.w	ip, r1, r3
 8000ba0:	eb10 000c 	adds.w	r0, r0, ip
 8000ba4:	f1c3 0320 	rsb	r3, r3, #32
 8000ba8:	fa01 f103 	lsl.w	r1, r1, r3
 8000bac:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bb0:	d502      	bpl.n	8000bb8 <__addsf3+0x78>
 8000bb2:	4249      	negs	r1, r1
 8000bb4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bb8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bbc:	d313      	bcc.n	8000be6 <__addsf3+0xa6>
 8000bbe:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bc2:	d306      	bcc.n	8000bd2 <__addsf3+0x92>
 8000bc4:	0840      	lsrs	r0, r0, #1
 8000bc6:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bca:	f102 0201 	add.w	r2, r2, #1
 8000bce:	2afe      	cmp	r2, #254	; 0xfe
 8000bd0:	d251      	bcs.n	8000c76 <__addsf3+0x136>
 8000bd2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bd6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bda:	bf08      	it	eq
 8000bdc:	f020 0001 	biceq.w	r0, r0, #1
 8000be0:	ea40 0003 	orr.w	r0, r0, r3
 8000be4:	4770      	bx	lr
 8000be6:	0049      	lsls	r1, r1, #1
 8000be8:	eb40 0000 	adc.w	r0, r0, r0
 8000bec:	3a01      	subs	r2, #1
 8000bee:	bf28      	it	cs
 8000bf0:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000bf4:	d2ed      	bcs.n	8000bd2 <__addsf3+0x92>
 8000bf6:	fab0 fc80 	clz	ip, r0
 8000bfa:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bfe:	ebb2 020c 	subs.w	r2, r2, ip
 8000c02:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c06:	bfaa      	itet	ge
 8000c08:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c0c:	4252      	neglt	r2, r2
 8000c0e:	4318      	orrge	r0, r3
 8000c10:	bfbc      	itt	lt
 8000c12:	40d0      	lsrlt	r0, r2
 8000c14:	4318      	orrlt	r0, r3
 8000c16:	4770      	bx	lr
 8000c18:	f092 0f00 	teq	r2, #0
 8000c1c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c20:	bf06      	itte	eq
 8000c22:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c26:	3201      	addeq	r2, #1
 8000c28:	3b01      	subne	r3, #1
 8000c2a:	e7b5      	b.n	8000b98 <__addsf3+0x58>
 8000c2c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c30:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c34:	bf18      	it	ne
 8000c36:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c3a:	d021      	beq.n	8000c80 <__addsf3+0x140>
 8000c3c:	ea92 0f03 	teq	r2, r3
 8000c40:	d004      	beq.n	8000c4c <__addsf3+0x10c>
 8000c42:	f092 0f00 	teq	r2, #0
 8000c46:	bf08      	it	eq
 8000c48:	4608      	moveq	r0, r1
 8000c4a:	4770      	bx	lr
 8000c4c:	ea90 0f01 	teq	r0, r1
 8000c50:	bf1c      	itt	ne
 8000c52:	2000      	movne	r0, #0
 8000c54:	4770      	bxne	lr
 8000c56:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c5a:	d104      	bne.n	8000c66 <__addsf3+0x126>
 8000c5c:	0040      	lsls	r0, r0, #1
 8000c5e:	bf28      	it	cs
 8000c60:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c64:	4770      	bx	lr
 8000c66:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c6a:	bf3c      	itt	cc
 8000c6c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c70:	4770      	bxcc	lr
 8000c72:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c76:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c7a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c7e:	4770      	bx	lr
 8000c80:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c84:	bf16      	itet	ne
 8000c86:	4608      	movne	r0, r1
 8000c88:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c8c:	4601      	movne	r1, r0
 8000c8e:	0242      	lsls	r2, r0, #9
 8000c90:	bf06      	itte	eq
 8000c92:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c96:	ea90 0f01 	teqeq	r0, r1
 8000c9a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c9e:	4770      	bx	lr

08000ca0 <__aeabi_ui2f>:
 8000ca0:	f04f 0300 	mov.w	r3, #0
 8000ca4:	e004      	b.n	8000cb0 <__aeabi_i2f+0x8>
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_i2f>:
 8000ca8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cac:	bf48      	it	mi
 8000cae:	4240      	negmi	r0, r0
 8000cb0:	ea5f 0c00 	movs.w	ip, r0
 8000cb4:	bf08      	it	eq
 8000cb6:	4770      	bxeq	lr
 8000cb8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cbc:	4601      	mov	r1, r0
 8000cbe:	f04f 0000 	mov.w	r0, #0
 8000cc2:	e01c      	b.n	8000cfe <__aeabi_l2f+0x2a>

08000cc4 <__aeabi_ul2f>:
 8000cc4:	ea50 0201 	orrs.w	r2, r0, r1
 8000cc8:	bf08      	it	eq
 8000cca:	4770      	bxeq	lr
 8000ccc:	f04f 0300 	mov.w	r3, #0
 8000cd0:	e00a      	b.n	8000ce8 <__aeabi_l2f+0x14>
 8000cd2:	bf00      	nop

08000cd4 <__aeabi_l2f>:
 8000cd4:	ea50 0201 	orrs.w	r2, r0, r1
 8000cd8:	bf08      	it	eq
 8000cda:	4770      	bxeq	lr
 8000cdc:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000ce0:	d502      	bpl.n	8000ce8 <__aeabi_l2f+0x14>
 8000ce2:	4240      	negs	r0, r0
 8000ce4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce8:	ea5f 0c01 	movs.w	ip, r1
 8000cec:	bf02      	ittt	eq
 8000cee:	4684      	moveq	ip, r0
 8000cf0:	4601      	moveq	r1, r0
 8000cf2:	2000      	moveq	r0, #0
 8000cf4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cf8:	bf08      	it	eq
 8000cfa:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cfe:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d02:	fabc f28c 	clz	r2, ip
 8000d06:	3a08      	subs	r2, #8
 8000d08:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d0c:	db10      	blt.n	8000d30 <__aeabi_l2f+0x5c>
 8000d0e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d12:	4463      	add	r3, ip
 8000d14:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d18:	f1c2 0220 	rsb	r2, r2, #32
 8000d1c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d20:	fa20 f202 	lsr.w	r2, r0, r2
 8000d24:	eb43 0002 	adc.w	r0, r3, r2
 8000d28:	bf08      	it	eq
 8000d2a:	f020 0001 	biceq.w	r0, r0, #1
 8000d2e:	4770      	bx	lr
 8000d30:	f102 0220 	add.w	r2, r2, #32
 8000d34:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d38:	f1c2 0220 	rsb	r2, r2, #32
 8000d3c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d40:	fa21 f202 	lsr.w	r2, r1, r2
 8000d44:	eb43 0002 	adc.w	r0, r3, r2
 8000d48:	bf08      	it	eq
 8000d4a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d4e:	4770      	bx	lr

08000d50 <__aeabi_f2uiz>:
 8000d50:	0042      	lsls	r2, r0, #1
 8000d52:	d20e      	bcs.n	8000d72 <__aeabi_f2uiz+0x22>
 8000d54:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000d58:	d30b      	bcc.n	8000d72 <__aeabi_f2uiz+0x22>
 8000d5a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000d5e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000d62:	d409      	bmi.n	8000d78 <__aeabi_f2uiz+0x28>
 8000d64:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000d68:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000d6c:	fa23 f002 	lsr.w	r0, r3, r2
 8000d70:	4770      	bx	lr
 8000d72:	f04f 0000 	mov.w	r0, #0
 8000d76:	4770      	bx	lr
 8000d78:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000d7c:	d101      	bne.n	8000d82 <__aeabi_f2uiz+0x32>
 8000d7e:	0242      	lsls	r2, r0, #9
 8000d80:	d102      	bne.n	8000d88 <__aeabi_f2uiz+0x38>
 8000d82:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d86:	4770      	bx	lr
 8000d88:	f04f 0000 	mov.w	r0, #0
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop

08000d90 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000d94:	f3bf 8f4f 	dsb	sy
}
 8000d98:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000d9a:	4b06      	ldr	r3, [pc, #24]	; (8000db4 <__NVIC_SystemReset+0x24>)
 8000d9c:	68db      	ldr	r3, [r3, #12]
 8000d9e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000da2:	4904      	ldr	r1, [pc, #16]	; (8000db4 <__NVIC_SystemReset+0x24>)
 8000da4:	4b04      	ldr	r3, [pc, #16]	; (8000db8 <__NVIC_SystemReset+0x28>)
 8000da6:	4313      	orrs	r3, r2
 8000da8:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000daa:	f3bf 8f4f 	dsb	sy
}
 8000dae:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000db0:	bf00      	nop
 8000db2:	e7fd      	b.n	8000db0 <__NVIC_SystemReset+0x20>
 8000db4:	e000ed00 	.word	0xe000ed00
 8000db8:	05fa0004 	.word	0x05fa0004

08000dbc <main>:
uint16_t IDR_Read;
uint8_t Config_buffer[2]; /*Solve here*/
bool comeFromMenu = false;

int main(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
  HAL_Init();
 8000dc0:	f002 f816 	bl	8002df0 <HAL_Init>
  SystemClock_Config();
 8000dc4:	f001 fc7b 	bl	80026be <SystemClock_Config>
  MX_GPIO_Init();
 8000dc8:	f001 fdd2 	bl	8002970 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000dcc:	f001 fcbe 	bl	800274c <MX_I2C1_Init>
  MX_I2C2_Init();
 8000dd0:	f001 fcea 	bl	80027a8 <MX_I2C2_Init>
  MX_IWDG_Init();
 8000dd4:	f001 fd16 	bl	8002804 <MX_IWDG_Init>
  MX_TIM3_Init();
 8000dd8:	f001 fd2e 	bl	8002838 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000ddc:	f001 fd7a 	bl	80028d4 <MX_TIM4_Init>
  HAL_IWDG_Init(&hiwdg);
 8000de0:	484a      	ldr	r0, [pc, #296]	; (8000f0c <main+0x150>)
 8000de2:	f004 f9e2 	bl	80051aa <HAL_IWDG_Init>
  SSD1306_Init();
 8000de6:	f005 fa75 	bl	80062d4 <SSD1306_Init>
  Configs_init();
 8000dea:	f001 fc1f 	bl	800262c <Configs_init>
  SSD1306_GotoXY(7, 5);
  SSD1306_Puts("Loading", &Font_16x26, 1);
#endif
#ifdef ONE_SENSOR
  //Temporal asignation
  Sensor = _BH1750;
 8000dee:	4b48      	ldr	r3, [pc, #288]	; (8000f10 <main+0x154>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	701a      	strb	r2, [r3, #0]
  //Temporal asignation
#endif

  ISR = None;
 8000df4:	4b47      	ldr	r3, [pc, #284]	; (8000f14 <main+0x158>)
 8000df6:	2202      	movs	r2, #2
 8000df8:	701a      	strb	r2, [r3, #0]
  //Version declaration
  SSD1306_GotoXY(7, 20);
 8000dfa:	2114      	movs	r1, #20
 8000dfc:	2007      	movs	r0, #7
 8000dfe:	f005 fbd1 	bl	80065a4 <SSD1306_GotoXY>
  SSD1306_Puts("Firmware Version", &Font_7x10, 1);
 8000e02:	2201      	movs	r2, #1
 8000e04:	4944      	ldr	r1, [pc, #272]	; (8000f18 <main+0x15c>)
 8000e06:	4845      	ldr	r0, [pc, #276]	; (8000f1c <main+0x160>)
 8000e08:	f005 fc62 	bl	80066d0 <SSD1306_Puts>
  SSD1306_GotoXY(3, 37);
 8000e0c:	2125      	movs	r1, #37	; 0x25
 8000e0e:	2003      	movs	r0, #3
 8000e10:	f005 fbc8 	bl	80065a4 <SSD1306_GotoXY>
  SSD1306_Puts(VERSION, &Font_11x18, 1);
 8000e14:	2201      	movs	r2, #1
 8000e16:	4942      	ldr	r1, [pc, #264]	; (8000f20 <main+0x164>)
 8000e18:	4842      	ldr	r0, [pc, #264]	; (8000f24 <main+0x168>)
 8000e1a:	f005 fc59 	bl	80066d0 <SSD1306_Puts>
  SSD1306_UpdateScreen();
 8000e1e:	f005 fb1d 	bl	800645c <SSD1306_UpdateScreen>
  HAL_IWDG_Refresh(&hiwdg);
 8000e22:	483a      	ldr	r0, [pc, #232]	; (8000f0c <main+0x150>)
 8000e24:	f004 fa03 	bl	800522e <HAL_IWDG_Refresh>
  switch(Sensor)
 8000e28:	4b39      	ldr	r3, [pc, #228]	; (8000f10 <main+0x154>)
 8000e2a:	781b      	ldrb	r3, [r3, #0]
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d001      	beq.n	8000e34 <main+0x78>
 8000e30:	2b01      	cmp	r3, #1
  	  case _BH1750:
  		  if(BH1750_Init(&BH1750, &hi2c2, Address_Low) != Rojo_OK)
  			  NoConnected_BH1750();
	  break;
	  case _TSL2561:
	  break;
 8000e32:	e00a      	b.n	8000e4a <main+0x8e>
  		  if(BH1750_Init(&BH1750, &hi2c2, Address_Low) != Rojo_OK)
 8000e34:	2246      	movs	r2, #70	; 0x46
 8000e36:	493c      	ldr	r1, [pc, #240]	; (8000f28 <main+0x16c>)
 8000e38:	483c      	ldr	r0, [pc, #240]	; (8000f2c <main+0x170>)
 8000e3a:	f005 ffe7 	bl	8006e0c <BH1750_Init>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d001      	beq.n	8000e48 <main+0x8c>
  			  NoConnected_BH1750();
 8000e44:	f001 f9d6 	bl	80021f4 <NoConnected_BH1750>
	  break;
 8000e48:	bf00      	nop
	  Config_buffer[0] = Configs.Mode;
	  Config_buffer[1] = Configs.Resolution;
  }
#endif
  //Final
  HAL_IWDG_Refresh(&hiwdg);
 8000e4a:	4830      	ldr	r0, [pc, #192]	; (8000f0c <main+0x150>)
 8000e4c:	f004 f9ef 	bl	800522e <HAL_IWDG_Refresh>
  HAL_TIM_Base_Start(&htim4);
 8000e50:	4837      	ldr	r0, [pc, #220]	; (8000f30 <main+0x174>)
 8000e52:	f004 fe47 	bl	8005ae4 <HAL_TIM_Base_Start>
  Timer_Delay_250ms(Seconds(0.5f));
 8000e56:	2002      	movs	r0, #2
 8000e58:	f001 faa8 	bl	80023ac <Timer_Delay_250ms>
#ifndef SHOW_LOADING
  Timer_Delay_250ms(Seconds(1.5f));
 8000e5c:	2006      	movs	r0, #6
 8000e5e:	f001 faa5 	bl	80023ac <Timer_Delay_250ms>
#endif
  //Final Clear
  SSD1306_Clear();
 8000e62:	f005 fe81 	bl	8006b68 <SSD1306_Clear>
  SSD1306_UpdateScreen();
 8000e66:	f005 faf9 	bl	800645c <SSD1306_UpdateScreen>
  //Starting the paused cycle handler
  HAL_TIM_Base_Start_IT(&htim3);
 8000e6a:	4832      	ldr	r0, [pc, #200]	; (8000f34 <main+0x178>)
 8000e6c:	f004 fe84 	bl	8005b78 <HAL_TIM_Base_Start_IT>
  while (1)
  {
	  //Check ISR's
	  switch(ISR)
 8000e70:	4b28      	ldr	r3, [pc, #160]	; (8000f14 <main+0x158>)
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	b2db      	uxtb	r3, r3
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d00a      	beq.n	8000e90 <main+0xd4>
 8000e7a:	2b01      	cmp	r3, #1
 8000e7c:	d10e      	bne.n	8000e9c <main+0xe0>
	  {
	  	  case Menu:
	  		  ISR = None;
 8000e7e:	4b25      	ldr	r3, [pc, #148]	; (8000f14 <main+0x158>)
 8000e80:	2202      	movs	r2, #2
 8000e82:	701a      	strb	r2, [r3, #0]
	  		  comeFromMenu = true;
 8000e84:	4b2c      	ldr	r3, [pc, #176]	; (8000f38 <main+0x17c>)
 8000e86:	2201      	movs	r2, #1
 8000e88:	701a      	strb	r2, [r3, #0]
	  		  MenuGUI();
 8000e8a:	f001 f80b 	bl	8001ea4 <MenuGUI>
	  	  break;
 8000e8e:	e006      	b.n	8000e9e <main+0xe2>
	  	  case MCU_Reset:
	  		  ISR = None;
 8000e90:	4b20      	ldr	r3, [pc, #128]	; (8000f14 <main+0x158>)
 8000e92:	2202      	movs	r2, #2
 8000e94:	701a      	strb	r2, [r3, #0]
	  		  MCU_Reset_Subrutine();
 8000e96:	f001 fadf 	bl	8002458 <MCU_Reset_Subrutine>
	  	  break;
 8000e9a:	e000      	b.n	8000e9e <main+0xe2>
	  	  default:
	  	  break;
 8000e9c:	bf00      	nop
#ifdef USER_PLOT_DEBUG
	  Configs.Mode = Plot;
#elif defined(USER_CONF_P_DEBUG)
	  Configs.Mode = Config_Plot;
#endif
	  switch(Configs.Mode)
 8000e9e:	4b27      	ldr	r3, [pc, #156]	; (8000f3c <main+0x180>)
 8000ea0:	785b      	ldrb	r3, [r3, #1]
 8000ea2:	2b07      	cmp	r3, #7
 8000ea4:	d821      	bhi.n	8000eea <main+0x12e>
 8000ea6:	a201      	add	r2, pc, #4	; (adr r2, 8000eac <main+0xf0>)
 8000ea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000eac:	08000ecd 	.word	0x08000ecd
 8000eb0:	08000ed3 	.word	0x08000ed3
 8000eb4:	08000edf 	.word	0x08000edf
 8000eb8:	08000ee5 	.word	0x08000ee5
 8000ebc:	08000eeb 	.word	0x08000eeb
 8000ec0:	08000ed9 	.word	0x08000ed9
 8000ec4:	08000eeb 	.word	0x08000eeb
 8000ec8:	08000eeb 	.word	0x08000eeb
	  {
	  	  case Continuous: //Basic Software mode
	  		  Continous_mode();
 8000ecc:	f000 f83a 	bl	8000f44 <Continous_mode>
	  	  break;
 8000ed0:	e00b      	b.n	8000eea <main+0x12e>
	  	  case Hold: //Basic Software mode
	  		  Hold_mode();
 8000ed2:	f000 f87f 	bl	8000fd4 <Hold_mode>
	  	  break;
 8000ed6:	e008      	b.n	8000eea <main+0x12e>
	  	  case Reset_Sensor: //Basic Software mode
	  		  Reset_sensor_mode();
 8000ed8:	f000 ff82 	bl	8001de0 <Reset_sensor_mode>
		  break;
 8000edc:	e005      	b.n	8000eea <main+0x12e>
	  	  case Plot: //Basic Software mode
	  		  Plot_mode();
 8000ede:	f000 f8bb 	bl	8001058 <Plot_mode>
	  	  break;
 8000ee2:	e002      	b.n	8000eea <main+0x12e>
	  	  case Config_Plot: //Basic Software mode
	  		  Config_plot_mode();
 8000ee4:	f000 fc30 	bl	8001748 <Config_plot_mode>
	  	  break;
 8000ee8:	bf00      	nop
	  	  case Select_Diode: //IR Software mode
	  	  break;
	  	  case Idle:
	  	  break;
	  }
	  HAL_IWDG_Refresh(&hiwdg);
 8000eea:	4808      	ldr	r0, [pc, #32]	; (8000f0c <main+0x150>)
 8000eec:	f004 f99f 	bl	800522e <HAL_IWDG_Refresh>
	  //Parsed Loop
#ifdef USER_DEBUG
	  while(PauseFlag)
 8000ef0:	e002      	b.n	8000ef8 <main+0x13c>
		  HAL_IWDG_Refresh(&hiwdg);
 8000ef2:	4806      	ldr	r0, [pc, #24]	; (8000f0c <main+0x150>)
 8000ef4:	f004 f99b 	bl	800522e <HAL_IWDG_Refresh>
	  while(PauseFlag)
 8000ef8:	4b11      	ldr	r3, [pc, #68]	; (8000f40 <main+0x184>)
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	b2db      	uxtb	r3, r3
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d1f7      	bne.n	8000ef2 <main+0x136>
	  PauseFlag = true;
 8000f02:	4b0f      	ldr	r3, [pc, #60]	; (8000f40 <main+0x184>)
 8000f04:	2201      	movs	r2, #1
 8000f06:	701a      	strb	r2, [r3, #0]
	  switch(ISR)
 8000f08:	e7b2      	b.n	8000e70 <main+0xb4>
 8000f0a:	bf00      	nop
 8000f0c:	20000218 	.word	0x20000218
 8000f10:	20000224 	.word	0x20000224
 8000f14:	20000225 	.word	0x20000225
 8000f18:	20000048 	.word	0x20000048
 8000f1c:	0800790c 	.word	0x0800790c
 8000f20:	20000050 	.word	0x20000050
 8000f24:	08007920 	.word	0x08007920
 8000f28:	20000134 	.word	0x20000134
 8000f2c:	20000234 	.word	0x20000234
 8000f30:	200001d0 	.word	0x200001d0
 8000f34:	20000188 	.word	0x20000188
 8000f38:	20000242 	.word	0x20000242
 8000f3c:	2000022c 	.word	0x2000022c
 8000f40:	20000024 	.word	0x20000024

08000f44 <Continous_mode>:
  }
}

//Basic software modes
void Continous_mode(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
	HAL_IWDG_Refresh(&hiwdg);
 8000f48:	481a      	ldr	r0, [pc, #104]	; (8000fb4 <Continous_mode+0x70>)
 8000f4a:	f004 f970 	bl	800522e <HAL_IWDG_Refresh>
	if(Configs.Last_Mode != Continuous || comeFromMenu)
 8000f4e:	4b1a      	ldr	r3, [pc, #104]	; (8000fb8 <Continous_mode+0x74>)
 8000f50:	789b      	ldrb	r3, [r3, #2]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d103      	bne.n	8000f5e <Continous_mode+0x1a>
 8000f56:	4b19      	ldr	r3, [pc, #100]	; (8000fbc <Continous_mode+0x78>)
 8000f58:	781b      	ldrb	r3, [r3, #0]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d015      	beq.n	8000f8a <Continous_mode+0x46>
	{
		SSD1306_Clear();
 8000f5e:	f005 fe03 	bl	8006b68 <SSD1306_Clear>
		SSD1306_GotoXY(36, 8);
 8000f62:	2108      	movs	r1, #8
 8000f64:	2024      	movs	r0, #36	; 0x24
 8000f66:	f005 fb1d 	bl	80065a4 <SSD1306_GotoXY>
		SSD1306_Puts("Valor", &Font_11x18, 1);
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	4914      	ldr	r1, [pc, #80]	; (8000fc0 <Continous_mode+0x7c>)
 8000f6e:	4815      	ldr	r0, [pc, #84]	; (8000fc4 <Continous_mode+0x80>)
 8000f70:	f005 fbae 	bl	80066d0 <SSD1306_Puts>
		SSD1306_GotoXY(28, 53);
 8000f74:	2135      	movs	r1, #53	; 0x35
 8000f76:	201c      	movs	r0, #28
 8000f78:	f005 fb14 	bl	80065a4 <SSD1306_GotoXY>
		SSD1306_Puts("Continuous", &Font_7x10, 1);
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	4912      	ldr	r1, [pc, #72]	; (8000fc8 <Continous_mode+0x84>)
 8000f80:	4812      	ldr	r0, [pc, #72]	; (8000fcc <Continous_mode+0x88>)
 8000f82:	f005 fba5 	bl	80066d0 <SSD1306_Puts>
		SSD1306_UpdateScreen();
 8000f86:	f005 fa69 	bl	800645c <SSD1306_UpdateScreen>
	}
	SensorRead();
 8000f8a:	f001 fa7d 	bl	8002488 <SensorRead>
	HAL_IWDG_Refresh(&hiwdg);
 8000f8e:	4809      	ldr	r0, [pc, #36]	; (8000fb4 <Continous_mode+0x70>)
 8000f90:	f004 f94d 	bl	800522e <HAL_IWDG_Refresh>
	Print_Measure(Measure, 14, 30);
 8000f94:	4b0e      	ldr	r3, [pc, #56]	; (8000fd0 <Continous_mode+0x8c>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	221e      	movs	r2, #30
 8000f9a:	210e      	movs	r1, #14
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f001 f969 	bl	8002274 <Print_Measure>
	Configs.Last_Mode = Continuous;
 8000fa2:	4b05      	ldr	r3, [pc, #20]	; (8000fb8 <Continous_mode+0x74>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	709a      	strb	r2, [r3, #2]
	comeFromMenu = false;
 8000fa8:	4b04      	ldr	r3, [pc, #16]	; (8000fbc <Continous_mode+0x78>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	701a      	strb	r2, [r3, #0]
}
 8000fae:	bf00      	nop
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	20000218 	.word	0x20000218
 8000fb8:	2000022c 	.word	0x2000022c
 8000fbc:	20000242 	.word	0x20000242
 8000fc0:	20000050 	.word	0x20000050
 8000fc4:	0800792c 	.word	0x0800792c
 8000fc8:	20000048 	.word	0x20000048
 8000fcc:	08007934 	.word	0x08007934
 8000fd0:	20000230 	.word	0x20000230

08000fd4 <Hold_mode>:

void Hold_mode(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
	if(Configs.Last_Mode != Hold || comeFromMenu)
 8000fd8:	4b18      	ldr	r3, [pc, #96]	; (800103c <Hold_mode+0x68>)
 8000fda:	789b      	ldrb	r3, [r3, #2]
 8000fdc:	2b01      	cmp	r3, #1
 8000fde:	d103      	bne.n	8000fe8 <Hold_mode+0x14>
 8000fe0:	4b17      	ldr	r3, [pc, #92]	; (8001040 <Hold_mode+0x6c>)
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d015      	beq.n	8001014 <Hold_mode+0x40>
	{
		SSD1306_Clear();
 8000fe8:	f005 fdbe 	bl	8006b68 <SSD1306_Clear>
		SSD1306_GotoXY(36, 8);
 8000fec:	2108      	movs	r1, #8
 8000fee:	2024      	movs	r0, #36	; 0x24
 8000ff0:	f005 fad8 	bl	80065a4 <SSD1306_GotoXY>
		SSD1306_Puts("Valor", &Font_11x18, 1);
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	4913      	ldr	r1, [pc, #76]	; (8001044 <Hold_mode+0x70>)
 8000ff8:	4813      	ldr	r0, [pc, #76]	; (8001048 <Hold_mode+0x74>)
 8000ffa:	f005 fb69 	bl	80066d0 <SSD1306_Puts>
		SSD1306_GotoXY(43, 53);
 8000ffe:	2135      	movs	r1, #53	; 0x35
 8001000:	202b      	movs	r0, #43	; 0x2b
 8001002:	f005 facf 	bl	80065a4 <SSD1306_GotoXY>
		SSD1306_Puts("Hold", &Font_7x10, 1);
 8001006:	2201      	movs	r2, #1
 8001008:	4910      	ldr	r1, [pc, #64]	; (800104c <Hold_mode+0x78>)
 800100a:	4811      	ldr	r0, [pc, #68]	; (8001050 <Hold_mode+0x7c>)
 800100c:	f005 fb60 	bl	80066d0 <SSD1306_Puts>
		SSD1306_UpdateScreen();
 8001010:	f005 fa24 	bl	800645c <SSD1306_UpdateScreen>
	}
	SensorRead();
 8001014:	f001 fa38 	bl	8002488 <SensorRead>
	Print_Measure(Measure, 14, 30);
 8001018:	4b0e      	ldr	r3, [pc, #56]	; (8001054 <Hold_mode+0x80>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	221e      	movs	r2, #30
 800101e:	210e      	movs	r1, #14
 8001020:	4618      	mov	r0, r3
 8001022:	f001 f927 	bl	8002274 <Print_Measure>
	wait_until_press(Ok);
 8001026:	200f      	movs	r0, #15
 8001028:	f001 f998 	bl	800235c <wait_until_press>
	Configs.Last_Mode = Hold;
 800102c:	4b03      	ldr	r3, [pc, #12]	; (800103c <Hold_mode+0x68>)
 800102e:	2201      	movs	r2, #1
 8001030:	709a      	strb	r2, [r3, #2]
	comeFromMenu = false;
 8001032:	4b03      	ldr	r3, [pc, #12]	; (8001040 <Hold_mode+0x6c>)
 8001034:	2200      	movs	r2, #0
 8001036:	701a      	strb	r2, [r3, #0]
}
 8001038:	bf00      	nop
 800103a:	bd80      	pop	{r7, pc}
 800103c:	2000022c 	.word	0x2000022c
 8001040:	20000242 	.word	0x20000242
 8001044:	20000050 	.word	0x20000050
 8001048:	0800792c 	.word	0x0800792c
 800104c:	20000048 	.word	0x20000048
 8001050:	08007940 	.word	0x08007940
 8001054:	20000230 	.word	0x20000230

08001058 <Plot_mode>:


//@TODO Initial configurations done, print in sequence time, do first the config menu
void Plot_mode(void)
{
 8001058:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800105c:	b088      	sub	sp, #32
 800105e:	af04      	add	r7, sp, #16
	static bool ChangedConfigs = false; //Checks if the user has pressed a button
	const uint16_t XAxis_High = 57; //Defines the high of the axis
 8001060:	2339      	movs	r3, #57	; 0x39
 8001062:	813b      	strh	r3, [r7, #8]
	const uint16_t YScreenRes = 63; //Total screen pixel in y axis
 8001064:	233f      	movs	r3, #63	; 0x3f
 8001066:	80fb      	strh	r3, [r7, #6]
	uint16_t YAxis_LimitUP;     //Defines the upper limit
	uint16_t HigherYcoordenate; //The higher coordinate that can be plotted
	uint16_t NumberOfChars;
	uint16_t YLimit;

	HAL_IWDG_Refresh(&hiwdg);
 8001068:	48c2      	ldr	r0, [pc, #776]	; (8001374 <Plot_mode+0x31c>)
 800106a:	f004 f8e0 	bl	800522e <HAL_IWDG_Refresh>
	if(Configs.Last_Mode != Plot || comeFromMenu || ChangedConfigs)
 800106e:	4bc2      	ldr	r3, [pc, #776]	; (8001378 <Plot_mode+0x320>)
 8001070:	789b      	ldrb	r3, [r3, #2]
 8001072:	2b02      	cmp	r3, #2
 8001074:	d108      	bne.n	8001088 <Plot_mode+0x30>
 8001076:	4bc1      	ldr	r3, [pc, #772]	; (800137c <Plot_mode+0x324>)
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d104      	bne.n	8001088 <Plot_mode+0x30>
 800107e:	4bc0      	ldr	r3, [pc, #768]	; (8001380 <Plot_mode+0x328>)
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	2b00      	cmp	r3, #0
 8001084:	f000 82ab 	beq.w	80015de <Plot_mode+0x586>
	{
		//Calculate the Y Axis offset
		NumberOfChars = CharsNumberFromInt(YAxisPosition.HigherRes, false);
 8001088:	4bbe      	ldr	r3, [pc, #760]	; (8001384 <Plot_mode+0x32c>)
 800108a:	881b      	ldrh	r3, [r3, #0]
 800108c:	2100      	movs	r1, #0
 800108e:	4618      	mov	r0, r3
 8001090:	f001 fa88 	bl	80025a4 <CharsNumberFromInt>
 8001094:	4603      	mov	r3, r0
 8001096:	80bb      	strh	r3, [r7, #4]
		YAxis_Offset = (NumberOfChars * 7) + 5;
 8001098:	88bb      	ldrh	r3, [r7, #4]
 800109a:	461a      	mov	r2, r3
 800109c:	00d2      	lsls	r2, r2, #3
 800109e:	1ad3      	subs	r3, r2, r3
 80010a0:	b29b      	uxth	r3, r3
 80010a2:	3305      	adds	r3, #5
 80010a4:	807b      	strh	r3, [r7, #2]
		YAxis_LimitUP = 0;
 80010a6:	2300      	movs	r3, #0
 80010a8:	81bb      	strh	r3, [r7, #12]
		XAxis_Limit = 128;
 80010aa:	2380      	movs	r3, #128	; 0x80
 80010ac:	81fb      	strh	r3, [r7, #14]
		SSD1306_Clear();
 80010ae:	f005 fd5b 	bl	8006b68 <SSD1306_Clear>
		//X Axis
		if(GlobalConfigs.PlotType == BothAxis)
 80010b2:	4bb5      	ldr	r3, [pc, #724]	; (8001388 <Plot_mode+0x330>)
 80010b4:	781b      	ldrb	r3, [r3, #0]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d12b      	bne.n	8001112 <Plot_mode+0xba>
		{
			if(GlobalConfigs.PrintLegends)
 80010ba:	4bb3      	ldr	r3, [pc, #716]	; (8001388 <Plot_mode+0x330>)
 80010bc:	799b      	ldrb	r3, [r3, #6]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d00a      	beq.n	80010d8 <Plot_mode+0x80>
			{
				XAxis_Limit = 119;
 80010c2:	2377      	movs	r3, #119	; 0x77
 80010c4:	81fb      	strh	r3, [r7, #14]
				SSD1306_GotoXY(120, 53);
 80010c6:	2135      	movs	r1, #53	; 0x35
 80010c8:	2078      	movs	r0, #120	; 0x78
 80010ca:	f005 fa6b 	bl	80065a4 <SSD1306_GotoXY>
				SSD1306_Puts("t", &Font_7x10, 1);
 80010ce:	2201      	movs	r2, #1
 80010d0:	49ae      	ldr	r1, [pc, #696]	; (800138c <Plot_mode+0x334>)
 80010d2:	48af      	ldr	r0, [pc, #700]	; (8001390 <Plot_mode+0x338>)
 80010d4:	f005 fafc 	bl	80066d0 <SSD1306_Puts>
			}
			SSD1306_DrawLine(0, XAxis_High, XAxis_Limit, XAxis_High, 1);
 80010d8:	893b      	ldrh	r3, [r7, #8]
 80010da:	89fa      	ldrh	r2, [r7, #14]
 80010dc:	8939      	ldrh	r1, [r7, #8]
 80010de:	2001      	movs	r0, #1
 80010e0:	9000      	str	r0, [sp, #0]
 80010e2:	2000      	movs	r0, #0
 80010e4:	f005 fb19 	bl	800671a <SSD1306_DrawLine>
			//X Arrow
			SSD1306_DrawFilledTriangle(XAxis_Limit-5, XAxis_High-3, XAxis_Limit-5, XAxis_High+3, XAxis_Limit, XAxis_High, 1);
 80010e8:	89fb      	ldrh	r3, [r7, #14]
 80010ea:	3b05      	subs	r3, #5
 80010ec:	b298      	uxth	r0, r3
 80010ee:	893b      	ldrh	r3, [r7, #8]
 80010f0:	3b03      	subs	r3, #3
 80010f2:	b299      	uxth	r1, r3
 80010f4:	89fb      	ldrh	r3, [r7, #14]
 80010f6:	3b05      	subs	r3, #5
 80010f8:	b29a      	uxth	r2, r3
 80010fa:	893b      	ldrh	r3, [r7, #8]
 80010fc:	3303      	adds	r3, #3
 80010fe:	b29c      	uxth	r4, r3
 8001100:	2301      	movs	r3, #1
 8001102:	9302      	str	r3, [sp, #8]
 8001104:	893b      	ldrh	r3, [r7, #8]
 8001106:	9301      	str	r3, [sp, #4]
 8001108:	89fb      	ldrh	r3, [r7, #14]
 800110a:	9300      	str	r3, [sp, #0]
 800110c:	4623      	mov	r3, r4
 800110e:	f005 fc69 	bl	80069e4 <SSD1306_DrawFilledTriangle>
		}
		//Y Axis
		if(GlobalConfigs.PrintLegends)
 8001112:	4b9d      	ldr	r3, [pc, #628]	; (8001388 <Plot_mode+0x330>)
 8001114:	799b      	ldrb	r3, [r3, #6]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d00d      	beq.n	8001136 <Plot_mode+0xde>
		{
			YAxis_LimitUP = 11;
 800111a:	230b      	movs	r3, #11
 800111c:	81bb      	strh	r3, [r7, #12]
			SSD1306_GotoXY(YAxis_Offset - 7, 0);
 800111e:	887b      	ldrh	r3, [r7, #2]
 8001120:	3b07      	subs	r3, #7
 8001122:	b29b      	uxth	r3, r3
 8001124:	2100      	movs	r1, #0
 8001126:	4618      	mov	r0, r3
 8001128:	f005 fa3c 	bl	80065a4 <SSD1306_GotoXY>
			SSD1306_Puts("lx", &Font_7x10, 1);
 800112c:	2201      	movs	r2, #1
 800112e:	4997      	ldr	r1, [pc, #604]	; (800138c <Plot_mode+0x334>)
 8001130:	4898      	ldr	r0, [pc, #608]	; (8001394 <Plot_mode+0x33c>)
 8001132:	f005 facd 	bl	80066d0 <SSD1306_Puts>
		}
		SSD1306_DrawLine(YAxis_Offset, XAxis_High, YAxis_Offset, YAxis_LimitUP, 1);
 8001136:	89bb      	ldrh	r3, [r7, #12]
 8001138:	887a      	ldrh	r2, [r7, #2]
 800113a:	8939      	ldrh	r1, [r7, #8]
 800113c:	8878      	ldrh	r0, [r7, #2]
 800113e:	2401      	movs	r4, #1
 8001140:	9400      	str	r4, [sp, #0]
 8001142:	f005 faea 	bl	800671a <SSD1306_DrawLine>
		HigherYcoordenate = YAxis_LimitUP + 10;
 8001146:	89bb      	ldrh	r3, [r7, #12]
 8001148:	330a      	adds	r3, #10
 800114a:	803b      	strh	r3, [r7, #0]
		//Y Axis numeric legends -- Forced, not touched by the user
		if(!GlobalConfigs.PrintLegends) // Print all values
 800114c:	4b8e      	ldr	r3, [pc, #568]	; (8001388 <Plot_mode+0x330>)
 800114e:	799b      	ldrb	r3, [r3, #6]
 8001150:	2b00      	cmp	r3, #0
 8001152:	f040 81ac 	bne.w	80014ae <Plot_mode+0x456>
		{
			//Text prints
			sprintf(YAxisPosition.ThreeQuarterBuffer, "%d", (int) YAxisPosition.ThreeQuartersRes);
 8001156:	4b8b      	ldr	r3, [pc, #556]	; (8001384 <Plot_mode+0x32c>)
 8001158:	885b      	ldrh	r3, [r3, #2]
 800115a:	461a      	mov	r2, r3
 800115c:	498e      	ldr	r1, [pc, #568]	; (8001398 <Plot_mode+0x340>)
 800115e:	488f      	ldr	r0, [pc, #572]	; (800139c <Plot_mode+0x344>)
 8001160:	f006 f83a 	bl	80071d8 <siprintf>
			sprintf(YAxisPosition.QuarterBuffer, "%d", (int) YAxisPosition.QuarterRes);
 8001164:	4b87      	ldr	r3, [pc, #540]	; (8001384 <Plot_mode+0x32c>)
 8001166:	88db      	ldrh	r3, [r3, #6]
 8001168:	461a      	mov	r2, r3
 800116a:	498b      	ldr	r1, [pc, #556]	; (8001398 <Plot_mode+0x340>)
 800116c:	488c      	ldr	r0, [pc, #560]	; (80013a0 <Plot_mode+0x348>)
 800116e:	f006 f833 	bl	80071d8 <siprintf>
			SSD1306_GotoXY(0, (((YScreenRes - HigherYcoordenate) * 0.25) + HigherYcoordenate) - 5);
 8001172:	88fa      	ldrh	r2, [r7, #6]
 8001174:	883b      	ldrh	r3, [r7, #0]
 8001176:	1ad3      	subs	r3, r2, r3
 8001178:	4618      	mov	r0, r3
 800117a:	f7ff f9ef 	bl	800055c <__aeabi_i2d>
 800117e:	f04f 0200 	mov.w	r2, #0
 8001182:	4b88      	ldr	r3, [pc, #544]	; (80013a4 <Plot_mode+0x34c>)
 8001184:	f7ff fa54 	bl	8000630 <__aeabi_dmul>
 8001188:	4602      	mov	r2, r0
 800118a:	460b      	mov	r3, r1
 800118c:	4614      	mov	r4, r2
 800118e:	461d      	mov	r5, r3
 8001190:	883b      	ldrh	r3, [r7, #0]
 8001192:	4618      	mov	r0, r3
 8001194:	f7ff f9e2 	bl	800055c <__aeabi_i2d>
 8001198:	4602      	mov	r2, r0
 800119a:	460b      	mov	r3, r1
 800119c:	4620      	mov	r0, r4
 800119e:	4629      	mov	r1, r5
 80011a0:	f7ff f890 	bl	80002c4 <__adddf3>
 80011a4:	4602      	mov	r2, r0
 80011a6:	460b      	mov	r3, r1
 80011a8:	4610      	mov	r0, r2
 80011aa:	4619      	mov	r1, r3
 80011ac:	f04f 0200 	mov.w	r2, #0
 80011b0:	4b7d      	ldr	r3, [pc, #500]	; (80013a8 <Plot_mode+0x350>)
 80011b2:	f7ff f885 	bl	80002c0 <__aeabi_dsub>
 80011b6:	4602      	mov	r2, r0
 80011b8:	460b      	mov	r3, r1
 80011ba:	4610      	mov	r0, r2
 80011bc:	4619      	mov	r1, r3
 80011be:	f7ff fc49 	bl	8000a54 <__aeabi_d2uiz>
 80011c2:	4603      	mov	r3, r0
 80011c4:	b29b      	uxth	r3, r3
 80011c6:	4619      	mov	r1, r3
 80011c8:	2000      	movs	r0, #0
 80011ca:	f005 f9eb 	bl	80065a4 <SSD1306_GotoXY>
			SSD1306_Puts(YAxisPosition.ThreeQuarterBuffer, &Font_7x10, 1);
 80011ce:	2201      	movs	r2, #1
 80011d0:	496e      	ldr	r1, [pc, #440]	; (800138c <Plot_mode+0x334>)
 80011d2:	4872      	ldr	r0, [pc, #456]	; (800139c <Plot_mode+0x344>)
 80011d4:	f005 fa7c 	bl	80066d0 <SSD1306_Puts>
			SSD1306_GotoXY(0, (((YScreenRes - HigherYcoordenate) * 0.75) + HigherYcoordenate) - 5);
 80011d8:	88fa      	ldrh	r2, [r7, #6]
 80011da:	883b      	ldrh	r3, [r7, #0]
 80011dc:	1ad3      	subs	r3, r2, r3
 80011de:	4618      	mov	r0, r3
 80011e0:	f7ff f9bc 	bl	800055c <__aeabi_i2d>
 80011e4:	f04f 0200 	mov.w	r2, #0
 80011e8:	4b70      	ldr	r3, [pc, #448]	; (80013ac <Plot_mode+0x354>)
 80011ea:	f7ff fa21 	bl	8000630 <__aeabi_dmul>
 80011ee:	4602      	mov	r2, r0
 80011f0:	460b      	mov	r3, r1
 80011f2:	4614      	mov	r4, r2
 80011f4:	461d      	mov	r5, r3
 80011f6:	883b      	ldrh	r3, [r7, #0]
 80011f8:	4618      	mov	r0, r3
 80011fa:	f7ff f9af 	bl	800055c <__aeabi_i2d>
 80011fe:	4602      	mov	r2, r0
 8001200:	460b      	mov	r3, r1
 8001202:	4620      	mov	r0, r4
 8001204:	4629      	mov	r1, r5
 8001206:	f7ff f85d 	bl	80002c4 <__adddf3>
 800120a:	4602      	mov	r2, r0
 800120c:	460b      	mov	r3, r1
 800120e:	4610      	mov	r0, r2
 8001210:	4619      	mov	r1, r3
 8001212:	f04f 0200 	mov.w	r2, #0
 8001216:	4b64      	ldr	r3, [pc, #400]	; (80013a8 <Plot_mode+0x350>)
 8001218:	f7ff f852 	bl	80002c0 <__aeabi_dsub>
 800121c:	4602      	mov	r2, r0
 800121e:	460b      	mov	r3, r1
 8001220:	4610      	mov	r0, r2
 8001222:	4619      	mov	r1, r3
 8001224:	f7ff fc16 	bl	8000a54 <__aeabi_d2uiz>
 8001228:	4603      	mov	r3, r0
 800122a:	b29b      	uxth	r3, r3
 800122c:	4619      	mov	r1, r3
 800122e:	2000      	movs	r0, #0
 8001230:	f005 f9b8 	bl	80065a4 <SSD1306_GotoXY>
			SSD1306_Puts(YAxisPosition.QuarterBuffer, &Font_7x10, 1);
 8001234:	2201      	movs	r2, #1
 8001236:	4955      	ldr	r1, [pc, #340]	; (800138c <Plot_mode+0x334>)
 8001238:	4859      	ldr	r0, [pc, #356]	; (80013a0 <Plot_mode+0x348>)
 800123a:	f005 fa49 	bl	80066d0 <SSD1306_Puts>
			//Line prints
			SSD1306_DrawLine(YAxis_Offset, (((YScreenRes - HigherYcoordenate) * 0.25) + HigherYcoordenate), (CharsNumberFromInt(YAxisPosition.ThreeQuartersRes, false) * 7) + 1, (((YScreenRes - HigherYcoordenate) * 0.25) + HigherYcoordenate), 1); //ThreeQuarter Line
 800123e:	88fa      	ldrh	r2, [r7, #6]
 8001240:	883b      	ldrh	r3, [r7, #0]
 8001242:	1ad3      	subs	r3, r2, r3
 8001244:	4618      	mov	r0, r3
 8001246:	f7ff f989 	bl	800055c <__aeabi_i2d>
 800124a:	f04f 0200 	mov.w	r2, #0
 800124e:	4b55      	ldr	r3, [pc, #340]	; (80013a4 <Plot_mode+0x34c>)
 8001250:	f7ff f9ee 	bl	8000630 <__aeabi_dmul>
 8001254:	4602      	mov	r2, r0
 8001256:	460b      	mov	r3, r1
 8001258:	4614      	mov	r4, r2
 800125a:	461d      	mov	r5, r3
 800125c:	883b      	ldrh	r3, [r7, #0]
 800125e:	4618      	mov	r0, r3
 8001260:	f7ff f97c 	bl	800055c <__aeabi_i2d>
 8001264:	4602      	mov	r2, r0
 8001266:	460b      	mov	r3, r1
 8001268:	4620      	mov	r0, r4
 800126a:	4629      	mov	r1, r5
 800126c:	f7ff f82a 	bl	80002c4 <__adddf3>
 8001270:	4602      	mov	r2, r0
 8001272:	460b      	mov	r3, r1
 8001274:	4610      	mov	r0, r2
 8001276:	4619      	mov	r1, r3
 8001278:	f7ff fbec 	bl	8000a54 <__aeabi_d2uiz>
 800127c:	4603      	mov	r3, r0
 800127e:	b29c      	uxth	r4, r3
 8001280:	4b40      	ldr	r3, [pc, #256]	; (8001384 <Plot_mode+0x32c>)
 8001282:	885b      	ldrh	r3, [r3, #2]
 8001284:	2100      	movs	r1, #0
 8001286:	4618      	mov	r0, r3
 8001288:	f001 f98c 	bl	80025a4 <CharsNumberFromInt>
 800128c:	4603      	mov	r3, r0
 800128e:	461a      	mov	r2, r3
 8001290:	00d2      	lsls	r2, r2, #3
 8001292:	1ad3      	subs	r3, r2, r3
 8001294:	b29b      	uxth	r3, r3
 8001296:	3301      	adds	r3, #1
 8001298:	b29d      	uxth	r5, r3
 800129a:	88fa      	ldrh	r2, [r7, #6]
 800129c:	883b      	ldrh	r3, [r7, #0]
 800129e:	1ad3      	subs	r3, r2, r3
 80012a0:	4618      	mov	r0, r3
 80012a2:	f7ff f95b 	bl	800055c <__aeabi_i2d>
 80012a6:	f04f 0200 	mov.w	r2, #0
 80012aa:	4b3e      	ldr	r3, [pc, #248]	; (80013a4 <Plot_mode+0x34c>)
 80012ac:	f7ff f9c0 	bl	8000630 <__aeabi_dmul>
 80012b0:	4602      	mov	r2, r0
 80012b2:	460b      	mov	r3, r1
 80012b4:	4690      	mov	r8, r2
 80012b6:	4699      	mov	r9, r3
 80012b8:	883b      	ldrh	r3, [r7, #0]
 80012ba:	4618      	mov	r0, r3
 80012bc:	f7ff f94e 	bl	800055c <__aeabi_i2d>
 80012c0:	4602      	mov	r2, r0
 80012c2:	460b      	mov	r3, r1
 80012c4:	4640      	mov	r0, r8
 80012c6:	4649      	mov	r1, r9
 80012c8:	f7fe fffc 	bl	80002c4 <__adddf3>
 80012cc:	4602      	mov	r2, r0
 80012ce:	460b      	mov	r3, r1
 80012d0:	4610      	mov	r0, r2
 80012d2:	4619      	mov	r1, r3
 80012d4:	f7ff fbbe 	bl	8000a54 <__aeabi_d2uiz>
 80012d8:	4603      	mov	r3, r0
 80012da:	b29b      	uxth	r3, r3
 80012dc:	8878      	ldrh	r0, [r7, #2]
 80012de:	2201      	movs	r2, #1
 80012e0:	9200      	str	r2, [sp, #0]
 80012e2:	462a      	mov	r2, r5
 80012e4:	4621      	mov	r1, r4
 80012e6:	f005 fa18 	bl	800671a <SSD1306_DrawLine>
			SSD1306_DrawLine(YAxis_Offset, (((YScreenRes - HigherYcoordenate) * 0.75) + HigherYcoordenate), (CharsNumberFromInt(YAxisPosition.QuarterRes, false) * 7) + 1, (((YScreenRes - HigherYcoordenate) * 0.75) + HigherYcoordenate), 1); //Quarter Line
 80012ea:	88fa      	ldrh	r2, [r7, #6]
 80012ec:	883b      	ldrh	r3, [r7, #0]
 80012ee:	1ad3      	subs	r3, r2, r3
 80012f0:	4618      	mov	r0, r3
 80012f2:	f7ff f933 	bl	800055c <__aeabi_i2d>
 80012f6:	f04f 0200 	mov.w	r2, #0
 80012fa:	4b2c      	ldr	r3, [pc, #176]	; (80013ac <Plot_mode+0x354>)
 80012fc:	f7ff f998 	bl	8000630 <__aeabi_dmul>
 8001300:	4602      	mov	r2, r0
 8001302:	460b      	mov	r3, r1
 8001304:	4614      	mov	r4, r2
 8001306:	461d      	mov	r5, r3
 8001308:	883b      	ldrh	r3, [r7, #0]
 800130a:	4618      	mov	r0, r3
 800130c:	f7ff f926 	bl	800055c <__aeabi_i2d>
 8001310:	4602      	mov	r2, r0
 8001312:	460b      	mov	r3, r1
 8001314:	4620      	mov	r0, r4
 8001316:	4629      	mov	r1, r5
 8001318:	f7fe ffd4 	bl	80002c4 <__adddf3>
 800131c:	4602      	mov	r2, r0
 800131e:	460b      	mov	r3, r1
 8001320:	4610      	mov	r0, r2
 8001322:	4619      	mov	r1, r3
 8001324:	f7ff fb96 	bl	8000a54 <__aeabi_d2uiz>
 8001328:	4603      	mov	r3, r0
 800132a:	b29c      	uxth	r4, r3
 800132c:	4b15      	ldr	r3, [pc, #84]	; (8001384 <Plot_mode+0x32c>)
 800132e:	88db      	ldrh	r3, [r3, #6]
 8001330:	2100      	movs	r1, #0
 8001332:	4618      	mov	r0, r3
 8001334:	f001 f936 	bl	80025a4 <CharsNumberFromInt>
 8001338:	4603      	mov	r3, r0
 800133a:	461a      	mov	r2, r3
 800133c:	00d2      	lsls	r2, r2, #3
 800133e:	1ad3      	subs	r3, r2, r3
 8001340:	b29b      	uxth	r3, r3
 8001342:	3301      	adds	r3, #1
 8001344:	b29d      	uxth	r5, r3
 8001346:	88fa      	ldrh	r2, [r7, #6]
 8001348:	883b      	ldrh	r3, [r7, #0]
 800134a:	1ad3      	subs	r3, r2, r3
 800134c:	4618      	mov	r0, r3
 800134e:	f7ff f905 	bl	800055c <__aeabi_i2d>
 8001352:	f04f 0200 	mov.w	r2, #0
 8001356:	4b15      	ldr	r3, [pc, #84]	; (80013ac <Plot_mode+0x354>)
 8001358:	f7ff f96a 	bl	8000630 <__aeabi_dmul>
 800135c:	4602      	mov	r2, r0
 800135e:	460b      	mov	r3, r1
 8001360:	4690      	mov	r8, r2
 8001362:	4699      	mov	r9, r3
 8001364:	883b      	ldrh	r3, [r7, #0]
 8001366:	4618      	mov	r0, r3
 8001368:	f7ff f8f8 	bl	800055c <__aeabi_i2d>
 800136c:	4602      	mov	r2, r0
 800136e:	460b      	mov	r3, r1
 8001370:	e01e      	b.n	80013b0 <Plot_mode+0x358>
 8001372:	bf00      	nop
 8001374:	20000218 	.word	0x20000218
 8001378:	2000022c 	.word	0x2000022c
 800137c:	20000242 	.word	0x20000242
 8001380:	20000243 	.word	0x20000243
 8001384:	20000000 	.word	0x20000000
 8001388:	20000028 	.word	0x20000028
 800138c:	20000048 	.word	0x20000048
 8001390:	08007948 	.word	0x08007948
 8001394:	0800794c 	.word	0x0800794c
 8001398:	08007950 	.word	0x08007950
 800139c:	2000000f 	.word	0x2000000f
 80013a0:	2000001d 	.word	0x2000001d
 80013a4:	3fd00000 	.word	0x3fd00000
 80013a8:	40140000 	.word	0x40140000
 80013ac:	3fe80000 	.word	0x3fe80000
 80013b0:	4640      	mov	r0, r8
 80013b2:	4649      	mov	r1, r9
 80013b4:	f7fe ff86 	bl	80002c4 <__adddf3>
 80013b8:	4602      	mov	r2, r0
 80013ba:	460b      	mov	r3, r1
 80013bc:	4610      	mov	r0, r2
 80013be:	4619      	mov	r1, r3
 80013c0:	f7ff fb48 	bl	8000a54 <__aeabi_d2uiz>
 80013c4:	4603      	mov	r3, r0
 80013c6:	b29b      	uxth	r3, r3
 80013c8:	8878      	ldrh	r0, [r7, #2]
 80013ca:	2201      	movs	r2, #1
 80013cc:	9200      	str	r2, [sp, #0]
 80013ce:	462a      	mov	r2, r5
 80013d0:	4621      	mov	r1, r4
 80013d2:	f005 f9a2 	bl	800671a <SSD1306_DrawLine>
			//Text prints
			sprintf(YAxisPosition.HigherBuffer, "%d", (int) YAxisPosition.HigherRes);
 80013d6:	4b89      	ldr	r3, [pc, #548]	; (80015fc <Plot_mode+0x5a4>)
 80013d8:	881b      	ldrh	r3, [r3, #0]
 80013da:	461a      	mov	r2, r3
 80013dc:	4988      	ldr	r1, [pc, #544]	; (8001600 <Plot_mode+0x5a8>)
 80013de:	4889      	ldr	r0, [pc, #548]	; (8001604 <Plot_mode+0x5ac>)
 80013e0:	f005 fefa 	bl	80071d8 <siprintf>
			sprintf(YAxisPosition.MiddleBuffer, "%d", (int) YAxisPosition.MiddleRes);
 80013e4:	4b85      	ldr	r3, [pc, #532]	; (80015fc <Plot_mode+0x5a4>)
 80013e6:	889b      	ldrh	r3, [r3, #4]
 80013e8:	461a      	mov	r2, r3
 80013ea:	4985      	ldr	r1, [pc, #532]	; (8001600 <Plot_mode+0x5a8>)
 80013ec:	4886      	ldr	r0, [pc, #536]	; (8001608 <Plot_mode+0x5b0>)
 80013ee:	f005 fef3 	bl	80071d8 <siprintf>
			SSD1306_GotoXY(0, HigherYcoordenate - 5);
 80013f2:	883b      	ldrh	r3, [r7, #0]
 80013f4:	3b05      	subs	r3, #5
 80013f6:	b29b      	uxth	r3, r3
 80013f8:	4619      	mov	r1, r3
 80013fa:	2000      	movs	r0, #0
 80013fc:	f005 f8d2 	bl	80065a4 <SSD1306_GotoXY>
			SSD1306_Puts(YAxisPosition.HigherBuffer, &Font_7x10, 1);
 8001400:	2201      	movs	r2, #1
 8001402:	4982      	ldr	r1, [pc, #520]	; (800160c <Plot_mode+0x5b4>)
 8001404:	487f      	ldr	r0, [pc, #508]	; (8001604 <Plot_mode+0x5ac>)
 8001406:	f005 f963 	bl	80066d0 <SSD1306_Puts>
			SSD1306_GotoXY(0, (((YScreenRes - HigherYcoordenate) / 2) + HigherYcoordenate) - 5);
 800140a:	88fa      	ldrh	r2, [r7, #6]
 800140c:	883b      	ldrh	r3, [r7, #0]
 800140e:	1ad3      	subs	r3, r2, r3
 8001410:	0fda      	lsrs	r2, r3, #31
 8001412:	4413      	add	r3, r2
 8001414:	105b      	asrs	r3, r3, #1
 8001416:	b29a      	uxth	r2, r3
 8001418:	883b      	ldrh	r3, [r7, #0]
 800141a:	4413      	add	r3, r2
 800141c:	b29b      	uxth	r3, r3
 800141e:	3b05      	subs	r3, #5
 8001420:	b29b      	uxth	r3, r3
 8001422:	4619      	mov	r1, r3
 8001424:	2000      	movs	r0, #0
 8001426:	f005 f8bd 	bl	80065a4 <SSD1306_GotoXY>
			SSD1306_Puts(YAxisPosition.MiddleBuffer, &Font_7x10, 1);
 800142a:	2201      	movs	r2, #1
 800142c:	4977      	ldr	r1, [pc, #476]	; (800160c <Plot_mode+0x5b4>)
 800142e:	4876      	ldr	r0, [pc, #472]	; (8001608 <Plot_mode+0x5b0>)
 8001430:	f005 f94e 	bl	80066d0 <SSD1306_Puts>
			///Line Prints
			SSD1306_DrawLine(YAxis_Offset, HigherYcoordenate, (CharsNumberFromInt(YAxisPosition.HigherRes, false) * 7) + 1, HigherYcoordenate, 1); //Higher Line
 8001434:	4b71      	ldr	r3, [pc, #452]	; (80015fc <Plot_mode+0x5a4>)
 8001436:	881b      	ldrh	r3, [r3, #0]
 8001438:	2100      	movs	r1, #0
 800143a:	4618      	mov	r0, r3
 800143c:	f001 f8b2 	bl	80025a4 <CharsNumberFromInt>
 8001440:	4603      	mov	r3, r0
 8001442:	461a      	mov	r2, r3
 8001444:	00d2      	lsls	r2, r2, #3
 8001446:	1ad3      	subs	r3, r2, r3
 8001448:	b29b      	uxth	r3, r3
 800144a:	3301      	adds	r3, #1
 800144c:	b29a      	uxth	r2, r3
 800144e:	883b      	ldrh	r3, [r7, #0]
 8001450:	8839      	ldrh	r1, [r7, #0]
 8001452:	8878      	ldrh	r0, [r7, #2]
 8001454:	2401      	movs	r4, #1
 8001456:	9400      	str	r4, [sp, #0]
 8001458:	f005 f95f 	bl	800671a <SSD1306_DrawLine>
			SSD1306_DrawLine(YAxis_Offset, (((YScreenRes - HigherYcoordenate) / 2) + HigherYcoordenate), (CharsNumberFromInt(YAxisPosition.MiddleRes, false) * 7) + 1, (((YScreenRes - HigherYcoordenate) / 2) + HigherYcoordenate), 1); //Middle Line
 800145c:	88fa      	ldrh	r2, [r7, #6]
 800145e:	883b      	ldrh	r3, [r7, #0]
 8001460:	1ad3      	subs	r3, r2, r3
 8001462:	0fda      	lsrs	r2, r3, #31
 8001464:	4413      	add	r3, r2
 8001466:	105b      	asrs	r3, r3, #1
 8001468:	b29a      	uxth	r2, r3
 800146a:	883b      	ldrh	r3, [r7, #0]
 800146c:	4413      	add	r3, r2
 800146e:	b29c      	uxth	r4, r3
 8001470:	4b62      	ldr	r3, [pc, #392]	; (80015fc <Plot_mode+0x5a4>)
 8001472:	889b      	ldrh	r3, [r3, #4]
 8001474:	2100      	movs	r1, #0
 8001476:	4618      	mov	r0, r3
 8001478:	f001 f894 	bl	80025a4 <CharsNumberFromInt>
 800147c:	4603      	mov	r3, r0
 800147e:	461a      	mov	r2, r3
 8001480:	00d2      	lsls	r2, r2, #3
 8001482:	1ad3      	subs	r3, r2, r3
 8001484:	b29b      	uxth	r3, r3
 8001486:	3301      	adds	r3, #1
 8001488:	b299      	uxth	r1, r3
 800148a:	88fa      	ldrh	r2, [r7, #6]
 800148c:	883b      	ldrh	r3, [r7, #0]
 800148e:	1ad3      	subs	r3, r2, r3
 8001490:	0fda      	lsrs	r2, r3, #31
 8001492:	4413      	add	r3, r2
 8001494:	105b      	asrs	r3, r3, #1
 8001496:	b29a      	uxth	r2, r3
 8001498:	883b      	ldrh	r3, [r7, #0]
 800149a:	4413      	add	r3, r2
 800149c:	b29b      	uxth	r3, r3
 800149e:	8878      	ldrh	r0, [r7, #2]
 80014a0:	2201      	movs	r2, #1
 80014a2:	9200      	str	r2, [sp, #0]
 80014a4:	460a      	mov	r2, r1
 80014a6:	4621      	mov	r1, r4
 80014a8:	f005 f937 	bl	800671a <SSD1306_DrawLine>
 80014ac:	e06a      	b.n	8001584 <Plot_mode+0x52c>
		}
		else
		{
			//Text prints
			sprintf(YAxisPosition.HigherBuffer, "%d", (int) YAxisPosition.HigherRes);
 80014ae:	4b53      	ldr	r3, [pc, #332]	; (80015fc <Plot_mode+0x5a4>)
 80014b0:	881b      	ldrh	r3, [r3, #0]
 80014b2:	461a      	mov	r2, r3
 80014b4:	4952      	ldr	r1, [pc, #328]	; (8001600 <Plot_mode+0x5a8>)
 80014b6:	4853      	ldr	r0, [pc, #332]	; (8001604 <Plot_mode+0x5ac>)
 80014b8:	f005 fe8e 	bl	80071d8 <siprintf>
			sprintf(YAxisPosition.MiddleBuffer, "%d", (int) YAxisPosition.MiddleRes);
 80014bc:	4b4f      	ldr	r3, [pc, #316]	; (80015fc <Plot_mode+0x5a4>)
 80014be:	889b      	ldrh	r3, [r3, #4]
 80014c0:	461a      	mov	r2, r3
 80014c2:	494f      	ldr	r1, [pc, #316]	; (8001600 <Plot_mode+0x5a8>)
 80014c4:	4850      	ldr	r0, [pc, #320]	; (8001608 <Plot_mode+0x5b0>)
 80014c6:	f005 fe87 	bl	80071d8 <siprintf>
			SSD1306_GotoXY(0, HigherYcoordenate - 5);
 80014ca:	883b      	ldrh	r3, [r7, #0]
 80014cc:	3b05      	subs	r3, #5
 80014ce:	b29b      	uxth	r3, r3
 80014d0:	4619      	mov	r1, r3
 80014d2:	2000      	movs	r0, #0
 80014d4:	f005 f866 	bl	80065a4 <SSD1306_GotoXY>
			SSD1306_Puts(YAxisPosition.HigherBuffer, &Font_7x10, 1);
 80014d8:	2201      	movs	r2, #1
 80014da:	494c      	ldr	r1, [pc, #304]	; (800160c <Plot_mode+0x5b4>)
 80014dc:	4849      	ldr	r0, [pc, #292]	; (8001604 <Plot_mode+0x5ac>)
 80014de:	f005 f8f7 	bl	80066d0 <SSD1306_Puts>
			SSD1306_GotoXY(0, (((XAxis_High - HigherYcoordenate) / 2) + HigherYcoordenate) - 5);
 80014e2:	893a      	ldrh	r2, [r7, #8]
 80014e4:	883b      	ldrh	r3, [r7, #0]
 80014e6:	1ad3      	subs	r3, r2, r3
 80014e8:	0fda      	lsrs	r2, r3, #31
 80014ea:	4413      	add	r3, r2
 80014ec:	105b      	asrs	r3, r3, #1
 80014ee:	b29a      	uxth	r2, r3
 80014f0:	883b      	ldrh	r3, [r7, #0]
 80014f2:	4413      	add	r3, r2
 80014f4:	b29b      	uxth	r3, r3
 80014f6:	3b05      	subs	r3, #5
 80014f8:	b29b      	uxth	r3, r3
 80014fa:	4619      	mov	r1, r3
 80014fc:	2000      	movs	r0, #0
 80014fe:	f005 f851 	bl	80065a4 <SSD1306_GotoXY>
			SSD1306_Puts(YAxisPosition.MiddleBuffer, &Font_7x10, 1);
 8001502:	2201      	movs	r2, #1
 8001504:	4941      	ldr	r1, [pc, #260]	; (800160c <Plot_mode+0x5b4>)
 8001506:	4840      	ldr	r0, [pc, #256]	; (8001608 <Plot_mode+0x5b0>)
 8001508:	f005 f8e2 	bl	80066d0 <SSD1306_Puts>
			///Line Prints
			SSD1306_DrawLine(YAxis_Offset, HigherYcoordenate, (CharsNumberFromInt(YAxisPosition.HigherRes, false) * 7) + 1, HigherYcoordenate, 1); //Higher Line
 800150c:	4b3b      	ldr	r3, [pc, #236]	; (80015fc <Plot_mode+0x5a4>)
 800150e:	881b      	ldrh	r3, [r3, #0]
 8001510:	2100      	movs	r1, #0
 8001512:	4618      	mov	r0, r3
 8001514:	f001 f846 	bl	80025a4 <CharsNumberFromInt>
 8001518:	4603      	mov	r3, r0
 800151a:	461a      	mov	r2, r3
 800151c:	00d2      	lsls	r2, r2, #3
 800151e:	1ad3      	subs	r3, r2, r3
 8001520:	b29b      	uxth	r3, r3
 8001522:	3301      	adds	r3, #1
 8001524:	b29a      	uxth	r2, r3
 8001526:	883b      	ldrh	r3, [r7, #0]
 8001528:	8839      	ldrh	r1, [r7, #0]
 800152a:	8878      	ldrh	r0, [r7, #2]
 800152c:	2401      	movs	r4, #1
 800152e:	9400      	str	r4, [sp, #0]
 8001530:	f005 f8f3 	bl	800671a <SSD1306_DrawLine>
			SSD1306_DrawLine(YAxis_Offset, (((XAxis_High - HigherYcoordenate) / 2) + HigherYcoordenate), (CharsNumberFromInt(YAxisPosition.MiddleRes, false) * 7) + 1, (((XAxis_High - HigherYcoordenate) / 2) + HigherYcoordenate), 1); //Middle Line
 8001534:	893a      	ldrh	r2, [r7, #8]
 8001536:	883b      	ldrh	r3, [r7, #0]
 8001538:	1ad3      	subs	r3, r2, r3
 800153a:	0fda      	lsrs	r2, r3, #31
 800153c:	4413      	add	r3, r2
 800153e:	105b      	asrs	r3, r3, #1
 8001540:	b29a      	uxth	r2, r3
 8001542:	883b      	ldrh	r3, [r7, #0]
 8001544:	4413      	add	r3, r2
 8001546:	b29c      	uxth	r4, r3
 8001548:	4b2c      	ldr	r3, [pc, #176]	; (80015fc <Plot_mode+0x5a4>)
 800154a:	889b      	ldrh	r3, [r3, #4]
 800154c:	2100      	movs	r1, #0
 800154e:	4618      	mov	r0, r3
 8001550:	f001 f828 	bl	80025a4 <CharsNumberFromInt>
 8001554:	4603      	mov	r3, r0
 8001556:	461a      	mov	r2, r3
 8001558:	00d2      	lsls	r2, r2, #3
 800155a:	1ad3      	subs	r3, r2, r3
 800155c:	b29b      	uxth	r3, r3
 800155e:	3301      	adds	r3, #1
 8001560:	b299      	uxth	r1, r3
 8001562:	893a      	ldrh	r2, [r7, #8]
 8001564:	883b      	ldrh	r3, [r7, #0]
 8001566:	1ad3      	subs	r3, r2, r3
 8001568:	0fda      	lsrs	r2, r3, #31
 800156a:	4413      	add	r3, r2
 800156c:	105b      	asrs	r3, r3, #1
 800156e:	b29a      	uxth	r2, r3
 8001570:	883b      	ldrh	r3, [r7, #0]
 8001572:	4413      	add	r3, r2
 8001574:	b29b      	uxth	r3, r3
 8001576:	8878      	ldrh	r0, [r7, #2]
 8001578:	2201      	movs	r2, #1
 800157a:	9200      	str	r2, [sp, #0]
 800157c:	460a      	mov	r2, r1
 800157e:	4621      	mov	r1, r4
 8001580:	f005 f8cb 	bl	800671a <SSD1306_DrawLine>
		}
		//Y Arrow
		SSD1306_DrawFilledTriangle(YAxis_Offset-3, YAxis_LimitUP+5, YAxis_Offset+3, YAxis_LimitUP+5, YAxis_Offset, YAxis_LimitUP, 1);
 8001584:	887b      	ldrh	r3, [r7, #2]
 8001586:	3b03      	subs	r3, #3
 8001588:	b298      	uxth	r0, r3
 800158a:	89bb      	ldrh	r3, [r7, #12]
 800158c:	3305      	adds	r3, #5
 800158e:	b299      	uxth	r1, r3
 8001590:	887b      	ldrh	r3, [r7, #2]
 8001592:	3303      	adds	r3, #3
 8001594:	b29a      	uxth	r2, r3
 8001596:	89bb      	ldrh	r3, [r7, #12]
 8001598:	3305      	adds	r3, #5
 800159a:	b29c      	uxth	r4, r3
 800159c:	2301      	movs	r3, #1
 800159e:	9302      	str	r3, [sp, #8]
 80015a0:	89bb      	ldrh	r3, [r7, #12]
 80015a2:	9301      	str	r3, [sp, #4]
 80015a4:	887b      	ldrh	r3, [r7, #2]
 80015a6:	9300      	str	r3, [sp, #0]
 80015a8:	4623      	mov	r3, r4
 80015aa:	f005 fa1b 	bl	80069e4 <SSD1306_DrawFilledTriangle>
		HAL_IWDG_Refresh(&hiwdg);
 80015ae:	4818      	ldr	r0, [pc, #96]	; (8001610 <Plot_mode+0x5b8>)
 80015b0:	f003 fe3d 	bl	800522e <HAL_IWDG_Refresh>
		SSD1306_UpdateScreen();
 80015b4:	f004 ff52 	bl	800645c <SSD1306_UpdateScreen>
		switch(GlobalConfigs.PlotType)
 80015b8:	4b16      	ldr	r3, [pc, #88]	; (8001614 <Plot_mode+0x5bc>)
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d002      	beq.n	80015c6 <Plot_mode+0x56e>
 80015c0:	2b01      	cmp	r3, #1
 80015c2:	d003      	beq.n	80015cc <Plot_mode+0x574>
 80015c4:	e005      	b.n	80015d2 <Plot_mode+0x57a>
		{
			case BothAxis:
				YLimit = XAxis_High;
 80015c6:	893b      	ldrh	r3, [r7, #8]
 80015c8:	817b      	strh	r3, [r7, #10]
			break;
 80015ca:	e002      	b.n	80015d2 <Plot_mode+0x57a>
			case YAxis:
				YLimit = YScreenRes;
 80015cc:	88fb      	ldrh	r3, [r7, #6]
 80015ce:	817b      	strh	r3, [r7, #10]
			break;
 80015d0:	bf00      	nop
		}
		Print_OkToContinue(YAxis_Offset, YLimit);
 80015d2:	897a      	ldrh	r2, [r7, #10]
 80015d4:	887b      	ldrh	r3, [r7, #2]
 80015d6:	4611      	mov	r1, r2
 80015d8:	4618      	mov	r0, r3
 80015da:	f000 f821 	bl	8001620 <Print_OkToContinue>
	}

	//Do the magic :D

	Configs.Last_Mode = Plot;
 80015de:	4b0e      	ldr	r3, [pc, #56]	; (8001618 <Plot_mode+0x5c0>)
 80015e0:	2202      	movs	r2, #2
 80015e2:	709a      	strb	r2, [r3, #2]
	comeFromMenu = false;
 80015e4:	4b0d      	ldr	r3, [pc, #52]	; (800161c <Plot_mode+0x5c4>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	701a      	strb	r2, [r3, #0]
	HAL_IWDG_Refresh(&hiwdg);
 80015ea:	4809      	ldr	r0, [pc, #36]	; (8001610 <Plot_mode+0x5b8>)
 80015ec:	f003 fe1f 	bl	800522e <HAL_IWDG_Refresh>
	//Read value and put a point
}
 80015f0:	bf00      	nop
 80015f2:	3710      	adds	r7, #16
 80015f4:	46bd      	mov	sp, r7
 80015f6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80015fa:	bf00      	nop
 80015fc:	20000000 	.word	0x20000000
 8001600:	08007950 	.word	0x08007950
 8001604:	20000008 	.word	0x20000008
 8001608:	20000016 	.word	0x20000016
 800160c:	20000048 	.word	0x20000048
 8001610:	20000218 	.word	0x20000218
 8001614:	20000028 	.word	0x20000028
 8001618:	2000022c 	.word	0x2000022c
 800161c:	20000242 	.word	0x20000242

08001620 <Print_OkToContinue>:

//Plot Functions
void Print_OkToContinue(uint16_t XOffset, uint16_t YLimit)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b086      	sub	sp, #24
 8001624:	af00      	add	r7, sp, #0
 8001626:	4603      	mov	r3, r0
 8001628:	460a      	mov	r2, r1
 800162a:	80fb      	strh	r3, [r7, #6]
 800162c:	4613      	mov	r3, r2
 800162e:	80bb      	strh	r3, [r7, #4]
	const uint16_t CharsX = 56;
 8001630:	2338      	movs	r3, #56	; 0x38
 8001632:	82fb      	strh	r3, [r7, #22]
	const uint16_t XCoordinate = (((128-CharsX) + XOffset)/2);
 8001634:	8afb      	ldrh	r3, [r7, #22]
 8001636:	f1c3 0280 	rsb	r2, r3, #128	; 0x80
 800163a:	88fb      	ldrh	r3, [r7, #6]
 800163c:	4413      	add	r3, r2
 800163e:	0fda      	lsrs	r2, r3, #31
 8001640:	4413      	add	r3, r2
 8001642:	105b      	asrs	r3, r3, #1
 8001644:	82bb      	strh	r3, [r7, #20]
	const uint16_t CharsY = 33;
 8001646:	2321      	movs	r3, #33	; 0x21
 8001648:	827b      	strh	r3, [r7, #18]
	const uint16_t CharYDim = 10;
 800164a:	230a      	movs	r3, #10
 800164c:	823b      	strh	r3, [r7, #16]
	const uint16_t YPixelStep = 1;
 800164e:	2301      	movs	r3, #1
 8001650:	81fb      	strh	r3, [r7, #14]
	const uint16_t YInitialCoordinate = (YLimit - CharsY) / 2;
 8001652:	88ba      	ldrh	r2, [r7, #4]
 8001654:	8a7b      	ldrh	r3, [r7, #18]
 8001656:	1ad3      	subs	r3, r2, r3
 8001658:	0fda      	lsrs	r2, r3, #31
 800165a:	4413      	add	r3, r2
 800165c:	105b      	asrs	r3, r3, #1
 800165e:	81bb      	strh	r3, [r7, #12]

	SSD1306_GotoXY(XCoordinate, YInitialCoordinate);
 8001660:	89ba      	ldrh	r2, [r7, #12]
 8001662:	8abb      	ldrh	r3, [r7, #20]
 8001664:	4611      	mov	r1, r2
 8001666:	4618      	mov	r0, r3
 8001668:	f004 ff9c 	bl	80065a4 <SSD1306_GotoXY>
	SSD1306_Puts("Press OK", &Font_7x10, 1);
 800166c:	2201      	movs	r2, #1
 800166e:	4931      	ldr	r1, [pc, #196]	; (8001734 <Print_OkToContinue+0x114>)
 8001670:	4831      	ldr	r0, [pc, #196]	; (8001738 <Print_OkToContinue+0x118>)
 8001672:	f005 f82d 	bl	80066d0 <SSD1306_Puts>
	SSD1306_GotoXY(XCoordinate, YInitialCoordinate + (CharYDim) + YPixelStep);
 8001676:	89ba      	ldrh	r2, [r7, #12]
 8001678:	8a3b      	ldrh	r3, [r7, #16]
 800167a:	4413      	add	r3, r2
 800167c:	b29a      	uxth	r2, r3
 800167e:	89fb      	ldrh	r3, [r7, #14]
 8001680:	4413      	add	r3, r2
 8001682:	b29a      	uxth	r2, r3
 8001684:	8abb      	ldrh	r3, [r7, #20]
 8001686:	4611      	mov	r1, r2
 8001688:	4618      	mov	r0, r3
 800168a:	f004 ff8b 	bl	80065a4 <SSD1306_GotoXY>
	SSD1306_Puts("to start", &Font_7x10, 1);
 800168e:	2201      	movs	r2, #1
 8001690:	4928      	ldr	r1, [pc, #160]	; (8001734 <Print_OkToContinue+0x114>)
 8001692:	482a      	ldr	r0, [pc, #168]	; (800173c <Print_OkToContinue+0x11c>)
 8001694:	f005 f81c 	bl	80066d0 <SSD1306_Puts>
	SSD1306_GotoXY(XCoordinate, YInitialCoordinate + (CharYDim*2) + YPixelStep);
 8001698:	8a3b      	ldrh	r3, [r7, #16]
 800169a:	005b      	lsls	r3, r3, #1
 800169c:	b29a      	uxth	r2, r3
 800169e:	89bb      	ldrh	r3, [r7, #12]
 80016a0:	4413      	add	r3, r2
 80016a2:	b29a      	uxth	r2, r3
 80016a4:	89fb      	ldrh	r3, [r7, #14]
 80016a6:	4413      	add	r3, r2
 80016a8:	b29a      	uxth	r2, r3
 80016aa:	8abb      	ldrh	r3, [r7, #20]
 80016ac:	4611      	mov	r1, r2
 80016ae:	4618      	mov	r0, r3
 80016b0:	f004 ff78 	bl	80065a4 <SSD1306_GotoXY>
	SSD1306_Puts("the plot", &Font_7x10, 1);
 80016b4:	2201      	movs	r2, #1
 80016b6:	491f      	ldr	r1, [pc, #124]	; (8001734 <Print_OkToContinue+0x114>)
 80016b8:	4821      	ldr	r0, [pc, #132]	; (8001740 <Print_OkToContinue+0x120>)
 80016ba:	f005 f809 	bl	80066d0 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 80016be:	f004 fecd 	bl	800645c <SSD1306_UpdateScreen>
	wait_until_press(Ok);
 80016c2:	200f      	movs	r0, #15
 80016c4:	f000 fe4a 	bl	800235c <wait_until_press>
	SSD1306_GotoXY(XCoordinate, YInitialCoordinate);
 80016c8:	89ba      	ldrh	r2, [r7, #12]
 80016ca:	8abb      	ldrh	r3, [r7, #20]
 80016cc:	4611      	mov	r1, r2
 80016ce:	4618      	mov	r0, r3
 80016d0:	f004 ff68 	bl	80065a4 <SSD1306_GotoXY>
	SSD1306_Puts("        ", &Font_7x10, 1);
 80016d4:	2201      	movs	r2, #1
 80016d6:	4917      	ldr	r1, [pc, #92]	; (8001734 <Print_OkToContinue+0x114>)
 80016d8:	481a      	ldr	r0, [pc, #104]	; (8001744 <Print_OkToContinue+0x124>)
 80016da:	f004 fff9 	bl	80066d0 <SSD1306_Puts>
	SSD1306_GotoXY(XCoordinate, YInitialCoordinate + (CharYDim) + YPixelStep);
 80016de:	89ba      	ldrh	r2, [r7, #12]
 80016e0:	8a3b      	ldrh	r3, [r7, #16]
 80016e2:	4413      	add	r3, r2
 80016e4:	b29a      	uxth	r2, r3
 80016e6:	89fb      	ldrh	r3, [r7, #14]
 80016e8:	4413      	add	r3, r2
 80016ea:	b29a      	uxth	r2, r3
 80016ec:	8abb      	ldrh	r3, [r7, #20]
 80016ee:	4611      	mov	r1, r2
 80016f0:	4618      	mov	r0, r3
 80016f2:	f004 ff57 	bl	80065a4 <SSD1306_GotoXY>
	SSD1306_Puts("        ", &Font_7x10, 1);
 80016f6:	2201      	movs	r2, #1
 80016f8:	490e      	ldr	r1, [pc, #56]	; (8001734 <Print_OkToContinue+0x114>)
 80016fa:	4812      	ldr	r0, [pc, #72]	; (8001744 <Print_OkToContinue+0x124>)
 80016fc:	f004 ffe8 	bl	80066d0 <SSD1306_Puts>
	SSD1306_GotoXY(XCoordinate, YInitialCoordinate + (CharYDim*2) + YPixelStep);
 8001700:	8a3b      	ldrh	r3, [r7, #16]
 8001702:	005b      	lsls	r3, r3, #1
 8001704:	b29a      	uxth	r2, r3
 8001706:	89bb      	ldrh	r3, [r7, #12]
 8001708:	4413      	add	r3, r2
 800170a:	b29a      	uxth	r2, r3
 800170c:	89fb      	ldrh	r3, [r7, #14]
 800170e:	4413      	add	r3, r2
 8001710:	b29a      	uxth	r2, r3
 8001712:	8abb      	ldrh	r3, [r7, #20]
 8001714:	4611      	mov	r1, r2
 8001716:	4618      	mov	r0, r3
 8001718:	f004 ff44 	bl	80065a4 <SSD1306_GotoXY>
	SSD1306_Puts("        ", &Font_7x10, 1);
 800171c:	2201      	movs	r2, #1
 800171e:	4905      	ldr	r1, [pc, #20]	; (8001734 <Print_OkToContinue+0x114>)
 8001720:	4808      	ldr	r0, [pc, #32]	; (8001744 <Print_OkToContinue+0x124>)
 8001722:	f004 ffd5 	bl	80066d0 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 8001726:	f004 fe99 	bl	800645c <SSD1306_UpdateScreen>
}
 800172a:	bf00      	nop
 800172c:	3718      	adds	r7, #24
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	20000048 	.word	0x20000048
 8001738:	08007954 	.word	0x08007954
 800173c:	08007960 	.word	0x08007960
 8001740:	0800796c 	.word	0x0800796c
 8001744:	08007978 	.word	0x08007978

08001748 <Config_plot_mode>:

//@TODO Solve cursor bugs, all the other stages
void Config_plot_mode(void)
{
 8001748:	b5b0      	push	{r4, r5, r7, lr}
 800174a:	b092      	sub	sp, #72	; 0x48
 800174c:	af02      	add	r7, sp, #8
		char Units[3];
		const char ResolutionPrint[10];
		const char SamplePrint[10];
		const char GraphicPrint[10];

	}GeneralBuffers = {
 800174e:	1d3b      	adds	r3, r7, #4
 8001750:	222c      	movs	r2, #44	; 0x2c
 8001752:	2100      	movs	r1, #0
 8001754:	4618      	mov	r0, r3
 8001756:	f005 fc37 	bl	8006fc8 <memset>
 800175a:	4abd      	ldr	r2, [pc, #756]	; (8001a50 <Config_plot_mode+0x308>)
 800175c:	f107 030c 	add.w	r3, r7, #12
 8001760:	6812      	ldr	r2, [r2, #0]
 8001762:	4611      	mov	r1, r2
 8001764:	8019      	strh	r1, [r3, #0]
 8001766:	3302      	adds	r3, #2
 8001768:	0c12      	lsrs	r2, r2, #16
 800176a:	701a      	strb	r2, [r3, #0]
 800176c:	4ab9      	ldr	r2, [pc, #740]	; (8001a54 <Config_plot_mode+0x30c>)
 800176e:	f107 030f 	add.w	r3, r7, #15
 8001772:	6810      	ldr	r0, [r2, #0]
 8001774:	6018      	str	r0, [r3, #0]
 8001776:	f107 0313 	add.w	r3, r7, #19
 800177a:	2200      	movs	r2, #0
 800177c:	601a      	str	r2, [r3, #0]
 800177e:	809a      	strh	r2, [r3, #4]
 8001780:	4ab5      	ldr	r2, [pc, #724]	; (8001a58 <Config_plot_mode+0x310>)
 8001782:	f107 0319 	add.w	r3, r7, #25
 8001786:	6810      	ldr	r0, [r2, #0]
 8001788:	6018      	str	r0, [r3, #0]
 800178a:	8891      	ldrh	r1, [r2, #4]
 800178c:	7992      	ldrb	r2, [r2, #6]
 800178e:	8099      	strh	r1, [r3, #4]
 8001790:	719a      	strb	r2, [r3, #6]
 8001792:	f107 0320 	add.w	r3, r7, #32
 8001796:	2200      	movs	r2, #0
 8001798:	801a      	strh	r2, [r3, #0]
 800179a:	709a      	strb	r2, [r3, #2]
 800179c:	4baf      	ldr	r3, [pc, #700]	; (8001a5c <Config_plot_mode+0x314>)
 800179e:	f107 0223 	add.w	r2, r7, #35	; 0x23
 80017a2:	cb03      	ldmia	r3!, {r0, r1}
 80017a4:	6010      	str	r0, [r2, #0]
 80017a6:	6051      	str	r1, [r2, #4]
 80017a8:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 80017ac:	2200      	movs	r2, #0
 80017ae:	801a      	strh	r2, [r3, #0]
			.ResolutionPrint = "Res",
			.SamplePrint = "Sample",
			.GraphicPrint = "Graphic"
	};

	const uint16_t XOffset = 10; //Minimum of 2
 80017b0:	230a      	movs	r3, #10
 80017b2:	873b      	strh	r3, [r7, #56]	; 0x38
	const uint16_t ResY = 13;
 80017b4:	230d      	movs	r3, #13
 80017b6:	86fb      	strh	r3, [r7, #54]	; 0x36
	const uint16_t SampleY = 25;
 80017b8:	2319      	movs	r3, #25
 80017ba:	86bb      	strh	r3, [r7, #52]	; 0x34
	const uint16_t GraphicY = 37;
 80017bc:	2325      	movs	r3, #37	; 0x25
 80017be:	867b      	strh	r3, [r7, #50]	; 0x32
	static ConfigStage CurrentStage = Selecting;
	static ConfigStage Cursor = Resolution;
	static bool EnteredGraphic = false;
	static bool CursorMoved = false;
	uint32_t Past_IDR_Read = 0xFF;
 80017c0:	23ff      	movs	r3, #255	; 0xff
 80017c2:	63fb      	str	r3, [r7, #60]	; 0x3c
	bool ReprintInitialPrint = false;
 80017c4:	2300      	movs	r3, #0
 80017c6:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	bool NotReady = true;
 80017ca:	2301      	movs	r3, #1
 80017cc:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

	HAL_IWDG_Refresh(&hiwdg);
 80017d0:	48a3      	ldr	r0, [pc, #652]	; (8001a60 <Config_plot_mode+0x318>)
 80017d2:	f003 fd2c 	bl	800522e <HAL_IWDG_Refresh>
	if(Configs.Last_Mode != Config_Plot || comeFromMenu || ReprintInitialPrint)
 80017d6:	4ba3      	ldr	r3, [pc, #652]	; (8001a64 <Config_plot_mode+0x31c>)
 80017d8:	789b      	ldrb	r3, [r3, #2]
 80017da:	2b03      	cmp	r3, #3
 80017dc:	d108      	bne.n	80017f0 <Config_plot_mode+0xa8>
 80017de:	4ba2      	ldr	r3, [pc, #648]	; (8001a68 <Config_plot_mode+0x320>)
 80017e0:	781b      	ldrb	r3, [r3, #0]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d104      	bne.n	80017f0 <Config_plot_mode+0xa8>
 80017e6:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	f000 80d1 	beq.w	8001992 <Config_plot_mode+0x24a>
	{
		SSD1306_Clear();
 80017f0:	f005 f9ba 	bl	8006b68 <SSD1306_Clear>
		LocalBuffers.PlotType = GlobalConfigs.PlotType;
 80017f4:	4b9d      	ldr	r3, [pc, #628]	; (8001a6c <Config_plot_mode+0x324>)
 80017f6:	781a      	ldrb	r2, [r3, #0]
 80017f8:	4b9d      	ldr	r3, [pc, #628]	; (8001a70 <Config_plot_mode+0x328>)
 80017fa:	701a      	strb	r2, [r3, #0]
		LocalBuffers.SampleTime = GlobalConfigs.SampleTime;
 80017fc:	4b9b      	ldr	r3, [pc, #620]	; (8001a6c <Config_plot_mode+0x324>)
 80017fe:	885a      	ldrh	r2, [r3, #2]
 8001800:	4b9b      	ldr	r3, [pc, #620]	; (8001a70 <Config_plot_mode+0x328>)
 8001802:	805a      	strh	r2, [r3, #2]
		LocalBuffers.Resolution = GlobalConfigs.Resolution;
 8001804:	4b99      	ldr	r3, [pc, #612]	; (8001a6c <Config_plot_mode+0x324>)
 8001806:	889a      	ldrh	r2, [r3, #4]
 8001808:	4b99      	ldr	r3, [pc, #612]	; (8001a70 <Config_plot_mode+0x328>)
 800180a:	809a      	strh	r2, [r3, #4]
		LocalBuffers.PrintLegends = GlobalConfigs.Resolution;
 800180c:	4b97      	ldr	r3, [pc, #604]	; (8001a6c <Config_plot_mode+0x324>)
 800180e:	889b      	ldrh	r3, [r3, #4]
 8001810:	b2da      	uxtb	r2, r3
 8001812:	4b97      	ldr	r3, [pc, #604]	; (8001a70 <Config_plot_mode+0x328>)
 8001814:	719a      	strb	r2, [r3, #6]
		GeneralBuffers.ResBuffer = (char *) calloc(CharsNumberFromInt(LocalBuffers.Resolution, false), sizeof(char));
 8001816:	4b96      	ldr	r3, [pc, #600]	; (8001a70 <Config_plot_mode+0x328>)
 8001818:	889b      	ldrh	r3, [r3, #4]
 800181a:	2100      	movs	r1, #0
 800181c:	4618      	mov	r0, r3
 800181e:	f000 fec1 	bl	80025a4 <CharsNumberFromInt>
 8001822:	4603      	mov	r3, r0
 8001824:	2101      	movs	r1, #1
 8001826:	4618      	mov	r0, r3
 8001828:	f005 fb94 	bl	8006f54 <calloc>
 800182c:	4603      	mov	r3, r0
 800182e:	607b      	str	r3, [r7, #4]

		if(GeneralBuffers.ResBuffer == NULL)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d117      	bne.n	8001866 <Config_plot_mode+0x11e>
		{
			//Send error message || Code error 0xAF
			SSD1306_Clear();
 8001836:	f005 f997 	bl	8006b68 <SSD1306_Clear>
			SSD1306_GotoXY(CenterXPrint("Fatal Error, code: 0xAF", 0, 128, Font_11x18), 20);
 800183a:	4b8e      	ldr	r3, [pc, #568]	; (8001a74 <Config_plot_mode+0x32c>)
 800183c:	685a      	ldr	r2, [r3, #4]
 800183e:	9200      	str	r2, [sp, #0]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	2280      	movs	r2, #128	; 0x80
 8001844:	2100      	movs	r1, #0
 8001846:	488c      	ldr	r0, [pc, #560]	; (8001a78 <Config_plot_mode+0x330>)
 8001848:	f000 fe86 	bl	8002558 <CenterXPrint>
 800184c:	4603      	mov	r3, r0
 800184e:	2114      	movs	r1, #20
 8001850:	4618      	mov	r0, r3
 8001852:	f004 fea7 	bl	80065a4 <SSD1306_GotoXY>
			SSD1306_Puts("Fatal Error, code: 0xAF", &Font_11x18, 1);
 8001856:	2201      	movs	r2, #1
 8001858:	4986      	ldr	r1, [pc, #536]	; (8001a74 <Config_plot_mode+0x32c>)
 800185a:	4887      	ldr	r0, [pc, #540]	; (8001a78 <Config_plot_mode+0x330>)
 800185c:	f004 ff38 	bl	80066d0 <SSD1306_Puts>
			SSD1306_UpdateScreen();
 8001860:	f004 fdfc 	bl	800645c <SSD1306_UpdateScreen>
			return;
 8001864:	e2b3      	b.n	8001dce <Config_plot_mode+0x686>
		}
		else
		{
			sprintf(GeneralBuffers.ResBuffer, "%d", (int) LocalBuffers.Resolution);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	4a81      	ldr	r2, [pc, #516]	; (8001a70 <Config_plot_mode+0x328>)
 800186a:	8892      	ldrh	r2, [r2, #4]
 800186c:	4983      	ldr	r1, [pc, #524]	; (8001a7c <Config_plot_mode+0x334>)
 800186e:	4618      	mov	r0, r3
 8001870:	f005 fcb2 	bl	80071d8 <siprintf>
		}

		GeneralBuffers.SampleBuffer = (char *) calloc(CharsNumberFromInt(LocalBuffers.SampleTime, false), sizeof(char));
 8001874:	4b7e      	ldr	r3, [pc, #504]	; (8001a70 <Config_plot_mode+0x328>)
 8001876:	885b      	ldrh	r3, [r3, #2]
 8001878:	2100      	movs	r1, #0
 800187a:	4618      	mov	r0, r3
 800187c:	f000 fe92 	bl	80025a4 <CharsNumberFromInt>
 8001880:	4603      	mov	r3, r0
 8001882:	2101      	movs	r1, #1
 8001884:	4618      	mov	r0, r3
 8001886:	f005 fb65 	bl	8006f54 <calloc>
 800188a:	4603      	mov	r3, r0
 800188c:	60bb      	str	r3, [r7, #8]

		if(GeneralBuffers.SampleBuffer == NULL)
 800188e:	68bb      	ldr	r3, [r7, #8]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d117      	bne.n	80018c4 <Config_plot_mode+0x17c>
		{
			//Send error message || Code error 0xAA
			SSD1306_Clear();
 8001894:	f005 f968 	bl	8006b68 <SSD1306_Clear>
			SSD1306_GotoXY(CenterXPrint("Fatal Error, code: 0xAA", 0, 128, Font_11x18), 20);
 8001898:	4b76      	ldr	r3, [pc, #472]	; (8001a74 <Config_plot_mode+0x32c>)
 800189a:	685a      	ldr	r2, [r3, #4]
 800189c:	9200      	str	r2, [sp, #0]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	2280      	movs	r2, #128	; 0x80
 80018a2:	2100      	movs	r1, #0
 80018a4:	4876      	ldr	r0, [pc, #472]	; (8001a80 <Config_plot_mode+0x338>)
 80018a6:	f000 fe57 	bl	8002558 <CenterXPrint>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2114      	movs	r1, #20
 80018ae:	4618      	mov	r0, r3
 80018b0:	f004 fe78 	bl	80065a4 <SSD1306_GotoXY>
			SSD1306_Puts("Fatal Error, code: 0xAA", &Font_11x18, 1);
 80018b4:	2201      	movs	r2, #1
 80018b6:	496f      	ldr	r1, [pc, #444]	; (8001a74 <Config_plot_mode+0x32c>)
 80018b8:	4871      	ldr	r0, [pc, #452]	; (8001a80 <Config_plot_mode+0x338>)
 80018ba:	f004 ff09 	bl	80066d0 <SSD1306_Puts>
			SSD1306_UpdateScreen();
 80018be:	f004 fdcd 	bl	800645c <SSD1306_UpdateScreen>
			return;
 80018c2:	e284      	b.n	8001dce <Config_plot_mode+0x686>
		}
		else
		{
			sprintf(GeneralBuffers.SampleBuffer, "%d", (int) LocalBuffers.SampleTime);
 80018c4:	68bb      	ldr	r3, [r7, #8]
 80018c6:	4a6a      	ldr	r2, [pc, #424]	; (8001a70 <Config_plot_mode+0x328>)
 80018c8:	8852      	ldrh	r2, [r2, #2]
 80018ca:	496c      	ldr	r1, [pc, #432]	; (8001a7c <Config_plot_mode+0x334>)
 80018cc:	4618      	mov	r0, r3
 80018ce:	f005 fc83 	bl	80071d8 <siprintf>
		}
		HAL_IWDG_Refresh(&hiwdg);
 80018d2:	4863      	ldr	r0, [pc, #396]	; (8001a60 <Config_plot_mode+0x318>)
 80018d4:	f003 fcab 	bl	800522e <HAL_IWDG_Refresh>
		//List of configurations
		SSD1306_GotoXY(XOffset, ResY);
 80018d8:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80018da:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80018dc:	4611      	mov	r1, r2
 80018de:	4618      	mov	r0, r3
 80018e0:	f004 fe60 	bl	80065a4 <SSD1306_GotoXY>
		SSD1306_Puts((char *) GeneralBuffers.ResolutionPrint, &Font_7x10, 1);
 80018e4:	1d3b      	adds	r3, r7, #4
 80018e6:	330b      	adds	r3, #11
 80018e8:	2201      	movs	r2, #1
 80018ea:	4966      	ldr	r1, [pc, #408]	; (8001a84 <Config_plot_mode+0x33c>)
 80018ec:	4618      	mov	r0, r3
 80018ee:	f004 feef 	bl	80066d0 <SSD1306_Puts>
		SSD1306_GotoXY(XOffset, SampleY);
 80018f2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80018f4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80018f6:	4611      	mov	r1, r2
 80018f8:	4618      	mov	r0, r3
 80018fa:	f004 fe53 	bl	80065a4 <SSD1306_GotoXY>
		SSD1306_Puts((char *) GeneralBuffers.SamplePrint, &Font_7x10, 1);
 80018fe:	1d3b      	adds	r3, r7, #4
 8001900:	3315      	adds	r3, #21
 8001902:	2201      	movs	r2, #1
 8001904:	495f      	ldr	r1, [pc, #380]	; (8001a84 <Config_plot_mode+0x33c>)
 8001906:	4618      	mov	r0, r3
 8001908:	f004 fee2 	bl	80066d0 <SSD1306_Puts>
		SSD1306_GotoXY(XOffset, GraphicY);
 800190c:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800190e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8001910:	4611      	mov	r1, r2
 8001912:	4618      	mov	r0, r3
 8001914:	f004 fe46 	bl	80065a4 <SSD1306_GotoXY>
		SSD1306_Puts((char *) GeneralBuffers.GraphicPrint, &Font_7x10, 1);
 8001918:	1d3b      	adds	r3, r7, #4
 800191a:	331f      	adds	r3, #31
 800191c:	2201      	movs	r2, #1
 800191e:	4959      	ldr	r1, [pc, #356]	; (8001a84 <Config_plot_mode+0x33c>)
 8001920:	4618      	mov	r0, r3
 8001922:	f004 fed5 	bl	80066d0 <SSD1306_Puts>
		//Value Selected
		SSD1306_GotoXY(XOffset + (NumberOfCharsUsed((char *) GeneralBuffers.ResolutionPrint, false) * 7) + 5, 13);
 8001926:	1d3b      	adds	r3, r7, #4
 8001928:	330b      	adds	r3, #11
 800192a:	2100      	movs	r1, #0
 800192c:	4618      	mov	r0, r3
 800192e:	f000 fe5d 	bl	80025ec <NumberOfCharsUsed>
 8001932:	4603      	mov	r3, r0
 8001934:	461a      	mov	r2, r3
 8001936:	00d2      	lsls	r2, r2, #3
 8001938:	1ad3      	subs	r3, r2, r3
 800193a:	b29a      	uxth	r2, r3
 800193c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800193e:	4413      	add	r3, r2
 8001940:	b29b      	uxth	r3, r3
 8001942:	3305      	adds	r3, #5
 8001944:	b29b      	uxth	r3, r3
 8001946:	210d      	movs	r1, #13
 8001948:	4618      	mov	r0, r3
 800194a:	f004 fe2b 	bl	80065a4 <SSD1306_GotoXY>
		SSD1306_Puts(GeneralBuffers.ResBuffer, &Font_7x10, 1);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2201      	movs	r2, #1
 8001952:	494c      	ldr	r1, [pc, #304]	; (8001a84 <Config_plot_mode+0x33c>)
 8001954:	4618      	mov	r0, r3
 8001956:	f004 febb 	bl	80066d0 <SSD1306_Puts>
		SSD1306_GotoXY(XOffset + (NumberOfCharsUsed((char *) GeneralBuffers.SamplePrint, false) * 7) + 5, 25);
 800195a:	1d3b      	adds	r3, r7, #4
 800195c:	3315      	adds	r3, #21
 800195e:	2100      	movs	r1, #0
 8001960:	4618      	mov	r0, r3
 8001962:	f000 fe43 	bl	80025ec <NumberOfCharsUsed>
 8001966:	4603      	mov	r3, r0
 8001968:	461a      	mov	r2, r3
 800196a:	00d2      	lsls	r2, r2, #3
 800196c:	1ad3      	subs	r3, r2, r3
 800196e:	b29a      	uxth	r2, r3
 8001970:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8001972:	4413      	add	r3, r2
 8001974:	b29b      	uxth	r3, r3
 8001976:	3305      	adds	r3, #5
 8001978:	b29b      	uxth	r3, r3
 800197a:	2119      	movs	r1, #25
 800197c:	4618      	mov	r0, r3
 800197e:	f004 fe11 	bl	80065a4 <SSD1306_GotoXY>
		SSD1306_Puts(GeneralBuffers.SampleBuffer, &Font_7x10, 1);
 8001982:	68bb      	ldr	r3, [r7, #8]
 8001984:	2201      	movs	r2, #1
 8001986:	493f      	ldr	r1, [pc, #252]	; (8001a84 <Config_plot_mode+0x33c>)
 8001988:	4618      	mov	r0, r3
 800198a:	f004 fea1 	bl	80066d0 <SSD1306_Puts>
		SSD1306_UpdateScreen();
 800198e:	f004 fd65 	bl	800645c <SSD1306_UpdateScreen>
	}
	//Start the configuration
	HAL_IWDG_Refresh(&hiwdg);
 8001992:	4833      	ldr	r0, [pc, #204]	; (8001a60 <Config_plot_mode+0x318>)
 8001994:	f003 fc4b 	bl	800522e <HAL_IWDG_Refresh>
	switch(CurrentStage)
 8001998:	4b3b      	ldr	r3, [pc, #236]	; (8001a88 <Config_plot_mode+0x340>)
 800199a:	781b      	ldrb	r3, [r3, #0]
 800199c:	3b01      	subs	r3, #1
 800199e:	2b03      	cmp	r3, #3
 80019a0:	f200 81ff 	bhi.w	8001da2 <Config_plot_mode+0x65a>
 80019a4:	a201      	add	r2, pc, #4	; (adr r2, 80019ac <Config_plot_mode+0x264>)
 80019a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019aa:	bf00      	nop
 80019ac:	080019bf 	.word	0x080019bf
 80019b0:	08001d1d 	.word	0x08001d1d
 80019b4:	08001da3 	.word	0x08001da3
 80019b8:	08001da3 	.word	0x08001da3
	{
		case Selecting:
 80019bc:	bf00      	nop
			do
			{
				HAL_IWDG_Refresh(&hiwdg);
 80019be:	4828      	ldr	r0, [pc, #160]	; (8001a60 <Config_plot_mode+0x318>)
 80019c0:	f003 fc35 	bl	800522e <HAL_IWDG_Refresh>
				IDR_Read = (GPIOA -> IDR & ReadMask);
 80019c4:	4b31      	ldr	r3, [pc, #196]	; (8001a8c <Config_plot_mode+0x344>)
 80019c6:	689b      	ldr	r3, [r3, #8]
 80019c8:	b29b      	uxth	r3, r3
 80019ca:	f003 031f 	and.w	r3, r3, #31
 80019ce:	b29a      	uxth	r2, r3
 80019d0:	4b2f      	ldr	r3, [pc, #188]	; (8001a90 <Config_plot_mode+0x348>)
 80019d2:	801a      	strh	r2, [r3, #0]
				if(Past_IDR_Read != IDR_Read)
 80019d4:	4b2e      	ldr	r3, [pc, #184]	; (8001a90 <Config_plot_mode+0x348>)
 80019d6:	881b      	ldrh	r3, [r3, #0]
 80019d8:	461a      	mov	r2, r3
 80019da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80019dc:	4293      	cmp	r3, r2
 80019de:	f000 817d 	beq.w	8001cdc <Config_plot_mode+0x594>
				{
					switch(IDR_Read)
 80019e2:	4b2b      	ldr	r3, [pc, #172]	; (8001a90 <Config_plot_mode+0x348>)
 80019e4:	881b      	ldrh	r3, [r3, #0]
 80019e6:	3b0f      	subs	r3, #15
 80019e8:	2b0f      	cmp	r3, #15
 80019ea:	f200 8089 	bhi.w	8001b00 <Config_plot_mode+0x3b8>
 80019ee:	a201      	add	r2, pc, #4	; (adr r2, 80019f4 <Config_plot_mode+0x2ac>)
 80019f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019f4:	08001ac5 	.word	0x08001ac5
 80019f8:	08001b01 	.word	0x08001b01
 80019fc:	08001b01 	.word	0x08001b01
 8001a00:	08001b01 	.word	0x08001b01
 8001a04:	08001b01 	.word	0x08001b01
 8001a08:	08001b01 	.word	0x08001b01
 8001a0c:	08001b01 	.word	0x08001b01
 8001a10:	08001b01 	.word	0x08001b01
 8001a14:	08001b01 	.word	0x08001b01
 8001a18:	08001b01 	.word	0x08001b01
 8001a1c:	08001b01 	.word	0x08001b01
 8001a20:	08001b01 	.word	0x08001b01
 8001a24:	08001ae3 	.word	0x08001ae3
 8001a28:	08001b01 	.word	0x08001b01
 8001a2c:	08001aa1 	.word	0x08001aa1
 8001a30:	08001a35 	.word	0x08001a35
					{
						case Up:
							Cursor--;
 8001a34:	4b17      	ldr	r3, [pc, #92]	; (8001a94 <Config_plot_mode+0x34c>)
 8001a36:	781b      	ldrb	r3, [r3, #0]
 8001a38:	3b01      	subs	r3, #1
 8001a3a:	b2da      	uxtb	r2, r3
 8001a3c:	4b15      	ldr	r3, [pc, #84]	; (8001a94 <Config_plot_mode+0x34c>)
 8001a3e:	701a      	strb	r2, [r3, #0]
							if(Cursor < Resolution)
 8001a40:	4b14      	ldr	r3, [pc, #80]	; (8001a94 <Config_plot_mode+0x34c>)
 8001a42:	781b      	ldrb	r3, [r3, #0]
 8001a44:	2b01      	cmp	r3, #1
 8001a46:	d827      	bhi.n	8001a98 <Config_plot_mode+0x350>
								Cursor = Resolution;
 8001a48:	4b12      	ldr	r3, [pc, #72]	; (8001a94 <Config_plot_mode+0x34c>)
 8001a4a:	2202      	movs	r2, #2
 8001a4c:	701a      	strb	r2, [r3, #0]
							else
								CursorMoved = true;
						break;
 8001a4e:	e058      	b.n	8001b02 <Config_plot_mode+0x3ba>
 8001a50:	080079b4 	.word	0x080079b4
 8001a54:	080079b8 	.word	0x080079b8
 8001a58:	080079c4 	.word	0x080079c4
 8001a5c:	080079d0 	.word	0x080079d0
 8001a60:	20000218 	.word	0x20000218
 8001a64:	2000022c 	.word	0x2000022c
 8001a68:	20000242 	.word	0x20000242
 8001a6c:	20000028 	.word	0x20000028
 8001a70:	20000030 	.word	0x20000030
 8001a74:	20000050 	.word	0x20000050
 8001a78:	08007984 	.word	0x08007984
 8001a7c:	08007950 	.word	0x08007950
 8001a80:	0800799c 	.word	0x0800799c
 8001a84:	20000048 	.word	0x20000048
 8001a88:	20000038 	.word	0x20000038
 8001a8c:	40010800 	.word	0x40010800
 8001a90:	20000240 	.word	0x20000240
 8001a94:	20000039 	.word	0x20000039
								CursorMoved = true;
 8001a98:	4b99      	ldr	r3, [pc, #612]	; (8001d00 <Config_plot_mode+0x5b8>)
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	701a      	strb	r2, [r3, #0]
						break;
 8001a9e:	e030      	b.n	8001b02 <Config_plot_mode+0x3ba>
						case Down:
							Cursor++;
 8001aa0:	4b98      	ldr	r3, [pc, #608]	; (8001d04 <Config_plot_mode+0x5bc>)
 8001aa2:	781b      	ldrb	r3, [r3, #0]
 8001aa4:	3301      	adds	r3, #1
 8001aa6:	b2da      	uxtb	r2, r3
 8001aa8:	4b96      	ldr	r3, [pc, #600]	; (8001d04 <Config_plot_mode+0x5bc>)
 8001aaa:	701a      	strb	r2, [r3, #0]
							if(Cursor > Graphic)
 8001aac:	4b95      	ldr	r3, [pc, #596]	; (8001d04 <Config_plot_mode+0x5bc>)
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	2b04      	cmp	r3, #4
 8001ab2:	d903      	bls.n	8001abc <Config_plot_mode+0x374>
								Cursor = Graphic;
 8001ab4:	4b93      	ldr	r3, [pc, #588]	; (8001d04 <Config_plot_mode+0x5bc>)
 8001ab6:	2204      	movs	r2, #4
 8001ab8:	701a      	strb	r2, [r3, #0]
							else
								CursorMoved = true;
						break;
 8001aba:	e022      	b.n	8001b02 <Config_plot_mode+0x3ba>
								CursorMoved = true;
 8001abc:	4b90      	ldr	r3, [pc, #576]	; (8001d00 <Config_plot_mode+0x5b8>)
 8001abe:	2201      	movs	r2, #1
 8001ac0:	701a      	strb	r2, [r3, #0]
						break;
 8001ac2:	e01e      	b.n	8001b02 <Config_plot_mode+0x3ba>
						case Ok:
							CurrentStage = Cursor;
 8001ac4:	4b8f      	ldr	r3, [pc, #572]	; (8001d04 <Config_plot_mode+0x5bc>)
 8001ac6:	781a      	ldrb	r2, [r3, #0]
 8001ac8:	4b8f      	ldr	r3, [pc, #572]	; (8001d08 <Config_plot_mode+0x5c0>)
 8001aca:	701a      	strb	r2, [r3, #0]
							if(Cursor == Graphic)
 8001acc:	4b8d      	ldr	r3, [pc, #564]	; (8001d04 <Config_plot_mode+0x5bc>)
 8001ace:	781b      	ldrb	r3, [r3, #0]
 8001ad0:	2b04      	cmp	r3, #4
 8001ad2:	d102      	bne.n	8001ada <Config_plot_mode+0x392>
								EnteredGraphic = true;
 8001ad4:	4b8d      	ldr	r3, [pc, #564]	; (8001d0c <Config_plot_mode+0x5c4>)
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	701a      	strb	r2, [r3, #0]
							NotReady = false;
 8001ada:	2300      	movs	r3, #0
 8001adc:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
							if(Cursor == Graphic)
							{
							}
								//@TODO Select animation
						break;
 8001ae0:	e00f      	b.n	8001b02 <Config_plot_mode+0x3ba>
						case Right:
							CurrentStage = Cursor;
 8001ae2:	4b88      	ldr	r3, [pc, #544]	; (8001d04 <Config_plot_mode+0x5bc>)
 8001ae4:	781a      	ldrb	r2, [r3, #0]
 8001ae6:	4b88      	ldr	r3, [pc, #544]	; (8001d08 <Config_plot_mode+0x5c0>)
 8001ae8:	701a      	strb	r2, [r3, #0]
							if(Cursor == Graphic)
 8001aea:	4b86      	ldr	r3, [pc, #536]	; (8001d04 <Config_plot_mode+0x5bc>)
 8001aec:	781b      	ldrb	r3, [r3, #0]
 8001aee:	2b04      	cmp	r3, #4
 8001af0:	d102      	bne.n	8001af8 <Config_plot_mode+0x3b0>
								EnteredGraphic = true;
 8001af2:	4b86      	ldr	r3, [pc, #536]	; (8001d0c <Config_plot_mode+0x5c4>)
 8001af4:	2201      	movs	r2, #1
 8001af6:	701a      	strb	r2, [r3, #0]
							NotReady = false;
 8001af8:	2300      	movs	r3, #0
 8001afa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
							if(Cursor == Graphic)
							{

							}
						break;
 8001afe:	e000      	b.n	8001b02 <Config_plot_mode+0x3ba>
						default:
						break;
 8001b00:	bf00      	nop
					}
					//Printing cursor
					switch(Cursor)
 8001b02:	4b80      	ldr	r3, [pc, #512]	; (8001d04 <Config_plot_mode+0x5bc>)
 8001b04:	781b      	ldrb	r3, [r3, #0]
 8001b06:	2b04      	cmp	r3, #4
 8001b08:	f000 80a4 	beq.w	8001c54 <Config_plot_mode+0x50c>
 8001b0c:	2b04      	cmp	r3, #4
 8001b0e:	f300 80de 	bgt.w	8001cce <Config_plot_mode+0x586>
 8001b12:	2b02      	cmp	r3, #2
 8001b14:	d002      	beq.n	8001b1c <Config_plot_mode+0x3d4>
 8001b16:	2b03      	cmp	r3, #3
 8001b18:	d03d      	beq.n	8001b96 <Config_plot_mode+0x44e>

							else //Draw rectangle
								SSD1306_DrawRectangle(XOffset - 2, GraphicY - 1, (NumberOfCharsUsed((char *) GeneralBuffers.GraphicPrint, false) * 7) + 1, 11, 1);
						break;
						default:
						break;
 8001b1a:	e0d8      	b.n	8001cce <Config_plot_mode+0x586>
							if(CursorMoved)
 8001b1c:	4b78      	ldr	r3, [pc, #480]	; (8001d00 <Config_plot_mode+0x5b8>)
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d01d      	beq.n	8001b60 <Config_plot_mode+0x418>
								SSD1306_DrawRectangle(XOffset - 2, SampleY - 1, (NumberOfCharsUsed((char *) GeneralBuffers.SamplePrint, false) * 7) + 1, 11, 0);
 8001b24:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8001b26:	3b02      	subs	r3, #2
 8001b28:	b29c      	uxth	r4, r3
 8001b2a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001b2c:	3b01      	subs	r3, #1
 8001b2e:	b29d      	uxth	r5, r3
 8001b30:	1d3b      	adds	r3, r7, #4
 8001b32:	3315      	adds	r3, #21
 8001b34:	2100      	movs	r1, #0
 8001b36:	4618      	mov	r0, r3
 8001b38:	f000 fd58 	bl	80025ec <NumberOfCharsUsed>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	461a      	mov	r2, r3
 8001b40:	00d2      	lsls	r2, r2, #3
 8001b42:	1ad3      	subs	r3, r2, r3
 8001b44:	b29b      	uxth	r3, r3
 8001b46:	3301      	adds	r3, #1
 8001b48:	b29a      	uxth	r2, r3
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	9300      	str	r3, [sp, #0]
 8001b4e:	230b      	movs	r3, #11
 8001b50:	4629      	mov	r1, r5
 8001b52:	4620      	mov	r0, r4
 8001b54:	f004 fedc 	bl	8006910 <SSD1306_DrawRectangle>
								CursorMoved = false;
 8001b58:	4b69      	ldr	r3, [pc, #420]	; (8001d00 <Config_plot_mode+0x5b8>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	701a      	strb	r2, [r3, #0]
						break;
 8001b5e:	e0b7      	b.n	8001cd0 <Config_plot_mode+0x588>
								SSD1306_DrawRectangle(XOffset - 2, ResY - 3, (NumberOfCharsUsed((char *) GeneralBuffers.ResolutionPrint, false) * 7) + 3, 13, 1);
 8001b60:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8001b62:	3b02      	subs	r3, #2
 8001b64:	b29c      	uxth	r4, r3
 8001b66:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001b68:	3b03      	subs	r3, #3
 8001b6a:	b29d      	uxth	r5, r3
 8001b6c:	1d3b      	adds	r3, r7, #4
 8001b6e:	330b      	adds	r3, #11
 8001b70:	2100      	movs	r1, #0
 8001b72:	4618      	mov	r0, r3
 8001b74:	f000 fd3a 	bl	80025ec <NumberOfCharsUsed>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	461a      	mov	r2, r3
 8001b7c:	00d2      	lsls	r2, r2, #3
 8001b7e:	1ad3      	subs	r3, r2, r3
 8001b80:	b29b      	uxth	r3, r3
 8001b82:	3303      	adds	r3, #3
 8001b84:	b29a      	uxth	r2, r3
 8001b86:	2301      	movs	r3, #1
 8001b88:	9300      	str	r3, [sp, #0]
 8001b8a:	230d      	movs	r3, #13
 8001b8c:	4629      	mov	r1, r5
 8001b8e:	4620      	mov	r0, r4
 8001b90:	f004 febe 	bl	8006910 <SSD1306_DrawRectangle>
						break;
 8001b94:	e09c      	b.n	8001cd0 <Config_plot_mode+0x588>
							if(CursorMoved)
 8001b96:	4b5a      	ldr	r3, [pc, #360]	; (8001d00 <Config_plot_mode+0x5b8>)
 8001b98:	781b      	ldrb	r3, [r3, #0]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d03f      	beq.n	8001c1e <Config_plot_mode+0x4d6>
								switch(IDR_Read)
 8001b9e:	4b5c      	ldr	r3, [pc, #368]	; (8001d10 <Config_plot_mode+0x5c8>)
 8001ba0:	881b      	ldrh	r3, [r3, #0]
 8001ba2:	2b1d      	cmp	r3, #29
 8001ba4:	d01c      	beq.n	8001be0 <Config_plot_mode+0x498>
 8001ba6:	2b1e      	cmp	r3, #30
 8001ba8:	d135      	bne.n	8001c16 <Config_plot_mode+0x4ce>
										SSD1306_DrawRectangle(XOffset - 2, GraphicY - 1, (NumberOfCharsUsed((char *) GeneralBuffers.GraphicPrint, false) * 7) + 1, 11, 0);
 8001baa:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8001bac:	3b02      	subs	r3, #2
 8001bae:	b29c      	uxth	r4, r3
 8001bb0:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8001bb2:	3b01      	subs	r3, #1
 8001bb4:	b29d      	uxth	r5, r3
 8001bb6:	1d3b      	adds	r3, r7, #4
 8001bb8:	331f      	adds	r3, #31
 8001bba:	2100      	movs	r1, #0
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f000 fd15 	bl	80025ec <NumberOfCharsUsed>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	461a      	mov	r2, r3
 8001bc6:	00d2      	lsls	r2, r2, #3
 8001bc8:	1ad3      	subs	r3, r2, r3
 8001bca:	b29b      	uxth	r3, r3
 8001bcc:	3301      	adds	r3, #1
 8001bce:	b29a      	uxth	r2, r3
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	9300      	str	r3, [sp, #0]
 8001bd4:	230b      	movs	r3, #11
 8001bd6:	4629      	mov	r1, r5
 8001bd8:	4620      	mov	r0, r4
 8001bda:	f004 fe99 	bl	8006910 <SSD1306_DrawRectangle>
									break;
 8001bde:	e01a      	b.n	8001c16 <Config_plot_mode+0x4ce>
										SSD1306_DrawRectangle(XOffset - 2, ResY - 3, (NumberOfCharsUsed((char *) GeneralBuffers.ResolutionPrint, false) * 7) + 3, 13, 0);
 8001be0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8001be2:	3b02      	subs	r3, #2
 8001be4:	b29c      	uxth	r4, r3
 8001be6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001be8:	3b03      	subs	r3, #3
 8001bea:	b29d      	uxth	r5, r3
 8001bec:	1d3b      	adds	r3, r7, #4
 8001bee:	330b      	adds	r3, #11
 8001bf0:	2100      	movs	r1, #0
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f000 fcfa 	bl	80025ec <NumberOfCharsUsed>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	461a      	mov	r2, r3
 8001bfc:	00d2      	lsls	r2, r2, #3
 8001bfe:	1ad3      	subs	r3, r2, r3
 8001c00:	b29b      	uxth	r3, r3
 8001c02:	3303      	adds	r3, #3
 8001c04:	b29a      	uxth	r2, r3
 8001c06:	2300      	movs	r3, #0
 8001c08:	9300      	str	r3, [sp, #0]
 8001c0a:	230d      	movs	r3, #13
 8001c0c:	4629      	mov	r1, r5
 8001c0e:	4620      	mov	r0, r4
 8001c10:	f004 fe7e 	bl	8006910 <SSD1306_DrawRectangle>
									break;
 8001c14:	bf00      	nop
								CursorMoved = false;
 8001c16:	4b3a      	ldr	r3, [pc, #232]	; (8001d00 <Config_plot_mode+0x5b8>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	701a      	strb	r2, [r3, #0]
						break;
 8001c1c:	e058      	b.n	8001cd0 <Config_plot_mode+0x588>
								SSD1306_DrawRectangle(XOffset - 2, SampleY - 1, (NumberOfCharsUsed((char *) GeneralBuffers.SamplePrint, false) * 7) + 1, 11, 1);
 8001c1e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8001c20:	3b02      	subs	r3, #2
 8001c22:	b29c      	uxth	r4, r3
 8001c24:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001c26:	3b01      	subs	r3, #1
 8001c28:	b29d      	uxth	r5, r3
 8001c2a:	1d3b      	adds	r3, r7, #4
 8001c2c:	3315      	adds	r3, #21
 8001c2e:	2100      	movs	r1, #0
 8001c30:	4618      	mov	r0, r3
 8001c32:	f000 fcdb 	bl	80025ec <NumberOfCharsUsed>
 8001c36:	4603      	mov	r3, r0
 8001c38:	461a      	mov	r2, r3
 8001c3a:	00d2      	lsls	r2, r2, #3
 8001c3c:	1ad3      	subs	r3, r2, r3
 8001c3e:	b29b      	uxth	r3, r3
 8001c40:	3301      	adds	r3, #1
 8001c42:	b29a      	uxth	r2, r3
 8001c44:	2301      	movs	r3, #1
 8001c46:	9300      	str	r3, [sp, #0]
 8001c48:	230b      	movs	r3, #11
 8001c4a:	4629      	mov	r1, r5
 8001c4c:	4620      	mov	r0, r4
 8001c4e:	f004 fe5f 	bl	8006910 <SSD1306_DrawRectangle>
						break;
 8001c52:	e03d      	b.n	8001cd0 <Config_plot_mode+0x588>
							if(CursorMoved)
 8001c54:	4b2a      	ldr	r3, [pc, #168]	; (8001d00 <Config_plot_mode+0x5b8>)
 8001c56:	781b      	ldrb	r3, [r3, #0]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d01d      	beq.n	8001c98 <Config_plot_mode+0x550>
								SSD1306_DrawRectangle(XOffset - 2, SampleY - 1, (NumberOfCharsUsed((char *) GeneralBuffers.SamplePrint, false) * 7) + 1, 11, 0);
 8001c5c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8001c5e:	3b02      	subs	r3, #2
 8001c60:	b29c      	uxth	r4, r3
 8001c62:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001c64:	3b01      	subs	r3, #1
 8001c66:	b29d      	uxth	r5, r3
 8001c68:	1d3b      	adds	r3, r7, #4
 8001c6a:	3315      	adds	r3, #21
 8001c6c:	2100      	movs	r1, #0
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f000 fcbc 	bl	80025ec <NumberOfCharsUsed>
 8001c74:	4603      	mov	r3, r0
 8001c76:	461a      	mov	r2, r3
 8001c78:	00d2      	lsls	r2, r2, #3
 8001c7a:	1ad3      	subs	r3, r2, r3
 8001c7c:	b29b      	uxth	r3, r3
 8001c7e:	3301      	adds	r3, #1
 8001c80:	b29a      	uxth	r2, r3
 8001c82:	2300      	movs	r3, #0
 8001c84:	9300      	str	r3, [sp, #0]
 8001c86:	230b      	movs	r3, #11
 8001c88:	4629      	mov	r1, r5
 8001c8a:	4620      	mov	r0, r4
 8001c8c:	f004 fe40 	bl	8006910 <SSD1306_DrawRectangle>
								CursorMoved = false;
 8001c90:	4b1b      	ldr	r3, [pc, #108]	; (8001d00 <Config_plot_mode+0x5b8>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	701a      	strb	r2, [r3, #0]
						break;
 8001c96:	e01b      	b.n	8001cd0 <Config_plot_mode+0x588>
								SSD1306_DrawRectangle(XOffset - 2, GraphicY - 1, (NumberOfCharsUsed((char *) GeneralBuffers.GraphicPrint, false) * 7) + 1, 11, 1);
 8001c98:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8001c9a:	3b02      	subs	r3, #2
 8001c9c:	b29c      	uxth	r4, r3
 8001c9e:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8001ca0:	3b01      	subs	r3, #1
 8001ca2:	b29d      	uxth	r5, r3
 8001ca4:	1d3b      	adds	r3, r7, #4
 8001ca6:	331f      	adds	r3, #31
 8001ca8:	2100      	movs	r1, #0
 8001caa:	4618      	mov	r0, r3
 8001cac:	f000 fc9e 	bl	80025ec <NumberOfCharsUsed>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	461a      	mov	r2, r3
 8001cb4:	00d2      	lsls	r2, r2, #3
 8001cb6:	1ad3      	subs	r3, r2, r3
 8001cb8:	b29b      	uxth	r3, r3
 8001cba:	3301      	adds	r3, #1
 8001cbc:	b29a      	uxth	r2, r3
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	9300      	str	r3, [sp, #0]
 8001cc2:	230b      	movs	r3, #11
 8001cc4:	4629      	mov	r1, r5
 8001cc6:	4620      	mov	r0, r4
 8001cc8:	f004 fe22 	bl	8006910 <SSD1306_DrawRectangle>
						break;
 8001ccc:	e000      	b.n	8001cd0 <Config_plot_mode+0x588>
						break;
 8001cce:	bf00      	nop
					}
					SSD1306_UpdateScreen();
 8001cd0:	f004 fbc4 	bl	800645c <SSD1306_UpdateScreen>
					Timer_Delay_50ms(1);
 8001cd4:	2001      	movs	r0, #1
 8001cd6:	f000 fb78 	bl	80023ca <Timer_Delay_50ms>
 8001cda:	e002      	b.n	8001ce2 <Config_plot_mode+0x59a>
				}
				else
					HAL_IWDG_Refresh(&hiwdg);
 8001cdc:	480d      	ldr	r0, [pc, #52]	; (8001d14 <Config_plot_mode+0x5cc>)
 8001cde:	f003 faa6 	bl	800522e <HAL_IWDG_Refresh>
				Past_IDR_Read = IDR_Read;
 8001ce2:	4b0b      	ldr	r3, [pc, #44]	; (8001d10 <Config_plot_mode+0x5c8>)
 8001ce4:	881b      	ldrh	r3, [r3, #0]
 8001ce6:	63fb      	str	r3, [r7, #60]	; 0x3c
			}while(NotReady && ISR == None);
 8001ce8:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d05a      	beq.n	8001da6 <Config_plot_mode+0x65e>
 8001cf0:	4b09      	ldr	r3, [pc, #36]	; (8001d18 <Config_plot_mode+0x5d0>)
 8001cf2:	781b      	ldrb	r3, [r3, #0]
 8001cf4:	b2db      	uxtb	r3, r3
 8001cf6:	2b02      	cmp	r3, #2
 8001cf8:	f43f ae60 	beq.w	80019bc <Config_plot_mode+0x274>
		break;
 8001cfc:	e053      	b.n	8001da6 <Config_plot_mode+0x65e>
 8001cfe:	bf00      	nop
 8001d00:	20000244 	.word	0x20000244
 8001d04:	20000039 	.word	0x20000039
 8001d08:	20000038 	.word	0x20000038
 8001d0c:	20000245 	.word	0x20000245
 8001d10:	20000240 	.word	0x20000240
 8001d14:	20000218 	.word	0x20000218
 8001d18:	20000225 	.word	0x20000225
		case Resolution:
			//Erase Resolution
			SSD1306_DrawRectangle(XOffset - 2, ResY - 3, (NumberOfCharsUsed((char *) GeneralBuffers.ResolutionPrint, false) * 7) + 3, 13, 0);
 8001d1c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8001d1e:	3b02      	subs	r3, #2
 8001d20:	b29c      	uxth	r4, r3
 8001d22:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001d24:	3b03      	subs	r3, #3
 8001d26:	b29d      	uxth	r5, r3
 8001d28:	1d3b      	adds	r3, r7, #4
 8001d2a:	330b      	adds	r3, #11
 8001d2c:	2100      	movs	r1, #0
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f000 fc5c 	bl	80025ec <NumberOfCharsUsed>
 8001d34:	4603      	mov	r3, r0
 8001d36:	461a      	mov	r2, r3
 8001d38:	00d2      	lsls	r2, r2, #3
 8001d3a:	1ad3      	subs	r3, r2, r3
 8001d3c:	b29b      	uxth	r3, r3
 8001d3e:	3303      	adds	r3, #3
 8001d40:	b29a      	uxth	r2, r3
 8001d42:	2300      	movs	r3, #0
 8001d44:	9300      	str	r3, [sp, #0]
 8001d46:	230d      	movs	r3, #13
 8001d48:	4629      	mov	r1, r5
 8001d4a:	4620      	mov	r0, r4
 8001d4c:	f004 fde0 	bl	8006910 <SSD1306_DrawRectangle>
			//Draw cursor on the number
			SSD1306_DrawRectangle(XOffset + (NumberOfCharsUsed((char *) GeneralBuffers.ResolutionPrint, false) * 7) - 2, ResY - 3, (NumberOfCharsUsed((char *) GeneralBuffers.ResBuffer, false) * 7) + 3, 13, 1);
 8001d50:	1d3b      	adds	r3, r7, #4
 8001d52:	330b      	adds	r3, #11
 8001d54:	2100      	movs	r1, #0
 8001d56:	4618      	mov	r0, r3
 8001d58:	f000 fc48 	bl	80025ec <NumberOfCharsUsed>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	461a      	mov	r2, r3
 8001d60:	00d2      	lsls	r2, r2, #3
 8001d62:	1ad3      	subs	r3, r2, r3
 8001d64:	b29a      	uxth	r2, r3
 8001d66:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8001d68:	4413      	add	r3, r2
 8001d6a:	b29b      	uxth	r3, r3
 8001d6c:	3b02      	subs	r3, #2
 8001d6e:	b29c      	uxth	r4, r3
 8001d70:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001d72:	3b03      	subs	r3, #3
 8001d74:	b29d      	uxth	r5, r3
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2100      	movs	r1, #0
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f000 fc36 	bl	80025ec <NumberOfCharsUsed>
 8001d80:	4603      	mov	r3, r0
 8001d82:	461a      	mov	r2, r3
 8001d84:	00d2      	lsls	r2, r2, #3
 8001d86:	1ad3      	subs	r3, r2, r3
 8001d88:	b29b      	uxth	r3, r3
 8001d8a:	3303      	adds	r3, #3
 8001d8c:	b29a      	uxth	r2, r3
 8001d8e:	2301      	movs	r3, #1
 8001d90:	9300      	str	r3, [sp, #0]
 8001d92:	230d      	movs	r3, #13
 8001d94:	4629      	mov	r1, r5
 8001d96:	4620      	mov	r0, r4
 8001d98:	f004 fdba 	bl	8006910 <SSD1306_DrawRectangle>
			SSD1306_UpdateScreen();
 8001d9c:	f004 fb5e 	bl	800645c <SSD1306_UpdateScreen>
		break;
 8001da0:	e002      	b.n	8001da8 <Config_plot_mode+0x660>
		case SampleTime:
		break;
		case Graphic:
		break;
		default:
		break;
 8001da2:	bf00      	nop
 8001da4:	e000      	b.n	8001da8 <Config_plot_mode+0x660>
		break;
 8001da6:	bf00      	nop
	}
	Configs.Last_Mode = Config_Plot;
 8001da8:	4b0a      	ldr	r3, [pc, #40]	; (8001dd4 <Config_plot_mode+0x68c>)
 8001daa:	2203      	movs	r2, #3
 8001dac:	709a      	strb	r2, [r3, #2]
	comeFromMenu = false;
 8001dae:	4b0a      	ldr	r3, [pc, #40]	; (8001dd8 <Config_plot_mode+0x690>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	701a      	strb	r2, [r3, #0]
	if(ISR == Menu)
 8001db4:	4b09      	ldr	r3, [pc, #36]	; (8001ddc <Config_plot_mode+0x694>)
 8001db6:	781b      	ldrb	r3, [r3, #0]
 8001db8:	b2db      	uxtb	r3, r3
 8001dba:	2b01      	cmp	r3, #1
 8001dbc:	d107      	bne.n	8001dce <Config_plot_mode+0x686>
	{
		free(GeneralBuffers.ResBuffer);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f005 f8f9 	bl	8006fb8 <free>
		free(GeneralBuffers.SampleBuffer);
 8001dc6:	68bb      	ldr	r3, [r7, #8]
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f005 f8f5 	bl	8006fb8 <free>
	}
}
 8001dce:	3740      	adds	r7, #64	; 0x40
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bdb0      	pop	{r4, r5, r7, pc}
 8001dd4:	2000022c 	.word	0x2000022c
 8001dd8:	20000242 	.word	0x20000242
 8001ddc:	20000225 	.word	0x20000225

08001de0 <Reset_sensor_mode>:
}
//Configuration plot functions

//@TODO check error reset sensor mode
void Reset_sensor_mode(void)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	af00      	add	r7, sp, #0

	SSD1306_Clear();
 8001de4:	f004 fec0 	bl	8006b68 <SSD1306_Clear>
	HAL_IWDG_Refresh(&hiwdg);
 8001de8:	4825      	ldr	r0, [pc, #148]	; (8001e80 <Reset_sensor_mode+0xa0>)
 8001dea:	f003 fa20 	bl	800522e <HAL_IWDG_Refresh>
	switch(Sensor)
 8001dee:	4b25      	ldr	r3, [pc, #148]	; (8001e84 <Reset_sensor_mode+0xa4>)
 8001df0:	781b      	ldrb	r3, [r3, #0]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d001      	beq.n	8001dfa <Reset_sensor_mode+0x1a>
 8001df6:	2b01      	cmp	r3, #1
		case _BH1750:
			if(BH1750_ReCalibrate(&BH1750) != Rojo_OK)
				Fatal_Error_BH1750();
		break;
		case _TSL2561:
		break;
 8001df8:	e008      	b.n	8001e0c <Reset_sensor_mode+0x2c>
			if(BH1750_ReCalibrate(&BH1750) != Rojo_OK)
 8001dfa:	4823      	ldr	r0, [pc, #140]	; (8001e88 <Reset_sensor_mode+0xa8>)
 8001dfc:	f005 f87c 	bl	8006ef8 <BH1750_ReCalibrate>
 8001e00:	4603      	mov	r3, r0
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d001      	beq.n	8001e0a <Reset_sensor_mode+0x2a>
				Fatal_Error_BH1750();
 8001e06:	f000 f9c1 	bl	800218c <Fatal_Error_BH1750>
		break;
 8001e0a:	bf00      	nop
	}
	SSD1306_GotoXY(29, 5);
 8001e0c:	2105      	movs	r1, #5
 8001e0e:	201d      	movs	r0, #29
 8001e10:	f004 fbc8 	bl	80065a4 <SSD1306_GotoXY>
	SSD1306_Puts("The sensor", &Font_7x10, 1);
 8001e14:	2201      	movs	r2, #1
 8001e16:	491d      	ldr	r1, [pc, #116]	; (8001e8c <Reset_sensor_mode+0xac>)
 8001e18:	481d      	ldr	r0, [pc, #116]	; (8001e90 <Reset_sensor_mode+0xb0>)
 8001e1a:	f004 fc59 	bl	80066d0 <SSD1306_Puts>
	SSD1306_GotoXY(8, 17);
 8001e1e:	2111      	movs	r1, #17
 8001e20:	2008      	movs	r0, #8
 8001e22:	f004 fbbf 	bl	80065a4 <SSD1306_GotoXY>
	SSD1306_Puts("has been reseted", &Font_7x10, 1);
 8001e26:	2201      	movs	r2, #1
 8001e28:	4918      	ldr	r1, [pc, #96]	; (8001e8c <Reset_sensor_mode+0xac>)
 8001e2a:	481a      	ldr	r0, [pc, #104]	; (8001e94 <Reset_sensor_mode+0xb4>)
 8001e2c:	f004 fc50 	bl	80066d0 <SSD1306_Puts>
	SSD1306_GotoXY(36, 29);
 8001e30:	211d      	movs	r1, #29
 8001e32:	2024      	movs	r0, #36	; 0x24
 8001e34:	f004 fbb6 	bl	80065a4 <SSD1306_GotoXY>
	SSD1306_Puts("Press OK", &Font_7x10, 1);
 8001e38:	2201      	movs	r2, #1
 8001e3a:	4914      	ldr	r1, [pc, #80]	; (8001e8c <Reset_sensor_mode+0xac>)
 8001e3c:	4816      	ldr	r0, [pc, #88]	; (8001e98 <Reset_sensor_mode+0xb8>)
 8001e3e:	f004 fc47 	bl	80066d0 <SSD1306_Puts>
	SSD1306_GotoXY(25, 41);
 8001e42:	2129      	movs	r1, #41	; 0x29
 8001e44:	2019      	movs	r0, #25
 8001e46:	f004 fbad 	bl	80065a4 <SSD1306_GotoXY>
	SSD1306_Puts("to continue", &Font_7x10, 1);
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	490f      	ldr	r1, [pc, #60]	; (8001e8c <Reset_sensor_mode+0xac>)
 8001e4e:	4813      	ldr	r0, [pc, #76]	; (8001e9c <Reset_sensor_mode+0xbc>)
 8001e50:	f004 fc3e 	bl	80066d0 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 8001e54:	f004 fb02 	bl	800645c <SSD1306_UpdateScreen>
	wait_until_press(Ok);
 8001e58:	200f      	movs	r0, #15
 8001e5a:	f000 fa7f 	bl	800235c <wait_until_press>
	if(Configs.Last_Mode == Reset_Sensor)
 8001e5e:	4b10      	ldr	r3, [pc, #64]	; (8001ea0 <Reset_sensor_mode+0xc0>)
 8001e60:	789b      	ldrb	r3, [r3, #2]
 8001e62:	2b05      	cmp	r3, #5
 8001e64:	d102      	bne.n	8001e6c <Reset_sensor_mode+0x8c>
		Configs.Last_Mode = Continuous;
 8001e66:	4b0e      	ldr	r3, [pc, #56]	; (8001ea0 <Reset_sensor_mode+0xc0>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	709a      	strb	r2, [r3, #2]
	Configs.Mode = Configs.Last_Mode;
 8001e6c:	4b0c      	ldr	r3, [pc, #48]	; (8001ea0 <Reset_sensor_mode+0xc0>)
 8001e6e:	789a      	ldrb	r2, [r3, #2]
 8001e70:	4b0b      	ldr	r3, [pc, #44]	; (8001ea0 <Reset_sensor_mode+0xc0>)
 8001e72:	705a      	strb	r2, [r3, #1]
	Configs.Last_Mode = Reset_Sensor;
 8001e74:	4b0a      	ldr	r3, [pc, #40]	; (8001ea0 <Reset_sensor_mode+0xc0>)
 8001e76:	2205      	movs	r2, #5
 8001e78:	709a      	strb	r2, [r3, #2]
}
 8001e7a:	bf00      	nop
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	20000218 	.word	0x20000218
 8001e84:	20000224 	.word	0x20000224
 8001e88:	20000234 	.word	0x20000234
 8001e8c:	20000048 	.word	0x20000048
 8001e90:	080079dc 	.word	0x080079dc
 8001e94:	080079e8 	.word	0x080079e8
 8001e98:	08007954 	.word	0x08007954
 8001e9c:	080079fc 	.word	0x080079fc
 8001ea0:	2000022c 	.word	0x2000022c

08001ea4 <MenuGUI>:
//@TODO All select diode sensor mode
void Select_diode_mode(void);


void MenuGUI(void)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b088      	sub	sp, #32
 8001ea8:	af04      	add	r7, sp, #16
	bool Not_Filled = true;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	73fb      	strb	r3, [r7, #15]
	int16_t Mode_Displayed = Continuous;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	807b      	strh	r3, [r7, #2]
	uint32_t Past_IDR_Read = 0xFF;
 8001eb2:	23ff      	movs	r3, #255	; 0xff
 8001eb4:	60bb      	str	r3, [r7, #8]
	const uint16_t animation_counts = 4;
 8001eb6:	2304      	movs	r3, #4
 8001eb8:	80bb      	strh	r3, [r7, #4]

	Timer_Delay_250ms(1);
 8001eba:	2001      	movs	r0, #1
 8001ebc:	f000 fa76 	bl	80023ac <Timer_Delay_250ms>
	SSD1306_Clear();
 8001ec0:	f004 fe52 	bl	8006b68 <SSD1306_Clear>
	SSD1306_GotoXY(31, 5);
 8001ec4:	2105      	movs	r1, #5
 8001ec6:	201f      	movs	r0, #31
 8001ec8:	f004 fb6c 	bl	80065a4 <SSD1306_GotoXY>
	SSD1306_Puts("Mode", &Font_16x26, 1);
 8001ecc:	2201      	movs	r2, #1
 8001ece:	4986      	ldr	r1, [pc, #536]	; (80020e8 <MenuGUI+0x244>)
 8001ed0:	4886      	ldr	r0, [pc, #536]	; (80020ec <MenuGUI+0x248>)
 8001ed2:	f004 fbfd 	bl	80066d0 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 8001ed6:	f004 fac1 	bl	800645c <SSD1306_UpdateScreen>
	Mode_Displayed = Configs.Last_Mode;
 8001eda:	4b85      	ldr	r3, [pc, #532]	; (80020f0 <MenuGUI+0x24c>)
 8001edc:	789b      	ldrb	r3, [r3, #2]
 8001ede:	b21b      	sxth	r3, r3
 8001ee0:	807b      	strh	r3, [r7, #2]
	HAL_IWDG_Refresh(&hiwdg);
 8001ee2:	4884      	ldr	r0, [pc, #528]	; (80020f4 <MenuGUI+0x250>)
 8001ee4:	f003 f9a3 	bl	800522e <HAL_IWDG_Refresh>
	do
	{
		HAL_IWDG_Refresh(&hiwdg);
 8001ee8:	4882      	ldr	r0, [pc, #520]	; (80020f4 <MenuGUI+0x250>)
 8001eea:	f003 f9a0 	bl	800522e <HAL_IWDG_Refresh>
		IDR_Read = (GPIOA -> IDR & ReadMask);
 8001eee:	4b82      	ldr	r3, [pc, #520]	; (80020f8 <MenuGUI+0x254>)
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	b29b      	uxth	r3, r3
 8001ef4:	f003 031f 	and.w	r3, r3, #31
 8001ef8:	b29a      	uxth	r2, r3
 8001efa:	4b80      	ldr	r3, [pc, #512]	; (80020fc <MenuGUI+0x258>)
 8001efc:	801a      	strh	r2, [r3, #0]
		//Displaying the selection
		if(Past_IDR_Read != IDR_Read)
 8001efe:	4b7f      	ldr	r3, [pc, #508]	; (80020fc <MenuGUI+0x258>)
 8001f00:	881b      	ldrh	r3, [r3, #0]
 8001f02:	461a      	mov	r2, r3
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	4293      	cmp	r3, r2
 8001f08:	f000 80d3 	beq.w	80020b2 <MenuGUI+0x20e>
		{
			switch(Mode_Displayed)
 8001f0c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001f10:	2b06      	cmp	r3, #6
 8001f12:	d84a      	bhi.n	8001faa <MenuGUI+0x106>
 8001f14:	a201      	add	r2, pc, #4	; (adr r2, 8001f1c <MenuGUI+0x78>)
 8001f16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f1a:	bf00      	nop
 8001f1c:	08001f39 	.word	0x08001f39
 8001f20:	08001f5f 	.word	0x08001f5f
 8001f24:	08001fab 	.word	0x08001fab
 8001f28:	08001fab 	.word	0x08001fab
 8001f2c:	08001fab 	.word	0x08001fab
 8001f30:	08001f85 	.word	0x08001f85
 8001f34:	08001fab 	.word	0x08001fab
			{
				case Continuous:
					SSD1306_GotoXY(3, 37);
 8001f38:	2125      	movs	r1, #37	; 0x25
 8001f3a:	2003      	movs	r0, #3
 8001f3c:	f004 fb32 	bl	80065a4 <SSD1306_GotoXY>
					SSD1306_Puts("            ", &Font_11x18, 1);
 8001f40:	2201      	movs	r2, #1
 8001f42:	496f      	ldr	r1, [pc, #444]	; (8002100 <MenuGUI+0x25c>)
 8001f44:	486f      	ldr	r0, [pc, #444]	; (8002104 <MenuGUI+0x260>)
 8001f46:	f004 fbc3 	bl	80066d0 <SSD1306_Puts>
					SSD1306_GotoXY(8, 37);
 8001f4a:	2125      	movs	r1, #37	; 0x25
 8001f4c:	2008      	movs	r0, #8
 8001f4e:	f004 fb29 	bl	80065a4 <SSD1306_GotoXY>
					SSD1306_Puts("Continuous", &Font_11x18, 1);
 8001f52:	2201      	movs	r2, #1
 8001f54:	496a      	ldr	r1, [pc, #424]	; (8002100 <MenuGUI+0x25c>)
 8001f56:	486c      	ldr	r0, [pc, #432]	; (8002108 <MenuGUI+0x264>)
 8001f58:	f004 fbba 	bl	80066d0 <SSD1306_Puts>
				break;
 8001f5c:	e025      	b.n	8001faa <MenuGUI+0x106>
				case Hold:
					SSD1306_GotoXY(3, 37);
 8001f5e:	2125      	movs	r1, #37	; 0x25
 8001f60:	2003      	movs	r0, #3
 8001f62:	f004 fb1f 	bl	80065a4 <SSD1306_GotoXY>
					SSD1306_Puts("             ", &Font_11x18, 1);
 8001f66:	2201      	movs	r2, #1
 8001f68:	4965      	ldr	r1, [pc, #404]	; (8002100 <MenuGUI+0x25c>)
 8001f6a:	4868      	ldr	r0, [pc, #416]	; (800210c <MenuGUI+0x268>)
 8001f6c:	f004 fbb0 	bl	80066d0 <SSD1306_Puts>
					SSD1306_GotoXY(41, 37);
 8001f70:	2125      	movs	r1, #37	; 0x25
 8001f72:	2029      	movs	r0, #41	; 0x29
 8001f74:	f004 fb16 	bl	80065a4 <SSD1306_GotoXY>
					SSD1306_Puts("Hold", &Font_11x18, 1);
 8001f78:	2201      	movs	r2, #1
 8001f7a:	4961      	ldr	r1, [pc, #388]	; (8002100 <MenuGUI+0x25c>)
 8001f7c:	4864      	ldr	r0, [pc, #400]	; (8002110 <MenuGUI+0x26c>)
 8001f7e:	f004 fba7 	bl	80066d0 <SSD1306_Puts>
				break;
 8001f82:	e012      	b.n	8001faa <MenuGUI+0x106>
					SSD1306_GotoXY(9, 37);
					SSD1306_Puts("Sel Sensor", &Font_11x18, 1);
				break;
#endif
				case Reset_Sensor:
					SSD1306_GotoXY(3, 37);
 8001f84:	2125      	movs	r1, #37	; 0x25
 8001f86:	2003      	movs	r0, #3
 8001f88:	f004 fb0c 	bl	80065a4 <SSD1306_GotoXY>
					SSD1306_Puts("             ", &Font_11x18, 1);
 8001f8c:	2201      	movs	r2, #1
 8001f8e:	495c      	ldr	r1, [pc, #368]	; (8002100 <MenuGUI+0x25c>)
 8001f90:	485e      	ldr	r0, [pc, #376]	; (800210c <MenuGUI+0x268>)
 8001f92:	f004 fb9d 	bl	80066d0 <SSD1306_Puts>
					SSD1306_GotoXY(3, 37);
 8001f96:	2125      	movs	r1, #37	; 0x25
 8001f98:	2003      	movs	r0, #3
 8001f9a:	f004 fb03 	bl	80065a4 <SSD1306_GotoXY>
					SSD1306_Puts("Reset Sense", &Font_11x18, 1);
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	4957      	ldr	r1, [pc, #348]	; (8002100 <MenuGUI+0x25c>)
 8001fa2:	485c      	ldr	r0, [pc, #368]	; (8002114 <MenuGUI+0x270>)
 8001fa4:	f004 fb94 	bl	80066d0 <SSD1306_Puts>
				break;
 8001fa8:	bf00      	nop
				case Idle:
				break;
			}
			SSD1306_UpdateScreen();
 8001faa:	f004 fa57 	bl	800645c <SSD1306_UpdateScreen>
			HAL_IWDG_Refresh(&hiwdg);
 8001fae:	4851      	ldr	r0, [pc, #324]	; (80020f4 <MenuGUI+0x250>)
 8001fb0:	f003 f93d 	bl	800522e <HAL_IWDG_Refresh>
			//Reading for the selection
			switch(IDR_Read)
 8001fb4:	4b51      	ldr	r3, [pc, #324]	; (80020fc <MenuGUI+0x258>)
 8001fb6:	881b      	ldrh	r3, [r3, #0]
 8001fb8:	2b1b      	cmp	r3, #27
 8001fba:	d006      	beq.n	8001fca <MenuGUI+0x126>
 8001fbc:	2b1b      	cmp	r3, #27
 8001fbe:	dc7f      	bgt.n	80020c0 <MenuGUI+0x21c>
 8001fc0:	2b0f      	cmp	r3, #15
 8001fc2:	d02a      	beq.n	800201a <MenuGUI+0x176>
 8001fc4:	2b17      	cmp	r3, #23
 8001fc6:	d014      	beq.n	8001ff2 <MenuGUI+0x14e>
 8001fc8:	e07a      	b.n	80020c0 <MenuGUI+0x21c>
			{
				case Right:
					Mode_Displayed++;
 8001fca:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001fce:	b29b      	uxth	r3, r3
 8001fd0:	3301      	adds	r3, #1
 8001fd2:	b29b      	uxth	r3, r3
 8001fd4:	b21b      	sxth	r3, r3
 8001fd6:	807b      	strh	r3, [r7, #2]
#ifdef ECONOMIC_VERSION //Disabling the complete version modes
					if(Mode_Displayed == Plot)
 8001fd8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001fdc:	2b02      	cmp	r3, #2
 8001fde:	d101      	bne.n	8001fe4 <MenuGUI+0x140>
						Mode_Displayed = Reset_Sensor;
 8001fe0:	2305      	movs	r3, #5
 8001fe2:	807b      	strh	r3, [r7, #2]
#endif
					if(Mode_Displayed > Reset_Sensor)
 8001fe4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001fe8:	2b05      	cmp	r3, #5
 8001fea:	dd66      	ble.n	80020ba <MenuGUI+0x216>
						Mode_Displayed = Continuous;
 8001fec:	2300      	movs	r3, #0
 8001fee:	807b      	strh	r3, [r7, #2]
				break;
 8001ff0:	e063      	b.n	80020ba <MenuGUI+0x216>
				case Left:
					Mode_Displayed--;
 8001ff2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001ff6:	b29b      	uxth	r3, r3
 8001ff8:	3b01      	subs	r3, #1
 8001ffa:	b29b      	uxth	r3, r3
 8001ffc:	b21b      	sxth	r3, r3
 8001ffe:	807b      	strh	r3, [r7, #2]
#ifdef ECONOMIC_VERSION //Disabling the complete version modes
					if(Mode_Displayed >= Select_Sensor)
 8002000:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002004:	2b03      	cmp	r3, #3
 8002006:	dd01      	ble.n	800200c <MenuGUI+0x168>
						Mode_Displayed = Hold;
 8002008:	2301      	movs	r3, #1
 800200a:	807b      	strh	r3, [r7, #2]
#endif
					if(Mode_Displayed < Continuous)
 800200c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002010:	2b00      	cmp	r3, #0
 8002012:	da54      	bge.n	80020be <MenuGUI+0x21a>
						Mode_Displayed = Reset_Sensor;
 8002014:	2305      	movs	r3, #5
 8002016:	807b      	strh	r3, [r7, #2]
				break;
 8002018:	e051      	b.n	80020be <MenuGUI+0x21a>
				case Ok:
					Configs.Mode = Mode_Displayed;
 800201a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800201e:	b2da      	uxtb	r2, r3
 8002020:	4b33      	ldr	r3, [pc, #204]	; (80020f0 <MenuGUI+0x24c>)
 8002022:	705a      	strb	r2, [r3, #1]
					Not_Filled = false;
 8002024:	2300      	movs	r3, #0
 8002026:	73fb      	strb	r3, [r7, #15]
					HAL_I2C_Mem_Write(&hi2c1, EEPROM_ADDR, 0x1, 1, (uint8_t *) &Mode_Displayed, 1, 100);
 8002028:	2364      	movs	r3, #100	; 0x64
 800202a:	9302      	str	r3, [sp, #8]
 800202c:	2301      	movs	r3, #1
 800202e:	9301      	str	r3, [sp, #4]
 8002030:	1cbb      	adds	r3, r7, #2
 8002032:	9300      	str	r3, [sp, #0]
 8002034:	2301      	movs	r3, #1
 8002036:	2201      	movs	r2, #1
 8002038:	21a0      	movs	r1, #160	; 0xa0
 800203a:	4837      	ldr	r0, [pc, #220]	; (8002118 <MenuGUI+0x274>)
 800203c:	f001 ff5a 	bl	8003ef4 <HAL_I2C_Mem_Write>
					HAL_IWDG_Refresh(&hiwdg);
 8002040:	482c      	ldr	r0, [pc, #176]	; (80020f4 <MenuGUI+0x250>)
 8002042:	f003 f8f4 	bl	800522e <HAL_IWDG_Refresh>
					for(uint16_t i = 0; i < animation_counts; i++)
 8002046:	2300      	movs	r3, #0
 8002048:	80fb      	strh	r3, [r7, #6]
 800204a:	e02a      	b.n	80020a2 <MenuGUI+0x1fe>
					{
						switch(Mode_Displayed)
 800204c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002050:	2b06      	cmp	r3, #6
 8002052:	d823      	bhi.n	800209c <MenuGUI+0x1f8>
 8002054:	a201      	add	r2, pc, #4	; (adr r2, 800205c <MenuGUI+0x1b8>)
 8002056:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800205a:	bf00      	nop
 800205c:	08002079 	.word	0x08002079
 8002060:	08002085 	.word	0x08002085
 8002064:	0800209d 	.word	0x0800209d
 8002068:	0800209d 	.word	0x0800209d
 800206c:	0800209d 	.word	0x0800209d
 8002070:	08002091 	.word	0x08002091
 8002074:	0800209d 	.word	0x0800209d
						{
							case Continuous:
								Select_animation("Continuous ", 8, 37);
 8002078:	2225      	movs	r2, #37	; 0x25
 800207a:	2108      	movs	r1, #8
 800207c:	4827      	ldr	r0, [pc, #156]	; (800211c <MenuGUI+0x278>)
 800207e:	f000 f853 	bl	8002128 <Select_animation>
							break;
 8002082:	e00b      	b.n	800209c <MenuGUI+0x1f8>
							case Hold:
								Select_animation("Hold       ", 41, 37);
 8002084:	2225      	movs	r2, #37	; 0x25
 8002086:	2129      	movs	r1, #41	; 0x29
 8002088:	4825      	ldr	r0, [pc, #148]	; (8002120 <MenuGUI+0x27c>)
 800208a:	f000 f84d 	bl	8002128 <Select_animation>
							break;
 800208e:	e005      	b.n	800209c <MenuGUI+0x1f8>
							case Select_Sensor:
								Select_animation("Sel Sensor ", 9, 37);
							break;
#endif
							case Reset_Sensor:
								Select_animation("Reset Sense", 3, 37);
 8002090:	2225      	movs	r2, #37	; 0x25
 8002092:	2103      	movs	r1, #3
 8002094:	481f      	ldr	r0, [pc, #124]	; (8002114 <MenuGUI+0x270>)
 8002096:	f000 f847 	bl	8002128 <Select_animation>
							break;
 800209a:	bf00      	nop
					for(uint16_t i = 0; i < animation_counts; i++)
 800209c:	88fb      	ldrh	r3, [r7, #6]
 800209e:	3301      	adds	r3, #1
 80020a0:	80fb      	strh	r3, [r7, #6]
 80020a2:	88fa      	ldrh	r2, [r7, #6]
 80020a4:	88bb      	ldrh	r3, [r7, #4]
 80020a6:	429a      	cmp	r2, r3
 80020a8:	d3d0      	bcc.n	800204c <MenuGUI+0x1a8>
							case Idle:
							break;
						}
					}
					Timer_Delay_250ms(1);
 80020aa:	2001      	movs	r0, #1
 80020ac:	f000 f97e 	bl	80023ac <Timer_Delay_250ms>
				break;
 80020b0:	e006      	b.n	80020c0 <MenuGUI+0x21c>
			}
		}
		else
			HAL_IWDG_Refresh(&hiwdg);
 80020b2:	4810      	ldr	r0, [pc, #64]	; (80020f4 <MenuGUI+0x250>)
 80020b4:	f003 f8bb 	bl	800522e <HAL_IWDG_Refresh>
 80020b8:	e002      	b.n	80020c0 <MenuGUI+0x21c>
				break;
 80020ba:	bf00      	nop
 80020bc:	e000      	b.n	80020c0 <MenuGUI+0x21c>
				break;
 80020be:	bf00      	nop
		Past_IDR_Read = IDR_Read;
 80020c0:	4b0e      	ldr	r3, [pc, #56]	; (80020fc <MenuGUI+0x258>)
 80020c2:	881b      	ldrh	r3, [r3, #0]
 80020c4:	60bb      	str	r3, [r7, #8]
	}while(Not_Filled && ISR != MCU_Reset);
 80020c6:	7bfb      	ldrb	r3, [r7, #15]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d005      	beq.n	80020d8 <MenuGUI+0x234>
 80020cc:	4b15      	ldr	r3, [pc, #84]	; (8002124 <MenuGUI+0x280>)
 80020ce:	781b      	ldrb	r3, [r3, #0]
 80020d0:	b2db      	uxtb	r3, r3
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	f47f af08 	bne.w	8001ee8 <MenuGUI+0x44>
	ISR = None;
 80020d8:	4b12      	ldr	r3, [pc, #72]	; (8002124 <MenuGUI+0x280>)
 80020da:	2202      	movs	r2, #2
 80020dc:	701a      	strb	r2, [r3, #0]
}
 80020de:	bf00      	nop
 80020e0:	3710      	adds	r7, #16
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	bf00      	nop
 80020e8:	20000058 	.word	0x20000058
 80020ec:	08007a08 	.word	0x08007a08
 80020f0:	2000022c 	.word	0x2000022c
 80020f4:	20000218 	.word	0x20000218
 80020f8:	40010800 	.word	0x40010800
 80020fc:	20000240 	.word	0x20000240
 8002100:	20000050 	.word	0x20000050
 8002104:	08007a10 	.word	0x08007a10
 8002108:	08007934 	.word	0x08007934
 800210c:	08007a20 	.word	0x08007a20
 8002110:	08007940 	.word	0x08007940
 8002114:	08007a30 	.word	0x08007a30
 8002118:	200000e0 	.word	0x200000e0
 800211c:	08007a3c 	.word	0x08007a3c
 8002120:	08007a48 	.word	0x08007a48
 8002124:	20000225 	.word	0x20000225

08002128 <Select_animation>:

//@TODO Code a fancy animation
void Select_animation(char String[], uint16_t x, uint16_t y)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b082      	sub	sp, #8
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
 8002130:	460b      	mov	r3, r1
 8002132:	807b      	strh	r3, [r7, #2]
 8002134:	4613      	mov	r3, r2
 8002136:	803b      	strh	r3, [r7, #0]
	static uint32_t i = 0;
	extern const uint16_t animation_counts;
	HAL_IWDG_Refresh(&hiwdg);
 8002138:	4811      	ldr	r0, [pc, #68]	; (8002180 <Select_animation+0x58>)
 800213a:	f003 f878 	bl	800522e <HAL_IWDG_Refresh>
	SSD1306_GotoXY(x, y);
 800213e:	883a      	ldrh	r2, [r7, #0]
 8002140:	887b      	ldrh	r3, [r7, #2]
 8002142:	4611      	mov	r1, r2
 8002144:	4618      	mov	r0, r3
 8002146:	f004 fa2d 	bl	80065a4 <SSD1306_GotoXY>
	SSD1306_Puts(String, &Font_11x18, 1);
 800214a:	2201      	movs	r2, #1
 800214c:	490d      	ldr	r1, [pc, #52]	; (8002184 <Select_animation+0x5c>)
 800214e:	6878      	ldr	r0, [r7, #4]
 8002150:	f004 fabe 	bl	80066d0 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 8002154:	f004 f982 	bl	800645c <SSD1306_UpdateScreen>
	//Timer_Delay_250ms(1);
	Timer_Delay_at_274PSC(30000, 1); //114.18ms
 8002158:	2101      	movs	r1, #1
 800215a:	f247 5030 	movw	r0, #30000	; 0x7530
 800215e:	f000 f943 	bl	80023e8 <Timer_Delay_at_274PSC>
	SSD1306_GotoXY(3, 37);
 8002162:	2125      	movs	r1, #37	; 0x25
 8002164:	2003      	movs	r0, #3
 8002166:	f004 fa1d 	bl	80065a4 <SSD1306_GotoXY>
	SSD1306_Puts("            ", &Font_11x18, 1);
 800216a:	2201      	movs	r2, #1
 800216c:	4905      	ldr	r1, [pc, #20]	; (8002184 <Select_animation+0x5c>)
 800216e:	4806      	ldr	r0, [pc, #24]	; (8002188 <Select_animation+0x60>)
 8002170:	f004 faae 	bl	80066d0 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 8002174:	f004 f972 	bl	800645c <SSD1306_UpdateScreen>
	if(i == animation_counts)
	{

	}

}
 8002178:	bf00      	nop
 800217a:	3708      	adds	r7, #8
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}
 8002180:	20000218 	.word	0x20000218
 8002184:	20000050 	.word	0x20000050
 8002188:	08007a10 	.word	0x08007a10

0800218c <Fatal_Error_BH1750>:
	}
}
#endif

void Fatal_Error_BH1750(void)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	af00      	add	r7, sp, #0
	if(!Errors.BH1750_Fatal)
 8002190:	4b13      	ldr	r3, [pc, #76]	; (80021e0 <Fatal_Error_BH1750+0x54>)
 8002192:	785b      	ldrb	r3, [r3, #1]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d121      	bne.n	80021dc <Fatal_Error_BH1750+0x50>
	{
		SSD1306_Clear();
 8002198:	f004 fce6 	bl	8006b68 <SSD1306_Clear>
		SSD1306_GotoXY(3, 18);
 800219c:	2112      	movs	r1, #18
 800219e:	2003      	movs	r0, #3
 80021a0:	f004 fa00 	bl	80065a4 <SSD1306_GotoXY>
		SSD1306_Puts("Fatal Error: BH1750", &Font_7x10, 1);
 80021a4:	2201      	movs	r2, #1
 80021a6:	490f      	ldr	r1, [pc, #60]	; (80021e4 <Fatal_Error_BH1750+0x58>)
 80021a8:	480f      	ldr	r0, [pc, #60]	; (80021e8 <Fatal_Error_BH1750+0x5c>)
 80021aa:	f004 fa91 	bl	80066d0 <SSD1306_Puts>
		SSD1306_GotoXY(6, 33);
 80021ae:	2121      	movs	r1, #33	; 0x21
 80021b0:	2006      	movs	r0, #6
 80021b2:	f004 f9f7 	bl	80065a4 <SSD1306_GotoXY>
		SSD1306_Puts("Press OK to continue", &Font_7x10, 1);
 80021b6:	2201      	movs	r2, #1
 80021b8:	490a      	ldr	r1, [pc, #40]	; (80021e4 <Fatal_Error_BH1750+0x58>)
 80021ba:	480c      	ldr	r0, [pc, #48]	; (80021ec <Fatal_Error_BH1750+0x60>)
 80021bc:	f004 fa88 	bl	80066d0 <SSD1306_Puts>
		SSD1306_UpdateScreen();
 80021c0:	f004 f94c 	bl	800645c <SSD1306_UpdateScreen>
		HAL_IWDG_Refresh(&hiwdg);
 80021c4:	480a      	ldr	r0, [pc, #40]	; (80021f0 <Fatal_Error_BH1750+0x64>)
 80021c6:	f003 f832 	bl	800522e <HAL_IWDG_Refresh>
		wait_until_press(Ok);
 80021ca:	200f      	movs	r0, #15
 80021cc:	f000 f8c6 	bl	800235c <wait_until_press>
		Errors.BH1750_Fatal = true;
 80021d0:	4b03      	ldr	r3, [pc, #12]	; (80021e0 <Fatal_Error_BH1750+0x54>)
 80021d2:	2201      	movs	r2, #1
 80021d4:	705a      	strb	r2, [r3, #1]
		HAL_IWDG_Refresh(&hiwdg);
 80021d6:	4806      	ldr	r0, [pc, #24]	; (80021f0 <Fatal_Error_BH1750+0x64>)
 80021d8:	f003 f829 	bl	800522e <HAL_IWDG_Refresh>
	}
}
 80021dc:	bf00      	nop
 80021de:	bd80      	pop	{r7, pc}
 80021e0:	20000228 	.word	0x20000228
 80021e4:	20000048 	.word	0x20000048
 80021e8:	08007a54 	.word	0x08007a54
 80021ec:	08007a68 	.word	0x08007a68
 80021f0:	20000218 	.word	0x20000218

080021f4 <NoConnected_BH1750>:

//@TODO Bad prints, doesn't wait of the button ok
void NoConnected_BH1750(void)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	af00      	add	r7, sp, #0
	if(!Errors.BH1750_NoConn)
 80021f8:	4b18      	ldr	r3, [pc, #96]	; (800225c <NoConnected_BH1750+0x68>)
 80021fa:	789b      	ldrb	r3, [r3, #2]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d12a      	bne.n	8002256 <NoConnected_BH1750+0x62>
	{
		SSD1306_Clear();
 8002200:	f004 fcb2 	bl	8006b68 <SSD1306_Clear>
		SSD1306_GotoXY(3, 18);
 8002204:	2112      	movs	r1, #18
 8002206:	2003      	movs	r0, #3
 8002208:	f004 f9cc 	bl	80065a4 <SSD1306_GotoXY>
		SSD1306_Puts("BH1750", &Font_7x10, 1);
 800220c:	2201      	movs	r2, #1
 800220e:	4914      	ldr	r1, [pc, #80]	; (8002260 <NoConnected_BH1750+0x6c>)
 8002210:	4814      	ldr	r0, [pc, #80]	; (8002264 <NoConnected_BH1750+0x70>)
 8002212:	f004 fa5d 	bl	80066d0 <SSD1306_Puts>
		SSD1306_GotoXY(3, 18);
 8002216:	2112      	movs	r1, #18
 8002218:	2003      	movs	r0, #3
 800221a:	f004 f9c3 	bl	80065a4 <SSD1306_GotoXY>
		SSD1306_Puts("No Connected", &Font_7x10, 1);
 800221e:	2201      	movs	r2, #1
 8002220:	490f      	ldr	r1, [pc, #60]	; (8002260 <NoConnected_BH1750+0x6c>)
 8002222:	4811      	ldr	r0, [pc, #68]	; (8002268 <NoConnected_BH1750+0x74>)
 8002224:	f004 fa54 	bl	80066d0 <SSD1306_Puts>
		SSD1306_GotoXY(6, 33);
 8002228:	2121      	movs	r1, #33	; 0x21
 800222a:	2006      	movs	r0, #6
 800222c:	f004 f9ba 	bl	80065a4 <SSD1306_GotoXY>
		SSD1306_Puts("Press OK to continue", &Font_7x10, 1);
 8002230:	2201      	movs	r2, #1
 8002232:	490b      	ldr	r1, [pc, #44]	; (8002260 <NoConnected_BH1750+0x6c>)
 8002234:	480d      	ldr	r0, [pc, #52]	; (800226c <NoConnected_BH1750+0x78>)
 8002236:	f004 fa4b 	bl	80066d0 <SSD1306_Puts>
		SSD1306_UpdateScreen();
 800223a:	f004 f90f 	bl	800645c <SSD1306_UpdateScreen>
		//ISR = None;
		HAL_IWDG_Refresh(&hiwdg);
 800223e:	480c      	ldr	r0, [pc, #48]	; (8002270 <NoConnected_BH1750+0x7c>)
 8002240:	f002 fff5 	bl	800522e <HAL_IWDG_Refresh>
		wait_until_press(Ok);
 8002244:	200f      	movs	r0, #15
 8002246:	f000 f889 	bl	800235c <wait_until_press>
		Errors.BH1750_NoConn = true;
 800224a:	4b04      	ldr	r3, [pc, #16]	; (800225c <NoConnected_BH1750+0x68>)
 800224c:	2201      	movs	r2, #1
 800224e:	709a      	strb	r2, [r3, #2]
		HAL_IWDG_Refresh(&hiwdg);
 8002250:	4807      	ldr	r0, [pc, #28]	; (8002270 <NoConnected_BH1750+0x7c>)
 8002252:	f002 ffec 	bl	800522e <HAL_IWDG_Refresh>
	}
}
 8002256:	bf00      	nop
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	20000228 	.word	0x20000228
 8002260:	20000048 	.word	0x20000048
 8002264:	08007a80 	.word	0x08007a80
 8002268:	08007a88 	.word	0x08007a88
 800226c:	08007a68 	.word	0x08007a68
 8002270:	20000218 	.word	0x20000218

08002274 <Print_Measure>:

//Auxiliar functions
//@TODO At Print_Measure print allways in the center, x left when big number
void Print_Measure(float Measure, uint16_t x, uint16_t y)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b088      	sub	sp, #32
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
 800227c:	460b      	mov	r3, r1
 800227e:	807b      	strh	r3, [r7, #2]
 8002280:	4613      	mov	r3, r2
 8002282:	803b      	strh	r3, [r7, #0]
	char Integer_part[5];
	char Fraccional_part[3];
	uint32_t Integer_measure;
	uint32_t Fraccional_measure;

	Integer_measure = (uint32_t) Measure;
 8002284:	6878      	ldr	r0, [r7, #4]
 8002286:	f7fe fd63 	bl	8000d50 <__aeabi_f2uiz>
 800228a:	4603      	mov	r3, r0
 800228c:	61fb      	str	r3, [r7, #28]
	Integer_measure = (uint32_t) Measure;
 800228e:	6878      	ldr	r0, [r7, #4]
 8002290:	f7fe fd5e 	bl	8000d50 <__aeabi_f2uiz>
 8002294:	4603      	mov	r3, r0
 8002296:	61fb      	str	r3, [r7, #28]
	Fraccional_measure = (uint32_t) ((Measure - Integer_measure) * 100);
 8002298:	69f8      	ldr	r0, [r7, #28]
 800229a:	f7fe fd01 	bl	8000ca0 <__aeabi_ui2f>
 800229e:	4603      	mov	r3, r0
 80022a0:	4619      	mov	r1, r3
 80022a2:	6878      	ldr	r0, [r7, #4]
 80022a4:	f7fe fc4a 	bl	8000b3c <__aeabi_fsub>
 80022a8:	4603      	mov	r3, r0
 80022aa:	4926      	ldr	r1, [pc, #152]	; (8002344 <Print_Measure+0xd0>)
 80022ac:	4618      	mov	r0, r3
 80022ae:	f7fd ff4f 	bl	8000150 <__aeabi_fmul>
 80022b2:	4603      	mov	r3, r0
 80022b4:	4618      	mov	r0, r3
 80022b6:	f7fe fd4b 	bl	8000d50 <__aeabi_f2uiz>
 80022ba:	4603      	mov	r3, r0
 80022bc:	61bb      	str	r3, [r7, #24]
	sprintf(Integer_part, "%d", (int)Integer_measure);
 80022be:	69fa      	ldr	r2, [r7, #28]
 80022c0:	f107 0310 	add.w	r3, r7, #16
 80022c4:	4920      	ldr	r1, [pc, #128]	; (8002348 <Print_Measure+0xd4>)
 80022c6:	4618      	mov	r0, r3
 80022c8:	f004 ff86 	bl	80071d8 <siprintf>
	sprintf(Fraccional_part, "%d", (int)Fraccional_measure);
 80022cc:	69ba      	ldr	r2, [r7, #24]
 80022ce:	f107 030c 	add.w	r3, r7, #12
 80022d2:	491d      	ldr	r1, [pc, #116]	; (8002348 <Print_Measure+0xd4>)
 80022d4:	4618      	mov	r0, r3
 80022d6:	f004 ff7f 	bl	80071d8 <siprintf>
	HAL_IWDG_Refresh(&hiwdg);
 80022da:	481c      	ldr	r0, [pc, #112]	; (800234c <Print_Measure+0xd8>)
 80022dc:	f002 ffa7 	bl	800522e <HAL_IWDG_Refresh>

	SSD1306_GotoXY(x, y);
 80022e0:	883a      	ldrh	r2, [r7, #0]
 80022e2:	887b      	ldrh	r3, [r7, #2]
 80022e4:	4611      	mov	r1, r2
 80022e6:	4618      	mov	r0, r3
 80022e8:	f004 f95c 	bl	80065a4 <SSD1306_GotoXY>
	SSD1306_Puts("         ", &Font_11x18, 1);
 80022ec:	2201      	movs	r2, #1
 80022ee:	4918      	ldr	r1, [pc, #96]	; (8002350 <Print_Measure+0xdc>)
 80022f0:	4818      	ldr	r0, [pc, #96]	; (8002354 <Print_Measure+0xe0>)
 80022f2:	f004 f9ed 	bl	80066d0 <SSD1306_Puts>
	SSD1306_GotoXY(x, y);
 80022f6:	883a      	ldrh	r2, [r7, #0]
 80022f8:	887b      	ldrh	r3, [r7, #2]
 80022fa:	4611      	mov	r1, r2
 80022fc:	4618      	mov	r0, r3
 80022fe:	f004 f951 	bl	80065a4 <SSD1306_GotoXY>
	SSD1306_Puts(Integer_part, &Font_11x18, 1);
 8002302:	f107 0310 	add.w	r3, r7, #16
 8002306:	2201      	movs	r2, #1
 8002308:	4911      	ldr	r1, [pc, #68]	; (8002350 <Print_Measure+0xdc>)
 800230a:	4618      	mov	r0, r3
 800230c:	f004 f9e0 	bl	80066d0 <SSD1306_Puts>
	SSD1306_Putc('.', &Font_11x18, 1);
 8002310:	2201      	movs	r2, #1
 8002312:	490f      	ldr	r1, [pc, #60]	; (8002350 <Print_Measure+0xdc>)
 8002314:	202e      	movs	r0, #46	; 0x2e
 8002316:	f004 f95b 	bl	80065d0 <SSD1306_Putc>
	SSD1306_Puts(Fraccional_part, &Font_11x18, 1);
 800231a:	f107 030c 	add.w	r3, r7, #12
 800231e:	2201      	movs	r2, #1
 8002320:	490b      	ldr	r1, [pc, #44]	; (8002350 <Print_Measure+0xdc>)
 8002322:	4618      	mov	r0, r3
 8002324:	f004 f9d4 	bl	80066d0 <SSD1306_Puts>
	SSD1306_Puts("lx", &Font_11x18, 1);
 8002328:	2201      	movs	r2, #1
 800232a:	4909      	ldr	r1, [pc, #36]	; (8002350 <Print_Measure+0xdc>)
 800232c:	480a      	ldr	r0, [pc, #40]	; (8002358 <Print_Measure+0xe4>)
 800232e:	f004 f9cf 	bl	80066d0 <SSD1306_Puts>
	HAL_IWDG_Refresh(&hiwdg);
 8002332:	4806      	ldr	r0, [pc, #24]	; (800234c <Print_Measure+0xd8>)
 8002334:	f002 ff7b 	bl	800522e <HAL_IWDG_Refresh>
	SSD1306_UpdateScreen();
 8002338:	f004 f890 	bl	800645c <SSD1306_UpdateScreen>
}
 800233c:	bf00      	nop
 800233e:	3720      	adds	r7, #32
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}
 8002344:	42c80000 	.word	0x42c80000
 8002348:	08007950 	.word	0x08007950
 800234c:	20000218 	.word	0x20000218
 8002350:	20000050 	.word	0x20000050
 8002354:	08007a98 	.word	0x08007a98
 8002358:	0800794c 	.word	0x0800794c

0800235c <wait_until_press>:

void wait_until_press(Buttons Button)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b082      	sub	sp, #8
 8002360:	af00      	add	r7, sp, #0
 8002362:	4603      	mov	r3, r0
 8002364:	71fb      	strb	r3, [r7, #7]
	do{
		IDR_Read = (GPIOA -> IDR & ReadMask);
 8002366:	4b0d      	ldr	r3, [pc, #52]	; (800239c <wait_until_press+0x40>)
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	b29b      	uxth	r3, r3
 800236c:	f003 031f 	and.w	r3, r3, #31
 8002370:	b29a      	uxth	r2, r3
 8002372:	4b0b      	ldr	r3, [pc, #44]	; (80023a0 <wait_until_press+0x44>)
 8002374:	801a      	strh	r2, [r3, #0]
		HAL_IWDG_Refresh(&hiwdg);
 8002376:	480b      	ldr	r0, [pc, #44]	; (80023a4 <wait_until_press+0x48>)
 8002378:	f002 ff59 	bl	800522e <HAL_IWDG_Refresh>
	}while(IDR_Read != Button && ISR == None);
 800237c:	79fb      	ldrb	r3, [r7, #7]
 800237e:	b29a      	uxth	r2, r3
 8002380:	4b07      	ldr	r3, [pc, #28]	; (80023a0 <wait_until_press+0x44>)
 8002382:	881b      	ldrh	r3, [r3, #0]
 8002384:	429a      	cmp	r2, r3
 8002386:	d004      	beq.n	8002392 <wait_until_press+0x36>
 8002388:	4b07      	ldr	r3, [pc, #28]	; (80023a8 <wait_until_press+0x4c>)
 800238a:	781b      	ldrb	r3, [r3, #0]
 800238c:	b2db      	uxtb	r3, r3
 800238e:	2b02      	cmp	r3, #2
 8002390:	d0e9      	beq.n	8002366 <wait_until_press+0xa>
}
 8002392:	bf00      	nop
 8002394:	3708      	adds	r7, #8
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}
 800239a:	bf00      	nop
 800239c:	40010800 	.word	0x40010800
 80023a0:	20000240 	.word	0x20000240
 80023a4:	20000218 	.word	0x20000218
 80023a8:	20000225 	.word	0x20000225

080023ac <Timer_Delay_250ms>:
			HAL_IWDG_Refresh(&hiwdg);
	}
}

void Timer_Delay_250ms(uint16_t Value)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b082      	sub	sp, #8
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	4603      	mov	r3, r0
 80023b4:	80fb      	strh	r3, [r7, #6]
	Timer_Delay_at_274PSC(EndOfCounts250ms, Value);
 80023b6:	88fb      	ldrh	r3, [r7, #6]
 80023b8:	4619      	mov	r1, r3
 80023ba:	f64f 70ae 	movw	r0, #65454	; 0xffae
 80023be:	f000 f813 	bl	80023e8 <Timer_Delay_at_274PSC>
}
 80023c2:	bf00      	nop
 80023c4:	3708      	adds	r7, #8
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}

080023ca <Timer_Delay_50ms>:

void Timer_Delay_50ms(uint16_t Value)
{
 80023ca:	b580      	push	{r7, lr}
 80023cc:	b082      	sub	sp, #8
 80023ce:	af00      	add	r7, sp, #0
 80023d0:	4603      	mov	r3, r0
 80023d2:	80fb      	strh	r3, [r7, #6]
	Timer_Delay_at_274PSC(EndOfCounts50ms, Value);
 80023d4:	88fb      	ldrh	r3, [r7, #6]
 80023d6:	4619      	mov	r1, r3
 80023d8:	f243 3053 	movw	r0, #13139	; 0x3353
 80023dc:	f000 f804 	bl	80023e8 <Timer_Delay_at_274PSC>
}
 80023e0:	bf00      	nop
 80023e2:	3708      	adds	r7, #8
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}

080023e8 <Timer_Delay_at_274PSC>:

void Timer_Delay_at_274PSC(uint16_t Counts, uint16_t Overflows) //Period of 0.000003806
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b084      	sub	sp, #16
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	4603      	mov	r3, r0
 80023f0:	460a      	mov	r2, r1
 80023f2:	80fb      	strh	r3, [r7, #6]
 80023f4:	4613      	mov	r3, r2
 80023f6:	80bb      	strh	r3, [r7, #4]
	if(Overflows == 0)
 80023f8:	88bb      	ldrh	r3, [r7, #4]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d102      	bne.n	8002404 <Timer_Delay_at_274PSC+0x1c>
		Overflows++;
 80023fe:	88bb      	ldrh	r3, [r7, #4]
 8002400:	3301      	adds	r3, #1
 8002402:	80bb      	strh	r3, [r7, #4]
	bool Time_not_reached = true;
 8002404:	2301      	movs	r3, #1
 8002406:	73fb      	strb	r3, [r7, #15]
	uint32_t i = 0;
 8002408:	2300      	movs	r3, #0
 800240a:	60bb      	str	r3, [r7, #8]
	__HAL_TIM_SET_COUNTER(&htim4, 0);
 800240c:	4b10      	ldr	r3, [pc, #64]	; (8002450 <Timer_Delay_at_274PSC+0x68>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	2200      	movs	r2, #0
 8002412:	625a      	str	r2, [r3, #36]	; 0x24
	do{
		HAL_IWDG_Refresh(&hiwdg);
 8002414:	480f      	ldr	r0, [pc, #60]	; (8002454 <Timer_Delay_at_274PSC+0x6c>)
 8002416:	f002 ff0a 	bl	800522e <HAL_IWDG_Refresh>
		if(__HAL_TIM_GET_COUNTER(&htim4) == Counts)
 800241a:	4b0d      	ldr	r3, [pc, #52]	; (8002450 <Timer_Delay_at_274PSC+0x68>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002420:	88fb      	ldrh	r3, [r7, #6]
 8002422:	429a      	cmp	r2, r3
 8002424:	d106      	bne.n	8002434 <Timer_Delay_at_274PSC+0x4c>
		{
			__HAL_TIM_SET_COUNTER(&htim4, 0);
 8002426:	4b0a      	ldr	r3, [pc, #40]	; (8002450 <Timer_Delay_at_274PSC+0x68>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	2200      	movs	r2, #0
 800242c:	625a      	str	r2, [r3, #36]	; 0x24
			i++;
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	3301      	adds	r3, #1
 8002432:	60bb      	str	r3, [r7, #8]
		}
		if(i == Overflows)
 8002434:	88bb      	ldrh	r3, [r7, #4]
 8002436:	68ba      	ldr	r2, [r7, #8]
 8002438:	429a      	cmp	r2, r3
 800243a:	d101      	bne.n	8002440 <Timer_Delay_at_274PSC+0x58>
			Time_not_reached = false;
 800243c:	2300      	movs	r3, #0
 800243e:	73fb      	strb	r3, [r7, #15]
	}while(Time_not_reached);
 8002440:	7bfb      	ldrb	r3, [r7, #15]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d1e6      	bne.n	8002414 <Timer_Delay_at_274PSC+0x2c>
}
 8002446:	bf00      	nop
 8002448:	bf00      	nop
 800244a:	3710      	adds	r7, #16
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}
 8002450:	200001d0 	.word	0x200001d0
 8002454:	20000218 	.word	0x20000218

08002458 <MCU_Reset_Subrutine>:

void MCU_Reset_Subrutine(void)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	af00      	add	r7, sp, #0
	SSD1306_Clear();
 800245c:	f004 fb84 	bl	8006b68 <SSD1306_Clear>
	SSD1306_GotoXY(23, 17);
 8002460:	2111      	movs	r1, #17
 8002462:	2017      	movs	r0, #23
 8002464:	f004 f89e 	bl	80065a4 <SSD1306_GotoXY>
	SSD1306_Puts("Reset", &Font_16x26, 1);
 8002468:	2201      	movs	r2, #1
 800246a:	4905      	ldr	r1, [pc, #20]	; (8002480 <MCU_Reset_Subrutine+0x28>)
 800246c:	4805      	ldr	r0, [pc, #20]	; (8002484 <MCU_Reset_Subrutine+0x2c>)
 800246e:	f004 f92f 	bl	80066d0 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 8002472:	f003 fff3 	bl	800645c <SSD1306_UpdateScreen>
	Timer_Delay_250ms(Seconds(1.5f));
 8002476:	2006      	movs	r0, #6
 8002478:	f7ff ff98 	bl	80023ac <Timer_Delay_250ms>
	NVIC_SystemReset(); //Reset de MCU
 800247c:	f7fe fc88 	bl	8000d90 <__NVIC_SystemReset>
 8002480:	20000058 	.word	0x20000058
 8002484:	08007aa4 	.word	0x08007aa4

08002488 <SensorRead>:
}

void SensorRead(void)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b086      	sub	sp, #24
 800248c:	af00      	add	r7, sp, #0
	const uint32_t A6toA13andA15Mask = 0xFFFF603F; //For masking the port
 800248e:	4b2c      	ldr	r3, [pc, #176]	; (8002540 <SensorRead+0xb8>)
 8002490:	617b      	str	r3, [r7, #20]
	const uint32_t DAC_MSBMask = 0x8000; //To get the MSB on the 13 position
 8002492:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002496:	613b      	str	r3, [r7, #16]

	uint32_t DACVal = 0, DACPort = 0, DAC_MSB = 0;
 8002498:	2300      	movs	r3, #0
 800249a:	60fb      	str	r3, [r7, #12]
 800249c:	2300      	movs	r3, #0
 800249e:	60bb      	str	r3, [r7, #8]
 80024a0:	2300      	movs	r3, #0
 80024a2:	607b      	str	r3, [r7, #4]
	uint32_t tmp = 0;
 80024a4:	2300      	movs	r3, #0
 80024a6:	603b      	str	r3, [r7, #0]
	switch(Sensor)
 80024a8:	4b26      	ldr	r3, [pc, #152]	; (8002544 <SensorRead+0xbc>)
 80024aa:	781b      	ldrb	r3, [r3, #0]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d001      	beq.n	80024b4 <SensorRead+0x2c>
 80024b0:	2b01      	cmp	r3, #1
				tmp = (GPIOA -> ODR & A6toA13andA15Mask);
				GPIOA -> ODR = tmp | DACPort;
			}
		break;
		case _TSL2561:
		break;
 80024b2:	e03d      	b.n	8002530 <SensorRead+0xa8>
			if(BH1750_Read(&BH1750, &Measure) != Rojo_OK) //Saving the value into a global
 80024b4:	4924      	ldr	r1, [pc, #144]	; (8002548 <SensorRead+0xc0>)
 80024b6:	4825      	ldr	r0, [pc, #148]	; (800254c <SensorRead+0xc4>)
 80024b8:	f004 fcd6 	bl	8006e68 <BH1750_Read>
 80024bc:	4603      	mov	r3, r0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d002      	beq.n	80024c8 <SensorRead+0x40>
				NoConnected_BH1750();
 80024c2:	f7ff fe97 	bl	80021f4 <NoConnected_BH1750>
		break;
 80024c6:	e032      	b.n	800252e <SensorRead+0xa6>
				DACVal = (uint8_t) (Measure *0xFF)/(0xFFFF/1.2);
 80024c8:	4b1f      	ldr	r3, [pc, #124]	; (8002548 <SensorRead+0xc0>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4920      	ldr	r1, [pc, #128]	; (8002550 <SensorRead+0xc8>)
 80024ce:	4618      	mov	r0, r3
 80024d0:	f7fd fe3e 	bl	8000150 <__aeabi_fmul>
 80024d4:	4603      	mov	r3, r0
 80024d6:	4618      	mov	r0, r3
 80024d8:	f7fe fc3a 	bl	8000d50 <__aeabi_f2uiz>
 80024dc:	4603      	mov	r3, r0
 80024de:	b2db      	uxtb	r3, r3
 80024e0:	4618      	mov	r0, r3
 80024e2:	f7fe f83b 	bl	800055c <__aeabi_i2d>
 80024e6:	a314      	add	r3, pc, #80	; (adr r3, 8002538 <SensorRead+0xb0>)
 80024e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024ec:	f7fe f9ca 	bl	8000884 <__aeabi_ddiv>
 80024f0:	4602      	mov	r2, r0
 80024f2:	460b      	mov	r3, r1
 80024f4:	4610      	mov	r0, r2
 80024f6:	4619      	mov	r1, r3
 80024f8:	f7fe faac 	bl	8000a54 <__aeabi_d2uiz>
 80024fc:	4603      	mov	r3, r0
 80024fe:	60fb      	str	r3, [r7, #12]
				DAC_MSB = (DACVal<<6)&DAC_MSBMask; //Getting the MSB bit
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	019b      	lsls	r3, r3, #6
 8002504:	693a      	ldr	r2, [r7, #16]
 8002506:	4013      	ands	r3, r2
 8002508:	607b      	str	r3, [r7, #4]
				DAC_MSB <<= 2; //Moving to the 15 position
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	009b      	lsls	r3, r3, #2
 800250e:	607b      	str	r3, [r7, #4]
				DACPort = DAC_MSB | (DACVal<<6); //Building the variable
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	019b      	lsls	r3, r3, #6
 8002514:	687a      	ldr	r2, [r7, #4]
 8002516:	4313      	orrs	r3, r2
 8002518:	60bb      	str	r3, [r7, #8]
				tmp = (GPIOA -> ODR & A6toA13andA15Mask);
 800251a:	4b0e      	ldr	r3, [pc, #56]	; (8002554 <SensorRead+0xcc>)
 800251c:	68db      	ldr	r3, [r3, #12]
 800251e:	697a      	ldr	r2, [r7, #20]
 8002520:	4013      	ands	r3, r2
 8002522:	603b      	str	r3, [r7, #0]
				GPIOA -> ODR = tmp | DACPort;
 8002524:	490b      	ldr	r1, [pc, #44]	; (8002554 <SensorRead+0xcc>)
 8002526:	683a      	ldr	r2, [r7, #0]
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	4313      	orrs	r3, r2
 800252c:	60cb      	str	r3, [r1, #12]
		break;
 800252e:	bf00      	nop
	}
}
 8002530:	bf00      	nop
 8002532:	3718      	adds	r7, #24
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}
 8002538:	00000000 	.word	0x00000000
 800253c:	40eaaa90 	.word	0x40eaaa90
 8002540:	ffff603f 	.word	0xffff603f
 8002544:	20000224 	.word	0x20000224
 8002548:	20000230 	.word	0x20000230
 800254c:	20000234 	.word	0x20000234
 8002550:	437f0000 	.word	0x437f0000
 8002554:	40010800 	.word	0x40010800

08002558 <CenterXPrint>:

uint16_t CenterXPrint(char *string, uint16_t InitialCoordinate, uint16_t LastCoordinate, FontDef_t Font)
{
 8002558:	b082      	sub	sp, #8
 800255a:	b580      	push	{r7, lr}
 800255c:	b084      	sub	sp, #16
 800255e:	af00      	add	r7, sp, #0
 8002560:	6078      	str	r0, [r7, #4]
 8002562:	61fb      	str	r3, [r7, #28]
 8002564:	460b      	mov	r3, r1
 8002566:	807b      	strh	r3, [r7, #2]
 8002568:	4613      	mov	r3, r2
 800256a:	803b      	strh	r3, [r7, #0]
	uint16_t Chars = NumberOfCharsUsed(string, 0);
 800256c:	2100      	movs	r1, #0
 800256e:	6878      	ldr	r0, [r7, #4]
 8002570:	f000 f83c 	bl	80025ec <NumberOfCharsUsed>
 8002574:	4603      	mov	r3, r0
 8002576:	81fb      	strh	r3, [r7, #14]

	Chars *= Font.FontWidth;
 8002578:	7f3b      	ldrb	r3, [r7, #28]
 800257a:	b29b      	uxth	r3, r3
 800257c:	89fa      	ldrh	r2, [r7, #14]
 800257e:	fb02 f303 	mul.w	r3, r2, r3
 8002582:	81fb      	strh	r3, [r7, #14]

	return (((LastCoordinate - Chars) + InitialCoordinate) / 2);
 8002584:	883a      	ldrh	r2, [r7, #0]
 8002586:	89fb      	ldrh	r3, [r7, #14]
 8002588:	1ad2      	subs	r2, r2, r3
 800258a:	887b      	ldrh	r3, [r7, #2]
 800258c:	4413      	add	r3, r2
 800258e:	0fda      	lsrs	r2, r3, #31
 8002590:	4413      	add	r3, r2
 8002592:	105b      	asrs	r3, r3, #1
 8002594:	b29b      	uxth	r3, r3
}
 8002596:	4618      	mov	r0, r3
 8002598:	3710      	adds	r7, #16
 800259a:	46bd      	mov	sp, r7
 800259c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80025a0:	b002      	add	sp, #8
 80025a2:	4770      	bx	lr

080025a4 <CharsNumberFromInt>:

uint16_t CharsNumberFromInt(uint32_t Number, uint16_t CountStringFinisher)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b085      	sub	sp, #20
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
 80025ac:	460b      	mov	r3, r1
 80025ae:	807b      	strh	r3, [r7, #2]
    uint16_t NumberOfChars = 0;
 80025b0:	2300      	movs	r3, #0
 80025b2:	81fb      	strh	r3, [r7, #14]

    while (Number > 0)
 80025b4:	e008      	b.n	80025c8 <CharsNumberFromInt+0x24>
    {
        Number /= 10;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	4a0b      	ldr	r2, [pc, #44]	; (80025e8 <CharsNumberFromInt+0x44>)
 80025ba:	fba2 2303 	umull	r2, r3, r2, r3
 80025be:	08db      	lsrs	r3, r3, #3
 80025c0:	607b      	str	r3, [r7, #4]
        NumberOfChars++;
 80025c2:	89fb      	ldrh	r3, [r7, #14]
 80025c4:	3301      	adds	r3, #1
 80025c6:	81fb      	strh	r3, [r7, #14]
    while (Number > 0)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d1f3      	bne.n	80025b6 <CharsNumberFromInt+0x12>
    }
    if(CountStringFinisher)
 80025ce:	887b      	ldrh	r3, [r7, #2]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d002      	beq.n	80025da <CharsNumberFromInt+0x36>
        NumberOfChars++;
 80025d4:	89fb      	ldrh	r3, [r7, #14]
 80025d6:	3301      	adds	r3, #1
 80025d8:	81fb      	strh	r3, [r7, #14]
    return NumberOfChars;
 80025da:	89fb      	ldrh	r3, [r7, #14]
}
 80025dc:	4618      	mov	r0, r3
 80025de:	3714      	adds	r7, #20
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bc80      	pop	{r7}
 80025e4:	4770      	bx	lr
 80025e6:	bf00      	nop
 80025e8:	cccccccd 	.word	0xcccccccd

080025ec <NumberOfCharsUsed>:
	*NumberOfIntegers = Integers;
	*NumberOfDecimals = Decimals;
}

uint16_t NumberOfCharsUsed(char *String, uint16_t CountStringFinisher)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b085      	sub	sp, #20
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
 80025f4:	460b      	mov	r3, r1
 80025f6:	807b      	strh	r3, [r7, #2]
    uint16_t NumChars = 0;
 80025f8:	2300      	movs	r3, #0
 80025fa:	81fb      	strh	r3, [r7, #14]
    while(*String != 0)
 80025fc:	e005      	b.n	800260a <NumberOfCharsUsed+0x1e>
    {
        NumChars++;
 80025fe:	89fb      	ldrh	r3, [r7, #14]
 8002600:	3301      	adds	r3, #1
 8002602:	81fb      	strh	r3, [r7, #14]
        String++;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	3301      	adds	r3, #1
 8002608:	607b      	str	r3, [r7, #4]
    while(*String != 0)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	781b      	ldrb	r3, [r3, #0]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d1f5      	bne.n	80025fe <NumberOfCharsUsed+0x12>
    }
    if(CountStringFinisher)
 8002612:	887b      	ldrh	r3, [r7, #2]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d002      	beq.n	800261e <NumberOfCharsUsed+0x32>
        NumChars++;
 8002618:	89fb      	ldrh	r3, [r7, #14]
 800261a:	3301      	adds	r3, #1
 800261c:	81fb      	strh	r3, [r7, #14]
    return NumChars;
 800261e:	89fb      	ldrh	r3, [r7, #14]
}
 8002620:	4618      	mov	r0, r3
 8002622:	3714      	adds	r7, #20
 8002624:	46bd      	mov	sp, r7
 8002626:	bc80      	pop	{r7}
 8002628:	4770      	bx	lr
	...

0800262c <Configs_init>:


//Configurations
void Configs_init(void)
{
 800262c:	b480      	push	{r7}
 800262e:	af00      	add	r7, sp, #0
	Configs.Factory_Values = 0;
 8002630:	4b07      	ldr	r3, [pc, #28]	; (8002650 <Configs_init+0x24>)
 8002632:	2200      	movs	r2, #0
 8002634:	701a      	strb	r2, [r3, #0]
	Configs.Last_Mode = Idle;
 8002636:	4b06      	ldr	r3, [pc, #24]	; (8002650 <Configs_init+0x24>)
 8002638:	2206      	movs	r2, #6
 800263a:	709a      	strb	r2, [r3, #2]
	Configs.Mode = Continuous;
 800263c:	4b04      	ldr	r3, [pc, #16]	; (8002650 <Configs_init+0x24>)
 800263e:	2200      	movs	r2, #0
 8002640:	705a      	strb	r2, [r3, #1]
	Configs.Resolution = Medium_Res;
 8002642:	4b03      	ldr	r3, [pc, #12]	; (8002650 <Configs_init+0x24>)
 8002644:	2201      	movs	r2, #1
 8002646:	70da      	strb	r2, [r3, #3]
}
 8002648:	bf00      	nop
 800264a:	46bd      	mov	sp, r7
 800264c:	bc80      	pop	{r7}
 800264e:	4770      	bx	lr
 8002650:	2000022c 	.word	0x2000022c

08002654 <HAL_GPIO_EXTI_Callback>:

}

//ISR Handlers
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002654:	b480      	push	{r7}
 8002656:	b083      	sub	sp, #12
 8002658:	af00      	add	r7, sp, #0
 800265a:	4603      	mov	r3, r0
 800265c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_0)
 800265e:	88fb      	ldrh	r3, [r7, #6]
 8002660:	2b01      	cmp	r3, #1
 8002662:	d107      	bne.n	8002674 <HAL_GPIO_EXTI_Callback+0x20>
	{
		if(ISR == None)
 8002664:	4b09      	ldr	r3, [pc, #36]	; (800268c <HAL_GPIO_EXTI_Callback+0x38>)
 8002666:	781b      	ldrb	r3, [r3, #0]
 8002668:	b2db      	uxtb	r3, r3
 800266a:	2b02      	cmp	r3, #2
 800266c:	d102      	bne.n	8002674 <HAL_GPIO_EXTI_Callback+0x20>
			ISR = Menu;
 800266e:	4b07      	ldr	r3, [pc, #28]	; (800268c <HAL_GPIO_EXTI_Callback+0x38>)
 8002670:	2201      	movs	r2, #1
 8002672:	701a      	strb	r2, [r3, #0]
	}
	if(GPIO_Pin == GPIO_PIN_1)
 8002674:	88fb      	ldrh	r3, [r7, #6]
 8002676:	2b02      	cmp	r3, #2
 8002678:	d102      	bne.n	8002680 <HAL_GPIO_EXTI_Callback+0x2c>
		ISR = MCU_Reset;
 800267a:	4b04      	ldr	r3, [pc, #16]	; (800268c <HAL_GPIO_EXTI_Callback+0x38>)
 800267c:	2200      	movs	r2, #0
 800267e:	701a      	strb	r2, [r3, #0]
}
 8002680:	bf00      	nop
 8002682:	370c      	adds	r7, #12
 8002684:	46bd      	mov	sp, r7
 8002686:	bc80      	pop	{r7}
 8002688:	4770      	bx	lr
 800268a:	bf00      	nop
 800268c:	20000225 	.word	0x20000225

08002690 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002690:	b480      	push	{r7}
 8002692:	b083      	sub	sp, #12
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
#ifdef USER_DEBUG
	//Breaks the while in the main function
	PauseFlag = false;
 8002698:	4b03      	ldr	r3, [pc, #12]	; (80026a8 <HAL_TIM_PeriodElapsedCallback+0x18>)
 800269a:	2200      	movs	r2, #0
 800269c:	701a      	strb	r2, [r3, #0]
#endif
}
 800269e:	bf00      	nop
 80026a0:	370c      	adds	r7, #12
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bc80      	pop	{r7}
 80026a6:	4770      	bx	lr
 80026a8:	20000024 	.word	0x20000024

080026ac <HAL_I2C_ErrorCallback>:

void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b083      	sub	sp, #12
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80026b4:	bf00      	nop
 80026b6:	370c      	adds	r7, #12
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bc80      	pop	{r7}
 80026bc:	4770      	bx	lr

080026be <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80026be:	b580      	push	{r7, lr}
 80026c0:	b090      	sub	sp, #64	; 0x40
 80026c2:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80026c4:	f107 0318 	add.w	r3, r7, #24
 80026c8:	2228      	movs	r2, #40	; 0x28
 80026ca:	2100      	movs	r1, #0
 80026cc:	4618      	mov	r0, r3
 80026ce:	f004 fc7b 	bl	8006fc8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80026d2:	1d3b      	adds	r3, r7, #4
 80026d4:	2200      	movs	r2, #0
 80026d6:	601a      	str	r2, [r3, #0]
 80026d8:	605a      	str	r2, [r3, #4]
 80026da:	609a      	str	r2, [r3, #8]
 80026dc:	60da      	str	r2, [r3, #12]
 80026de:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80026e0:	2309      	movs	r3, #9
 80026e2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80026e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80026e8:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80026ea:	2300      	movs	r3, #0
 80026ec:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80026ee:	2301      	movs	r3, #1
 80026f0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80026f2:	2301      	movs	r3, #1
 80026f4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80026f6:	2302      	movs	r3, #2
 80026f8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80026fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80026fe:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002700:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002704:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002706:	f107 0318 	add.w	r3, r7, #24
 800270a:	4618      	mov	r0, r3
 800270c:	f002 fd9e 	bl	800524c <HAL_RCC_OscConfig>
 8002710:	4603      	mov	r3, r0
 8002712:	2b00      	cmp	r3, #0
 8002714:	d001      	beq.n	800271a <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8002716:	f000 f9c7 	bl	8002aa8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800271a:	230f      	movs	r3, #15
 800271c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800271e:	2302      	movs	r3, #2
 8002720:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002722:	2300      	movs	r3, #0
 8002724:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002726:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800272a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800272c:	2300      	movs	r3, #0
 800272e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002730:	1d3b      	adds	r3, r7, #4
 8002732:	2102      	movs	r1, #2
 8002734:	4618      	mov	r0, r3
 8002736:	f003 f80b 	bl	8005750 <HAL_RCC_ClockConfig>
 800273a:	4603      	mov	r3, r0
 800273c:	2b00      	cmp	r3, #0
 800273e:	d001      	beq.n	8002744 <SystemClock_Config+0x86>
  {
    Error_Handler();
 8002740:	f000 f9b2 	bl	8002aa8 <Error_Handler>
  }
}
 8002744:	bf00      	nop
 8002746:	3740      	adds	r7, #64	; 0x40
 8002748:	46bd      	mov	sp, r7
 800274a:	bd80      	pop	{r7, pc}

0800274c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002750:	4b12      	ldr	r3, [pc, #72]	; (800279c <MX_I2C1_Init+0x50>)
 8002752:	4a13      	ldr	r2, [pc, #76]	; (80027a0 <MX_I2C1_Init+0x54>)
 8002754:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8002756:	4b11      	ldr	r3, [pc, #68]	; (800279c <MX_I2C1_Init+0x50>)
 8002758:	4a12      	ldr	r2, [pc, #72]	; (80027a4 <MX_I2C1_Init+0x58>)
 800275a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800275c:	4b0f      	ldr	r3, [pc, #60]	; (800279c <MX_I2C1_Init+0x50>)
 800275e:	2200      	movs	r2, #0
 8002760:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002762:	4b0e      	ldr	r3, [pc, #56]	; (800279c <MX_I2C1_Init+0x50>)
 8002764:	2200      	movs	r2, #0
 8002766:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002768:	4b0c      	ldr	r3, [pc, #48]	; (800279c <MX_I2C1_Init+0x50>)
 800276a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800276e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002770:	4b0a      	ldr	r3, [pc, #40]	; (800279c <MX_I2C1_Init+0x50>)
 8002772:	2200      	movs	r2, #0
 8002774:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002776:	4b09      	ldr	r3, [pc, #36]	; (800279c <MX_I2C1_Init+0x50>)
 8002778:	2200      	movs	r2, #0
 800277a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800277c:	4b07      	ldr	r3, [pc, #28]	; (800279c <MX_I2C1_Init+0x50>)
 800277e:	2200      	movs	r2, #0
 8002780:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002782:	4b06      	ldr	r3, [pc, #24]	; (800279c <MX_I2C1_Init+0x50>)
 8002784:	2200      	movs	r2, #0
 8002786:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002788:	4804      	ldr	r0, [pc, #16]	; (800279c <MX_I2C1_Init+0x50>)
 800278a:	f000 fef1 	bl	8003570 <HAL_I2C_Init>
 800278e:	4603      	mov	r3, r0
 8002790:	2b00      	cmp	r3, #0
 8002792:	d001      	beq.n	8002798 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002794:	f000 f988 	bl	8002aa8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002798:	bf00      	nop
 800279a:	bd80      	pop	{r7, pc}
 800279c:	200000e0 	.word	0x200000e0
 80027a0:	40005400 	.word	0x40005400
 80027a4:	00061a80 	.word	0x00061a80

080027a8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80027ac:	4b12      	ldr	r3, [pc, #72]	; (80027f8 <MX_I2C2_Init+0x50>)
 80027ae:	4a13      	ldr	r2, [pc, #76]	; (80027fc <MX_I2C2_Init+0x54>)
 80027b0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 80027b2:	4b11      	ldr	r3, [pc, #68]	; (80027f8 <MX_I2C2_Init+0x50>)
 80027b4:	4a12      	ldr	r2, [pc, #72]	; (8002800 <MX_I2C2_Init+0x58>)
 80027b6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80027b8:	4b0f      	ldr	r3, [pc, #60]	; (80027f8 <MX_I2C2_Init+0x50>)
 80027ba:	2200      	movs	r2, #0
 80027bc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80027be:	4b0e      	ldr	r3, [pc, #56]	; (80027f8 <MX_I2C2_Init+0x50>)
 80027c0:	2200      	movs	r2, #0
 80027c2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80027c4:	4b0c      	ldr	r3, [pc, #48]	; (80027f8 <MX_I2C2_Init+0x50>)
 80027c6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80027ca:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80027cc:	4b0a      	ldr	r3, [pc, #40]	; (80027f8 <MX_I2C2_Init+0x50>)
 80027ce:	2200      	movs	r2, #0
 80027d0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80027d2:	4b09      	ldr	r3, [pc, #36]	; (80027f8 <MX_I2C2_Init+0x50>)
 80027d4:	2200      	movs	r2, #0
 80027d6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80027d8:	4b07      	ldr	r3, [pc, #28]	; (80027f8 <MX_I2C2_Init+0x50>)
 80027da:	2200      	movs	r2, #0
 80027dc:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80027de:	4b06      	ldr	r3, [pc, #24]	; (80027f8 <MX_I2C2_Init+0x50>)
 80027e0:	2200      	movs	r2, #0
 80027e2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80027e4:	4804      	ldr	r0, [pc, #16]	; (80027f8 <MX_I2C2_Init+0x50>)
 80027e6:	f000 fec3 	bl	8003570 <HAL_I2C_Init>
 80027ea:	4603      	mov	r3, r0
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d001      	beq.n	80027f4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80027f0:	f000 f95a 	bl	8002aa8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80027f4:	bf00      	nop
 80027f6:	bd80      	pop	{r7, pc}
 80027f8:	20000134 	.word	0x20000134
 80027fc:	40005800 	.word	0x40005800
 8002800:	00061a80 	.word	0x00061a80

08002804 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8002808:	4b09      	ldr	r3, [pc, #36]	; (8002830 <MX_IWDG_Init+0x2c>)
 800280a:	4a0a      	ldr	r2, [pc, #40]	; (8002834 <MX_IWDG_Init+0x30>)
 800280c:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 800280e:	4b08      	ldr	r3, [pc, #32]	; (8002830 <MX_IWDG_Init+0x2c>)
 8002810:	2200      	movs	r2, #0
 8002812:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 4000;
 8002814:	4b06      	ldr	r3, [pc, #24]	; (8002830 <MX_IWDG_Init+0x2c>)
 8002816:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800281a:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 800281c:	4804      	ldr	r0, [pc, #16]	; (8002830 <MX_IWDG_Init+0x2c>)
 800281e:	f002 fcc4 	bl	80051aa <HAL_IWDG_Init>
 8002822:	4603      	mov	r3, r0
 8002824:	2b00      	cmp	r3, #0
 8002826:	d001      	beq.n	800282c <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 8002828:	f000 f93e 	bl	8002aa8 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 800282c:	bf00      	nop
 800282e:	bd80      	pop	{r7, pc}
 8002830:	20000218 	.word	0x20000218
 8002834:	40003000 	.word	0x40003000

08002838 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b086      	sub	sp, #24
 800283c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800283e:	f107 0308 	add.w	r3, r7, #8
 8002842:	2200      	movs	r2, #0
 8002844:	601a      	str	r2, [r3, #0]
 8002846:	605a      	str	r2, [r3, #4]
 8002848:	609a      	str	r2, [r3, #8]
 800284a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800284c:	463b      	mov	r3, r7
 800284e:	2200      	movs	r2, #0
 8002850:	601a      	str	r2, [r3, #0]
 8002852:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002854:	4b1d      	ldr	r3, [pc, #116]	; (80028cc <MX_TIM3_Init+0x94>)
 8002856:	4a1e      	ldr	r2, [pc, #120]	; (80028d0 <MX_TIM3_Init+0x98>)
 8002858:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 10;
 800285a:	4b1c      	ldr	r3, [pc, #112]	; (80028cc <MX_TIM3_Init+0x94>)
 800285c:	220a      	movs	r2, #10
 800285e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002860:	4b1a      	ldr	r3, [pc, #104]	; (80028cc <MX_TIM3_Init+0x94>)
 8002862:	2200      	movs	r2, #0
 8002864:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65454;
 8002866:	4b19      	ldr	r3, [pc, #100]	; (80028cc <MX_TIM3_Init+0x94>)
 8002868:	f64f 72ae 	movw	r2, #65454	; 0xffae
 800286c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800286e:	4b17      	ldr	r3, [pc, #92]	; (80028cc <MX_TIM3_Init+0x94>)
 8002870:	2200      	movs	r2, #0
 8002872:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002874:	4b15      	ldr	r3, [pc, #84]	; (80028cc <MX_TIM3_Init+0x94>)
 8002876:	2280      	movs	r2, #128	; 0x80
 8002878:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800287a:	4814      	ldr	r0, [pc, #80]	; (80028cc <MX_TIM3_Init+0x94>)
 800287c:	f003 f8e2 	bl	8005a44 <HAL_TIM_Base_Init>
 8002880:	4603      	mov	r3, r0
 8002882:	2b00      	cmp	r3, #0
 8002884:	d001      	beq.n	800288a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8002886:	f000 f90f 	bl	8002aa8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800288a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800288e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002890:	f107 0308 	add.w	r3, r7, #8
 8002894:	4619      	mov	r1, r3
 8002896:	480d      	ldr	r0, [pc, #52]	; (80028cc <MX_TIM3_Init+0x94>)
 8002898:	f003 fac8 	bl	8005e2c <HAL_TIM_ConfigClockSource>
 800289c:	4603      	mov	r3, r0
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d001      	beq.n	80028a6 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80028a2:	f000 f901 	bl	8002aa8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80028a6:	2300      	movs	r3, #0
 80028a8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028aa:	2300      	movs	r3, #0
 80028ac:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80028ae:	463b      	mov	r3, r7
 80028b0:	4619      	mov	r1, r3
 80028b2:	4806      	ldr	r0, [pc, #24]	; (80028cc <MX_TIM3_Init+0x94>)
 80028b4:	f003 fc9e 	bl	80061f4 <HAL_TIMEx_MasterConfigSynchronization>
 80028b8:	4603      	mov	r3, r0
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d001      	beq.n	80028c2 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80028be:	f000 f8f3 	bl	8002aa8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80028c2:	bf00      	nop
 80028c4:	3718      	adds	r7, #24
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}
 80028ca:	bf00      	nop
 80028cc:	20000188 	.word	0x20000188
 80028d0:	40000400 	.word	0x40000400

080028d4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b086      	sub	sp, #24
 80028d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80028da:	f107 0308 	add.w	r3, r7, #8
 80028de:	2200      	movs	r2, #0
 80028e0:	601a      	str	r2, [r3, #0]
 80028e2:	605a      	str	r2, [r3, #4]
 80028e4:	609a      	str	r2, [r3, #8]
 80028e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80028e8:	463b      	mov	r3, r7
 80028ea:	2200      	movs	r2, #0
 80028ec:	601a      	str	r2, [r3, #0]
 80028ee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80028f0:	4b1d      	ldr	r3, [pc, #116]	; (8002968 <MX_TIM4_Init+0x94>)
 80028f2:	4a1e      	ldr	r2, [pc, #120]	; (800296c <MX_TIM4_Init+0x98>)
 80028f4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 274;
 80028f6:	4b1c      	ldr	r3, [pc, #112]	; (8002968 <MX_TIM4_Init+0x94>)
 80028f8:	f44f 7289 	mov.w	r2, #274	; 0x112
 80028fc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028fe:	4b1a      	ldr	r3, [pc, #104]	; (8002968 <MX_TIM4_Init+0x94>)
 8002900:	2200      	movs	r2, #0
 8002902:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002904:	4b18      	ldr	r3, [pc, #96]	; (8002968 <MX_TIM4_Init+0x94>)
 8002906:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800290a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800290c:	4b16      	ldr	r3, [pc, #88]	; (8002968 <MX_TIM4_Init+0x94>)
 800290e:	2200      	movs	r2, #0
 8002910:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002912:	4b15      	ldr	r3, [pc, #84]	; (8002968 <MX_TIM4_Init+0x94>)
 8002914:	2280      	movs	r2, #128	; 0x80
 8002916:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002918:	4813      	ldr	r0, [pc, #76]	; (8002968 <MX_TIM4_Init+0x94>)
 800291a:	f003 f893 	bl	8005a44 <HAL_TIM_Base_Init>
 800291e:	4603      	mov	r3, r0
 8002920:	2b00      	cmp	r3, #0
 8002922:	d001      	beq.n	8002928 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8002924:	f000 f8c0 	bl	8002aa8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002928:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800292c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800292e:	f107 0308 	add.w	r3, r7, #8
 8002932:	4619      	mov	r1, r3
 8002934:	480c      	ldr	r0, [pc, #48]	; (8002968 <MX_TIM4_Init+0x94>)
 8002936:	f003 fa79 	bl	8005e2c <HAL_TIM_ConfigClockSource>
 800293a:	4603      	mov	r3, r0
 800293c:	2b00      	cmp	r3, #0
 800293e:	d001      	beq.n	8002944 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8002940:	f000 f8b2 	bl	8002aa8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002944:	2300      	movs	r3, #0
 8002946:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002948:	2300      	movs	r3, #0
 800294a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800294c:	463b      	mov	r3, r7
 800294e:	4619      	mov	r1, r3
 8002950:	4805      	ldr	r0, [pc, #20]	; (8002968 <MX_TIM4_Init+0x94>)
 8002952:	f003 fc4f 	bl	80061f4 <HAL_TIMEx_MasterConfigSynchronization>
 8002956:	4603      	mov	r3, r0
 8002958:	2b00      	cmp	r3, #0
 800295a:	d001      	beq.n	8002960 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 800295c:	f000 f8a4 	bl	8002aa8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002960:	bf00      	nop
 8002962:	3718      	adds	r7, #24
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}
 8002968:	200001d0 	.word	0x200001d0
 800296c:	40000800 	.word	0x40000800

08002970 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b088      	sub	sp, #32
 8002974:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002976:	f107 0310 	add.w	r3, r7, #16
 800297a:	2200      	movs	r2, #0
 800297c:	601a      	str	r2, [r3, #0]
 800297e:	605a      	str	r2, [r3, #4]
 8002980:	609a      	str	r2, [r3, #8]
 8002982:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002984:	4b43      	ldr	r3, [pc, #268]	; (8002a94 <MX_GPIO_Init+0x124>)
 8002986:	699b      	ldr	r3, [r3, #24]
 8002988:	4a42      	ldr	r2, [pc, #264]	; (8002a94 <MX_GPIO_Init+0x124>)
 800298a:	f043 0310 	orr.w	r3, r3, #16
 800298e:	6193      	str	r3, [r2, #24]
 8002990:	4b40      	ldr	r3, [pc, #256]	; (8002a94 <MX_GPIO_Init+0x124>)
 8002992:	699b      	ldr	r3, [r3, #24]
 8002994:	f003 0310 	and.w	r3, r3, #16
 8002998:	60fb      	str	r3, [r7, #12]
 800299a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800299c:	4b3d      	ldr	r3, [pc, #244]	; (8002a94 <MX_GPIO_Init+0x124>)
 800299e:	699b      	ldr	r3, [r3, #24]
 80029a0:	4a3c      	ldr	r2, [pc, #240]	; (8002a94 <MX_GPIO_Init+0x124>)
 80029a2:	f043 0320 	orr.w	r3, r3, #32
 80029a6:	6193      	str	r3, [r2, #24]
 80029a8:	4b3a      	ldr	r3, [pc, #232]	; (8002a94 <MX_GPIO_Init+0x124>)
 80029aa:	699b      	ldr	r3, [r3, #24]
 80029ac:	f003 0320 	and.w	r3, r3, #32
 80029b0:	60bb      	str	r3, [r7, #8]
 80029b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80029b4:	4b37      	ldr	r3, [pc, #220]	; (8002a94 <MX_GPIO_Init+0x124>)
 80029b6:	699b      	ldr	r3, [r3, #24]
 80029b8:	4a36      	ldr	r2, [pc, #216]	; (8002a94 <MX_GPIO_Init+0x124>)
 80029ba:	f043 0304 	orr.w	r3, r3, #4
 80029be:	6193      	str	r3, [r2, #24]
 80029c0:	4b34      	ldr	r3, [pc, #208]	; (8002a94 <MX_GPIO_Init+0x124>)
 80029c2:	699b      	ldr	r3, [r3, #24]
 80029c4:	f003 0304 	and.w	r3, r3, #4
 80029c8:	607b      	str	r3, [r7, #4]
 80029ca:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80029cc:	4b31      	ldr	r3, [pc, #196]	; (8002a94 <MX_GPIO_Init+0x124>)
 80029ce:	699b      	ldr	r3, [r3, #24]
 80029d0:	4a30      	ldr	r2, [pc, #192]	; (8002a94 <MX_GPIO_Init+0x124>)
 80029d2:	f043 0308 	orr.w	r3, r3, #8
 80029d6:	6193      	str	r3, [r2, #24]
 80029d8:	4b2e      	ldr	r3, [pc, #184]	; (8002a94 <MX_GPIO_Init+0x124>)
 80029da:	699b      	ldr	r3, [r3, #24]
 80029dc:	f003 0308 	and.w	r3, r3, #8
 80029e0:	603b      	str	r3, [r7, #0]
 80029e2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80029e4:	2200      	movs	r2, #0
 80029e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80029ea:	482b      	ldr	r0, [pc, #172]	; (8002a98 <MX_GPIO_Init+0x128>)
 80029ec:	f000 fd90 	bl	8003510 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, A0_Pin|A1_Pin|A2_Pin|A4_Pin
 80029f0:	2200      	movs	r2, #0
 80029f2:	f649 51c0 	movw	r1, #40384	; 0x9dc0
 80029f6:	4829      	ldr	r0, [pc, #164]	; (8002a9c <MX_GPIO_Init+0x12c>)
 80029f8:	f000 fd8a 	bl	8003510 <HAL_GPIO_WritePin>
                          |A5_Pin|A6_Pin|A7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80029fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002a00:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a02:	2301      	movs	r3, #1
 8002a04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a06:	2300      	movs	r3, #0
 8002a08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a0a:	2302      	movs	r3, #2
 8002a0c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a0e:	f107 0310 	add.w	r3, r7, #16
 8002a12:	4619      	mov	r1, r3
 8002a14:	4820      	ldr	r0, [pc, #128]	; (8002a98 <MX_GPIO_Init+0x128>)
 8002a16:	f000 fbf7 	bl	8003208 <HAL_GPIO_Init>

  /*Configure GPIO pins : Arriba_Pin Abajo_Pin Derecha_Pin Izquierda_Pin
                           Ok_Pin WP_Pin A3_Pin */
  GPIO_InitStruct.Pin = Arriba_Pin|Abajo_Pin|Derecha_Pin|Izquierda_Pin
 8002a1a:	f240 233f 	movw	r3, #575	; 0x23f
 8002a1e:	613b      	str	r3, [r7, #16]
                          |Ok_Pin|WP_Pin|A3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a20:	2300      	movs	r3, #0
 8002a22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a24:	2300      	movs	r3, #0
 8002a26:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a28:	f107 0310 	add.w	r3, r7, #16
 8002a2c:	4619      	mov	r1, r3
 8002a2e:	481b      	ldr	r0, [pc, #108]	; (8002a9c <MX_GPIO_Init+0x12c>)
 8002a30:	f000 fbea 	bl	8003208 <HAL_GPIO_Init>

  /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin A4_Pin
                           A5_Pin A6_Pin A7_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A4_Pin
 8002a34:	f649 53c0 	movw	r3, #40384	; 0x9dc0
 8002a38:	613b      	str	r3, [r7, #16]
                          |A5_Pin|A6_Pin|A7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a42:	2302      	movs	r3, #2
 8002a44:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a46:	f107 0310 	add.w	r3, r7, #16
 8002a4a:	4619      	mov	r1, r3
 8002a4c:	4813      	ldr	r0, [pc, #76]	; (8002a9c <MX_GPIO_Init+0x12c>)
 8002a4e:	f000 fbdb 	bl	8003208 <HAL_GPIO_Init>

  /*Configure GPIO pins : Menu_IT_Pin Reset_IT_Pin */
  GPIO_InitStruct.Pin = Menu_IT_Pin|Reset_IT_Pin;
 8002a52:	2303      	movs	r3, #3
 8002a54:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002a56:	4b12      	ldr	r3, [pc, #72]	; (8002aa0 <MX_GPIO_Init+0x130>)
 8002a58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a5e:	f107 0310 	add.w	r3, r7, #16
 8002a62:	4619      	mov	r1, r3
 8002a64:	480f      	ldr	r0, [pc, #60]	; (8002aa4 <MX_GPIO_Init+0x134>)
 8002a66:	f000 fbcf 	bl	8003208 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	2100      	movs	r1, #0
 8002a6e:	2006      	movs	r0, #6
 8002a70:	f000 fb1b 	bl	80030aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002a74:	2006      	movs	r0, #6
 8002a76:	f000 fb34 	bl	80030e2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	2100      	movs	r1, #0
 8002a7e:	2007      	movs	r0, #7
 8002a80:	f000 fb13 	bl	80030aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002a84:	2007      	movs	r0, #7
 8002a86:	f000 fb2c 	bl	80030e2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002a8a:	bf00      	nop
 8002a8c:	3720      	adds	r7, #32
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}
 8002a92:	bf00      	nop
 8002a94:	40021000 	.word	0x40021000
 8002a98:	40011000 	.word	0x40011000
 8002a9c:	40010800 	.word	0x40010800
 8002aa0:	10210000 	.word	0x10210000
 8002aa4:	40010c00 	.word	0x40010c00

08002aa8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002aac:	b672      	cpsid	i
}
 8002aae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002ab0:	e7fe      	b.n	8002ab0 <Error_Handler+0x8>
	...

08002ab4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b083      	sub	sp, #12
 8002ab8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002aba:	4b0e      	ldr	r3, [pc, #56]	; (8002af4 <HAL_MspInit+0x40>)
 8002abc:	699b      	ldr	r3, [r3, #24]
 8002abe:	4a0d      	ldr	r2, [pc, #52]	; (8002af4 <HAL_MspInit+0x40>)
 8002ac0:	f043 0301 	orr.w	r3, r3, #1
 8002ac4:	6193      	str	r3, [r2, #24]
 8002ac6:	4b0b      	ldr	r3, [pc, #44]	; (8002af4 <HAL_MspInit+0x40>)
 8002ac8:	699b      	ldr	r3, [r3, #24]
 8002aca:	f003 0301 	and.w	r3, r3, #1
 8002ace:	607b      	str	r3, [r7, #4]
 8002ad0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ad2:	4b08      	ldr	r3, [pc, #32]	; (8002af4 <HAL_MspInit+0x40>)
 8002ad4:	69db      	ldr	r3, [r3, #28]
 8002ad6:	4a07      	ldr	r2, [pc, #28]	; (8002af4 <HAL_MspInit+0x40>)
 8002ad8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002adc:	61d3      	str	r3, [r2, #28]
 8002ade:	4b05      	ldr	r3, [pc, #20]	; (8002af4 <HAL_MspInit+0x40>)
 8002ae0:	69db      	ldr	r3, [r3, #28]
 8002ae2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ae6:	603b      	str	r3, [r7, #0]
 8002ae8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002aea:	bf00      	nop
 8002aec:	370c      	adds	r7, #12
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bc80      	pop	{r7}
 8002af2:	4770      	bx	lr
 8002af4:	40021000 	.word	0x40021000

08002af8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b08c      	sub	sp, #48	; 0x30
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b00:	f107 031c 	add.w	r3, r7, #28
 8002b04:	2200      	movs	r2, #0
 8002b06:	601a      	str	r2, [r3, #0]
 8002b08:	605a      	str	r2, [r3, #4]
 8002b0a:	609a      	str	r2, [r3, #8]
 8002b0c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a3a      	ldr	r2, [pc, #232]	; (8002bfc <HAL_I2C_MspInit+0x104>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d13b      	bne.n	8002b90 <HAL_I2C_MspInit+0x98>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b18:	4b39      	ldr	r3, [pc, #228]	; (8002c00 <HAL_I2C_MspInit+0x108>)
 8002b1a:	699b      	ldr	r3, [r3, #24]
 8002b1c:	4a38      	ldr	r2, [pc, #224]	; (8002c00 <HAL_I2C_MspInit+0x108>)
 8002b1e:	f043 0308 	orr.w	r3, r3, #8
 8002b22:	6193      	str	r3, [r2, #24]
 8002b24:	4b36      	ldr	r3, [pc, #216]	; (8002c00 <HAL_I2C_MspInit+0x108>)
 8002b26:	699b      	ldr	r3, [r3, #24]
 8002b28:	f003 0308 	and.w	r3, r3, #8
 8002b2c:	61bb      	str	r3, [r7, #24]
 8002b2e:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002b30:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002b34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b36:	2312      	movs	r3, #18
 8002b38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b3a:	2303      	movs	r3, #3
 8002b3c:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b3e:	f107 031c 	add.w	r3, r7, #28
 8002b42:	4619      	mov	r1, r3
 8002b44:	482f      	ldr	r0, [pc, #188]	; (8002c04 <HAL_I2C_MspInit+0x10c>)
 8002b46:	f000 fb5f 	bl	8003208 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8002b4a:	4b2f      	ldr	r3, [pc, #188]	; (8002c08 <HAL_I2C_MspInit+0x110>)
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b52:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002b56:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b5a:	f043 0302 	orr.w	r3, r3, #2
 8002b5e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b60:	4a29      	ldr	r2, [pc, #164]	; (8002c08 <HAL_I2C_MspInit+0x110>)
 8002b62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b64:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002b66:	4b26      	ldr	r3, [pc, #152]	; (8002c00 <HAL_I2C_MspInit+0x108>)
 8002b68:	69db      	ldr	r3, [r3, #28]
 8002b6a:	4a25      	ldr	r2, [pc, #148]	; (8002c00 <HAL_I2C_MspInit+0x108>)
 8002b6c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002b70:	61d3      	str	r3, [r2, #28]
 8002b72:	4b23      	ldr	r3, [pc, #140]	; (8002c00 <HAL_I2C_MspInit+0x108>)
 8002b74:	69db      	ldr	r3, [r3, #28]
 8002b76:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b7a:	617b      	str	r3, [r7, #20]
 8002b7c:	697b      	ldr	r3, [r7, #20]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8002b7e:	2200      	movs	r2, #0
 8002b80:	2100      	movs	r1, #0
 8002b82:	2020      	movs	r0, #32
 8002b84:	f000 fa91 	bl	80030aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8002b88:	2020      	movs	r0, #32
 8002b8a:	f000 faaa 	bl	80030e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002b8e:	e031      	b.n	8002bf4 <HAL_I2C_MspInit+0xfc>
  else if(hi2c->Instance==I2C2)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a1d      	ldr	r2, [pc, #116]	; (8002c0c <HAL_I2C_MspInit+0x114>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d12c      	bne.n	8002bf4 <HAL_I2C_MspInit+0xfc>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b9a:	4b19      	ldr	r3, [pc, #100]	; (8002c00 <HAL_I2C_MspInit+0x108>)
 8002b9c:	699b      	ldr	r3, [r3, #24]
 8002b9e:	4a18      	ldr	r2, [pc, #96]	; (8002c00 <HAL_I2C_MspInit+0x108>)
 8002ba0:	f043 0308 	orr.w	r3, r3, #8
 8002ba4:	6193      	str	r3, [r2, #24]
 8002ba6:	4b16      	ldr	r3, [pc, #88]	; (8002c00 <HAL_I2C_MspInit+0x108>)
 8002ba8:	699b      	ldr	r3, [r3, #24]
 8002baa:	f003 0308 	and.w	r3, r3, #8
 8002bae:	613b      	str	r3, [r7, #16]
 8002bb0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002bb2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002bb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002bb8:	2312      	movs	r3, #18
 8002bba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002bbc:	2303      	movs	r3, #3
 8002bbe:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bc0:	f107 031c 	add.w	r3, r7, #28
 8002bc4:	4619      	mov	r1, r3
 8002bc6:	480f      	ldr	r0, [pc, #60]	; (8002c04 <HAL_I2C_MspInit+0x10c>)
 8002bc8:	f000 fb1e 	bl	8003208 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002bcc:	4b0c      	ldr	r3, [pc, #48]	; (8002c00 <HAL_I2C_MspInit+0x108>)
 8002bce:	69db      	ldr	r3, [r3, #28]
 8002bd0:	4a0b      	ldr	r2, [pc, #44]	; (8002c00 <HAL_I2C_MspInit+0x108>)
 8002bd2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002bd6:	61d3      	str	r3, [r2, #28]
 8002bd8:	4b09      	ldr	r3, [pc, #36]	; (8002c00 <HAL_I2C_MspInit+0x108>)
 8002bda:	69db      	ldr	r3, [r3, #28]
 8002bdc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002be0:	60fb      	str	r3, [r7, #12]
 8002be2:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8002be4:	2200      	movs	r2, #0
 8002be6:	2100      	movs	r1, #0
 8002be8:	2022      	movs	r0, #34	; 0x22
 8002bea:	f000 fa5e 	bl	80030aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8002bee:	2022      	movs	r0, #34	; 0x22
 8002bf0:	f000 fa77 	bl	80030e2 <HAL_NVIC_EnableIRQ>
}
 8002bf4:	bf00      	nop
 8002bf6:	3730      	adds	r7, #48	; 0x30
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}
 8002bfc:	40005400 	.word	0x40005400
 8002c00:	40021000 	.word	0x40021000
 8002c04:	40010c00 	.word	0x40010c00
 8002c08:	40010000 	.word	0x40010000
 8002c0c:	40005800 	.word	0x40005800

08002c10 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b084      	sub	sp, #16
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a16      	ldr	r2, [pc, #88]	; (8002c78 <HAL_TIM_Base_MspInit+0x68>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d114      	bne.n	8002c4c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002c22:	4b16      	ldr	r3, [pc, #88]	; (8002c7c <HAL_TIM_Base_MspInit+0x6c>)
 8002c24:	69db      	ldr	r3, [r3, #28]
 8002c26:	4a15      	ldr	r2, [pc, #84]	; (8002c7c <HAL_TIM_Base_MspInit+0x6c>)
 8002c28:	f043 0302 	orr.w	r3, r3, #2
 8002c2c:	61d3      	str	r3, [r2, #28]
 8002c2e:	4b13      	ldr	r3, [pc, #76]	; (8002c7c <HAL_TIM_Base_MspInit+0x6c>)
 8002c30:	69db      	ldr	r3, [r3, #28]
 8002c32:	f003 0302 	and.w	r3, r3, #2
 8002c36:	60fb      	str	r3, [r7, #12]
 8002c38:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	2100      	movs	r1, #0
 8002c3e:	201d      	movs	r0, #29
 8002c40:	f000 fa33 	bl	80030aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002c44:	201d      	movs	r0, #29
 8002c46:	f000 fa4c 	bl	80030e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002c4a:	e010      	b.n	8002c6e <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM4)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a0b      	ldr	r2, [pc, #44]	; (8002c80 <HAL_TIM_Base_MspInit+0x70>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d10b      	bne.n	8002c6e <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002c56:	4b09      	ldr	r3, [pc, #36]	; (8002c7c <HAL_TIM_Base_MspInit+0x6c>)
 8002c58:	69db      	ldr	r3, [r3, #28]
 8002c5a:	4a08      	ldr	r2, [pc, #32]	; (8002c7c <HAL_TIM_Base_MspInit+0x6c>)
 8002c5c:	f043 0304 	orr.w	r3, r3, #4
 8002c60:	61d3      	str	r3, [r2, #28]
 8002c62:	4b06      	ldr	r3, [pc, #24]	; (8002c7c <HAL_TIM_Base_MspInit+0x6c>)
 8002c64:	69db      	ldr	r3, [r3, #28]
 8002c66:	f003 0304 	and.w	r3, r3, #4
 8002c6a:	60bb      	str	r3, [r7, #8]
 8002c6c:	68bb      	ldr	r3, [r7, #8]
}
 8002c6e:	bf00      	nop
 8002c70:	3710      	adds	r7, #16
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}
 8002c76:	bf00      	nop
 8002c78:	40000400 	.word	0x40000400
 8002c7c:	40021000 	.word	0x40021000
 8002c80:	40000800 	.word	0x40000800

08002c84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c84:	b480      	push	{r7}
 8002c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002c88:	e7fe      	b.n	8002c88 <NMI_Handler+0x4>

08002c8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c8a:	b480      	push	{r7}
 8002c8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c8e:	e7fe      	b.n	8002c8e <HardFault_Handler+0x4>

08002c90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c90:	b480      	push	{r7}
 8002c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c94:	e7fe      	b.n	8002c94 <MemManage_Handler+0x4>

08002c96 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c96:	b480      	push	{r7}
 8002c98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c9a:	e7fe      	b.n	8002c9a <BusFault_Handler+0x4>

08002c9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ca0:	e7fe      	b.n	8002ca0 <UsageFault_Handler+0x4>

08002ca2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002ca2:	b480      	push	{r7}
 8002ca4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002ca6:	bf00      	nop
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bc80      	pop	{r7}
 8002cac:	4770      	bx	lr

08002cae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002cae:	b480      	push	{r7}
 8002cb0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002cb2:	bf00      	nop
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bc80      	pop	{r7}
 8002cb8:	4770      	bx	lr

08002cba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002cba:	b480      	push	{r7}
 8002cbc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002cbe:	bf00      	nop
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bc80      	pop	{r7}
 8002cc4:	4770      	bx	lr

08002cc6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002cc6:	b580      	push	{r7, lr}
 8002cc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002cca:	f000 f8d7 	bl	8002e7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002cce:	bf00      	nop
 8002cd0:	bd80      	pop	{r7, pc}

08002cd2 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002cd2:	b580      	push	{r7, lr}
 8002cd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Menu_IT_Pin);
 8002cd6:	2001      	movs	r0, #1
 8002cd8:	f000 fc32 	bl	8003540 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002cdc:	bf00      	nop
 8002cde:	bd80      	pop	{r7, pc}

08002ce0 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Reset_IT_Pin);
 8002ce4:	2002      	movs	r0, #2
 8002ce6:	f000 fc2b 	bl	8003540 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002cea:	bf00      	nop
 8002cec:	bd80      	pop	{r7, pc}
	...

08002cf0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002cf4:	4802      	ldr	r0, [pc, #8]	; (8002d00 <TIM3_IRQHandler+0x10>)
 8002cf6:	f002 ff91 	bl	8005c1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002cfa:	bf00      	nop
 8002cfc:	bd80      	pop	{r7, pc}
 8002cfe:	bf00      	nop
 8002d00:	20000188 	.word	0x20000188

08002d04 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8002d08:	4802      	ldr	r0, [pc, #8]	; (8002d14 <I2C1_ER_IRQHandler+0x10>)
 8002d0a:	f001 fb1b 	bl	8004344 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8002d0e:	bf00      	nop
 8002d10:	bd80      	pop	{r7, pc}
 8002d12:	bf00      	nop
 8002d14:	200000e0 	.word	0x200000e0

08002d18 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8002d1c:	4802      	ldr	r0, [pc, #8]	; (8002d28 <I2C2_ER_IRQHandler+0x10>)
 8002d1e:	f001 fb11 	bl	8004344 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8002d22:	bf00      	nop
 8002d24:	bd80      	pop	{r7, pc}
 8002d26:	bf00      	nop
 8002d28:	20000134 	.word	0x20000134

08002d2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b086      	sub	sp, #24
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d34:	4a14      	ldr	r2, [pc, #80]	; (8002d88 <_sbrk+0x5c>)
 8002d36:	4b15      	ldr	r3, [pc, #84]	; (8002d8c <_sbrk+0x60>)
 8002d38:	1ad3      	subs	r3, r2, r3
 8002d3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d40:	4b13      	ldr	r3, [pc, #76]	; (8002d90 <_sbrk+0x64>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d102      	bne.n	8002d4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002d48:	4b11      	ldr	r3, [pc, #68]	; (8002d90 <_sbrk+0x64>)
 8002d4a:	4a12      	ldr	r2, [pc, #72]	; (8002d94 <_sbrk+0x68>)
 8002d4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d4e:	4b10      	ldr	r3, [pc, #64]	; (8002d90 <_sbrk+0x64>)
 8002d50:	681a      	ldr	r2, [r3, #0]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	4413      	add	r3, r2
 8002d56:	693a      	ldr	r2, [r7, #16]
 8002d58:	429a      	cmp	r2, r3
 8002d5a:	d207      	bcs.n	8002d6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002d5c:	f004 f902 	bl	8006f64 <__errno>
 8002d60:	4603      	mov	r3, r0
 8002d62:	220c      	movs	r2, #12
 8002d64:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002d66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002d6a:	e009      	b.n	8002d80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002d6c:	4b08      	ldr	r3, [pc, #32]	; (8002d90 <_sbrk+0x64>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002d72:	4b07      	ldr	r3, [pc, #28]	; (8002d90 <_sbrk+0x64>)
 8002d74:	681a      	ldr	r2, [r3, #0]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	4413      	add	r3, r2
 8002d7a:	4a05      	ldr	r2, [pc, #20]	; (8002d90 <_sbrk+0x64>)
 8002d7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	3718      	adds	r7, #24
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bd80      	pop	{r7, pc}
 8002d88:	20005000 	.word	0x20005000
 8002d8c:	00000400 	.word	0x00000400
 8002d90:	20000248 	.word	0x20000248
 8002d94:	20000668 	.word	0x20000668

08002d98 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002d9c:	bf00      	nop
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bc80      	pop	{r7}
 8002da2:	4770      	bx	lr

08002da4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002da4:	480c      	ldr	r0, [pc, #48]	; (8002dd8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002da6:	490d      	ldr	r1, [pc, #52]	; (8002ddc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002da8:	4a0d      	ldr	r2, [pc, #52]	; (8002de0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002daa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002dac:	e002      	b.n	8002db4 <LoopCopyDataInit>

08002dae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002dae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002db0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002db2:	3304      	adds	r3, #4

08002db4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002db4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002db6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002db8:	d3f9      	bcc.n	8002dae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002dba:	4a0a      	ldr	r2, [pc, #40]	; (8002de4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002dbc:	4c0a      	ldr	r4, [pc, #40]	; (8002de8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002dbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002dc0:	e001      	b.n	8002dc6 <LoopFillZerobss>

08002dc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002dc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002dc4:	3204      	adds	r2, #4

08002dc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002dc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002dc8:	d3fb      	bcc.n	8002dc2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002dca:	f7ff ffe5 	bl	8002d98 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002dce:	f004 f8cf 	bl	8006f70 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002dd2:	f7fd fff3 	bl	8000dbc <main>
  bx lr
 8002dd6:	4770      	bx	lr
  ldr r0, =_sdata
 8002dd8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ddc:	200000c4 	.word	0x200000c4
  ldr r2, =_sidata
 8002de0:	0800a328 	.word	0x0800a328
  ldr r2, =_sbss
 8002de4:	200000c4 	.word	0x200000c4
  ldr r4, =_ebss
 8002de8:	20000668 	.word	0x20000668

08002dec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002dec:	e7fe      	b.n	8002dec <ADC1_2_IRQHandler>
	...

08002df0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002df4:	4b08      	ldr	r3, [pc, #32]	; (8002e18 <HAL_Init+0x28>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a07      	ldr	r2, [pc, #28]	; (8002e18 <HAL_Init+0x28>)
 8002dfa:	f043 0310 	orr.w	r3, r3, #16
 8002dfe:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e00:	2003      	movs	r0, #3
 8002e02:	f000 f947 	bl	8003094 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002e06:	200f      	movs	r0, #15
 8002e08:	f000 f808 	bl	8002e1c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002e0c:	f7ff fe52 	bl	8002ab4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002e10:	2300      	movs	r3, #0
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	bd80      	pop	{r7, pc}
 8002e16:	bf00      	nop
 8002e18:	40022000 	.word	0x40022000

08002e1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b082      	sub	sp, #8
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002e24:	4b12      	ldr	r3, [pc, #72]	; (8002e70 <HAL_InitTick+0x54>)
 8002e26:	681a      	ldr	r2, [r3, #0]
 8002e28:	4b12      	ldr	r3, [pc, #72]	; (8002e74 <HAL_InitTick+0x58>)
 8002e2a:	781b      	ldrb	r3, [r3, #0]
 8002e2c:	4619      	mov	r1, r3
 8002e2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e32:	fbb3 f3f1 	udiv	r3, r3, r1
 8002e36:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f000 f95f 	bl	80030fe <HAL_SYSTICK_Config>
 8002e40:	4603      	mov	r3, r0
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d001      	beq.n	8002e4a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	e00e      	b.n	8002e68 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2b0f      	cmp	r3, #15
 8002e4e:	d80a      	bhi.n	8002e66 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e50:	2200      	movs	r2, #0
 8002e52:	6879      	ldr	r1, [r7, #4]
 8002e54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002e58:	f000 f927 	bl	80030aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002e5c:	4a06      	ldr	r2, [pc, #24]	; (8002e78 <HAL_InitTick+0x5c>)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002e62:	2300      	movs	r3, #0
 8002e64:	e000      	b.n	8002e68 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	3708      	adds	r7, #8
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd80      	pop	{r7, pc}
 8002e70:	2000003c 	.word	0x2000003c
 8002e74:	20000044 	.word	0x20000044
 8002e78:	20000040 	.word	0x20000040

08002e7c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e80:	4b05      	ldr	r3, [pc, #20]	; (8002e98 <HAL_IncTick+0x1c>)
 8002e82:	781b      	ldrb	r3, [r3, #0]
 8002e84:	461a      	mov	r2, r3
 8002e86:	4b05      	ldr	r3, [pc, #20]	; (8002e9c <HAL_IncTick+0x20>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4413      	add	r3, r2
 8002e8c:	4a03      	ldr	r2, [pc, #12]	; (8002e9c <HAL_IncTick+0x20>)
 8002e8e:	6013      	str	r3, [r2, #0]
}
 8002e90:	bf00      	nop
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bc80      	pop	{r7}
 8002e96:	4770      	bx	lr
 8002e98:	20000044 	.word	0x20000044
 8002e9c:	2000024c 	.word	0x2000024c

08002ea0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	af00      	add	r7, sp, #0
  return uwTick;
 8002ea4:	4b02      	ldr	r3, [pc, #8]	; (8002eb0 <HAL_GetTick+0x10>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bc80      	pop	{r7}
 8002eae:	4770      	bx	lr
 8002eb0:	2000024c 	.word	0x2000024c

08002eb4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b084      	sub	sp, #16
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ebc:	f7ff fff0 	bl	8002ea0 <HAL_GetTick>
 8002ec0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ecc:	d005      	beq.n	8002eda <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ece:	4b0a      	ldr	r3, [pc, #40]	; (8002ef8 <HAL_Delay+0x44>)
 8002ed0:	781b      	ldrb	r3, [r3, #0]
 8002ed2:	461a      	mov	r2, r3
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	4413      	add	r3, r2
 8002ed8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002eda:	bf00      	nop
 8002edc:	f7ff ffe0 	bl	8002ea0 <HAL_GetTick>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	1ad3      	subs	r3, r2, r3
 8002ee6:	68fa      	ldr	r2, [r7, #12]
 8002ee8:	429a      	cmp	r2, r3
 8002eea:	d8f7      	bhi.n	8002edc <HAL_Delay+0x28>
  {
  }
}
 8002eec:	bf00      	nop
 8002eee:	bf00      	nop
 8002ef0:	3710      	adds	r7, #16
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	bf00      	nop
 8002ef8:	20000044 	.word	0x20000044

08002efc <__NVIC_SetPriorityGrouping>:
{
 8002efc:	b480      	push	{r7}
 8002efe:	b085      	sub	sp, #20
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	f003 0307 	and.w	r3, r3, #7
 8002f0a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f0c:	4b0c      	ldr	r3, [pc, #48]	; (8002f40 <__NVIC_SetPriorityGrouping+0x44>)
 8002f0e:	68db      	ldr	r3, [r3, #12]
 8002f10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f12:	68ba      	ldr	r2, [r7, #8]
 8002f14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f18:	4013      	ands	r3, r2
 8002f1a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f24:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002f28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f2e:	4a04      	ldr	r2, [pc, #16]	; (8002f40 <__NVIC_SetPriorityGrouping+0x44>)
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	60d3      	str	r3, [r2, #12]
}
 8002f34:	bf00      	nop
 8002f36:	3714      	adds	r7, #20
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bc80      	pop	{r7}
 8002f3c:	4770      	bx	lr
 8002f3e:	bf00      	nop
 8002f40:	e000ed00 	.word	0xe000ed00

08002f44 <__NVIC_GetPriorityGrouping>:
{
 8002f44:	b480      	push	{r7}
 8002f46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f48:	4b04      	ldr	r3, [pc, #16]	; (8002f5c <__NVIC_GetPriorityGrouping+0x18>)
 8002f4a:	68db      	ldr	r3, [r3, #12]
 8002f4c:	0a1b      	lsrs	r3, r3, #8
 8002f4e:	f003 0307 	and.w	r3, r3, #7
}
 8002f52:	4618      	mov	r0, r3
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bc80      	pop	{r7}
 8002f58:	4770      	bx	lr
 8002f5a:	bf00      	nop
 8002f5c:	e000ed00 	.word	0xe000ed00

08002f60 <__NVIC_EnableIRQ>:
{
 8002f60:	b480      	push	{r7}
 8002f62:	b083      	sub	sp, #12
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	4603      	mov	r3, r0
 8002f68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	db0b      	blt.n	8002f8a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f72:	79fb      	ldrb	r3, [r7, #7]
 8002f74:	f003 021f 	and.w	r2, r3, #31
 8002f78:	4906      	ldr	r1, [pc, #24]	; (8002f94 <__NVIC_EnableIRQ+0x34>)
 8002f7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f7e:	095b      	lsrs	r3, r3, #5
 8002f80:	2001      	movs	r0, #1
 8002f82:	fa00 f202 	lsl.w	r2, r0, r2
 8002f86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002f8a:	bf00      	nop
 8002f8c:	370c      	adds	r7, #12
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bc80      	pop	{r7}
 8002f92:	4770      	bx	lr
 8002f94:	e000e100 	.word	0xe000e100

08002f98 <__NVIC_SetPriority>:
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b083      	sub	sp, #12
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	6039      	str	r1, [r7, #0]
 8002fa2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fa4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	db0a      	blt.n	8002fc2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	b2da      	uxtb	r2, r3
 8002fb0:	490c      	ldr	r1, [pc, #48]	; (8002fe4 <__NVIC_SetPriority+0x4c>)
 8002fb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fb6:	0112      	lsls	r2, r2, #4
 8002fb8:	b2d2      	uxtb	r2, r2
 8002fba:	440b      	add	r3, r1
 8002fbc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002fc0:	e00a      	b.n	8002fd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	b2da      	uxtb	r2, r3
 8002fc6:	4908      	ldr	r1, [pc, #32]	; (8002fe8 <__NVIC_SetPriority+0x50>)
 8002fc8:	79fb      	ldrb	r3, [r7, #7]
 8002fca:	f003 030f 	and.w	r3, r3, #15
 8002fce:	3b04      	subs	r3, #4
 8002fd0:	0112      	lsls	r2, r2, #4
 8002fd2:	b2d2      	uxtb	r2, r2
 8002fd4:	440b      	add	r3, r1
 8002fd6:	761a      	strb	r2, [r3, #24]
}
 8002fd8:	bf00      	nop
 8002fda:	370c      	adds	r7, #12
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bc80      	pop	{r7}
 8002fe0:	4770      	bx	lr
 8002fe2:	bf00      	nop
 8002fe4:	e000e100 	.word	0xe000e100
 8002fe8:	e000ed00 	.word	0xe000ed00

08002fec <NVIC_EncodePriority>:
{
 8002fec:	b480      	push	{r7}
 8002fee:	b089      	sub	sp, #36	; 0x24
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	60f8      	str	r0, [r7, #12]
 8002ff4:	60b9      	str	r1, [r7, #8]
 8002ff6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	f003 0307 	and.w	r3, r3, #7
 8002ffe:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003000:	69fb      	ldr	r3, [r7, #28]
 8003002:	f1c3 0307 	rsb	r3, r3, #7
 8003006:	2b04      	cmp	r3, #4
 8003008:	bf28      	it	cs
 800300a:	2304      	movcs	r3, #4
 800300c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800300e:	69fb      	ldr	r3, [r7, #28]
 8003010:	3304      	adds	r3, #4
 8003012:	2b06      	cmp	r3, #6
 8003014:	d902      	bls.n	800301c <NVIC_EncodePriority+0x30>
 8003016:	69fb      	ldr	r3, [r7, #28]
 8003018:	3b03      	subs	r3, #3
 800301a:	e000      	b.n	800301e <NVIC_EncodePriority+0x32>
 800301c:	2300      	movs	r3, #0
 800301e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003020:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003024:	69bb      	ldr	r3, [r7, #24]
 8003026:	fa02 f303 	lsl.w	r3, r2, r3
 800302a:	43da      	mvns	r2, r3
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	401a      	ands	r2, r3
 8003030:	697b      	ldr	r3, [r7, #20]
 8003032:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003034:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	fa01 f303 	lsl.w	r3, r1, r3
 800303e:	43d9      	mvns	r1, r3
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003044:	4313      	orrs	r3, r2
}
 8003046:	4618      	mov	r0, r3
 8003048:	3724      	adds	r7, #36	; 0x24
 800304a:	46bd      	mov	sp, r7
 800304c:	bc80      	pop	{r7}
 800304e:	4770      	bx	lr

08003050 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b082      	sub	sp, #8
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	3b01      	subs	r3, #1
 800305c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003060:	d301      	bcc.n	8003066 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003062:	2301      	movs	r3, #1
 8003064:	e00f      	b.n	8003086 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003066:	4a0a      	ldr	r2, [pc, #40]	; (8003090 <SysTick_Config+0x40>)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	3b01      	subs	r3, #1
 800306c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800306e:	210f      	movs	r1, #15
 8003070:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003074:	f7ff ff90 	bl	8002f98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003078:	4b05      	ldr	r3, [pc, #20]	; (8003090 <SysTick_Config+0x40>)
 800307a:	2200      	movs	r2, #0
 800307c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800307e:	4b04      	ldr	r3, [pc, #16]	; (8003090 <SysTick_Config+0x40>)
 8003080:	2207      	movs	r2, #7
 8003082:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003084:	2300      	movs	r3, #0
}
 8003086:	4618      	mov	r0, r3
 8003088:	3708      	adds	r7, #8
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}
 800308e:	bf00      	nop
 8003090:	e000e010 	.word	0xe000e010

08003094 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b082      	sub	sp, #8
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800309c:	6878      	ldr	r0, [r7, #4]
 800309e:	f7ff ff2d 	bl	8002efc <__NVIC_SetPriorityGrouping>
}
 80030a2:	bf00      	nop
 80030a4:	3708      	adds	r7, #8
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}

080030aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80030aa:	b580      	push	{r7, lr}
 80030ac:	b086      	sub	sp, #24
 80030ae:	af00      	add	r7, sp, #0
 80030b0:	4603      	mov	r3, r0
 80030b2:	60b9      	str	r1, [r7, #8]
 80030b4:	607a      	str	r2, [r7, #4]
 80030b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80030b8:	2300      	movs	r3, #0
 80030ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80030bc:	f7ff ff42 	bl	8002f44 <__NVIC_GetPriorityGrouping>
 80030c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80030c2:	687a      	ldr	r2, [r7, #4]
 80030c4:	68b9      	ldr	r1, [r7, #8]
 80030c6:	6978      	ldr	r0, [r7, #20]
 80030c8:	f7ff ff90 	bl	8002fec <NVIC_EncodePriority>
 80030cc:	4602      	mov	r2, r0
 80030ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030d2:	4611      	mov	r1, r2
 80030d4:	4618      	mov	r0, r3
 80030d6:	f7ff ff5f 	bl	8002f98 <__NVIC_SetPriority>
}
 80030da:	bf00      	nop
 80030dc:	3718      	adds	r7, #24
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}

080030e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030e2:	b580      	push	{r7, lr}
 80030e4:	b082      	sub	sp, #8
 80030e6:	af00      	add	r7, sp, #0
 80030e8:	4603      	mov	r3, r0
 80030ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030f0:	4618      	mov	r0, r3
 80030f2:	f7ff ff35 	bl	8002f60 <__NVIC_EnableIRQ>
}
 80030f6:	bf00      	nop
 80030f8:	3708      	adds	r7, #8
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}

080030fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80030fe:	b580      	push	{r7, lr}
 8003100:	b082      	sub	sp, #8
 8003102:	af00      	add	r7, sp, #0
 8003104:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003106:	6878      	ldr	r0, [r7, #4]
 8003108:	f7ff ffa2 	bl	8003050 <SysTick_Config>
 800310c:	4603      	mov	r3, r0
}
 800310e:	4618      	mov	r0, r3
 8003110:	3708      	adds	r7, #8
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}
	...

08003118 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003118:	b580      	push	{r7, lr}
 800311a:	b084      	sub	sp, #16
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003120:	2300      	movs	r3, #0
 8003122:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800312a:	b2db      	uxtb	r3, r3
 800312c:	2b02      	cmp	r3, #2
 800312e:	d005      	beq.n	800313c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2204      	movs	r2, #4
 8003134:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	73fb      	strb	r3, [r7, #15]
 800313a:	e051      	b.n	80031e0 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	681a      	ldr	r2, [r3, #0]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f022 020e 	bic.w	r2, r2, #14
 800314a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	681a      	ldr	r2, [r3, #0]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f022 0201 	bic.w	r2, r2, #1
 800315a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a22      	ldr	r2, [pc, #136]	; (80031ec <HAL_DMA_Abort_IT+0xd4>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d029      	beq.n	80031ba <HAL_DMA_Abort_IT+0xa2>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a21      	ldr	r2, [pc, #132]	; (80031f0 <HAL_DMA_Abort_IT+0xd8>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d022      	beq.n	80031b6 <HAL_DMA_Abort_IT+0x9e>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a1f      	ldr	r2, [pc, #124]	; (80031f4 <HAL_DMA_Abort_IT+0xdc>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d01a      	beq.n	80031b0 <HAL_DMA_Abort_IT+0x98>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a1e      	ldr	r2, [pc, #120]	; (80031f8 <HAL_DMA_Abort_IT+0xe0>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d012      	beq.n	80031aa <HAL_DMA_Abort_IT+0x92>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a1c      	ldr	r2, [pc, #112]	; (80031fc <HAL_DMA_Abort_IT+0xe4>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d00a      	beq.n	80031a4 <HAL_DMA_Abort_IT+0x8c>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a1b      	ldr	r2, [pc, #108]	; (8003200 <HAL_DMA_Abort_IT+0xe8>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d102      	bne.n	800319e <HAL_DMA_Abort_IT+0x86>
 8003198:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800319c:	e00e      	b.n	80031bc <HAL_DMA_Abort_IT+0xa4>
 800319e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80031a2:	e00b      	b.n	80031bc <HAL_DMA_Abort_IT+0xa4>
 80031a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80031a8:	e008      	b.n	80031bc <HAL_DMA_Abort_IT+0xa4>
 80031aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80031ae:	e005      	b.n	80031bc <HAL_DMA_Abort_IT+0xa4>
 80031b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80031b4:	e002      	b.n	80031bc <HAL_DMA_Abort_IT+0xa4>
 80031b6:	2310      	movs	r3, #16
 80031b8:	e000      	b.n	80031bc <HAL_DMA_Abort_IT+0xa4>
 80031ba:	2301      	movs	r3, #1
 80031bc:	4a11      	ldr	r2, [pc, #68]	; (8003204 <HAL_DMA_Abort_IT+0xec>)
 80031be:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2201      	movs	r2, #1
 80031c4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2200      	movs	r2, #0
 80031cc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d003      	beq.n	80031e0 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031dc:	6878      	ldr	r0, [r7, #4]
 80031de:	4798      	blx	r3
    } 
  }
  return status;
 80031e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	3710      	adds	r7, #16
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}
 80031ea:	bf00      	nop
 80031ec:	40020008 	.word	0x40020008
 80031f0:	4002001c 	.word	0x4002001c
 80031f4:	40020030 	.word	0x40020030
 80031f8:	40020044 	.word	0x40020044
 80031fc:	40020058 	.word	0x40020058
 8003200:	4002006c 	.word	0x4002006c
 8003204:	40020000 	.word	0x40020000

08003208 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003208:	b480      	push	{r7}
 800320a:	b08b      	sub	sp, #44	; 0x2c
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
 8003210:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003212:	2300      	movs	r3, #0
 8003214:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003216:	2300      	movs	r3, #0
 8003218:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800321a:	e169      	b.n	80034f0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800321c:	2201      	movs	r2, #1
 800321e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003220:	fa02 f303 	lsl.w	r3, r2, r3
 8003224:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	69fa      	ldr	r2, [r7, #28]
 800322c:	4013      	ands	r3, r2
 800322e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003230:	69ba      	ldr	r2, [r7, #24]
 8003232:	69fb      	ldr	r3, [r7, #28]
 8003234:	429a      	cmp	r2, r3
 8003236:	f040 8158 	bne.w	80034ea <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	4a9a      	ldr	r2, [pc, #616]	; (80034a8 <HAL_GPIO_Init+0x2a0>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d05e      	beq.n	8003302 <HAL_GPIO_Init+0xfa>
 8003244:	4a98      	ldr	r2, [pc, #608]	; (80034a8 <HAL_GPIO_Init+0x2a0>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d875      	bhi.n	8003336 <HAL_GPIO_Init+0x12e>
 800324a:	4a98      	ldr	r2, [pc, #608]	; (80034ac <HAL_GPIO_Init+0x2a4>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d058      	beq.n	8003302 <HAL_GPIO_Init+0xfa>
 8003250:	4a96      	ldr	r2, [pc, #600]	; (80034ac <HAL_GPIO_Init+0x2a4>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d86f      	bhi.n	8003336 <HAL_GPIO_Init+0x12e>
 8003256:	4a96      	ldr	r2, [pc, #600]	; (80034b0 <HAL_GPIO_Init+0x2a8>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d052      	beq.n	8003302 <HAL_GPIO_Init+0xfa>
 800325c:	4a94      	ldr	r2, [pc, #592]	; (80034b0 <HAL_GPIO_Init+0x2a8>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d869      	bhi.n	8003336 <HAL_GPIO_Init+0x12e>
 8003262:	4a94      	ldr	r2, [pc, #592]	; (80034b4 <HAL_GPIO_Init+0x2ac>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d04c      	beq.n	8003302 <HAL_GPIO_Init+0xfa>
 8003268:	4a92      	ldr	r2, [pc, #584]	; (80034b4 <HAL_GPIO_Init+0x2ac>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d863      	bhi.n	8003336 <HAL_GPIO_Init+0x12e>
 800326e:	4a92      	ldr	r2, [pc, #584]	; (80034b8 <HAL_GPIO_Init+0x2b0>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d046      	beq.n	8003302 <HAL_GPIO_Init+0xfa>
 8003274:	4a90      	ldr	r2, [pc, #576]	; (80034b8 <HAL_GPIO_Init+0x2b0>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d85d      	bhi.n	8003336 <HAL_GPIO_Init+0x12e>
 800327a:	2b12      	cmp	r3, #18
 800327c:	d82a      	bhi.n	80032d4 <HAL_GPIO_Init+0xcc>
 800327e:	2b12      	cmp	r3, #18
 8003280:	d859      	bhi.n	8003336 <HAL_GPIO_Init+0x12e>
 8003282:	a201      	add	r2, pc, #4	; (adr r2, 8003288 <HAL_GPIO_Init+0x80>)
 8003284:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003288:	08003303 	.word	0x08003303
 800328c:	080032dd 	.word	0x080032dd
 8003290:	080032ef 	.word	0x080032ef
 8003294:	08003331 	.word	0x08003331
 8003298:	08003337 	.word	0x08003337
 800329c:	08003337 	.word	0x08003337
 80032a0:	08003337 	.word	0x08003337
 80032a4:	08003337 	.word	0x08003337
 80032a8:	08003337 	.word	0x08003337
 80032ac:	08003337 	.word	0x08003337
 80032b0:	08003337 	.word	0x08003337
 80032b4:	08003337 	.word	0x08003337
 80032b8:	08003337 	.word	0x08003337
 80032bc:	08003337 	.word	0x08003337
 80032c0:	08003337 	.word	0x08003337
 80032c4:	08003337 	.word	0x08003337
 80032c8:	08003337 	.word	0x08003337
 80032cc:	080032e5 	.word	0x080032e5
 80032d0:	080032f9 	.word	0x080032f9
 80032d4:	4a79      	ldr	r2, [pc, #484]	; (80034bc <HAL_GPIO_Init+0x2b4>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d013      	beq.n	8003302 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80032da:	e02c      	b.n	8003336 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	68db      	ldr	r3, [r3, #12]
 80032e0:	623b      	str	r3, [r7, #32]
          break;
 80032e2:	e029      	b.n	8003338 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	68db      	ldr	r3, [r3, #12]
 80032e8:	3304      	adds	r3, #4
 80032ea:	623b      	str	r3, [r7, #32]
          break;
 80032ec:	e024      	b.n	8003338 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	68db      	ldr	r3, [r3, #12]
 80032f2:	3308      	adds	r3, #8
 80032f4:	623b      	str	r3, [r7, #32]
          break;
 80032f6:	e01f      	b.n	8003338 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	68db      	ldr	r3, [r3, #12]
 80032fc:	330c      	adds	r3, #12
 80032fe:	623b      	str	r3, [r7, #32]
          break;
 8003300:	e01a      	b.n	8003338 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	689b      	ldr	r3, [r3, #8]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d102      	bne.n	8003310 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800330a:	2304      	movs	r3, #4
 800330c:	623b      	str	r3, [r7, #32]
          break;
 800330e:	e013      	b.n	8003338 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	689b      	ldr	r3, [r3, #8]
 8003314:	2b01      	cmp	r3, #1
 8003316:	d105      	bne.n	8003324 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003318:	2308      	movs	r3, #8
 800331a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	69fa      	ldr	r2, [r7, #28]
 8003320:	611a      	str	r2, [r3, #16]
          break;
 8003322:	e009      	b.n	8003338 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003324:	2308      	movs	r3, #8
 8003326:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	69fa      	ldr	r2, [r7, #28]
 800332c:	615a      	str	r2, [r3, #20]
          break;
 800332e:	e003      	b.n	8003338 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003330:	2300      	movs	r3, #0
 8003332:	623b      	str	r3, [r7, #32]
          break;
 8003334:	e000      	b.n	8003338 <HAL_GPIO_Init+0x130>
          break;
 8003336:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003338:	69bb      	ldr	r3, [r7, #24]
 800333a:	2bff      	cmp	r3, #255	; 0xff
 800333c:	d801      	bhi.n	8003342 <HAL_GPIO_Init+0x13a>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	e001      	b.n	8003346 <HAL_GPIO_Init+0x13e>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	3304      	adds	r3, #4
 8003346:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003348:	69bb      	ldr	r3, [r7, #24]
 800334a:	2bff      	cmp	r3, #255	; 0xff
 800334c:	d802      	bhi.n	8003354 <HAL_GPIO_Init+0x14c>
 800334e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003350:	009b      	lsls	r3, r3, #2
 8003352:	e002      	b.n	800335a <HAL_GPIO_Init+0x152>
 8003354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003356:	3b08      	subs	r3, #8
 8003358:	009b      	lsls	r3, r3, #2
 800335a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800335c:	697b      	ldr	r3, [r7, #20]
 800335e:	681a      	ldr	r2, [r3, #0]
 8003360:	210f      	movs	r1, #15
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	fa01 f303 	lsl.w	r3, r1, r3
 8003368:	43db      	mvns	r3, r3
 800336a:	401a      	ands	r2, r3
 800336c:	6a39      	ldr	r1, [r7, #32]
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	fa01 f303 	lsl.w	r3, r1, r3
 8003374:	431a      	orrs	r2, r3
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003382:	2b00      	cmp	r3, #0
 8003384:	f000 80b1 	beq.w	80034ea <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003388:	4b4d      	ldr	r3, [pc, #308]	; (80034c0 <HAL_GPIO_Init+0x2b8>)
 800338a:	699b      	ldr	r3, [r3, #24]
 800338c:	4a4c      	ldr	r2, [pc, #304]	; (80034c0 <HAL_GPIO_Init+0x2b8>)
 800338e:	f043 0301 	orr.w	r3, r3, #1
 8003392:	6193      	str	r3, [r2, #24]
 8003394:	4b4a      	ldr	r3, [pc, #296]	; (80034c0 <HAL_GPIO_Init+0x2b8>)
 8003396:	699b      	ldr	r3, [r3, #24]
 8003398:	f003 0301 	and.w	r3, r3, #1
 800339c:	60bb      	str	r3, [r7, #8]
 800339e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80033a0:	4a48      	ldr	r2, [pc, #288]	; (80034c4 <HAL_GPIO_Init+0x2bc>)
 80033a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a4:	089b      	lsrs	r3, r3, #2
 80033a6:	3302      	adds	r3, #2
 80033a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033ac:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80033ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b0:	f003 0303 	and.w	r3, r3, #3
 80033b4:	009b      	lsls	r3, r3, #2
 80033b6:	220f      	movs	r2, #15
 80033b8:	fa02 f303 	lsl.w	r3, r2, r3
 80033bc:	43db      	mvns	r3, r3
 80033be:	68fa      	ldr	r2, [r7, #12]
 80033c0:	4013      	ands	r3, r2
 80033c2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	4a40      	ldr	r2, [pc, #256]	; (80034c8 <HAL_GPIO_Init+0x2c0>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d013      	beq.n	80033f4 <HAL_GPIO_Init+0x1ec>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	4a3f      	ldr	r2, [pc, #252]	; (80034cc <HAL_GPIO_Init+0x2c4>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d00d      	beq.n	80033f0 <HAL_GPIO_Init+0x1e8>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	4a3e      	ldr	r2, [pc, #248]	; (80034d0 <HAL_GPIO_Init+0x2c8>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d007      	beq.n	80033ec <HAL_GPIO_Init+0x1e4>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	4a3d      	ldr	r2, [pc, #244]	; (80034d4 <HAL_GPIO_Init+0x2cc>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d101      	bne.n	80033e8 <HAL_GPIO_Init+0x1e0>
 80033e4:	2303      	movs	r3, #3
 80033e6:	e006      	b.n	80033f6 <HAL_GPIO_Init+0x1ee>
 80033e8:	2304      	movs	r3, #4
 80033ea:	e004      	b.n	80033f6 <HAL_GPIO_Init+0x1ee>
 80033ec:	2302      	movs	r3, #2
 80033ee:	e002      	b.n	80033f6 <HAL_GPIO_Init+0x1ee>
 80033f0:	2301      	movs	r3, #1
 80033f2:	e000      	b.n	80033f6 <HAL_GPIO_Init+0x1ee>
 80033f4:	2300      	movs	r3, #0
 80033f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033f8:	f002 0203 	and.w	r2, r2, #3
 80033fc:	0092      	lsls	r2, r2, #2
 80033fe:	4093      	lsls	r3, r2
 8003400:	68fa      	ldr	r2, [r7, #12]
 8003402:	4313      	orrs	r3, r2
 8003404:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003406:	492f      	ldr	r1, [pc, #188]	; (80034c4 <HAL_GPIO_Init+0x2bc>)
 8003408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800340a:	089b      	lsrs	r3, r3, #2
 800340c:	3302      	adds	r3, #2
 800340e:	68fa      	ldr	r2, [r7, #12]
 8003410:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800341c:	2b00      	cmp	r3, #0
 800341e:	d006      	beq.n	800342e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003420:	4b2d      	ldr	r3, [pc, #180]	; (80034d8 <HAL_GPIO_Init+0x2d0>)
 8003422:	689a      	ldr	r2, [r3, #8]
 8003424:	492c      	ldr	r1, [pc, #176]	; (80034d8 <HAL_GPIO_Init+0x2d0>)
 8003426:	69bb      	ldr	r3, [r7, #24]
 8003428:	4313      	orrs	r3, r2
 800342a:	608b      	str	r3, [r1, #8]
 800342c:	e006      	b.n	800343c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800342e:	4b2a      	ldr	r3, [pc, #168]	; (80034d8 <HAL_GPIO_Init+0x2d0>)
 8003430:	689a      	ldr	r2, [r3, #8]
 8003432:	69bb      	ldr	r3, [r7, #24]
 8003434:	43db      	mvns	r3, r3
 8003436:	4928      	ldr	r1, [pc, #160]	; (80034d8 <HAL_GPIO_Init+0x2d0>)
 8003438:	4013      	ands	r3, r2
 800343a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003444:	2b00      	cmp	r3, #0
 8003446:	d006      	beq.n	8003456 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003448:	4b23      	ldr	r3, [pc, #140]	; (80034d8 <HAL_GPIO_Init+0x2d0>)
 800344a:	68da      	ldr	r2, [r3, #12]
 800344c:	4922      	ldr	r1, [pc, #136]	; (80034d8 <HAL_GPIO_Init+0x2d0>)
 800344e:	69bb      	ldr	r3, [r7, #24]
 8003450:	4313      	orrs	r3, r2
 8003452:	60cb      	str	r3, [r1, #12]
 8003454:	e006      	b.n	8003464 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003456:	4b20      	ldr	r3, [pc, #128]	; (80034d8 <HAL_GPIO_Init+0x2d0>)
 8003458:	68da      	ldr	r2, [r3, #12]
 800345a:	69bb      	ldr	r3, [r7, #24]
 800345c:	43db      	mvns	r3, r3
 800345e:	491e      	ldr	r1, [pc, #120]	; (80034d8 <HAL_GPIO_Init+0x2d0>)
 8003460:	4013      	ands	r3, r2
 8003462:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800346c:	2b00      	cmp	r3, #0
 800346e:	d006      	beq.n	800347e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003470:	4b19      	ldr	r3, [pc, #100]	; (80034d8 <HAL_GPIO_Init+0x2d0>)
 8003472:	685a      	ldr	r2, [r3, #4]
 8003474:	4918      	ldr	r1, [pc, #96]	; (80034d8 <HAL_GPIO_Init+0x2d0>)
 8003476:	69bb      	ldr	r3, [r7, #24]
 8003478:	4313      	orrs	r3, r2
 800347a:	604b      	str	r3, [r1, #4]
 800347c:	e006      	b.n	800348c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800347e:	4b16      	ldr	r3, [pc, #88]	; (80034d8 <HAL_GPIO_Init+0x2d0>)
 8003480:	685a      	ldr	r2, [r3, #4]
 8003482:	69bb      	ldr	r3, [r7, #24]
 8003484:	43db      	mvns	r3, r3
 8003486:	4914      	ldr	r1, [pc, #80]	; (80034d8 <HAL_GPIO_Init+0x2d0>)
 8003488:	4013      	ands	r3, r2
 800348a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003494:	2b00      	cmp	r3, #0
 8003496:	d021      	beq.n	80034dc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003498:	4b0f      	ldr	r3, [pc, #60]	; (80034d8 <HAL_GPIO_Init+0x2d0>)
 800349a:	681a      	ldr	r2, [r3, #0]
 800349c:	490e      	ldr	r1, [pc, #56]	; (80034d8 <HAL_GPIO_Init+0x2d0>)
 800349e:	69bb      	ldr	r3, [r7, #24]
 80034a0:	4313      	orrs	r3, r2
 80034a2:	600b      	str	r3, [r1, #0]
 80034a4:	e021      	b.n	80034ea <HAL_GPIO_Init+0x2e2>
 80034a6:	bf00      	nop
 80034a8:	10320000 	.word	0x10320000
 80034ac:	10310000 	.word	0x10310000
 80034b0:	10220000 	.word	0x10220000
 80034b4:	10210000 	.word	0x10210000
 80034b8:	10120000 	.word	0x10120000
 80034bc:	10110000 	.word	0x10110000
 80034c0:	40021000 	.word	0x40021000
 80034c4:	40010000 	.word	0x40010000
 80034c8:	40010800 	.word	0x40010800
 80034cc:	40010c00 	.word	0x40010c00
 80034d0:	40011000 	.word	0x40011000
 80034d4:	40011400 	.word	0x40011400
 80034d8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80034dc:	4b0b      	ldr	r3, [pc, #44]	; (800350c <HAL_GPIO_Init+0x304>)
 80034de:	681a      	ldr	r2, [r3, #0]
 80034e0:	69bb      	ldr	r3, [r7, #24]
 80034e2:	43db      	mvns	r3, r3
 80034e4:	4909      	ldr	r1, [pc, #36]	; (800350c <HAL_GPIO_Init+0x304>)
 80034e6:	4013      	ands	r3, r2
 80034e8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80034ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ec:	3301      	adds	r3, #1
 80034ee:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	681a      	ldr	r2, [r3, #0]
 80034f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f6:	fa22 f303 	lsr.w	r3, r2, r3
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	f47f ae8e 	bne.w	800321c <HAL_GPIO_Init+0x14>
  }
}
 8003500:	bf00      	nop
 8003502:	bf00      	nop
 8003504:	372c      	adds	r7, #44	; 0x2c
 8003506:	46bd      	mov	sp, r7
 8003508:	bc80      	pop	{r7}
 800350a:	4770      	bx	lr
 800350c:	40010400 	.word	0x40010400

08003510 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003510:	b480      	push	{r7}
 8003512:	b083      	sub	sp, #12
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
 8003518:	460b      	mov	r3, r1
 800351a:	807b      	strh	r3, [r7, #2]
 800351c:	4613      	mov	r3, r2
 800351e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003520:	787b      	ldrb	r3, [r7, #1]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d003      	beq.n	800352e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003526:	887a      	ldrh	r2, [r7, #2]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800352c:	e003      	b.n	8003536 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800352e:	887b      	ldrh	r3, [r7, #2]
 8003530:	041a      	lsls	r2, r3, #16
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	611a      	str	r2, [r3, #16]
}
 8003536:	bf00      	nop
 8003538:	370c      	adds	r7, #12
 800353a:	46bd      	mov	sp, r7
 800353c:	bc80      	pop	{r7}
 800353e:	4770      	bx	lr

08003540 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b082      	sub	sp, #8
 8003544:	af00      	add	r7, sp, #0
 8003546:	4603      	mov	r3, r0
 8003548:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800354a:	4b08      	ldr	r3, [pc, #32]	; (800356c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800354c:	695a      	ldr	r2, [r3, #20]
 800354e:	88fb      	ldrh	r3, [r7, #6]
 8003550:	4013      	ands	r3, r2
 8003552:	2b00      	cmp	r3, #0
 8003554:	d006      	beq.n	8003564 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003556:	4a05      	ldr	r2, [pc, #20]	; (800356c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003558:	88fb      	ldrh	r3, [r7, #6]
 800355a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800355c:	88fb      	ldrh	r3, [r7, #6]
 800355e:	4618      	mov	r0, r3
 8003560:	f7ff f878 	bl	8002654 <HAL_GPIO_EXTI_Callback>
  }
}
 8003564:	bf00      	nop
 8003566:	3708      	adds	r7, #8
 8003568:	46bd      	mov	sp, r7
 800356a:	bd80      	pop	{r7, pc}
 800356c:	40010400 	.word	0x40010400

08003570 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b084      	sub	sp, #16
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d101      	bne.n	8003582 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	e12b      	b.n	80037da <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003588:	b2db      	uxtb	r3, r3
 800358a:	2b00      	cmp	r3, #0
 800358c:	d106      	bne.n	800359c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2200      	movs	r2, #0
 8003592:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003596:	6878      	ldr	r0, [r7, #4]
 8003598:	f7ff faae 	bl	8002af8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2224      	movs	r2, #36	; 0x24
 80035a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	681a      	ldr	r2, [r3, #0]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f022 0201 	bic.w	r2, r2, #1
 80035b2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	681a      	ldr	r2, [r3, #0]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80035c2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	681a      	ldr	r2, [r3, #0]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80035d2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80035d4:	f002 fa04 	bl	80059e0 <HAL_RCC_GetPCLK1Freq>
 80035d8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	4a81      	ldr	r2, [pc, #516]	; (80037e4 <HAL_I2C_Init+0x274>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d807      	bhi.n	80035f4 <HAL_I2C_Init+0x84>
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	4a80      	ldr	r2, [pc, #512]	; (80037e8 <HAL_I2C_Init+0x278>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	bf94      	ite	ls
 80035ec:	2301      	movls	r3, #1
 80035ee:	2300      	movhi	r3, #0
 80035f0:	b2db      	uxtb	r3, r3
 80035f2:	e006      	b.n	8003602 <HAL_I2C_Init+0x92>
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	4a7d      	ldr	r2, [pc, #500]	; (80037ec <HAL_I2C_Init+0x27c>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	bf94      	ite	ls
 80035fc:	2301      	movls	r3, #1
 80035fe:	2300      	movhi	r3, #0
 8003600:	b2db      	uxtb	r3, r3
 8003602:	2b00      	cmp	r3, #0
 8003604:	d001      	beq.n	800360a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003606:	2301      	movs	r3, #1
 8003608:	e0e7      	b.n	80037da <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	4a78      	ldr	r2, [pc, #480]	; (80037f0 <HAL_I2C_Init+0x280>)
 800360e:	fba2 2303 	umull	r2, r3, r2, r3
 8003612:	0c9b      	lsrs	r3, r3, #18
 8003614:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	68ba      	ldr	r2, [r7, #8]
 8003626:	430a      	orrs	r2, r1
 8003628:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	6a1b      	ldr	r3, [r3, #32]
 8003630:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	4a6a      	ldr	r2, [pc, #424]	; (80037e4 <HAL_I2C_Init+0x274>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d802      	bhi.n	8003644 <HAL_I2C_Init+0xd4>
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	3301      	adds	r3, #1
 8003642:	e009      	b.n	8003658 <HAL_I2C_Init+0xe8>
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800364a:	fb02 f303 	mul.w	r3, r2, r3
 800364e:	4a69      	ldr	r2, [pc, #420]	; (80037f4 <HAL_I2C_Init+0x284>)
 8003650:	fba2 2303 	umull	r2, r3, r2, r3
 8003654:	099b      	lsrs	r3, r3, #6
 8003656:	3301      	adds	r3, #1
 8003658:	687a      	ldr	r2, [r7, #4]
 800365a:	6812      	ldr	r2, [r2, #0]
 800365c:	430b      	orrs	r3, r1
 800365e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	69db      	ldr	r3, [r3, #28]
 8003666:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800366a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	495c      	ldr	r1, [pc, #368]	; (80037e4 <HAL_I2C_Init+0x274>)
 8003674:	428b      	cmp	r3, r1
 8003676:	d819      	bhi.n	80036ac <HAL_I2C_Init+0x13c>
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	1e59      	subs	r1, r3, #1
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	005b      	lsls	r3, r3, #1
 8003682:	fbb1 f3f3 	udiv	r3, r1, r3
 8003686:	1c59      	adds	r1, r3, #1
 8003688:	f640 73fc 	movw	r3, #4092	; 0xffc
 800368c:	400b      	ands	r3, r1
 800368e:	2b00      	cmp	r3, #0
 8003690:	d00a      	beq.n	80036a8 <HAL_I2C_Init+0x138>
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	1e59      	subs	r1, r3, #1
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	005b      	lsls	r3, r3, #1
 800369c:	fbb1 f3f3 	udiv	r3, r1, r3
 80036a0:	3301      	adds	r3, #1
 80036a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036a6:	e051      	b.n	800374c <HAL_I2C_Init+0x1dc>
 80036a8:	2304      	movs	r3, #4
 80036aa:	e04f      	b.n	800374c <HAL_I2C_Init+0x1dc>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	689b      	ldr	r3, [r3, #8]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d111      	bne.n	80036d8 <HAL_I2C_Init+0x168>
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	1e58      	subs	r0, r3, #1
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6859      	ldr	r1, [r3, #4]
 80036bc:	460b      	mov	r3, r1
 80036be:	005b      	lsls	r3, r3, #1
 80036c0:	440b      	add	r3, r1
 80036c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80036c6:	3301      	adds	r3, #1
 80036c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	bf0c      	ite	eq
 80036d0:	2301      	moveq	r3, #1
 80036d2:	2300      	movne	r3, #0
 80036d4:	b2db      	uxtb	r3, r3
 80036d6:	e012      	b.n	80036fe <HAL_I2C_Init+0x18e>
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	1e58      	subs	r0, r3, #1
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6859      	ldr	r1, [r3, #4]
 80036e0:	460b      	mov	r3, r1
 80036e2:	009b      	lsls	r3, r3, #2
 80036e4:	440b      	add	r3, r1
 80036e6:	0099      	lsls	r1, r3, #2
 80036e8:	440b      	add	r3, r1
 80036ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80036ee:	3301      	adds	r3, #1
 80036f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	bf0c      	ite	eq
 80036f8:	2301      	moveq	r3, #1
 80036fa:	2300      	movne	r3, #0
 80036fc:	b2db      	uxtb	r3, r3
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d001      	beq.n	8003706 <HAL_I2C_Init+0x196>
 8003702:	2301      	movs	r3, #1
 8003704:	e022      	b.n	800374c <HAL_I2C_Init+0x1dc>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	689b      	ldr	r3, [r3, #8]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d10e      	bne.n	800372c <HAL_I2C_Init+0x1bc>
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	1e58      	subs	r0, r3, #1
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6859      	ldr	r1, [r3, #4]
 8003716:	460b      	mov	r3, r1
 8003718:	005b      	lsls	r3, r3, #1
 800371a:	440b      	add	r3, r1
 800371c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003720:	3301      	adds	r3, #1
 8003722:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003726:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800372a:	e00f      	b.n	800374c <HAL_I2C_Init+0x1dc>
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	1e58      	subs	r0, r3, #1
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6859      	ldr	r1, [r3, #4]
 8003734:	460b      	mov	r3, r1
 8003736:	009b      	lsls	r3, r3, #2
 8003738:	440b      	add	r3, r1
 800373a:	0099      	lsls	r1, r3, #2
 800373c:	440b      	add	r3, r1
 800373e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003742:	3301      	adds	r3, #1
 8003744:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003748:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800374c:	6879      	ldr	r1, [r7, #4]
 800374e:	6809      	ldr	r1, [r1, #0]
 8003750:	4313      	orrs	r3, r2
 8003752:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	69da      	ldr	r2, [r3, #28]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6a1b      	ldr	r3, [r3, #32]
 8003766:	431a      	orrs	r2, r3
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	430a      	orrs	r2, r1
 800376e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	689b      	ldr	r3, [r3, #8]
 8003776:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800377a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800377e:	687a      	ldr	r2, [r7, #4]
 8003780:	6911      	ldr	r1, [r2, #16]
 8003782:	687a      	ldr	r2, [r7, #4]
 8003784:	68d2      	ldr	r2, [r2, #12]
 8003786:	4311      	orrs	r1, r2
 8003788:	687a      	ldr	r2, [r7, #4]
 800378a:	6812      	ldr	r2, [r2, #0]
 800378c:	430b      	orrs	r3, r1
 800378e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	68db      	ldr	r3, [r3, #12]
 8003796:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	695a      	ldr	r2, [r3, #20]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	699b      	ldr	r3, [r3, #24]
 80037a2:	431a      	orrs	r2, r3
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	430a      	orrs	r2, r1
 80037aa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	681a      	ldr	r2, [r3, #0]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f042 0201 	orr.w	r2, r2, #1
 80037ba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2200      	movs	r2, #0
 80037c0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2220      	movs	r2, #32
 80037c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2200      	movs	r2, #0
 80037ce:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2200      	movs	r2, #0
 80037d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80037d8:	2300      	movs	r3, #0
}
 80037da:	4618      	mov	r0, r3
 80037dc:	3710      	adds	r7, #16
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}
 80037e2:	bf00      	nop
 80037e4:	000186a0 	.word	0x000186a0
 80037e8:	001e847f 	.word	0x001e847f
 80037ec:	003d08ff 	.word	0x003d08ff
 80037f0:	431bde83 	.word	0x431bde83
 80037f4:	10624dd3 	.word	0x10624dd3

080037f8 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 80037f8:	b480      	push	{r7}
 80037fa:	b083      	sub	sp, #12
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	695b      	ldr	r3, [r3, #20]
 8003806:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800380a:	2b80      	cmp	r3, #128	; 0x80
 800380c:	d103      	bne.n	8003816 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	2200      	movs	r2, #0
 8003814:	611a      	str	r2, [r3, #16]
  }
}
 8003816:	bf00      	nop
 8003818:	370c      	adds	r7, #12
 800381a:	46bd      	mov	sp, r7
 800381c:	bc80      	pop	{r7}
 800381e:	4770      	bx	lr

08003820 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b088      	sub	sp, #32
 8003824:	af02      	add	r7, sp, #8
 8003826:	60f8      	str	r0, [r7, #12]
 8003828:	607a      	str	r2, [r7, #4]
 800382a:	461a      	mov	r2, r3
 800382c:	460b      	mov	r3, r1
 800382e:	817b      	strh	r3, [r7, #10]
 8003830:	4613      	mov	r3, r2
 8003832:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003834:	f7ff fb34 	bl	8002ea0 <HAL_GetTick>
 8003838:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003840:	b2db      	uxtb	r3, r3
 8003842:	2b20      	cmp	r3, #32
 8003844:	f040 80e0 	bne.w	8003a08 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	9300      	str	r3, [sp, #0]
 800384c:	2319      	movs	r3, #25
 800384e:	2201      	movs	r2, #1
 8003850:	4970      	ldr	r1, [pc, #448]	; (8003a14 <HAL_I2C_Master_Transmit+0x1f4>)
 8003852:	68f8      	ldr	r0, [r7, #12]
 8003854:	f001 fa74 	bl	8004d40 <I2C_WaitOnFlagUntilTimeout>
 8003858:	4603      	mov	r3, r0
 800385a:	2b00      	cmp	r3, #0
 800385c:	d001      	beq.n	8003862 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800385e:	2302      	movs	r3, #2
 8003860:	e0d3      	b.n	8003a0a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003868:	2b01      	cmp	r3, #1
 800386a:	d101      	bne.n	8003870 <HAL_I2C_Master_Transmit+0x50>
 800386c:	2302      	movs	r3, #2
 800386e:	e0cc      	b.n	8003a0a <HAL_I2C_Master_Transmit+0x1ea>
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	2201      	movs	r2, #1
 8003874:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f003 0301 	and.w	r3, r3, #1
 8003882:	2b01      	cmp	r3, #1
 8003884:	d007      	beq.n	8003896 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	681a      	ldr	r2, [r3, #0]
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f042 0201 	orr.w	r2, r2, #1
 8003894:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	681a      	ldr	r2, [r3, #0]
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80038a4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	2221      	movs	r2, #33	; 0x21
 80038aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	2210      	movs	r2, #16
 80038b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	2200      	movs	r2, #0
 80038ba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	687a      	ldr	r2, [r7, #4]
 80038c0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	893a      	ldrh	r2, [r7, #8]
 80038c6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038cc:	b29a      	uxth	r2, r3
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	4a50      	ldr	r2, [pc, #320]	; (8003a18 <HAL_I2C_Master_Transmit+0x1f8>)
 80038d6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80038d8:	8979      	ldrh	r1, [r7, #10]
 80038da:	697b      	ldr	r3, [r7, #20]
 80038dc:	6a3a      	ldr	r2, [r7, #32]
 80038de:	68f8      	ldr	r0, [r7, #12]
 80038e0:	f000 ffa0 	bl	8004824 <I2C_MasterRequestWrite>
 80038e4:	4603      	mov	r3, r0
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d001      	beq.n	80038ee <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
 80038ec:	e08d      	b.n	8003a0a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038ee:	2300      	movs	r3, #0
 80038f0:	613b      	str	r3, [r7, #16]
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	695b      	ldr	r3, [r3, #20]
 80038f8:	613b      	str	r3, [r7, #16]
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	699b      	ldr	r3, [r3, #24]
 8003900:	613b      	str	r3, [r7, #16]
 8003902:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003904:	e066      	b.n	80039d4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003906:	697a      	ldr	r2, [r7, #20]
 8003908:	6a39      	ldr	r1, [r7, #32]
 800390a:	68f8      	ldr	r0, [r7, #12]
 800390c:	f001 fb32 	bl	8004f74 <I2C_WaitOnTXEFlagUntilTimeout>
 8003910:	4603      	mov	r3, r0
 8003912:	2b00      	cmp	r3, #0
 8003914:	d00d      	beq.n	8003932 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800391a:	2b04      	cmp	r3, #4
 800391c:	d107      	bne.n	800392e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	681a      	ldr	r2, [r3, #0]
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800392c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	e06b      	b.n	8003a0a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003936:	781a      	ldrb	r2, [r3, #0]
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003942:	1c5a      	adds	r2, r3, #1
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800394c:	b29b      	uxth	r3, r3
 800394e:	3b01      	subs	r3, #1
 8003950:	b29a      	uxth	r2, r3
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800395a:	3b01      	subs	r3, #1
 800395c:	b29a      	uxth	r2, r3
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	695b      	ldr	r3, [r3, #20]
 8003968:	f003 0304 	and.w	r3, r3, #4
 800396c:	2b04      	cmp	r3, #4
 800396e:	d11b      	bne.n	80039a8 <HAL_I2C_Master_Transmit+0x188>
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003974:	2b00      	cmp	r3, #0
 8003976:	d017      	beq.n	80039a8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800397c:	781a      	ldrb	r2, [r3, #0]
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003988:	1c5a      	adds	r2, r3, #1
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003992:	b29b      	uxth	r3, r3
 8003994:	3b01      	subs	r3, #1
 8003996:	b29a      	uxth	r2, r3
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039a0:	3b01      	subs	r3, #1
 80039a2:	b29a      	uxth	r2, r3
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039a8:	697a      	ldr	r2, [r7, #20]
 80039aa:	6a39      	ldr	r1, [r7, #32]
 80039ac:	68f8      	ldr	r0, [r7, #12]
 80039ae:	f001 fb29 	bl	8005004 <I2C_WaitOnBTFFlagUntilTimeout>
 80039b2:	4603      	mov	r3, r0
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d00d      	beq.n	80039d4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039bc:	2b04      	cmp	r3, #4
 80039be:	d107      	bne.n	80039d0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	681a      	ldr	r2, [r3, #0]
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039ce:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80039d0:	2301      	movs	r3, #1
 80039d2:	e01a      	b.n	8003a0a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d194      	bne.n	8003906 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	681a      	ldr	r2, [r3, #0]
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	2220      	movs	r2, #32
 80039f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	2200      	movs	r2, #0
 80039f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	2200      	movs	r2, #0
 8003a00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003a04:	2300      	movs	r3, #0
 8003a06:	e000      	b.n	8003a0a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003a08:	2302      	movs	r3, #2
  }
}
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	3718      	adds	r7, #24
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}
 8003a12:	bf00      	nop
 8003a14:	00100002 	.word	0x00100002
 8003a18:	ffff0000 	.word	0xffff0000

08003a1c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b08c      	sub	sp, #48	; 0x30
 8003a20:	af02      	add	r7, sp, #8
 8003a22:	60f8      	str	r0, [r7, #12]
 8003a24:	607a      	str	r2, [r7, #4]
 8003a26:	461a      	mov	r2, r3
 8003a28:	460b      	mov	r3, r1
 8003a2a:	817b      	strh	r3, [r7, #10]
 8003a2c:	4613      	mov	r3, r2
 8003a2e:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8003a30:	2300      	movs	r3, #0
 8003a32:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003a34:	f7ff fa34 	bl	8002ea0 <HAL_GetTick>
 8003a38:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a40:	b2db      	uxtb	r3, r3
 8003a42:	2b20      	cmp	r3, #32
 8003a44:	f040 824b 	bne.w	8003ede <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a4a:	9300      	str	r3, [sp, #0]
 8003a4c:	2319      	movs	r3, #25
 8003a4e:	2201      	movs	r2, #1
 8003a50:	497f      	ldr	r1, [pc, #508]	; (8003c50 <HAL_I2C_Master_Receive+0x234>)
 8003a52:	68f8      	ldr	r0, [r7, #12]
 8003a54:	f001 f974 	bl	8004d40 <I2C_WaitOnFlagUntilTimeout>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d001      	beq.n	8003a62 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8003a5e:	2302      	movs	r3, #2
 8003a60:	e23e      	b.n	8003ee0 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a68:	2b01      	cmp	r3, #1
 8003a6a:	d101      	bne.n	8003a70 <HAL_I2C_Master_Receive+0x54>
 8003a6c:	2302      	movs	r3, #2
 8003a6e:	e237      	b.n	8003ee0 <HAL_I2C_Master_Receive+0x4c4>
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	2201      	movs	r2, #1
 8003a74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f003 0301 	and.w	r3, r3, #1
 8003a82:	2b01      	cmp	r3, #1
 8003a84:	d007      	beq.n	8003a96 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	681a      	ldr	r2, [r3, #0]
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f042 0201 	orr.w	r2, r2, #1
 8003a94:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	681a      	ldr	r2, [r3, #0]
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003aa4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	2222      	movs	r2, #34	; 0x22
 8003aaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	2210      	movs	r2, #16
 8003ab2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	687a      	ldr	r2, [r7, #4]
 8003ac0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	893a      	ldrh	r2, [r7, #8]
 8003ac6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003acc:	b29a      	uxth	r2, r3
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	4a5f      	ldr	r2, [pc, #380]	; (8003c54 <HAL_I2C_Master_Receive+0x238>)
 8003ad6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003ad8:	8979      	ldrh	r1, [r7, #10]
 8003ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003adc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ade:	68f8      	ldr	r0, [r7, #12]
 8003ae0:	f000 ff22 	bl	8004928 <I2C_MasterRequestRead>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d001      	beq.n	8003aee <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	e1f8      	b.n	8003ee0 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d113      	bne.n	8003b1e <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003af6:	2300      	movs	r3, #0
 8003af8:	61fb      	str	r3, [r7, #28]
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	695b      	ldr	r3, [r3, #20]
 8003b00:	61fb      	str	r3, [r7, #28]
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	699b      	ldr	r3, [r3, #24]
 8003b08:	61fb      	str	r3, [r7, #28]
 8003b0a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	681a      	ldr	r2, [r3, #0]
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b1a:	601a      	str	r2, [r3, #0]
 8003b1c:	e1cc      	b.n	8003eb8 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b22:	2b01      	cmp	r3, #1
 8003b24:	d11e      	bne.n	8003b64 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	681a      	ldr	r2, [r3, #0]
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b34:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003b36:	b672      	cpsid	i
}
 8003b38:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	61bb      	str	r3, [r7, #24]
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	695b      	ldr	r3, [r3, #20]
 8003b44:	61bb      	str	r3, [r7, #24]
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	699b      	ldr	r3, [r3, #24]
 8003b4c:	61bb      	str	r3, [r7, #24]
 8003b4e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	681a      	ldr	r2, [r3, #0]
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b5e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003b60:	b662      	cpsie	i
}
 8003b62:	e035      	b.n	8003bd0 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b68:	2b02      	cmp	r3, #2
 8003b6a:	d11e      	bne.n	8003baa <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	681a      	ldr	r2, [r3, #0]
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b7a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003b7c:	b672      	cpsid	i
}
 8003b7e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b80:	2300      	movs	r3, #0
 8003b82:	617b      	str	r3, [r7, #20]
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	695b      	ldr	r3, [r3, #20]
 8003b8a:	617b      	str	r3, [r7, #20]
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	699b      	ldr	r3, [r3, #24]
 8003b92:	617b      	str	r3, [r7, #20]
 8003b94:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	681a      	ldr	r2, [r3, #0]
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ba4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003ba6:	b662      	cpsie	i
}
 8003ba8:	e012      	b.n	8003bd0 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	681a      	ldr	r2, [r3, #0]
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003bb8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bba:	2300      	movs	r3, #0
 8003bbc:	613b      	str	r3, [r7, #16]
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	695b      	ldr	r3, [r3, #20]
 8003bc4:	613b      	str	r3, [r7, #16]
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	699b      	ldr	r3, [r3, #24]
 8003bcc:	613b      	str	r3, [r7, #16]
 8003bce:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003bd0:	e172      	b.n	8003eb8 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bd6:	2b03      	cmp	r3, #3
 8003bd8:	f200 811f 	bhi.w	8003e1a <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003be0:	2b01      	cmp	r3, #1
 8003be2:	d123      	bne.n	8003c2c <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003be4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003be6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003be8:	68f8      	ldr	r0, [r7, #12]
 8003bea:	f001 fa53 	bl	8005094 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d001      	beq.n	8003bf8 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	e173      	b.n	8003ee0 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	691a      	ldr	r2, [r3, #16]
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c02:	b2d2      	uxtb	r2, r2
 8003c04:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c0a:	1c5a      	adds	r2, r3, #1
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c14:	3b01      	subs	r3, #1
 8003c16:	b29a      	uxth	r2, r3
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c20:	b29b      	uxth	r3, r3
 8003c22:	3b01      	subs	r3, #1
 8003c24:	b29a      	uxth	r2, r3
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003c2a:	e145      	b.n	8003eb8 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c30:	2b02      	cmp	r3, #2
 8003c32:	d152      	bne.n	8003cda <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c36:	9300      	str	r3, [sp, #0]
 8003c38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	4906      	ldr	r1, [pc, #24]	; (8003c58 <HAL_I2C_Master_Receive+0x23c>)
 8003c3e:	68f8      	ldr	r0, [r7, #12]
 8003c40:	f001 f87e 	bl	8004d40 <I2C_WaitOnFlagUntilTimeout>
 8003c44:	4603      	mov	r3, r0
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d008      	beq.n	8003c5c <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	e148      	b.n	8003ee0 <HAL_I2C_Master_Receive+0x4c4>
 8003c4e:	bf00      	nop
 8003c50:	00100002 	.word	0x00100002
 8003c54:	ffff0000 	.word	0xffff0000
 8003c58:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003c5c:	b672      	cpsid	i
}
 8003c5e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	681a      	ldr	r2, [r3, #0]
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c6e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	691a      	ldr	r2, [r3, #16]
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c7a:	b2d2      	uxtb	r2, r2
 8003c7c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c82:	1c5a      	adds	r2, r3, #1
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c8c:	3b01      	subs	r3, #1
 8003c8e:	b29a      	uxth	r2, r3
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c98:	b29b      	uxth	r3, r3
 8003c9a:	3b01      	subs	r3, #1
 8003c9c:	b29a      	uxth	r2, r3
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003ca2:	b662      	cpsie	i
}
 8003ca4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	691a      	ldr	r2, [r3, #16]
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb0:	b2d2      	uxtb	r2, r2
 8003cb2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb8:	1c5a      	adds	r2, r3, #1
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cc2:	3b01      	subs	r3, #1
 8003cc4:	b29a      	uxth	r2, r3
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cce:	b29b      	uxth	r3, r3
 8003cd0:	3b01      	subs	r3, #1
 8003cd2:	b29a      	uxth	r2, r3
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003cd8:	e0ee      	b.n	8003eb8 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cdc:	9300      	str	r3, [sp, #0]
 8003cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	4981      	ldr	r1, [pc, #516]	; (8003ee8 <HAL_I2C_Master_Receive+0x4cc>)
 8003ce4:	68f8      	ldr	r0, [r7, #12]
 8003ce6:	f001 f82b 	bl	8004d40 <I2C_WaitOnFlagUntilTimeout>
 8003cea:	4603      	mov	r3, r0
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d001      	beq.n	8003cf4 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	e0f5      	b.n	8003ee0 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	681a      	ldr	r2, [r3, #0]
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d02:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003d04:	b672      	cpsid	i
}
 8003d06:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	691a      	ldr	r2, [r3, #16]
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d12:	b2d2      	uxtb	r2, r2
 8003d14:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d1a:	1c5a      	adds	r2, r3, #1
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d24:	3b01      	subs	r3, #1
 8003d26:	b29a      	uxth	r2, r3
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d30:	b29b      	uxth	r3, r3
 8003d32:	3b01      	subs	r3, #1
 8003d34:	b29a      	uxth	r2, r3
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003d3a:	4b6c      	ldr	r3, [pc, #432]	; (8003eec <HAL_I2C_Master_Receive+0x4d0>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	08db      	lsrs	r3, r3, #3
 8003d40:	4a6b      	ldr	r2, [pc, #428]	; (8003ef0 <HAL_I2C_Master_Receive+0x4d4>)
 8003d42:	fba2 2303 	umull	r2, r3, r2, r3
 8003d46:	0a1a      	lsrs	r2, r3, #8
 8003d48:	4613      	mov	r3, r2
 8003d4a:	009b      	lsls	r3, r3, #2
 8003d4c:	4413      	add	r3, r2
 8003d4e:	00da      	lsls	r2, r3, #3
 8003d50:	1ad3      	subs	r3, r2, r3
 8003d52:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003d54:	6a3b      	ldr	r3, [r7, #32]
 8003d56:	3b01      	subs	r3, #1
 8003d58:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003d5a:	6a3b      	ldr	r3, [r7, #32]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d118      	bne.n	8003d92 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	2200      	movs	r2, #0
 8003d64:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	2220      	movs	r2, #32
 8003d6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	2200      	movs	r2, #0
 8003d72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d7a:	f043 0220 	orr.w	r2, r3, #32
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003d82:	b662      	cpsie	i
}
 8003d84:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	e0a6      	b.n	8003ee0 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	695b      	ldr	r3, [r3, #20]
 8003d98:	f003 0304 	and.w	r3, r3, #4
 8003d9c:	2b04      	cmp	r3, #4
 8003d9e:	d1d9      	bne.n	8003d54 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	681a      	ldr	r2, [r3, #0]
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003dae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	691a      	ldr	r2, [r3, #16]
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dba:	b2d2      	uxtb	r2, r2
 8003dbc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc2:	1c5a      	adds	r2, r3, #1
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dcc:	3b01      	subs	r3, #1
 8003dce:	b29a      	uxth	r2, r3
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dd8:	b29b      	uxth	r3, r3
 8003dda:	3b01      	subs	r3, #1
 8003ddc:	b29a      	uxth	r2, r3
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003de2:	b662      	cpsie	i
}
 8003de4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	691a      	ldr	r2, [r3, #16]
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df0:	b2d2      	uxtb	r2, r2
 8003df2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df8:	1c5a      	adds	r2, r3, #1
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e02:	3b01      	subs	r3, #1
 8003e04:	b29a      	uxth	r2, r3
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e0e:	b29b      	uxth	r3, r3
 8003e10:	3b01      	subs	r3, #1
 8003e12:	b29a      	uxth	r2, r3
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003e18:	e04e      	b.n	8003eb8 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e1c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003e1e:	68f8      	ldr	r0, [r7, #12]
 8003e20:	f001 f938 	bl	8005094 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003e24:	4603      	mov	r3, r0
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d001      	beq.n	8003e2e <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	e058      	b.n	8003ee0 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	691a      	ldr	r2, [r3, #16]
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e38:	b2d2      	uxtb	r2, r2
 8003e3a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e40:	1c5a      	adds	r2, r3, #1
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e4a:	3b01      	subs	r3, #1
 8003e4c:	b29a      	uxth	r2, r3
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e56:	b29b      	uxth	r3, r3
 8003e58:	3b01      	subs	r3, #1
 8003e5a:	b29a      	uxth	r2, r3
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	695b      	ldr	r3, [r3, #20]
 8003e66:	f003 0304 	and.w	r3, r3, #4
 8003e6a:	2b04      	cmp	r3, #4
 8003e6c:	d124      	bne.n	8003eb8 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e72:	2b03      	cmp	r3, #3
 8003e74:	d107      	bne.n	8003e86 <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	681a      	ldr	r2, [r3, #0]
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e84:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	691a      	ldr	r2, [r3, #16]
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e90:	b2d2      	uxtb	r2, r2
 8003e92:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e98:	1c5a      	adds	r2, r3, #1
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ea2:	3b01      	subs	r3, #1
 8003ea4:	b29a      	uxth	r2, r3
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eae:	b29b      	uxth	r3, r3
 8003eb0:	3b01      	subs	r3, #1
 8003eb2:	b29a      	uxth	r2, r3
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	f47f ae88 	bne.w	8003bd2 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	2220      	movs	r2, #32
 8003ec6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003eda:	2300      	movs	r3, #0
 8003edc:	e000      	b.n	8003ee0 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 8003ede:	2302      	movs	r3, #2
  }
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	3728      	adds	r7, #40	; 0x28
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bd80      	pop	{r7, pc}
 8003ee8:	00010004 	.word	0x00010004
 8003eec:	2000003c 	.word	0x2000003c
 8003ef0:	14f8b589 	.word	0x14f8b589

08003ef4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b088      	sub	sp, #32
 8003ef8:	af02      	add	r7, sp, #8
 8003efa:	60f8      	str	r0, [r7, #12]
 8003efc:	4608      	mov	r0, r1
 8003efe:	4611      	mov	r1, r2
 8003f00:	461a      	mov	r2, r3
 8003f02:	4603      	mov	r3, r0
 8003f04:	817b      	strh	r3, [r7, #10]
 8003f06:	460b      	mov	r3, r1
 8003f08:	813b      	strh	r3, [r7, #8]
 8003f0a:	4613      	mov	r3, r2
 8003f0c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003f0e:	f7fe ffc7 	bl	8002ea0 <HAL_GetTick>
 8003f12:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f1a:	b2db      	uxtb	r3, r3
 8003f1c:	2b20      	cmp	r3, #32
 8003f1e:	f040 80d9 	bne.w	80040d4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	9300      	str	r3, [sp, #0]
 8003f26:	2319      	movs	r3, #25
 8003f28:	2201      	movs	r2, #1
 8003f2a:	496d      	ldr	r1, [pc, #436]	; (80040e0 <HAL_I2C_Mem_Write+0x1ec>)
 8003f2c:	68f8      	ldr	r0, [r7, #12]
 8003f2e:	f000 ff07 	bl	8004d40 <I2C_WaitOnFlagUntilTimeout>
 8003f32:	4603      	mov	r3, r0
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d001      	beq.n	8003f3c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003f38:	2302      	movs	r3, #2
 8003f3a:	e0cc      	b.n	80040d6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f42:	2b01      	cmp	r3, #1
 8003f44:	d101      	bne.n	8003f4a <HAL_I2C_Mem_Write+0x56>
 8003f46:	2302      	movs	r3, #2
 8003f48:	e0c5      	b.n	80040d6 <HAL_I2C_Mem_Write+0x1e2>
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	2201      	movs	r2, #1
 8003f4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f003 0301 	and.w	r3, r3, #1
 8003f5c:	2b01      	cmp	r3, #1
 8003f5e:	d007      	beq.n	8003f70 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	681a      	ldr	r2, [r3, #0]
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f042 0201 	orr.w	r2, r2, #1
 8003f6e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	681a      	ldr	r2, [r3, #0]
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f7e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	2221      	movs	r2, #33	; 0x21
 8003f84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	2240      	movs	r2, #64	; 0x40
 8003f8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	2200      	movs	r2, #0
 8003f94:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	6a3a      	ldr	r2, [r7, #32]
 8003f9a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003fa0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fa6:	b29a      	uxth	r2, r3
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	4a4d      	ldr	r2, [pc, #308]	; (80040e4 <HAL_I2C_Mem_Write+0x1f0>)
 8003fb0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003fb2:	88f8      	ldrh	r0, [r7, #6]
 8003fb4:	893a      	ldrh	r2, [r7, #8]
 8003fb6:	8979      	ldrh	r1, [r7, #10]
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	9301      	str	r3, [sp, #4]
 8003fbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fbe:	9300      	str	r3, [sp, #0]
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	68f8      	ldr	r0, [r7, #12]
 8003fc4:	f000 fd7e 	bl	8004ac4 <I2C_RequestMemoryWrite>
 8003fc8:	4603      	mov	r3, r0
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d052      	beq.n	8004074 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	e081      	b.n	80040d6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003fd2:	697a      	ldr	r2, [r7, #20]
 8003fd4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003fd6:	68f8      	ldr	r0, [r7, #12]
 8003fd8:	f000 ffcc 	bl	8004f74 <I2C_WaitOnTXEFlagUntilTimeout>
 8003fdc:	4603      	mov	r3, r0
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d00d      	beq.n	8003ffe <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fe6:	2b04      	cmp	r3, #4
 8003fe8:	d107      	bne.n	8003ffa <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	681a      	ldr	r2, [r3, #0]
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ff8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	e06b      	b.n	80040d6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004002:	781a      	ldrb	r2, [r3, #0]
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800400e:	1c5a      	adds	r2, r3, #1
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004018:	3b01      	subs	r3, #1
 800401a:	b29a      	uxth	r2, r3
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004024:	b29b      	uxth	r3, r3
 8004026:	3b01      	subs	r3, #1
 8004028:	b29a      	uxth	r2, r3
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	695b      	ldr	r3, [r3, #20]
 8004034:	f003 0304 	and.w	r3, r3, #4
 8004038:	2b04      	cmp	r3, #4
 800403a:	d11b      	bne.n	8004074 <HAL_I2C_Mem_Write+0x180>
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004040:	2b00      	cmp	r3, #0
 8004042:	d017      	beq.n	8004074 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004048:	781a      	ldrb	r2, [r3, #0]
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004054:	1c5a      	adds	r2, r3, #1
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800405e:	3b01      	subs	r3, #1
 8004060:	b29a      	uxth	r2, r3
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800406a:	b29b      	uxth	r3, r3
 800406c:	3b01      	subs	r3, #1
 800406e:	b29a      	uxth	r2, r3
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004078:	2b00      	cmp	r3, #0
 800407a:	d1aa      	bne.n	8003fd2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800407c:	697a      	ldr	r2, [r7, #20]
 800407e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004080:	68f8      	ldr	r0, [r7, #12]
 8004082:	f000 ffbf 	bl	8005004 <I2C_WaitOnBTFFlagUntilTimeout>
 8004086:	4603      	mov	r3, r0
 8004088:	2b00      	cmp	r3, #0
 800408a:	d00d      	beq.n	80040a8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004090:	2b04      	cmp	r3, #4
 8004092:	d107      	bne.n	80040a4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	681a      	ldr	r2, [r3, #0]
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040a2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80040a4:	2301      	movs	r3, #1
 80040a6:	e016      	b.n	80040d6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	681a      	ldr	r2, [r3, #0]
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	2220      	movs	r2, #32
 80040bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	2200      	movs	r2, #0
 80040c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	2200      	movs	r2, #0
 80040cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80040d0:	2300      	movs	r3, #0
 80040d2:	e000      	b.n	80040d6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80040d4:	2302      	movs	r3, #2
  }
}
 80040d6:	4618      	mov	r0, r3
 80040d8:	3718      	adds	r7, #24
 80040da:	46bd      	mov	sp, r7
 80040dc:	bd80      	pop	{r7, pc}
 80040de:	bf00      	nop
 80040e0:	00100002 	.word	0x00100002
 80040e4:	ffff0000 	.word	0xffff0000

080040e8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b08a      	sub	sp, #40	; 0x28
 80040ec:	af02      	add	r7, sp, #8
 80040ee:	60f8      	str	r0, [r7, #12]
 80040f0:	607a      	str	r2, [r7, #4]
 80040f2:	603b      	str	r3, [r7, #0]
 80040f4:	460b      	mov	r3, r1
 80040f6:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80040f8:	f7fe fed2 	bl	8002ea0 <HAL_GetTick>
 80040fc:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80040fe:	2300      	movs	r3, #0
 8004100:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004108:	b2db      	uxtb	r3, r3
 800410a:	2b20      	cmp	r3, #32
 800410c:	f040 8111 	bne.w	8004332 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004110:	69fb      	ldr	r3, [r7, #28]
 8004112:	9300      	str	r3, [sp, #0]
 8004114:	2319      	movs	r3, #25
 8004116:	2201      	movs	r2, #1
 8004118:	4988      	ldr	r1, [pc, #544]	; (800433c <HAL_I2C_IsDeviceReady+0x254>)
 800411a:	68f8      	ldr	r0, [r7, #12]
 800411c:	f000 fe10 	bl	8004d40 <I2C_WaitOnFlagUntilTimeout>
 8004120:	4603      	mov	r3, r0
 8004122:	2b00      	cmp	r3, #0
 8004124:	d001      	beq.n	800412a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8004126:	2302      	movs	r3, #2
 8004128:	e104      	b.n	8004334 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004130:	2b01      	cmp	r3, #1
 8004132:	d101      	bne.n	8004138 <HAL_I2C_IsDeviceReady+0x50>
 8004134:	2302      	movs	r3, #2
 8004136:	e0fd      	b.n	8004334 <HAL_I2C_IsDeviceReady+0x24c>
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	2201      	movs	r2, #1
 800413c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f003 0301 	and.w	r3, r3, #1
 800414a:	2b01      	cmp	r3, #1
 800414c:	d007      	beq.n	800415e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	681a      	ldr	r2, [r3, #0]
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f042 0201 	orr.w	r2, r2, #1
 800415c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	681a      	ldr	r2, [r3, #0]
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800416c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	2224      	movs	r2, #36	; 0x24
 8004172:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	2200      	movs	r2, #0
 800417a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	4a70      	ldr	r2, [pc, #448]	; (8004340 <HAL_I2C_IsDeviceReady+0x258>)
 8004180:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	681a      	ldr	r2, [r3, #0]
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004190:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8004192:	69fb      	ldr	r3, [r7, #28]
 8004194:	9300      	str	r3, [sp, #0]
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	2200      	movs	r2, #0
 800419a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800419e:	68f8      	ldr	r0, [r7, #12]
 80041a0:	f000 fdce 	bl	8004d40 <I2C_WaitOnFlagUntilTimeout>
 80041a4:	4603      	mov	r3, r0
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d00d      	beq.n	80041c6 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041b8:	d103      	bne.n	80041c2 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80041c0:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80041c2:	2303      	movs	r3, #3
 80041c4:	e0b6      	b.n	8004334 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80041c6:	897b      	ldrh	r3, [r7, #10]
 80041c8:	b2db      	uxtb	r3, r3
 80041ca:	461a      	mov	r2, r3
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80041d4:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80041d6:	f7fe fe63 	bl	8002ea0 <HAL_GetTick>
 80041da:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	695b      	ldr	r3, [r3, #20]
 80041e2:	f003 0302 	and.w	r3, r3, #2
 80041e6:	2b02      	cmp	r3, #2
 80041e8:	bf0c      	ite	eq
 80041ea:	2301      	moveq	r3, #1
 80041ec:	2300      	movne	r3, #0
 80041ee:	b2db      	uxtb	r3, r3
 80041f0:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	695b      	ldr	r3, [r3, #20]
 80041f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004200:	bf0c      	ite	eq
 8004202:	2301      	moveq	r3, #1
 8004204:	2300      	movne	r3, #0
 8004206:	b2db      	uxtb	r3, r3
 8004208:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800420a:	e025      	b.n	8004258 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800420c:	f7fe fe48 	bl	8002ea0 <HAL_GetTick>
 8004210:	4602      	mov	r2, r0
 8004212:	69fb      	ldr	r3, [r7, #28]
 8004214:	1ad3      	subs	r3, r2, r3
 8004216:	683a      	ldr	r2, [r7, #0]
 8004218:	429a      	cmp	r2, r3
 800421a:	d302      	bcc.n	8004222 <HAL_I2C_IsDeviceReady+0x13a>
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d103      	bne.n	800422a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	22a0      	movs	r2, #160	; 0xa0
 8004226:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	695b      	ldr	r3, [r3, #20]
 8004230:	f003 0302 	and.w	r3, r3, #2
 8004234:	2b02      	cmp	r3, #2
 8004236:	bf0c      	ite	eq
 8004238:	2301      	moveq	r3, #1
 800423a:	2300      	movne	r3, #0
 800423c:	b2db      	uxtb	r3, r3
 800423e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	695b      	ldr	r3, [r3, #20]
 8004246:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800424a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800424e:	bf0c      	ite	eq
 8004250:	2301      	moveq	r3, #1
 8004252:	2300      	movne	r3, #0
 8004254:	b2db      	uxtb	r3, r3
 8004256:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800425e:	b2db      	uxtb	r3, r3
 8004260:	2ba0      	cmp	r3, #160	; 0xa0
 8004262:	d005      	beq.n	8004270 <HAL_I2C_IsDeviceReady+0x188>
 8004264:	7dfb      	ldrb	r3, [r7, #23]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d102      	bne.n	8004270 <HAL_I2C_IsDeviceReady+0x188>
 800426a:	7dbb      	ldrb	r3, [r7, #22]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d0cd      	beq.n	800420c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	2220      	movs	r2, #32
 8004274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	695b      	ldr	r3, [r3, #20]
 800427e:	f003 0302 	and.w	r3, r3, #2
 8004282:	2b02      	cmp	r3, #2
 8004284:	d129      	bne.n	80042da <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	681a      	ldr	r2, [r3, #0]
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004294:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004296:	2300      	movs	r3, #0
 8004298:	613b      	str	r3, [r7, #16]
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	695b      	ldr	r3, [r3, #20]
 80042a0:	613b      	str	r3, [r7, #16]
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	699b      	ldr	r3, [r3, #24]
 80042a8:	613b      	str	r3, [r7, #16]
 80042aa:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80042ac:	69fb      	ldr	r3, [r7, #28]
 80042ae:	9300      	str	r3, [sp, #0]
 80042b0:	2319      	movs	r3, #25
 80042b2:	2201      	movs	r2, #1
 80042b4:	4921      	ldr	r1, [pc, #132]	; (800433c <HAL_I2C_IsDeviceReady+0x254>)
 80042b6:	68f8      	ldr	r0, [r7, #12]
 80042b8:	f000 fd42 	bl	8004d40 <I2C_WaitOnFlagUntilTimeout>
 80042bc:	4603      	mov	r3, r0
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d001      	beq.n	80042c6 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80042c2:	2301      	movs	r3, #1
 80042c4:	e036      	b.n	8004334 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	2220      	movs	r2, #32
 80042ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	2200      	movs	r2, #0
 80042d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80042d6:	2300      	movs	r3, #0
 80042d8:	e02c      	b.n	8004334 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	681a      	ldr	r2, [r3, #0]
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042e8:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80042f2:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80042f4:	69fb      	ldr	r3, [r7, #28]
 80042f6:	9300      	str	r3, [sp, #0]
 80042f8:	2319      	movs	r3, #25
 80042fa:	2201      	movs	r2, #1
 80042fc:	490f      	ldr	r1, [pc, #60]	; (800433c <HAL_I2C_IsDeviceReady+0x254>)
 80042fe:	68f8      	ldr	r0, [r7, #12]
 8004300:	f000 fd1e 	bl	8004d40 <I2C_WaitOnFlagUntilTimeout>
 8004304:	4603      	mov	r3, r0
 8004306:	2b00      	cmp	r3, #0
 8004308:	d001      	beq.n	800430e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800430a:	2301      	movs	r3, #1
 800430c:	e012      	b.n	8004334 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800430e:	69bb      	ldr	r3, [r7, #24]
 8004310:	3301      	adds	r3, #1
 8004312:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8004314:	69ba      	ldr	r2, [r7, #24]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	429a      	cmp	r2, r3
 800431a:	f4ff af32 	bcc.w	8004182 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	2220      	movs	r2, #32
 8004322:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	2200      	movs	r2, #0
 800432a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800432e:	2301      	movs	r3, #1
 8004330:	e000      	b.n	8004334 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8004332:	2302      	movs	r3, #2
  }
}
 8004334:	4618      	mov	r0, r3
 8004336:	3720      	adds	r7, #32
 8004338:	46bd      	mov	sp, r7
 800433a:	bd80      	pop	{r7, pc}
 800433c:	00100002 	.word	0x00100002
 8004340:	ffff0000 	.word	0xffff0000

08004344 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b08a      	sub	sp, #40	; 0x28
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	695b      	ldr	r3, [r3, #20]
 8004352:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800435c:	2300      	movs	r3, #0
 800435e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004366:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004368:	6a3b      	ldr	r3, [r7, #32]
 800436a:	0a1b      	lsrs	r3, r3, #8
 800436c:	f003 0301 	and.w	r3, r3, #1
 8004370:	2b00      	cmp	r3, #0
 8004372:	d016      	beq.n	80043a2 <HAL_I2C_ER_IRQHandler+0x5e>
 8004374:	69fb      	ldr	r3, [r7, #28]
 8004376:	0a1b      	lsrs	r3, r3, #8
 8004378:	f003 0301 	and.w	r3, r3, #1
 800437c:	2b00      	cmp	r3, #0
 800437e:	d010      	beq.n	80043a2 <HAL_I2C_ER_IRQHandler+0x5e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8004380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004382:	f043 0301 	orr.w	r3, r3, #1
 8004386:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004390:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	681a      	ldr	r2, [r3, #0]
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80043a0:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80043a2:	6a3b      	ldr	r3, [r7, #32]
 80043a4:	0a5b      	lsrs	r3, r3, #9
 80043a6:	f003 0301 	and.w	r3, r3, #1
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d00e      	beq.n	80043cc <HAL_I2C_ER_IRQHandler+0x88>
 80043ae:	69fb      	ldr	r3, [r7, #28]
 80043b0:	0a1b      	lsrs	r3, r3, #8
 80043b2:	f003 0301 	and.w	r3, r3, #1
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d008      	beq.n	80043cc <HAL_I2C_ER_IRQHandler+0x88>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80043ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043bc:	f043 0302 	orr.w	r3, r3, #2
 80043c0:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80043ca:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80043cc:	6a3b      	ldr	r3, [r7, #32]
 80043ce:	0a9b      	lsrs	r3, r3, #10
 80043d0:	f003 0301 	and.w	r3, r3, #1
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d03f      	beq.n	8004458 <HAL_I2C_ER_IRQHandler+0x114>
 80043d8:	69fb      	ldr	r3, [r7, #28]
 80043da:	0a1b      	lsrs	r3, r3, #8
 80043dc:	f003 0301 	and.w	r3, r3, #1
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d039      	beq.n	8004458 <HAL_I2C_ER_IRQHandler+0x114>
  {
    tmp1 = CurrentMode;
 80043e4:	7efb      	ldrb	r3, [r7, #27]
 80043e6:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043ec:	b29b      	uxth	r3, r3
 80043ee:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043f6:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043fc:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80043fe:	7ebb      	ldrb	r3, [r7, #26]
 8004400:	2b20      	cmp	r3, #32
 8004402:	d112      	bne.n	800442a <HAL_I2C_ER_IRQHandler+0xe6>
 8004404:	697b      	ldr	r3, [r7, #20]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d10f      	bne.n	800442a <HAL_I2C_ER_IRQHandler+0xe6>
 800440a:	7cfb      	ldrb	r3, [r7, #19]
 800440c:	2b21      	cmp	r3, #33	; 0x21
 800440e:	d008      	beq.n	8004422 <HAL_I2C_ER_IRQHandler+0xde>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8004410:	7cfb      	ldrb	r3, [r7, #19]
 8004412:	2b29      	cmp	r3, #41	; 0x29
 8004414:	d005      	beq.n	8004422 <HAL_I2C_ER_IRQHandler+0xde>
 8004416:	7cfb      	ldrb	r3, [r7, #19]
 8004418:	2b28      	cmp	r3, #40	; 0x28
 800441a:	d106      	bne.n	800442a <HAL_I2C_ER_IRQHandler+0xe6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	2b21      	cmp	r3, #33	; 0x21
 8004420:	d103      	bne.n	800442a <HAL_I2C_ER_IRQHandler+0xe6>
    {
      I2C_Slave_AF(hi2c);
 8004422:	6878      	ldr	r0, [r7, #4]
 8004424:	f000 f858 	bl	80044d8 <I2C_Slave_AF>
 8004428:	e016      	b.n	8004458 <HAL_I2C_ER_IRQHandler+0x114>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004432:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8004434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004436:	f043 0304 	orr.w	r3, r3, #4
 800443a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800443c:	7efb      	ldrb	r3, [r7, #27]
 800443e:	2b10      	cmp	r3, #16
 8004440:	d002      	beq.n	8004448 <HAL_I2C_ER_IRQHandler+0x104>
 8004442:	7efb      	ldrb	r3, [r7, #27]
 8004444:	2b40      	cmp	r3, #64	; 0x40
 8004446:	d107      	bne.n	8004458 <HAL_I2C_ER_IRQHandler+0x114>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	681a      	ldr	r2, [r3, #0]
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004456:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004458:	6a3b      	ldr	r3, [r7, #32]
 800445a:	0adb      	lsrs	r3, r3, #11
 800445c:	f003 0301 	and.w	r3, r3, #1
 8004460:	2b00      	cmp	r3, #0
 8004462:	d00e      	beq.n	8004482 <HAL_I2C_ER_IRQHandler+0x13e>
 8004464:	69fb      	ldr	r3, [r7, #28]
 8004466:	0a1b      	lsrs	r3, r3, #8
 8004468:	f003 0301 	and.w	r3, r3, #1
 800446c:	2b00      	cmp	r3, #0
 800446e:	d008      	beq.n	8004482 <HAL_I2C_ER_IRQHandler+0x13e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8004470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004472:	f043 0308 	orr.w	r3, r3, #8
 8004476:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8004480:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8004482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004484:	2b00      	cmp	r3, #0
 8004486:	d008      	beq.n	800449a <HAL_I2C_ER_IRQHandler+0x156>
  {
    hi2c->ErrorCode |= error;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800448c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800448e:	431a      	orrs	r2, r3
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8004494:	6878      	ldr	r0, [r7, #4]
 8004496:	f000 f893 	bl	80045c0 <I2C_ITError>
  }
}
 800449a:	bf00      	nop
 800449c:	3728      	adds	r7, #40	; 0x28
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}

080044a2 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80044a2:	b480      	push	{r7}
 80044a4:	b083      	sub	sp, #12
 80044a6:	af00      	add	r7, sp, #0
 80044a8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80044aa:	bf00      	nop
 80044ac:	370c      	adds	r7, #12
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bc80      	pop	{r7}
 80044b2:	4770      	bx	lr

080044b4 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80044b4:	b480      	push	{r7}
 80044b6:	b083      	sub	sp, #12
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80044bc:	bf00      	nop
 80044be:	370c      	adds	r7, #12
 80044c0:	46bd      	mov	sp, r7
 80044c2:	bc80      	pop	{r7}
 80044c4:	4770      	bx	lr

080044c6 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80044c6:	b480      	push	{r7}
 80044c8:	b083      	sub	sp, #12
 80044ca:	af00      	add	r7, sp, #0
 80044cc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80044ce:	bf00      	nop
 80044d0:	370c      	adds	r7, #12
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bc80      	pop	{r7}
 80044d6:	4770      	bx	lr

080044d8 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b084      	sub	sp, #16
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044e6:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ec:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	2b08      	cmp	r3, #8
 80044f2:	d002      	beq.n	80044fa <I2C_Slave_AF+0x22>
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	2b20      	cmp	r3, #32
 80044f8:	d129      	bne.n	800454e <I2C_Slave_AF+0x76>
 80044fa:	7bfb      	ldrb	r3, [r7, #15]
 80044fc:	2b28      	cmp	r3, #40	; 0x28
 80044fe:	d126      	bne.n	800454e <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	4a2e      	ldr	r2, [pc, #184]	; (80045bc <I2C_Slave_AF+0xe4>)
 8004504:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	685a      	ldr	r2, [r3, #4]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004514:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800451e:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	681a      	ldr	r2, [r3, #0]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800452e:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2200      	movs	r2, #0
 8004534:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2220      	movs	r2, #32
 800453a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2200      	movs	r2, #0
 8004542:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004546:	6878      	ldr	r0, [r7, #4]
 8004548:	f7ff ffb4 	bl	80044b4 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 800454c:	e031      	b.n	80045b2 <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800454e:	7bfb      	ldrb	r3, [r7, #15]
 8004550:	2b21      	cmp	r3, #33	; 0x21
 8004552:	d129      	bne.n	80045a8 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	4a19      	ldr	r2, [pc, #100]	; (80045bc <I2C_Slave_AF+0xe4>)
 8004558:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2221      	movs	r2, #33	; 0x21
 800455e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2220      	movs	r2, #32
 8004564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2200      	movs	r2, #0
 800456c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	685a      	ldr	r2, [r3, #4]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800457e:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004588:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	681a      	ldr	r2, [r3, #0]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004598:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 800459a:	6878      	ldr	r0, [r7, #4]
 800459c:	f7ff f92c 	bl	80037f8 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80045a0:	6878      	ldr	r0, [r7, #4]
 80045a2:	f7ff ff7e 	bl	80044a2 <HAL_I2C_SlaveTxCpltCallback>
}
 80045a6:	e004      	b.n	80045b2 <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80045b0:	615a      	str	r2, [r3, #20]
}
 80045b2:	bf00      	nop
 80045b4:	3710      	adds	r7, #16
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bd80      	pop	{r7, pc}
 80045ba:	bf00      	nop
 80045bc:	ffff0000 	.word	0xffff0000

080045c0 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b084      	sub	sp, #16
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045ce:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80045d6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80045d8:	7bbb      	ldrb	r3, [r7, #14]
 80045da:	2b10      	cmp	r3, #16
 80045dc:	d002      	beq.n	80045e4 <I2C_ITError+0x24>
 80045de:	7bbb      	ldrb	r3, [r7, #14]
 80045e0:	2b40      	cmp	r3, #64	; 0x40
 80045e2:	d10a      	bne.n	80045fa <I2C_ITError+0x3a>
 80045e4:	7bfb      	ldrb	r3, [r7, #15]
 80045e6:	2b22      	cmp	r3, #34	; 0x22
 80045e8:	d107      	bne.n	80045fa <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	681a      	ldr	r2, [r3, #0]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80045f8:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80045fa:	7bfb      	ldrb	r3, [r7, #15]
 80045fc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004600:	2b28      	cmp	r3, #40	; 0x28
 8004602:	d107      	bne.n	8004614 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2200      	movs	r2, #0
 8004608:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2228      	movs	r2, #40	; 0x28
 800460e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004612:	e015      	b.n	8004640 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800461e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004622:	d00a      	beq.n	800463a <I2C_ITError+0x7a>
 8004624:	7bfb      	ldrb	r3, [r7, #15]
 8004626:	2b60      	cmp	r3, #96	; 0x60
 8004628:	d007      	beq.n	800463a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2220      	movs	r2, #32
 800462e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2200      	movs	r2, #0
 8004636:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2200      	movs	r2, #0
 800463e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800464a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800464e:	d162      	bne.n	8004716 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	685a      	ldr	r2, [r3, #4]
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800465e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004664:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004668:	b2db      	uxtb	r3, r3
 800466a:	2b01      	cmp	r3, #1
 800466c:	d020      	beq.n	80046b0 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004672:	4a6a      	ldr	r2, [pc, #424]	; (800481c <I2C_ITError+0x25c>)
 8004674:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800467a:	4618      	mov	r0, r3
 800467c:	f7fe fd4c 	bl	8003118 <HAL_DMA_Abort_IT>
 8004680:	4603      	mov	r3, r0
 8004682:	2b00      	cmp	r3, #0
 8004684:	f000 8089 	beq.w	800479a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	681a      	ldr	r2, [r3, #0]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f022 0201 	bic.w	r2, r2, #1
 8004696:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2220      	movs	r2, #32
 800469c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046a6:	687a      	ldr	r2, [r7, #4]
 80046a8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80046aa:	4610      	mov	r0, r2
 80046ac:	4798      	blx	r3
 80046ae:	e074      	b.n	800479a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046b4:	4a59      	ldr	r2, [pc, #356]	; (800481c <I2C_ITError+0x25c>)
 80046b6:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046bc:	4618      	mov	r0, r3
 80046be:	f7fe fd2b 	bl	8003118 <HAL_DMA_Abort_IT>
 80046c2:	4603      	mov	r3, r0
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d068      	beq.n	800479a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	695b      	ldr	r3, [r3, #20]
 80046ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046d2:	2b40      	cmp	r3, #64	; 0x40
 80046d4:	d10b      	bne.n	80046ee <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	691a      	ldr	r2, [r3, #16]
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e0:	b2d2      	uxtb	r2, r2
 80046e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e8:	1c5a      	adds	r2, r3, #1
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	681a      	ldr	r2, [r3, #0]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f022 0201 	bic.w	r2, r2, #1
 80046fc:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2220      	movs	r2, #32
 8004702:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800470a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800470c:	687a      	ldr	r2, [r7, #4]
 800470e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004710:	4610      	mov	r0, r2
 8004712:	4798      	blx	r3
 8004714:	e041      	b.n	800479a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800471c:	b2db      	uxtb	r3, r3
 800471e:	2b60      	cmp	r3, #96	; 0x60
 8004720:	d125      	bne.n	800476e <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2220      	movs	r2, #32
 8004726:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2200      	movs	r2, #0
 800472e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	695b      	ldr	r3, [r3, #20]
 8004736:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800473a:	2b40      	cmp	r3, #64	; 0x40
 800473c:	d10b      	bne.n	8004756 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	691a      	ldr	r2, [r3, #16]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004748:	b2d2      	uxtb	r2, r2
 800474a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004750:	1c5a      	adds	r2, r3, #1
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	681a      	ldr	r2, [r3, #0]
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f022 0201 	bic.w	r2, r2, #1
 8004764:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004766:	6878      	ldr	r0, [r7, #4]
 8004768:	f7ff fead 	bl	80044c6 <HAL_I2C_AbortCpltCallback>
 800476c:	e015      	b.n	800479a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	695b      	ldr	r3, [r3, #20]
 8004774:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004778:	2b40      	cmp	r3, #64	; 0x40
 800477a:	d10b      	bne.n	8004794 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	691a      	ldr	r2, [r3, #16]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004786:	b2d2      	uxtb	r2, r2
 8004788:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800478e:	1c5a      	adds	r2, r3, #1
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004794:	6878      	ldr	r0, [r7, #4]
 8004796:	f7fd ff89 	bl	80026ac <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800479e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	f003 0301 	and.w	r3, r3, #1
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d10e      	bne.n	80047c8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d109      	bne.n	80047c8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d104      	bne.n	80047c8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d007      	beq.n	80047d8 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	685a      	ldr	r2, [r3, #4]
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80047d6:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047de:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047e4:	f003 0304 	and.w	r3, r3, #4
 80047e8:	2b04      	cmp	r3, #4
 80047ea:	d113      	bne.n	8004814 <I2C_ITError+0x254>
 80047ec:	7bfb      	ldrb	r3, [r7, #15]
 80047ee:	2b28      	cmp	r3, #40	; 0x28
 80047f0:	d110      	bne.n	8004814 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	4a0a      	ldr	r2, [pc, #40]	; (8004820 <I2C_ITError+0x260>)
 80047f6:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2200      	movs	r2, #0
 80047fc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2220      	movs	r2, #32
 8004802:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2200      	movs	r2, #0
 800480a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800480e:	6878      	ldr	r0, [r7, #4]
 8004810:	f7ff fe50 	bl	80044b4 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004814:	bf00      	nop
 8004816:	3710      	adds	r7, #16
 8004818:	46bd      	mov	sp, r7
 800481a:	bd80      	pop	{r7, pc}
 800481c:	08004bf1 	.word	0x08004bf1
 8004820:	ffff0000 	.word	0xffff0000

08004824 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b088      	sub	sp, #32
 8004828:	af02      	add	r7, sp, #8
 800482a:	60f8      	str	r0, [r7, #12]
 800482c:	607a      	str	r2, [r7, #4]
 800482e:	603b      	str	r3, [r7, #0]
 8004830:	460b      	mov	r3, r1
 8004832:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004838:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800483a:	697b      	ldr	r3, [r7, #20]
 800483c:	2b08      	cmp	r3, #8
 800483e:	d006      	beq.n	800484e <I2C_MasterRequestWrite+0x2a>
 8004840:	697b      	ldr	r3, [r7, #20]
 8004842:	2b01      	cmp	r3, #1
 8004844:	d003      	beq.n	800484e <I2C_MasterRequestWrite+0x2a>
 8004846:	697b      	ldr	r3, [r7, #20]
 8004848:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800484c:	d108      	bne.n	8004860 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	681a      	ldr	r2, [r3, #0]
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800485c:	601a      	str	r2, [r3, #0]
 800485e:	e00b      	b.n	8004878 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004864:	2b12      	cmp	r3, #18
 8004866:	d107      	bne.n	8004878 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	681a      	ldr	r2, [r3, #0]
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004876:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	9300      	str	r3, [sp, #0]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2200      	movs	r2, #0
 8004880:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004884:	68f8      	ldr	r0, [r7, #12]
 8004886:	f000 fa5b 	bl	8004d40 <I2C_WaitOnFlagUntilTimeout>
 800488a:	4603      	mov	r3, r0
 800488c:	2b00      	cmp	r3, #0
 800488e:	d00d      	beq.n	80048ac <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800489a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800489e:	d103      	bne.n	80048a8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80048a6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80048a8:	2303      	movs	r3, #3
 80048aa:	e035      	b.n	8004918 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	691b      	ldr	r3, [r3, #16]
 80048b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80048b4:	d108      	bne.n	80048c8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80048b6:	897b      	ldrh	r3, [r7, #10]
 80048b8:	b2db      	uxtb	r3, r3
 80048ba:	461a      	mov	r2, r3
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80048c4:	611a      	str	r2, [r3, #16]
 80048c6:	e01b      	b.n	8004900 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80048c8:	897b      	ldrh	r3, [r7, #10]
 80048ca:	11db      	asrs	r3, r3, #7
 80048cc:	b2db      	uxtb	r3, r3
 80048ce:	f003 0306 	and.w	r3, r3, #6
 80048d2:	b2db      	uxtb	r3, r3
 80048d4:	f063 030f 	orn	r3, r3, #15
 80048d8:	b2da      	uxtb	r2, r3
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	687a      	ldr	r2, [r7, #4]
 80048e4:	490e      	ldr	r1, [pc, #56]	; (8004920 <I2C_MasterRequestWrite+0xfc>)
 80048e6:	68f8      	ldr	r0, [r7, #12]
 80048e8:	f000 faa4 	bl	8004e34 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80048ec:	4603      	mov	r3, r0
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d001      	beq.n	80048f6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80048f2:	2301      	movs	r3, #1
 80048f4:	e010      	b.n	8004918 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80048f6:	897b      	ldrh	r3, [r7, #10]
 80048f8:	b2da      	uxtb	r2, r3
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	687a      	ldr	r2, [r7, #4]
 8004904:	4907      	ldr	r1, [pc, #28]	; (8004924 <I2C_MasterRequestWrite+0x100>)
 8004906:	68f8      	ldr	r0, [r7, #12]
 8004908:	f000 fa94 	bl	8004e34 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800490c:	4603      	mov	r3, r0
 800490e:	2b00      	cmp	r3, #0
 8004910:	d001      	beq.n	8004916 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004912:	2301      	movs	r3, #1
 8004914:	e000      	b.n	8004918 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004916:	2300      	movs	r3, #0
}
 8004918:	4618      	mov	r0, r3
 800491a:	3718      	adds	r7, #24
 800491c:	46bd      	mov	sp, r7
 800491e:	bd80      	pop	{r7, pc}
 8004920:	00010008 	.word	0x00010008
 8004924:	00010002 	.word	0x00010002

08004928 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b088      	sub	sp, #32
 800492c:	af02      	add	r7, sp, #8
 800492e:	60f8      	str	r0, [r7, #12]
 8004930:	607a      	str	r2, [r7, #4]
 8004932:	603b      	str	r3, [r7, #0]
 8004934:	460b      	mov	r3, r1
 8004936:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800493c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	681a      	ldr	r2, [r3, #0]
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800494c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800494e:	697b      	ldr	r3, [r7, #20]
 8004950:	2b08      	cmp	r3, #8
 8004952:	d006      	beq.n	8004962 <I2C_MasterRequestRead+0x3a>
 8004954:	697b      	ldr	r3, [r7, #20]
 8004956:	2b01      	cmp	r3, #1
 8004958:	d003      	beq.n	8004962 <I2C_MasterRequestRead+0x3a>
 800495a:	697b      	ldr	r3, [r7, #20]
 800495c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004960:	d108      	bne.n	8004974 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	681a      	ldr	r2, [r3, #0]
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004970:	601a      	str	r2, [r3, #0]
 8004972:	e00b      	b.n	800498c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004978:	2b11      	cmp	r3, #17
 800497a:	d107      	bne.n	800498c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	681a      	ldr	r2, [r3, #0]
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800498a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	9300      	str	r3, [sp, #0]
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2200      	movs	r2, #0
 8004994:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004998:	68f8      	ldr	r0, [r7, #12]
 800499a:	f000 f9d1 	bl	8004d40 <I2C_WaitOnFlagUntilTimeout>
 800499e:	4603      	mov	r3, r0
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d00d      	beq.n	80049c0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049b2:	d103      	bne.n	80049bc <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80049ba:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80049bc:	2303      	movs	r3, #3
 80049be:	e079      	b.n	8004ab4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	691b      	ldr	r3, [r3, #16]
 80049c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80049c8:	d108      	bne.n	80049dc <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80049ca:	897b      	ldrh	r3, [r7, #10]
 80049cc:	b2db      	uxtb	r3, r3
 80049ce:	f043 0301 	orr.w	r3, r3, #1
 80049d2:	b2da      	uxtb	r2, r3
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	611a      	str	r2, [r3, #16]
 80049da:	e05f      	b.n	8004a9c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80049dc:	897b      	ldrh	r3, [r7, #10]
 80049de:	11db      	asrs	r3, r3, #7
 80049e0:	b2db      	uxtb	r3, r3
 80049e2:	f003 0306 	and.w	r3, r3, #6
 80049e6:	b2db      	uxtb	r3, r3
 80049e8:	f063 030f 	orn	r3, r3, #15
 80049ec:	b2da      	uxtb	r2, r3
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	687a      	ldr	r2, [r7, #4]
 80049f8:	4930      	ldr	r1, [pc, #192]	; (8004abc <I2C_MasterRequestRead+0x194>)
 80049fa:	68f8      	ldr	r0, [r7, #12]
 80049fc:	f000 fa1a 	bl	8004e34 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004a00:	4603      	mov	r3, r0
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d001      	beq.n	8004a0a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004a06:	2301      	movs	r3, #1
 8004a08:	e054      	b.n	8004ab4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004a0a:	897b      	ldrh	r3, [r7, #10]
 8004a0c:	b2da      	uxtb	r2, r3
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	687a      	ldr	r2, [r7, #4]
 8004a18:	4929      	ldr	r1, [pc, #164]	; (8004ac0 <I2C_MasterRequestRead+0x198>)
 8004a1a:	68f8      	ldr	r0, [r7, #12]
 8004a1c:	f000 fa0a 	bl	8004e34 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004a20:	4603      	mov	r3, r0
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d001      	beq.n	8004a2a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004a26:	2301      	movs	r3, #1
 8004a28:	e044      	b.n	8004ab4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	613b      	str	r3, [r7, #16]
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	695b      	ldr	r3, [r3, #20]
 8004a34:	613b      	str	r3, [r7, #16]
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	699b      	ldr	r3, [r3, #24]
 8004a3c:	613b      	str	r3, [r7, #16]
 8004a3e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	681a      	ldr	r2, [r3, #0]
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a4e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	9300      	str	r3, [sp, #0]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2200      	movs	r2, #0
 8004a58:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004a5c:	68f8      	ldr	r0, [r7, #12]
 8004a5e:	f000 f96f 	bl	8004d40 <I2C_WaitOnFlagUntilTimeout>
 8004a62:	4603      	mov	r3, r0
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d00d      	beq.n	8004a84 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a76:	d103      	bne.n	8004a80 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a7e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8004a80:	2303      	movs	r3, #3
 8004a82:	e017      	b.n	8004ab4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004a84:	897b      	ldrh	r3, [r7, #10]
 8004a86:	11db      	asrs	r3, r3, #7
 8004a88:	b2db      	uxtb	r3, r3
 8004a8a:	f003 0306 	and.w	r3, r3, #6
 8004a8e:	b2db      	uxtb	r3, r3
 8004a90:	f063 030e 	orn	r3, r3, #14
 8004a94:	b2da      	uxtb	r2, r3
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	687a      	ldr	r2, [r7, #4]
 8004aa0:	4907      	ldr	r1, [pc, #28]	; (8004ac0 <I2C_MasterRequestRead+0x198>)
 8004aa2:	68f8      	ldr	r0, [r7, #12]
 8004aa4:	f000 f9c6 	bl	8004e34 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d001      	beq.n	8004ab2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	e000      	b.n	8004ab4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004ab2:	2300      	movs	r3, #0
}
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	3718      	adds	r7, #24
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	bd80      	pop	{r7, pc}
 8004abc:	00010008 	.word	0x00010008
 8004ac0:	00010002 	.word	0x00010002

08004ac4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b088      	sub	sp, #32
 8004ac8:	af02      	add	r7, sp, #8
 8004aca:	60f8      	str	r0, [r7, #12]
 8004acc:	4608      	mov	r0, r1
 8004ace:	4611      	mov	r1, r2
 8004ad0:	461a      	mov	r2, r3
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	817b      	strh	r3, [r7, #10]
 8004ad6:	460b      	mov	r3, r1
 8004ad8:	813b      	strh	r3, [r7, #8]
 8004ada:	4613      	mov	r3, r2
 8004adc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	681a      	ldr	r2, [r3, #0]
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004aec:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af0:	9300      	str	r3, [sp, #0]
 8004af2:	6a3b      	ldr	r3, [r7, #32]
 8004af4:	2200      	movs	r2, #0
 8004af6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004afa:	68f8      	ldr	r0, [r7, #12]
 8004afc:	f000 f920 	bl	8004d40 <I2C_WaitOnFlagUntilTimeout>
 8004b00:	4603      	mov	r3, r0
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d00d      	beq.n	8004b22 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b14:	d103      	bne.n	8004b1e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004b1c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004b1e:	2303      	movs	r3, #3
 8004b20:	e05f      	b.n	8004be2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004b22:	897b      	ldrh	r3, [r7, #10]
 8004b24:	b2db      	uxtb	r3, r3
 8004b26:	461a      	mov	r2, r3
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004b30:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b34:	6a3a      	ldr	r2, [r7, #32]
 8004b36:	492d      	ldr	r1, [pc, #180]	; (8004bec <I2C_RequestMemoryWrite+0x128>)
 8004b38:	68f8      	ldr	r0, [r7, #12]
 8004b3a:	f000 f97b 	bl	8004e34 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004b3e:	4603      	mov	r3, r0
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d001      	beq.n	8004b48 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004b44:	2301      	movs	r3, #1
 8004b46:	e04c      	b.n	8004be2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b48:	2300      	movs	r3, #0
 8004b4a:	617b      	str	r3, [r7, #20]
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	695b      	ldr	r3, [r3, #20]
 8004b52:	617b      	str	r3, [r7, #20]
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	699b      	ldr	r3, [r3, #24]
 8004b5a:	617b      	str	r3, [r7, #20]
 8004b5c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b60:	6a39      	ldr	r1, [r7, #32]
 8004b62:	68f8      	ldr	r0, [r7, #12]
 8004b64:	f000 fa06 	bl	8004f74 <I2C_WaitOnTXEFlagUntilTimeout>
 8004b68:	4603      	mov	r3, r0
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d00d      	beq.n	8004b8a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b72:	2b04      	cmp	r3, #4
 8004b74:	d107      	bne.n	8004b86 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	681a      	ldr	r2, [r3, #0]
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b84:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004b86:	2301      	movs	r3, #1
 8004b88:	e02b      	b.n	8004be2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004b8a:	88fb      	ldrh	r3, [r7, #6]
 8004b8c:	2b01      	cmp	r3, #1
 8004b8e:	d105      	bne.n	8004b9c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004b90:	893b      	ldrh	r3, [r7, #8]
 8004b92:	b2da      	uxtb	r2, r3
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	611a      	str	r2, [r3, #16]
 8004b9a:	e021      	b.n	8004be0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004b9c:	893b      	ldrh	r3, [r7, #8]
 8004b9e:	0a1b      	lsrs	r3, r3, #8
 8004ba0:	b29b      	uxth	r3, r3
 8004ba2:	b2da      	uxtb	r2, r3
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004baa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bac:	6a39      	ldr	r1, [r7, #32]
 8004bae:	68f8      	ldr	r0, [r7, #12]
 8004bb0:	f000 f9e0 	bl	8004f74 <I2C_WaitOnTXEFlagUntilTimeout>
 8004bb4:	4603      	mov	r3, r0
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d00d      	beq.n	8004bd6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bbe:	2b04      	cmp	r3, #4
 8004bc0:	d107      	bne.n	8004bd2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	681a      	ldr	r2, [r3, #0]
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bd0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	e005      	b.n	8004be2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004bd6:	893b      	ldrh	r3, [r7, #8]
 8004bd8:	b2da      	uxtb	r2, r3
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004be0:	2300      	movs	r3, #0
}
 8004be2:	4618      	mov	r0, r3
 8004be4:	3718      	adds	r7, #24
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bd80      	pop	{r7, pc}
 8004bea:	bf00      	nop
 8004bec:	00010002 	.word	0x00010002

08004bf0 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b086      	sub	sp, #24
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c00:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004c02:	697b      	ldr	r3, [r7, #20]
 8004c04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c08:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004c0a:	4b4b      	ldr	r3, [pc, #300]	; (8004d38 <I2C_DMAAbort+0x148>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	08db      	lsrs	r3, r3, #3
 8004c10:	4a4a      	ldr	r2, [pc, #296]	; (8004d3c <I2C_DMAAbort+0x14c>)
 8004c12:	fba2 2303 	umull	r2, r3, r2, r3
 8004c16:	0a1a      	lsrs	r2, r3, #8
 8004c18:	4613      	mov	r3, r2
 8004c1a:	009b      	lsls	r3, r3, #2
 8004c1c:	4413      	add	r3, r2
 8004c1e:	00da      	lsls	r2, r3, #3
 8004c20:	1ad3      	subs	r3, r2, r3
 8004c22:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d106      	bne.n	8004c38 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004c2a:	697b      	ldr	r3, [r7, #20]
 8004c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c2e:	f043 0220 	orr.w	r2, r3, #32
 8004c32:	697b      	ldr	r3, [r7, #20]
 8004c34:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8004c36:	e00a      	b.n	8004c4e <I2C_DMAAbort+0x5e>
    }
    count--;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	3b01      	subs	r3, #1
 8004c3c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004c3e:	697b      	ldr	r3, [r7, #20]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c4c:	d0ea      	beq.n	8004c24 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d003      	beq.n	8004c5e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004c56:	697b      	ldr	r3, [r7, #20]
 8004c58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 8004c5e:	697b      	ldr	r3, [r7, #20]
 8004c60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d003      	beq.n	8004c6e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004c66:	697b      	ldr	r3, [r7, #20]
 8004c68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c6e:	697b      	ldr	r3, [r7, #20]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	681a      	ldr	r2, [r3, #0]
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c7c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004c7e:	697b      	ldr	r3, [r7, #20]
 8004c80:	2200      	movs	r2, #0
 8004c82:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004c84:	697b      	ldr	r3, [r7, #20]
 8004c86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d003      	beq.n	8004c94 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004c8c:	697b      	ldr	r3, [r7, #20]
 8004c8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c90:	2200      	movs	r2, #0
 8004c92:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8004c94:	697b      	ldr	r3, [r7, #20]
 8004c96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d003      	beq.n	8004ca4 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004c9c:	697b      	ldr	r3, [r7, #20]
 8004c9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004ca4:	697b      	ldr	r3, [r7, #20]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	681a      	ldr	r2, [r3, #0]
 8004caa:	697b      	ldr	r3, [r7, #20]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f022 0201 	bic.w	r2, r2, #1
 8004cb2:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004cb4:	697b      	ldr	r3, [r7, #20]
 8004cb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cba:	b2db      	uxtb	r3, r3
 8004cbc:	2b60      	cmp	r3, #96	; 0x60
 8004cbe:	d10e      	bne.n	8004cde <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004cc0:	697b      	ldr	r3, [r7, #20]
 8004cc2:	2220      	movs	r2, #32
 8004cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004cc8:	697b      	ldr	r3, [r7, #20]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004cd0:	697b      	ldr	r3, [r7, #20]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004cd6:	6978      	ldr	r0, [r7, #20]
 8004cd8:	f7ff fbf5 	bl	80044c6 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004cdc:	e027      	b.n	8004d2e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004cde:	7cfb      	ldrb	r3, [r7, #19]
 8004ce0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004ce4:	2b28      	cmp	r3, #40	; 0x28
 8004ce6:	d117      	bne.n	8004d18 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004ce8:	697b      	ldr	r3, [r7, #20]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	681a      	ldr	r2, [r3, #0]
 8004cee:	697b      	ldr	r3, [r7, #20]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f042 0201 	orr.w	r2, r2, #1
 8004cf6:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004cf8:	697b      	ldr	r3, [r7, #20]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	681a      	ldr	r2, [r3, #0]
 8004cfe:	697b      	ldr	r3, [r7, #20]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004d06:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004d08:	697b      	ldr	r3, [r7, #20]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004d0e:	697b      	ldr	r3, [r7, #20]
 8004d10:	2228      	movs	r2, #40	; 0x28
 8004d12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004d16:	e007      	b.n	8004d28 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004d18:	697b      	ldr	r3, [r7, #20]
 8004d1a:	2220      	movs	r2, #32
 8004d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d20:	697b      	ldr	r3, [r7, #20]
 8004d22:	2200      	movs	r2, #0
 8004d24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004d28:	6978      	ldr	r0, [r7, #20]
 8004d2a:	f7fd fcbf 	bl	80026ac <HAL_I2C_ErrorCallback>
}
 8004d2e:	bf00      	nop
 8004d30:	3718      	adds	r7, #24
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bd80      	pop	{r7, pc}
 8004d36:	bf00      	nop
 8004d38:	2000003c 	.word	0x2000003c
 8004d3c:	14f8b589 	.word	0x14f8b589

08004d40 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b084      	sub	sp, #16
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	60f8      	str	r0, [r7, #12]
 8004d48:	60b9      	str	r1, [r7, #8]
 8004d4a:	603b      	str	r3, [r7, #0]
 8004d4c:	4613      	mov	r3, r2
 8004d4e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004d50:	e048      	b.n	8004de4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d58:	d044      	beq.n	8004de4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d5a:	f7fe f8a1 	bl	8002ea0 <HAL_GetTick>
 8004d5e:	4602      	mov	r2, r0
 8004d60:	69bb      	ldr	r3, [r7, #24]
 8004d62:	1ad3      	subs	r3, r2, r3
 8004d64:	683a      	ldr	r2, [r7, #0]
 8004d66:	429a      	cmp	r2, r3
 8004d68:	d302      	bcc.n	8004d70 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d139      	bne.n	8004de4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	0c1b      	lsrs	r3, r3, #16
 8004d74:	b2db      	uxtb	r3, r3
 8004d76:	2b01      	cmp	r3, #1
 8004d78:	d10d      	bne.n	8004d96 <I2C_WaitOnFlagUntilTimeout+0x56>
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	695b      	ldr	r3, [r3, #20]
 8004d80:	43da      	mvns	r2, r3
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	4013      	ands	r3, r2
 8004d86:	b29b      	uxth	r3, r3
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	bf0c      	ite	eq
 8004d8c:	2301      	moveq	r3, #1
 8004d8e:	2300      	movne	r3, #0
 8004d90:	b2db      	uxtb	r3, r3
 8004d92:	461a      	mov	r2, r3
 8004d94:	e00c      	b.n	8004db0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	699b      	ldr	r3, [r3, #24]
 8004d9c:	43da      	mvns	r2, r3
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	4013      	ands	r3, r2
 8004da2:	b29b      	uxth	r3, r3
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	bf0c      	ite	eq
 8004da8:	2301      	moveq	r3, #1
 8004daa:	2300      	movne	r3, #0
 8004dac:	b2db      	uxtb	r3, r3
 8004dae:	461a      	mov	r2, r3
 8004db0:	79fb      	ldrb	r3, [r7, #7]
 8004db2:	429a      	cmp	r2, r3
 8004db4:	d116      	bne.n	8004de4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	2200      	movs	r2, #0
 8004dba:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	2220      	movs	r2, #32
 8004dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dd0:	f043 0220 	orr.w	r2, r3, #32
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	2200      	movs	r2, #0
 8004ddc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004de0:	2301      	movs	r3, #1
 8004de2:	e023      	b.n	8004e2c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	0c1b      	lsrs	r3, r3, #16
 8004de8:	b2db      	uxtb	r3, r3
 8004dea:	2b01      	cmp	r3, #1
 8004dec:	d10d      	bne.n	8004e0a <I2C_WaitOnFlagUntilTimeout+0xca>
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	695b      	ldr	r3, [r3, #20]
 8004df4:	43da      	mvns	r2, r3
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	4013      	ands	r3, r2
 8004dfa:	b29b      	uxth	r3, r3
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	bf0c      	ite	eq
 8004e00:	2301      	moveq	r3, #1
 8004e02:	2300      	movne	r3, #0
 8004e04:	b2db      	uxtb	r3, r3
 8004e06:	461a      	mov	r2, r3
 8004e08:	e00c      	b.n	8004e24 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	699b      	ldr	r3, [r3, #24]
 8004e10:	43da      	mvns	r2, r3
 8004e12:	68bb      	ldr	r3, [r7, #8]
 8004e14:	4013      	ands	r3, r2
 8004e16:	b29b      	uxth	r3, r3
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	bf0c      	ite	eq
 8004e1c:	2301      	moveq	r3, #1
 8004e1e:	2300      	movne	r3, #0
 8004e20:	b2db      	uxtb	r3, r3
 8004e22:	461a      	mov	r2, r3
 8004e24:	79fb      	ldrb	r3, [r7, #7]
 8004e26:	429a      	cmp	r2, r3
 8004e28:	d093      	beq.n	8004d52 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004e2a:	2300      	movs	r3, #0
}
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	3710      	adds	r7, #16
 8004e30:	46bd      	mov	sp, r7
 8004e32:	bd80      	pop	{r7, pc}

08004e34 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b084      	sub	sp, #16
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	60f8      	str	r0, [r7, #12]
 8004e3c:	60b9      	str	r1, [r7, #8]
 8004e3e:	607a      	str	r2, [r7, #4]
 8004e40:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004e42:	e071      	b.n	8004f28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	695b      	ldr	r3, [r3, #20]
 8004e4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e52:	d123      	bne.n	8004e9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	681a      	ldr	r2, [r3, #0]
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e62:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004e6c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	2200      	movs	r2, #0
 8004e72:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	2220      	movs	r2, #32
 8004e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	2200      	movs	r2, #0
 8004e80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e88:	f043 0204 	orr.w	r2, r3, #4
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	2200      	movs	r2, #0
 8004e94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004e98:	2301      	movs	r3, #1
 8004e9a:	e067      	b.n	8004f6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ea2:	d041      	beq.n	8004f28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ea4:	f7fd fffc 	bl	8002ea0 <HAL_GetTick>
 8004ea8:	4602      	mov	r2, r0
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	1ad3      	subs	r3, r2, r3
 8004eae:	687a      	ldr	r2, [r7, #4]
 8004eb0:	429a      	cmp	r2, r3
 8004eb2:	d302      	bcc.n	8004eba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d136      	bne.n	8004f28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004eba:	68bb      	ldr	r3, [r7, #8]
 8004ebc:	0c1b      	lsrs	r3, r3, #16
 8004ebe:	b2db      	uxtb	r3, r3
 8004ec0:	2b01      	cmp	r3, #1
 8004ec2:	d10c      	bne.n	8004ede <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	695b      	ldr	r3, [r3, #20]
 8004eca:	43da      	mvns	r2, r3
 8004ecc:	68bb      	ldr	r3, [r7, #8]
 8004ece:	4013      	ands	r3, r2
 8004ed0:	b29b      	uxth	r3, r3
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	bf14      	ite	ne
 8004ed6:	2301      	movne	r3, #1
 8004ed8:	2300      	moveq	r3, #0
 8004eda:	b2db      	uxtb	r3, r3
 8004edc:	e00b      	b.n	8004ef6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	699b      	ldr	r3, [r3, #24]
 8004ee4:	43da      	mvns	r2, r3
 8004ee6:	68bb      	ldr	r3, [r7, #8]
 8004ee8:	4013      	ands	r3, r2
 8004eea:	b29b      	uxth	r3, r3
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	bf14      	ite	ne
 8004ef0:	2301      	movne	r3, #1
 8004ef2:	2300      	moveq	r3, #0
 8004ef4:	b2db      	uxtb	r3, r3
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d016      	beq.n	8004f28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	2200      	movs	r2, #0
 8004efe:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	2220      	movs	r2, #32
 8004f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f14:	f043 0220 	orr.w	r2, r3, #32
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	2200      	movs	r2, #0
 8004f20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004f24:	2301      	movs	r3, #1
 8004f26:	e021      	b.n	8004f6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	0c1b      	lsrs	r3, r3, #16
 8004f2c:	b2db      	uxtb	r3, r3
 8004f2e:	2b01      	cmp	r3, #1
 8004f30:	d10c      	bne.n	8004f4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	695b      	ldr	r3, [r3, #20]
 8004f38:	43da      	mvns	r2, r3
 8004f3a:	68bb      	ldr	r3, [r7, #8]
 8004f3c:	4013      	ands	r3, r2
 8004f3e:	b29b      	uxth	r3, r3
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	bf14      	ite	ne
 8004f44:	2301      	movne	r3, #1
 8004f46:	2300      	moveq	r3, #0
 8004f48:	b2db      	uxtb	r3, r3
 8004f4a:	e00b      	b.n	8004f64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	699b      	ldr	r3, [r3, #24]
 8004f52:	43da      	mvns	r2, r3
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	4013      	ands	r3, r2
 8004f58:	b29b      	uxth	r3, r3
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	bf14      	ite	ne
 8004f5e:	2301      	movne	r3, #1
 8004f60:	2300      	moveq	r3, #0
 8004f62:	b2db      	uxtb	r3, r3
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	f47f af6d 	bne.w	8004e44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004f6a:	2300      	movs	r3, #0
}
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	3710      	adds	r7, #16
 8004f70:	46bd      	mov	sp, r7
 8004f72:	bd80      	pop	{r7, pc}

08004f74 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b084      	sub	sp, #16
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	60f8      	str	r0, [r7, #12]
 8004f7c:	60b9      	str	r1, [r7, #8]
 8004f7e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004f80:	e034      	b.n	8004fec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004f82:	68f8      	ldr	r0, [r7, #12]
 8004f84:	f000 f8e3 	bl	800514e <I2C_IsAcknowledgeFailed>
 8004f88:	4603      	mov	r3, r0
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d001      	beq.n	8004f92 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004f8e:	2301      	movs	r3, #1
 8004f90:	e034      	b.n	8004ffc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004f98:	d028      	beq.n	8004fec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f9a:	f7fd ff81 	bl	8002ea0 <HAL_GetTick>
 8004f9e:	4602      	mov	r2, r0
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	1ad3      	subs	r3, r2, r3
 8004fa4:	68ba      	ldr	r2, [r7, #8]
 8004fa6:	429a      	cmp	r2, r3
 8004fa8:	d302      	bcc.n	8004fb0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004faa:	68bb      	ldr	r3, [r7, #8]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d11d      	bne.n	8004fec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	695b      	ldr	r3, [r3, #20]
 8004fb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fba:	2b80      	cmp	r3, #128	; 0x80
 8004fbc:	d016      	beq.n	8004fec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	2220      	movs	r2, #32
 8004fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fd8:	f043 0220 	orr.w	r2, r3, #32
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004fe8:	2301      	movs	r3, #1
 8004fea:	e007      	b.n	8004ffc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	695b      	ldr	r3, [r3, #20]
 8004ff2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ff6:	2b80      	cmp	r3, #128	; 0x80
 8004ff8:	d1c3      	bne.n	8004f82 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004ffa:	2300      	movs	r3, #0
}
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	3710      	adds	r7, #16
 8005000:	46bd      	mov	sp, r7
 8005002:	bd80      	pop	{r7, pc}

08005004 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b084      	sub	sp, #16
 8005008:	af00      	add	r7, sp, #0
 800500a:	60f8      	str	r0, [r7, #12]
 800500c:	60b9      	str	r1, [r7, #8]
 800500e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005010:	e034      	b.n	800507c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005012:	68f8      	ldr	r0, [r7, #12]
 8005014:	f000 f89b 	bl	800514e <I2C_IsAcknowledgeFailed>
 8005018:	4603      	mov	r3, r0
 800501a:	2b00      	cmp	r3, #0
 800501c:	d001      	beq.n	8005022 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800501e:	2301      	movs	r3, #1
 8005020:	e034      	b.n	800508c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005022:	68bb      	ldr	r3, [r7, #8]
 8005024:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005028:	d028      	beq.n	800507c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800502a:	f7fd ff39 	bl	8002ea0 <HAL_GetTick>
 800502e:	4602      	mov	r2, r0
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	1ad3      	subs	r3, r2, r3
 8005034:	68ba      	ldr	r2, [r7, #8]
 8005036:	429a      	cmp	r2, r3
 8005038:	d302      	bcc.n	8005040 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d11d      	bne.n	800507c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	695b      	ldr	r3, [r3, #20]
 8005046:	f003 0304 	and.w	r3, r3, #4
 800504a:	2b04      	cmp	r3, #4
 800504c:	d016      	beq.n	800507c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	2200      	movs	r2, #0
 8005052:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	2220      	movs	r2, #32
 8005058:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	2200      	movs	r2, #0
 8005060:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005068:	f043 0220 	orr.w	r2, r3, #32
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	2200      	movs	r2, #0
 8005074:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005078:	2301      	movs	r3, #1
 800507a:	e007      	b.n	800508c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	695b      	ldr	r3, [r3, #20]
 8005082:	f003 0304 	and.w	r3, r3, #4
 8005086:	2b04      	cmp	r3, #4
 8005088:	d1c3      	bne.n	8005012 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800508a:	2300      	movs	r3, #0
}
 800508c:	4618      	mov	r0, r3
 800508e:	3710      	adds	r7, #16
 8005090:	46bd      	mov	sp, r7
 8005092:	bd80      	pop	{r7, pc}

08005094 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b084      	sub	sp, #16
 8005098:	af00      	add	r7, sp, #0
 800509a:	60f8      	str	r0, [r7, #12]
 800509c:	60b9      	str	r1, [r7, #8]
 800509e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80050a0:	e049      	b.n	8005136 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	695b      	ldr	r3, [r3, #20]
 80050a8:	f003 0310 	and.w	r3, r3, #16
 80050ac:	2b10      	cmp	r3, #16
 80050ae:	d119      	bne.n	80050e4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f06f 0210 	mvn.w	r2, #16
 80050b8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	2200      	movs	r2, #0
 80050be:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	2220      	movs	r2, #32
 80050c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	2200      	movs	r2, #0
 80050cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	2200      	movs	r2, #0
 80050dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80050e0:	2301      	movs	r3, #1
 80050e2:	e030      	b.n	8005146 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050e4:	f7fd fedc 	bl	8002ea0 <HAL_GetTick>
 80050e8:	4602      	mov	r2, r0
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	1ad3      	subs	r3, r2, r3
 80050ee:	68ba      	ldr	r2, [r7, #8]
 80050f0:	429a      	cmp	r2, r3
 80050f2:	d302      	bcc.n	80050fa <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80050f4:	68bb      	ldr	r3, [r7, #8]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d11d      	bne.n	8005136 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	695b      	ldr	r3, [r3, #20]
 8005100:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005104:	2b40      	cmp	r3, #64	; 0x40
 8005106:	d016      	beq.n	8005136 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	2200      	movs	r2, #0
 800510c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	2220      	movs	r2, #32
 8005112:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	2200      	movs	r2, #0
 800511a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005122:	f043 0220 	orr.w	r2, r3, #32
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	2200      	movs	r2, #0
 800512e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005132:	2301      	movs	r3, #1
 8005134:	e007      	b.n	8005146 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	695b      	ldr	r3, [r3, #20]
 800513c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005140:	2b40      	cmp	r3, #64	; 0x40
 8005142:	d1ae      	bne.n	80050a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005144:	2300      	movs	r3, #0
}
 8005146:	4618      	mov	r0, r3
 8005148:	3710      	adds	r7, #16
 800514a:	46bd      	mov	sp, r7
 800514c:	bd80      	pop	{r7, pc}

0800514e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800514e:	b480      	push	{r7}
 8005150:	b083      	sub	sp, #12
 8005152:	af00      	add	r7, sp, #0
 8005154:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	695b      	ldr	r3, [r3, #20]
 800515c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005160:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005164:	d11b      	bne.n	800519e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800516e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2200      	movs	r2, #0
 8005174:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2220      	movs	r2, #32
 800517a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2200      	movs	r2, #0
 8005182:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800518a:	f043 0204 	orr.w	r2, r3, #4
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2200      	movs	r2, #0
 8005196:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800519a:	2301      	movs	r3, #1
 800519c:	e000      	b.n	80051a0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800519e:	2300      	movs	r3, #0
}
 80051a0:	4618      	mov	r0, r3
 80051a2:	370c      	adds	r7, #12
 80051a4:	46bd      	mov	sp, r7
 80051a6:	bc80      	pop	{r7}
 80051a8:	4770      	bx	lr

080051aa <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 80051aa:	b580      	push	{r7, lr}
 80051ac:	b084      	sub	sp, #16
 80051ae:	af00      	add	r7, sp, #0
 80051b0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d101      	bne.n	80051bc <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 80051b8:	2301      	movs	r3, #1
 80051ba:	e034      	b.n	8005226 <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 80051c4:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f245 5255 	movw	r2, #21845	; 0x5555
 80051ce:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	687a      	ldr	r2, [r7, #4]
 80051d6:	6852      	ldr	r2, [r2, #4]
 80051d8:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	687a      	ldr	r2, [r7, #4]
 80051e0:	6892      	ldr	r2, [r2, #8]
 80051e2:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 80051e4:	f7fd fe5c 	bl	8002ea0 <HAL_GetTick>
 80051e8:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80051ea:	e00f      	b.n	800520c <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 80051ec:	f7fd fe58 	bl	8002ea0 <HAL_GetTick>
 80051f0:	4602      	mov	r2, r0
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	1ad3      	subs	r3, r2, r3
 80051f6:	2b27      	cmp	r3, #39	; 0x27
 80051f8:	d908      	bls.n	800520c <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	68db      	ldr	r3, [r3, #12]
 8005200:	f003 0303 	and.w	r3, r3, #3
 8005204:	2b00      	cmp	r3, #0
 8005206:	d001      	beq.n	800520c <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8005208:	2303      	movs	r3, #3
 800520a:	e00c      	b.n	8005226 <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	68db      	ldr	r3, [r3, #12]
 8005212:	f003 0303 	and.w	r3, r3, #3
 8005216:	2b00      	cmp	r3, #0
 8005218:	d1e8      	bne.n	80051ec <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8005222:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005224:	2300      	movs	r3, #0
}
 8005226:	4618      	mov	r0, r3
 8005228:	3710      	adds	r7, #16
 800522a:	46bd      	mov	sp, r7
 800522c:	bd80      	pop	{r7, pc}

0800522e <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 800522e:	b480      	push	{r7}
 8005230:	b083      	sub	sp, #12
 8005232:	af00      	add	r7, sp, #0
 8005234:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800523e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005240:	2300      	movs	r3, #0
}
 8005242:	4618      	mov	r0, r3
 8005244:	370c      	adds	r7, #12
 8005246:	46bd      	mov	sp, r7
 8005248:	bc80      	pop	{r7}
 800524a:	4770      	bx	lr

0800524c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b086      	sub	sp, #24
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d101      	bne.n	800525e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800525a:	2301      	movs	r3, #1
 800525c:	e272      	b.n	8005744 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f003 0301 	and.w	r3, r3, #1
 8005266:	2b00      	cmp	r3, #0
 8005268:	f000 8087 	beq.w	800537a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800526c:	4b92      	ldr	r3, [pc, #584]	; (80054b8 <HAL_RCC_OscConfig+0x26c>)
 800526e:	685b      	ldr	r3, [r3, #4]
 8005270:	f003 030c 	and.w	r3, r3, #12
 8005274:	2b04      	cmp	r3, #4
 8005276:	d00c      	beq.n	8005292 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005278:	4b8f      	ldr	r3, [pc, #572]	; (80054b8 <HAL_RCC_OscConfig+0x26c>)
 800527a:	685b      	ldr	r3, [r3, #4]
 800527c:	f003 030c 	and.w	r3, r3, #12
 8005280:	2b08      	cmp	r3, #8
 8005282:	d112      	bne.n	80052aa <HAL_RCC_OscConfig+0x5e>
 8005284:	4b8c      	ldr	r3, [pc, #560]	; (80054b8 <HAL_RCC_OscConfig+0x26c>)
 8005286:	685b      	ldr	r3, [r3, #4]
 8005288:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800528c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005290:	d10b      	bne.n	80052aa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005292:	4b89      	ldr	r3, [pc, #548]	; (80054b8 <HAL_RCC_OscConfig+0x26c>)
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800529a:	2b00      	cmp	r3, #0
 800529c:	d06c      	beq.n	8005378 <HAL_RCC_OscConfig+0x12c>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	685b      	ldr	r3, [r3, #4]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d168      	bne.n	8005378 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80052a6:	2301      	movs	r3, #1
 80052a8:	e24c      	b.n	8005744 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	685b      	ldr	r3, [r3, #4]
 80052ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052b2:	d106      	bne.n	80052c2 <HAL_RCC_OscConfig+0x76>
 80052b4:	4b80      	ldr	r3, [pc, #512]	; (80054b8 <HAL_RCC_OscConfig+0x26c>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	4a7f      	ldr	r2, [pc, #508]	; (80054b8 <HAL_RCC_OscConfig+0x26c>)
 80052ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052be:	6013      	str	r3, [r2, #0]
 80052c0:	e02e      	b.n	8005320 <HAL_RCC_OscConfig+0xd4>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	685b      	ldr	r3, [r3, #4]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d10c      	bne.n	80052e4 <HAL_RCC_OscConfig+0x98>
 80052ca:	4b7b      	ldr	r3, [pc, #492]	; (80054b8 <HAL_RCC_OscConfig+0x26c>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	4a7a      	ldr	r2, [pc, #488]	; (80054b8 <HAL_RCC_OscConfig+0x26c>)
 80052d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052d4:	6013      	str	r3, [r2, #0]
 80052d6:	4b78      	ldr	r3, [pc, #480]	; (80054b8 <HAL_RCC_OscConfig+0x26c>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4a77      	ldr	r2, [pc, #476]	; (80054b8 <HAL_RCC_OscConfig+0x26c>)
 80052dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80052e0:	6013      	str	r3, [r2, #0]
 80052e2:	e01d      	b.n	8005320 <HAL_RCC_OscConfig+0xd4>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	685b      	ldr	r3, [r3, #4]
 80052e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80052ec:	d10c      	bne.n	8005308 <HAL_RCC_OscConfig+0xbc>
 80052ee:	4b72      	ldr	r3, [pc, #456]	; (80054b8 <HAL_RCC_OscConfig+0x26c>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4a71      	ldr	r2, [pc, #452]	; (80054b8 <HAL_RCC_OscConfig+0x26c>)
 80052f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80052f8:	6013      	str	r3, [r2, #0]
 80052fa:	4b6f      	ldr	r3, [pc, #444]	; (80054b8 <HAL_RCC_OscConfig+0x26c>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	4a6e      	ldr	r2, [pc, #440]	; (80054b8 <HAL_RCC_OscConfig+0x26c>)
 8005300:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005304:	6013      	str	r3, [r2, #0]
 8005306:	e00b      	b.n	8005320 <HAL_RCC_OscConfig+0xd4>
 8005308:	4b6b      	ldr	r3, [pc, #428]	; (80054b8 <HAL_RCC_OscConfig+0x26c>)
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4a6a      	ldr	r2, [pc, #424]	; (80054b8 <HAL_RCC_OscConfig+0x26c>)
 800530e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005312:	6013      	str	r3, [r2, #0]
 8005314:	4b68      	ldr	r3, [pc, #416]	; (80054b8 <HAL_RCC_OscConfig+0x26c>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4a67      	ldr	r2, [pc, #412]	; (80054b8 <HAL_RCC_OscConfig+0x26c>)
 800531a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800531e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	685b      	ldr	r3, [r3, #4]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d013      	beq.n	8005350 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005328:	f7fd fdba 	bl	8002ea0 <HAL_GetTick>
 800532c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800532e:	e008      	b.n	8005342 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005330:	f7fd fdb6 	bl	8002ea0 <HAL_GetTick>
 8005334:	4602      	mov	r2, r0
 8005336:	693b      	ldr	r3, [r7, #16]
 8005338:	1ad3      	subs	r3, r2, r3
 800533a:	2b64      	cmp	r3, #100	; 0x64
 800533c:	d901      	bls.n	8005342 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800533e:	2303      	movs	r3, #3
 8005340:	e200      	b.n	8005744 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005342:	4b5d      	ldr	r3, [pc, #372]	; (80054b8 <HAL_RCC_OscConfig+0x26c>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800534a:	2b00      	cmp	r3, #0
 800534c:	d0f0      	beq.n	8005330 <HAL_RCC_OscConfig+0xe4>
 800534e:	e014      	b.n	800537a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005350:	f7fd fda6 	bl	8002ea0 <HAL_GetTick>
 8005354:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005356:	e008      	b.n	800536a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005358:	f7fd fda2 	bl	8002ea0 <HAL_GetTick>
 800535c:	4602      	mov	r2, r0
 800535e:	693b      	ldr	r3, [r7, #16]
 8005360:	1ad3      	subs	r3, r2, r3
 8005362:	2b64      	cmp	r3, #100	; 0x64
 8005364:	d901      	bls.n	800536a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005366:	2303      	movs	r3, #3
 8005368:	e1ec      	b.n	8005744 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800536a:	4b53      	ldr	r3, [pc, #332]	; (80054b8 <HAL_RCC_OscConfig+0x26c>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005372:	2b00      	cmp	r3, #0
 8005374:	d1f0      	bne.n	8005358 <HAL_RCC_OscConfig+0x10c>
 8005376:	e000      	b.n	800537a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005378:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f003 0302 	and.w	r3, r3, #2
 8005382:	2b00      	cmp	r3, #0
 8005384:	d063      	beq.n	800544e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005386:	4b4c      	ldr	r3, [pc, #304]	; (80054b8 <HAL_RCC_OscConfig+0x26c>)
 8005388:	685b      	ldr	r3, [r3, #4]
 800538a:	f003 030c 	and.w	r3, r3, #12
 800538e:	2b00      	cmp	r3, #0
 8005390:	d00b      	beq.n	80053aa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005392:	4b49      	ldr	r3, [pc, #292]	; (80054b8 <HAL_RCC_OscConfig+0x26c>)
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	f003 030c 	and.w	r3, r3, #12
 800539a:	2b08      	cmp	r3, #8
 800539c:	d11c      	bne.n	80053d8 <HAL_RCC_OscConfig+0x18c>
 800539e:	4b46      	ldr	r3, [pc, #280]	; (80054b8 <HAL_RCC_OscConfig+0x26c>)
 80053a0:	685b      	ldr	r3, [r3, #4]
 80053a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d116      	bne.n	80053d8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80053aa:	4b43      	ldr	r3, [pc, #268]	; (80054b8 <HAL_RCC_OscConfig+0x26c>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f003 0302 	and.w	r3, r3, #2
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d005      	beq.n	80053c2 <HAL_RCC_OscConfig+0x176>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	691b      	ldr	r3, [r3, #16]
 80053ba:	2b01      	cmp	r3, #1
 80053bc:	d001      	beq.n	80053c2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80053be:	2301      	movs	r3, #1
 80053c0:	e1c0      	b.n	8005744 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053c2:	4b3d      	ldr	r3, [pc, #244]	; (80054b8 <HAL_RCC_OscConfig+0x26c>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	695b      	ldr	r3, [r3, #20]
 80053ce:	00db      	lsls	r3, r3, #3
 80053d0:	4939      	ldr	r1, [pc, #228]	; (80054b8 <HAL_RCC_OscConfig+0x26c>)
 80053d2:	4313      	orrs	r3, r2
 80053d4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80053d6:	e03a      	b.n	800544e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	691b      	ldr	r3, [r3, #16]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d020      	beq.n	8005422 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80053e0:	4b36      	ldr	r3, [pc, #216]	; (80054bc <HAL_RCC_OscConfig+0x270>)
 80053e2:	2201      	movs	r2, #1
 80053e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053e6:	f7fd fd5b 	bl	8002ea0 <HAL_GetTick>
 80053ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053ec:	e008      	b.n	8005400 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80053ee:	f7fd fd57 	bl	8002ea0 <HAL_GetTick>
 80053f2:	4602      	mov	r2, r0
 80053f4:	693b      	ldr	r3, [r7, #16]
 80053f6:	1ad3      	subs	r3, r2, r3
 80053f8:	2b02      	cmp	r3, #2
 80053fa:	d901      	bls.n	8005400 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80053fc:	2303      	movs	r3, #3
 80053fe:	e1a1      	b.n	8005744 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005400:	4b2d      	ldr	r3, [pc, #180]	; (80054b8 <HAL_RCC_OscConfig+0x26c>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f003 0302 	and.w	r3, r3, #2
 8005408:	2b00      	cmp	r3, #0
 800540a:	d0f0      	beq.n	80053ee <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800540c:	4b2a      	ldr	r3, [pc, #168]	; (80054b8 <HAL_RCC_OscConfig+0x26c>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	695b      	ldr	r3, [r3, #20]
 8005418:	00db      	lsls	r3, r3, #3
 800541a:	4927      	ldr	r1, [pc, #156]	; (80054b8 <HAL_RCC_OscConfig+0x26c>)
 800541c:	4313      	orrs	r3, r2
 800541e:	600b      	str	r3, [r1, #0]
 8005420:	e015      	b.n	800544e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005422:	4b26      	ldr	r3, [pc, #152]	; (80054bc <HAL_RCC_OscConfig+0x270>)
 8005424:	2200      	movs	r2, #0
 8005426:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005428:	f7fd fd3a 	bl	8002ea0 <HAL_GetTick>
 800542c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800542e:	e008      	b.n	8005442 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005430:	f7fd fd36 	bl	8002ea0 <HAL_GetTick>
 8005434:	4602      	mov	r2, r0
 8005436:	693b      	ldr	r3, [r7, #16]
 8005438:	1ad3      	subs	r3, r2, r3
 800543a:	2b02      	cmp	r3, #2
 800543c:	d901      	bls.n	8005442 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800543e:	2303      	movs	r3, #3
 8005440:	e180      	b.n	8005744 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005442:	4b1d      	ldr	r3, [pc, #116]	; (80054b8 <HAL_RCC_OscConfig+0x26c>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f003 0302 	and.w	r3, r3, #2
 800544a:	2b00      	cmp	r3, #0
 800544c:	d1f0      	bne.n	8005430 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f003 0308 	and.w	r3, r3, #8
 8005456:	2b00      	cmp	r3, #0
 8005458:	d03a      	beq.n	80054d0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	699b      	ldr	r3, [r3, #24]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d019      	beq.n	8005496 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005462:	4b17      	ldr	r3, [pc, #92]	; (80054c0 <HAL_RCC_OscConfig+0x274>)
 8005464:	2201      	movs	r2, #1
 8005466:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005468:	f7fd fd1a 	bl	8002ea0 <HAL_GetTick>
 800546c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800546e:	e008      	b.n	8005482 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005470:	f7fd fd16 	bl	8002ea0 <HAL_GetTick>
 8005474:	4602      	mov	r2, r0
 8005476:	693b      	ldr	r3, [r7, #16]
 8005478:	1ad3      	subs	r3, r2, r3
 800547a:	2b02      	cmp	r3, #2
 800547c:	d901      	bls.n	8005482 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800547e:	2303      	movs	r3, #3
 8005480:	e160      	b.n	8005744 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005482:	4b0d      	ldr	r3, [pc, #52]	; (80054b8 <HAL_RCC_OscConfig+0x26c>)
 8005484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005486:	f003 0302 	and.w	r3, r3, #2
 800548a:	2b00      	cmp	r3, #0
 800548c:	d0f0      	beq.n	8005470 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800548e:	2001      	movs	r0, #1
 8005490:	f000 faba 	bl	8005a08 <RCC_Delay>
 8005494:	e01c      	b.n	80054d0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005496:	4b0a      	ldr	r3, [pc, #40]	; (80054c0 <HAL_RCC_OscConfig+0x274>)
 8005498:	2200      	movs	r2, #0
 800549a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800549c:	f7fd fd00 	bl	8002ea0 <HAL_GetTick>
 80054a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80054a2:	e00f      	b.n	80054c4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80054a4:	f7fd fcfc 	bl	8002ea0 <HAL_GetTick>
 80054a8:	4602      	mov	r2, r0
 80054aa:	693b      	ldr	r3, [r7, #16]
 80054ac:	1ad3      	subs	r3, r2, r3
 80054ae:	2b02      	cmp	r3, #2
 80054b0:	d908      	bls.n	80054c4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80054b2:	2303      	movs	r3, #3
 80054b4:	e146      	b.n	8005744 <HAL_RCC_OscConfig+0x4f8>
 80054b6:	bf00      	nop
 80054b8:	40021000 	.word	0x40021000
 80054bc:	42420000 	.word	0x42420000
 80054c0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80054c4:	4b92      	ldr	r3, [pc, #584]	; (8005710 <HAL_RCC_OscConfig+0x4c4>)
 80054c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c8:	f003 0302 	and.w	r3, r3, #2
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d1e9      	bne.n	80054a4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f003 0304 	and.w	r3, r3, #4
 80054d8:	2b00      	cmp	r3, #0
 80054da:	f000 80a6 	beq.w	800562a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80054de:	2300      	movs	r3, #0
 80054e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80054e2:	4b8b      	ldr	r3, [pc, #556]	; (8005710 <HAL_RCC_OscConfig+0x4c4>)
 80054e4:	69db      	ldr	r3, [r3, #28]
 80054e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d10d      	bne.n	800550a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80054ee:	4b88      	ldr	r3, [pc, #544]	; (8005710 <HAL_RCC_OscConfig+0x4c4>)
 80054f0:	69db      	ldr	r3, [r3, #28]
 80054f2:	4a87      	ldr	r2, [pc, #540]	; (8005710 <HAL_RCC_OscConfig+0x4c4>)
 80054f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054f8:	61d3      	str	r3, [r2, #28]
 80054fa:	4b85      	ldr	r3, [pc, #532]	; (8005710 <HAL_RCC_OscConfig+0x4c4>)
 80054fc:	69db      	ldr	r3, [r3, #28]
 80054fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005502:	60bb      	str	r3, [r7, #8]
 8005504:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005506:	2301      	movs	r3, #1
 8005508:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800550a:	4b82      	ldr	r3, [pc, #520]	; (8005714 <HAL_RCC_OscConfig+0x4c8>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005512:	2b00      	cmp	r3, #0
 8005514:	d118      	bne.n	8005548 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005516:	4b7f      	ldr	r3, [pc, #508]	; (8005714 <HAL_RCC_OscConfig+0x4c8>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4a7e      	ldr	r2, [pc, #504]	; (8005714 <HAL_RCC_OscConfig+0x4c8>)
 800551c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005520:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005522:	f7fd fcbd 	bl	8002ea0 <HAL_GetTick>
 8005526:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005528:	e008      	b.n	800553c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800552a:	f7fd fcb9 	bl	8002ea0 <HAL_GetTick>
 800552e:	4602      	mov	r2, r0
 8005530:	693b      	ldr	r3, [r7, #16]
 8005532:	1ad3      	subs	r3, r2, r3
 8005534:	2b64      	cmp	r3, #100	; 0x64
 8005536:	d901      	bls.n	800553c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005538:	2303      	movs	r3, #3
 800553a:	e103      	b.n	8005744 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800553c:	4b75      	ldr	r3, [pc, #468]	; (8005714 <HAL_RCC_OscConfig+0x4c8>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005544:	2b00      	cmp	r3, #0
 8005546:	d0f0      	beq.n	800552a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	68db      	ldr	r3, [r3, #12]
 800554c:	2b01      	cmp	r3, #1
 800554e:	d106      	bne.n	800555e <HAL_RCC_OscConfig+0x312>
 8005550:	4b6f      	ldr	r3, [pc, #444]	; (8005710 <HAL_RCC_OscConfig+0x4c4>)
 8005552:	6a1b      	ldr	r3, [r3, #32]
 8005554:	4a6e      	ldr	r2, [pc, #440]	; (8005710 <HAL_RCC_OscConfig+0x4c4>)
 8005556:	f043 0301 	orr.w	r3, r3, #1
 800555a:	6213      	str	r3, [r2, #32]
 800555c:	e02d      	b.n	80055ba <HAL_RCC_OscConfig+0x36e>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	68db      	ldr	r3, [r3, #12]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d10c      	bne.n	8005580 <HAL_RCC_OscConfig+0x334>
 8005566:	4b6a      	ldr	r3, [pc, #424]	; (8005710 <HAL_RCC_OscConfig+0x4c4>)
 8005568:	6a1b      	ldr	r3, [r3, #32]
 800556a:	4a69      	ldr	r2, [pc, #420]	; (8005710 <HAL_RCC_OscConfig+0x4c4>)
 800556c:	f023 0301 	bic.w	r3, r3, #1
 8005570:	6213      	str	r3, [r2, #32]
 8005572:	4b67      	ldr	r3, [pc, #412]	; (8005710 <HAL_RCC_OscConfig+0x4c4>)
 8005574:	6a1b      	ldr	r3, [r3, #32]
 8005576:	4a66      	ldr	r2, [pc, #408]	; (8005710 <HAL_RCC_OscConfig+0x4c4>)
 8005578:	f023 0304 	bic.w	r3, r3, #4
 800557c:	6213      	str	r3, [r2, #32]
 800557e:	e01c      	b.n	80055ba <HAL_RCC_OscConfig+0x36e>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	68db      	ldr	r3, [r3, #12]
 8005584:	2b05      	cmp	r3, #5
 8005586:	d10c      	bne.n	80055a2 <HAL_RCC_OscConfig+0x356>
 8005588:	4b61      	ldr	r3, [pc, #388]	; (8005710 <HAL_RCC_OscConfig+0x4c4>)
 800558a:	6a1b      	ldr	r3, [r3, #32]
 800558c:	4a60      	ldr	r2, [pc, #384]	; (8005710 <HAL_RCC_OscConfig+0x4c4>)
 800558e:	f043 0304 	orr.w	r3, r3, #4
 8005592:	6213      	str	r3, [r2, #32]
 8005594:	4b5e      	ldr	r3, [pc, #376]	; (8005710 <HAL_RCC_OscConfig+0x4c4>)
 8005596:	6a1b      	ldr	r3, [r3, #32]
 8005598:	4a5d      	ldr	r2, [pc, #372]	; (8005710 <HAL_RCC_OscConfig+0x4c4>)
 800559a:	f043 0301 	orr.w	r3, r3, #1
 800559e:	6213      	str	r3, [r2, #32]
 80055a0:	e00b      	b.n	80055ba <HAL_RCC_OscConfig+0x36e>
 80055a2:	4b5b      	ldr	r3, [pc, #364]	; (8005710 <HAL_RCC_OscConfig+0x4c4>)
 80055a4:	6a1b      	ldr	r3, [r3, #32]
 80055a6:	4a5a      	ldr	r2, [pc, #360]	; (8005710 <HAL_RCC_OscConfig+0x4c4>)
 80055a8:	f023 0301 	bic.w	r3, r3, #1
 80055ac:	6213      	str	r3, [r2, #32]
 80055ae:	4b58      	ldr	r3, [pc, #352]	; (8005710 <HAL_RCC_OscConfig+0x4c4>)
 80055b0:	6a1b      	ldr	r3, [r3, #32]
 80055b2:	4a57      	ldr	r2, [pc, #348]	; (8005710 <HAL_RCC_OscConfig+0x4c4>)
 80055b4:	f023 0304 	bic.w	r3, r3, #4
 80055b8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	68db      	ldr	r3, [r3, #12]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d015      	beq.n	80055ee <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80055c2:	f7fd fc6d 	bl	8002ea0 <HAL_GetTick>
 80055c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055c8:	e00a      	b.n	80055e0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055ca:	f7fd fc69 	bl	8002ea0 <HAL_GetTick>
 80055ce:	4602      	mov	r2, r0
 80055d0:	693b      	ldr	r3, [r7, #16]
 80055d2:	1ad3      	subs	r3, r2, r3
 80055d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80055d8:	4293      	cmp	r3, r2
 80055da:	d901      	bls.n	80055e0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80055dc:	2303      	movs	r3, #3
 80055de:	e0b1      	b.n	8005744 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055e0:	4b4b      	ldr	r3, [pc, #300]	; (8005710 <HAL_RCC_OscConfig+0x4c4>)
 80055e2:	6a1b      	ldr	r3, [r3, #32]
 80055e4:	f003 0302 	and.w	r3, r3, #2
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d0ee      	beq.n	80055ca <HAL_RCC_OscConfig+0x37e>
 80055ec:	e014      	b.n	8005618 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80055ee:	f7fd fc57 	bl	8002ea0 <HAL_GetTick>
 80055f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80055f4:	e00a      	b.n	800560c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055f6:	f7fd fc53 	bl	8002ea0 <HAL_GetTick>
 80055fa:	4602      	mov	r2, r0
 80055fc:	693b      	ldr	r3, [r7, #16]
 80055fe:	1ad3      	subs	r3, r2, r3
 8005600:	f241 3288 	movw	r2, #5000	; 0x1388
 8005604:	4293      	cmp	r3, r2
 8005606:	d901      	bls.n	800560c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005608:	2303      	movs	r3, #3
 800560a:	e09b      	b.n	8005744 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800560c:	4b40      	ldr	r3, [pc, #256]	; (8005710 <HAL_RCC_OscConfig+0x4c4>)
 800560e:	6a1b      	ldr	r3, [r3, #32]
 8005610:	f003 0302 	and.w	r3, r3, #2
 8005614:	2b00      	cmp	r3, #0
 8005616:	d1ee      	bne.n	80055f6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005618:	7dfb      	ldrb	r3, [r7, #23]
 800561a:	2b01      	cmp	r3, #1
 800561c:	d105      	bne.n	800562a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800561e:	4b3c      	ldr	r3, [pc, #240]	; (8005710 <HAL_RCC_OscConfig+0x4c4>)
 8005620:	69db      	ldr	r3, [r3, #28]
 8005622:	4a3b      	ldr	r2, [pc, #236]	; (8005710 <HAL_RCC_OscConfig+0x4c4>)
 8005624:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005628:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	69db      	ldr	r3, [r3, #28]
 800562e:	2b00      	cmp	r3, #0
 8005630:	f000 8087 	beq.w	8005742 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005634:	4b36      	ldr	r3, [pc, #216]	; (8005710 <HAL_RCC_OscConfig+0x4c4>)
 8005636:	685b      	ldr	r3, [r3, #4]
 8005638:	f003 030c 	and.w	r3, r3, #12
 800563c:	2b08      	cmp	r3, #8
 800563e:	d061      	beq.n	8005704 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	69db      	ldr	r3, [r3, #28]
 8005644:	2b02      	cmp	r3, #2
 8005646:	d146      	bne.n	80056d6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005648:	4b33      	ldr	r3, [pc, #204]	; (8005718 <HAL_RCC_OscConfig+0x4cc>)
 800564a:	2200      	movs	r2, #0
 800564c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800564e:	f7fd fc27 	bl	8002ea0 <HAL_GetTick>
 8005652:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005654:	e008      	b.n	8005668 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005656:	f7fd fc23 	bl	8002ea0 <HAL_GetTick>
 800565a:	4602      	mov	r2, r0
 800565c:	693b      	ldr	r3, [r7, #16]
 800565e:	1ad3      	subs	r3, r2, r3
 8005660:	2b02      	cmp	r3, #2
 8005662:	d901      	bls.n	8005668 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005664:	2303      	movs	r3, #3
 8005666:	e06d      	b.n	8005744 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005668:	4b29      	ldr	r3, [pc, #164]	; (8005710 <HAL_RCC_OscConfig+0x4c4>)
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005670:	2b00      	cmp	r3, #0
 8005672:	d1f0      	bne.n	8005656 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6a1b      	ldr	r3, [r3, #32]
 8005678:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800567c:	d108      	bne.n	8005690 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800567e:	4b24      	ldr	r3, [pc, #144]	; (8005710 <HAL_RCC_OscConfig+0x4c4>)
 8005680:	685b      	ldr	r3, [r3, #4]
 8005682:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	689b      	ldr	r3, [r3, #8]
 800568a:	4921      	ldr	r1, [pc, #132]	; (8005710 <HAL_RCC_OscConfig+0x4c4>)
 800568c:	4313      	orrs	r3, r2
 800568e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005690:	4b1f      	ldr	r3, [pc, #124]	; (8005710 <HAL_RCC_OscConfig+0x4c4>)
 8005692:	685b      	ldr	r3, [r3, #4]
 8005694:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6a19      	ldr	r1, [r3, #32]
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056a0:	430b      	orrs	r3, r1
 80056a2:	491b      	ldr	r1, [pc, #108]	; (8005710 <HAL_RCC_OscConfig+0x4c4>)
 80056a4:	4313      	orrs	r3, r2
 80056a6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80056a8:	4b1b      	ldr	r3, [pc, #108]	; (8005718 <HAL_RCC_OscConfig+0x4cc>)
 80056aa:	2201      	movs	r2, #1
 80056ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056ae:	f7fd fbf7 	bl	8002ea0 <HAL_GetTick>
 80056b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80056b4:	e008      	b.n	80056c8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056b6:	f7fd fbf3 	bl	8002ea0 <HAL_GetTick>
 80056ba:	4602      	mov	r2, r0
 80056bc:	693b      	ldr	r3, [r7, #16]
 80056be:	1ad3      	subs	r3, r2, r3
 80056c0:	2b02      	cmp	r3, #2
 80056c2:	d901      	bls.n	80056c8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80056c4:	2303      	movs	r3, #3
 80056c6:	e03d      	b.n	8005744 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80056c8:	4b11      	ldr	r3, [pc, #68]	; (8005710 <HAL_RCC_OscConfig+0x4c4>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d0f0      	beq.n	80056b6 <HAL_RCC_OscConfig+0x46a>
 80056d4:	e035      	b.n	8005742 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056d6:	4b10      	ldr	r3, [pc, #64]	; (8005718 <HAL_RCC_OscConfig+0x4cc>)
 80056d8:	2200      	movs	r2, #0
 80056da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056dc:	f7fd fbe0 	bl	8002ea0 <HAL_GetTick>
 80056e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80056e2:	e008      	b.n	80056f6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056e4:	f7fd fbdc 	bl	8002ea0 <HAL_GetTick>
 80056e8:	4602      	mov	r2, r0
 80056ea:	693b      	ldr	r3, [r7, #16]
 80056ec:	1ad3      	subs	r3, r2, r3
 80056ee:	2b02      	cmp	r3, #2
 80056f0:	d901      	bls.n	80056f6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80056f2:	2303      	movs	r3, #3
 80056f4:	e026      	b.n	8005744 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80056f6:	4b06      	ldr	r3, [pc, #24]	; (8005710 <HAL_RCC_OscConfig+0x4c4>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d1f0      	bne.n	80056e4 <HAL_RCC_OscConfig+0x498>
 8005702:	e01e      	b.n	8005742 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	69db      	ldr	r3, [r3, #28]
 8005708:	2b01      	cmp	r3, #1
 800570a:	d107      	bne.n	800571c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800570c:	2301      	movs	r3, #1
 800570e:	e019      	b.n	8005744 <HAL_RCC_OscConfig+0x4f8>
 8005710:	40021000 	.word	0x40021000
 8005714:	40007000 	.word	0x40007000
 8005718:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800571c:	4b0b      	ldr	r3, [pc, #44]	; (800574c <HAL_RCC_OscConfig+0x500>)
 800571e:	685b      	ldr	r3, [r3, #4]
 8005720:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6a1b      	ldr	r3, [r3, #32]
 800572c:	429a      	cmp	r2, r3
 800572e:	d106      	bne.n	800573e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800573a:	429a      	cmp	r2, r3
 800573c:	d001      	beq.n	8005742 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800573e:	2301      	movs	r3, #1
 8005740:	e000      	b.n	8005744 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8005742:	2300      	movs	r3, #0
}
 8005744:	4618      	mov	r0, r3
 8005746:	3718      	adds	r7, #24
 8005748:	46bd      	mov	sp, r7
 800574a:	bd80      	pop	{r7, pc}
 800574c:	40021000 	.word	0x40021000

08005750 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b084      	sub	sp, #16
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
 8005758:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d101      	bne.n	8005764 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005760:	2301      	movs	r3, #1
 8005762:	e0d0      	b.n	8005906 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005764:	4b6a      	ldr	r3, [pc, #424]	; (8005910 <HAL_RCC_ClockConfig+0x1c0>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f003 0307 	and.w	r3, r3, #7
 800576c:	683a      	ldr	r2, [r7, #0]
 800576e:	429a      	cmp	r2, r3
 8005770:	d910      	bls.n	8005794 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005772:	4b67      	ldr	r3, [pc, #412]	; (8005910 <HAL_RCC_ClockConfig+0x1c0>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f023 0207 	bic.w	r2, r3, #7
 800577a:	4965      	ldr	r1, [pc, #404]	; (8005910 <HAL_RCC_ClockConfig+0x1c0>)
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	4313      	orrs	r3, r2
 8005780:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005782:	4b63      	ldr	r3, [pc, #396]	; (8005910 <HAL_RCC_ClockConfig+0x1c0>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f003 0307 	and.w	r3, r3, #7
 800578a:	683a      	ldr	r2, [r7, #0]
 800578c:	429a      	cmp	r2, r3
 800578e:	d001      	beq.n	8005794 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005790:	2301      	movs	r3, #1
 8005792:	e0b8      	b.n	8005906 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f003 0302 	and.w	r3, r3, #2
 800579c:	2b00      	cmp	r3, #0
 800579e:	d020      	beq.n	80057e2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f003 0304 	and.w	r3, r3, #4
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d005      	beq.n	80057b8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80057ac:	4b59      	ldr	r3, [pc, #356]	; (8005914 <HAL_RCC_ClockConfig+0x1c4>)
 80057ae:	685b      	ldr	r3, [r3, #4]
 80057b0:	4a58      	ldr	r2, [pc, #352]	; (8005914 <HAL_RCC_ClockConfig+0x1c4>)
 80057b2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80057b6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f003 0308 	and.w	r3, r3, #8
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d005      	beq.n	80057d0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80057c4:	4b53      	ldr	r3, [pc, #332]	; (8005914 <HAL_RCC_ClockConfig+0x1c4>)
 80057c6:	685b      	ldr	r3, [r3, #4]
 80057c8:	4a52      	ldr	r2, [pc, #328]	; (8005914 <HAL_RCC_ClockConfig+0x1c4>)
 80057ca:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80057ce:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80057d0:	4b50      	ldr	r3, [pc, #320]	; (8005914 <HAL_RCC_ClockConfig+0x1c4>)
 80057d2:	685b      	ldr	r3, [r3, #4]
 80057d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	689b      	ldr	r3, [r3, #8]
 80057dc:	494d      	ldr	r1, [pc, #308]	; (8005914 <HAL_RCC_ClockConfig+0x1c4>)
 80057de:	4313      	orrs	r3, r2
 80057e0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f003 0301 	and.w	r3, r3, #1
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d040      	beq.n	8005870 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	685b      	ldr	r3, [r3, #4]
 80057f2:	2b01      	cmp	r3, #1
 80057f4:	d107      	bne.n	8005806 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057f6:	4b47      	ldr	r3, [pc, #284]	; (8005914 <HAL_RCC_ClockConfig+0x1c4>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d115      	bne.n	800582e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005802:	2301      	movs	r3, #1
 8005804:	e07f      	b.n	8005906 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	685b      	ldr	r3, [r3, #4]
 800580a:	2b02      	cmp	r3, #2
 800580c:	d107      	bne.n	800581e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800580e:	4b41      	ldr	r3, [pc, #260]	; (8005914 <HAL_RCC_ClockConfig+0x1c4>)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005816:	2b00      	cmp	r3, #0
 8005818:	d109      	bne.n	800582e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800581a:	2301      	movs	r3, #1
 800581c:	e073      	b.n	8005906 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800581e:	4b3d      	ldr	r3, [pc, #244]	; (8005914 <HAL_RCC_ClockConfig+0x1c4>)
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f003 0302 	and.w	r3, r3, #2
 8005826:	2b00      	cmp	r3, #0
 8005828:	d101      	bne.n	800582e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800582a:	2301      	movs	r3, #1
 800582c:	e06b      	b.n	8005906 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800582e:	4b39      	ldr	r3, [pc, #228]	; (8005914 <HAL_RCC_ClockConfig+0x1c4>)
 8005830:	685b      	ldr	r3, [r3, #4]
 8005832:	f023 0203 	bic.w	r2, r3, #3
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	685b      	ldr	r3, [r3, #4]
 800583a:	4936      	ldr	r1, [pc, #216]	; (8005914 <HAL_RCC_ClockConfig+0x1c4>)
 800583c:	4313      	orrs	r3, r2
 800583e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005840:	f7fd fb2e 	bl	8002ea0 <HAL_GetTick>
 8005844:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005846:	e00a      	b.n	800585e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005848:	f7fd fb2a 	bl	8002ea0 <HAL_GetTick>
 800584c:	4602      	mov	r2, r0
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	1ad3      	subs	r3, r2, r3
 8005852:	f241 3288 	movw	r2, #5000	; 0x1388
 8005856:	4293      	cmp	r3, r2
 8005858:	d901      	bls.n	800585e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800585a:	2303      	movs	r3, #3
 800585c:	e053      	b.n	8005906 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800585e:	4b2d      	ldr	r3, [pc, #180]	; (8005914 <HAL_RCC_ClockConfig+0x1c4>)
 8005860:	685b      	ldr	r3, [r3, #4]
 8005862:	f003 020c 	and.w	r2, r3, #12
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	685b      	ldr	r3, [r3, #4]
 800586a:	009b      	lsls	r3, r3, #2
 800586c:	429a      	cmp	r2, r3
 800586e:	d1eb      	bne.n	8005848 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005870:	4b27      	ldr	r3, [pc, #156]	; (8005910 <HAL_RCC_ClockConfig+0x1c0>)
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f003 0307 	and.w	r3, r3, #7
 8005878:	683a      	ldr	r2, [r7, #0]
 800587a:	429a      	cmp	r2, r3
 800587c:	d210      	bcs.n	80058a0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800587e:	4b24      	ldr	r3, [pc, #144]	; (8005910 <HAL_RCC_ClockConfig+0x1c0>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f023 0207 	bic.w	r2, r3, #7
 8005886:	4922      	ldr	r1, [pc, #136]	; (8005910 <HAL_RCC_ClockConfig+0x1c0>)
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	4313      	orrs	r3, r2
 800588c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800588e:	4b20      	ldr	r3, [pc, #128]	; (8005910 <HAL_RCC_ClockConfig+0x1c0>)
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f003 0307 	and.w	r3, r3, #7
 8005896:	683a      	ldr	r2, [r7, #0]
 8005898:	429a      	cmp	r2, r3
 800589a:	d001      	beq.n	80058a0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800589c:	2301      	movs	r3, #1
 800589e:	e032      	b.n	8005906 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f003 0304 	and.w	r3, r3, #4
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d008      	beq.n	80058be <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80058ac:	4b19      	ldr	r3, [pc, #100]	; (8005914 <HAL_RCC_ClockConfig+0x1c4>)
 80058ae:	685b      	ldr	r3, [r3, #4]
 80058b0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	68db      	ldr	r3, [r3, #12]
 80058b8:	4916      	ldr	r1, [pc, #88]	; (8005914 <HAL_RCC_ClockConfig+0x1c4>)
 80058ba:	4313      	orrs	r3, r2
 80058bc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f003 0308 	and.w	r3, r3, #8
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d009      	beq.n	80058de <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80058ca:	4b12      	ldr	r3, [pc, #72]	; (8005914 <HAL_RCC_ClockConfig+0x1c4>)
 80058cc:	685b      	ldr	r3, [r3, #4]
 80058ce:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	691b      	ldr	r3, [r3, #16]
 80058d6:	00db      	lsls	r3, r3, #3
 80058d8:	490e      	ldr	r1, [pc, #56]	; (8005914 <HAL_RCC_ClockConfig+0x1c4>)
 80058da:	4313      	orrs	r3, r2
 80058dc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80058de:	f000 f821 	bl	8005924 <HAL_RCC_GetSysClockFreq>
 80058e2:	4602      	mov	r2, r0
 80058e4:	4b0b      	ldr	r3, [pc, #44]	; (8005914 <HAL_RCC_ClockConfig+0x1c4>)
 80058e6:	685b      	ldr	r3, [r3, #4]
 80058e8:	091b      	lsrs	r3, r3, #4
 80058ea:	f003 030f 	and.w	r3, r3, #15
 80058ee:	490a      	ldr	r1, [pc, #40]	; (8005918 <HAL_RCC_ClockConfig+0x1c8>)
 80058f0:	5ccb      	ldrb	r3, [r1, r3]
 80058f2:	fa22 f303 	lsr.w	r3, r2, r3
 80058f6:	4a09      	ldr	r2, [pc, #36]	; (800591c <HAL_RCC_ClockConfig+0x1cc>)
 80058f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80058fa:	4b09      	ldr	r3, [pc, #36]	; (8005920 <HAL_RCC_ClockConfig+0x1d0>)
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	4618      	mov	r0, r3
 8005900:	f7fd fa8c 	bl	8002e1c <HAL_InitTick>

  return HAL_OK;
 8005904:	2300      	movs	r3, #0
}
 8005906:	4618      	mov	r0, r3
 8005908:	3710      	adds	r7, #16
 800590a:	46bd      	mov	sp, r7
 800590c:	bd80      	pop	{r7, pc}
 800590e:	bf00      	nop
 8005910:	40022000 	.word	0x40022000
 8005914:	40021000 	.word	0x40021000
 8005918:	08007aac 	.word	0x08007aac
 800591c:	2000003c 	.word	0x2000003c
 8005920:	20000040 	.word	0x20000040

08005924 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005924:	b480      	push	{r7}
 8005926:	b087      	sub	sp, #28
 8005928:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800592a:	2300      	movs	r3, #0
 800592c:	60fb      	str	r3, [r7, #12]
 800592e:	2300      	movs	r3, #0
 8005930:	60bb      	str	r3, [r7, #8]
 8005932:	2300      	movs	r3, #0
 8005934:	617b      	str	r3, [r7, #20]
 8005936:	2300      	movs	r3, #0
 8005938:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800593a:	2300      	movs	r3, #0
 800593c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800593e:	4b1e      	ldr	r3, [pc, #120]	; (80059b8 <HAL_RCC_GetSysClockFreq+0x94>)
 8005940:	685b      	ldr	r3, [r3, #4]
 8005942:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	f003 030c 	and.w	r3, r3, #12
 800594a:	2b04      	cmp	r3, #4
 800594c:	d002      	beq.n	8005954 <HAL_RCC_GetSysClockFreq+0x30>
 800594e:	2b08      	cmp	r3, #8
 8005950:	d003      	beq.n	800595a <HAL_RCC_GetSysClockFreq+0x36>
 8005952:	e027      	b.n	80059a4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005954:	4b19      	ldr	r3, [pc, #100]	; (80059bc <HAL_RCC_GetSysClockFreq+0x98>)
 8005956:	613b      	str	r3, [r7, #16]
      break;
 8005958:	e027      	b.n	80059aa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	0c9b      	lsrs	r3, r3, #18
 800595e:	f003 030f 	and.w	r3, r3, #15
 8005962:	4a17      	ldr	r2, [pc, #92]	; (80059c0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005964:	5cd3      	ldrb	r3, [r2, r3]
 8005966:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800596e:	2b00      	cmp	r3, #0
 8005970:	d010      	beq.n	8005994 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005972:	4b11      	ldr	r3, [pc, #68]	; (80059b8 <HAL_RCC_GetSysClockFreq+0x94>)
 8005974:	685b      	ldr	r3, [r3, #4]
 8005976:	0c5b      	lsrs	r3, r3, #17
 8005978:	f003 0301 	and.w	r3, r3, #1
 800597c:	4a11      	ldr	r2, [pc, #68]	; (80059c4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800597e:	5cd3      	ldrb	r3, [r2, r3]
 8005980:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	4a0d      	ldr	r2, [pc, #52]	; (80059bc <HAL_RCC_GetSysClockFreq+0x98>)
 8005986:	fb03 f202 	mul.w	r2, r3, r2
 800598a:	68bb      	ldr	r3, [r7, #8]
 800598c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005990:	617b      	str	r3, [r7, #20]
 8005992:	e004      	b.n	800599e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	4a0c      	ldr	r2, [pc, #48]	; (80059c8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005998:	fb02 f303 	mul.w	r3, r2, r3
 800599c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800599e:	697b      	ldr	r3, [r7, #20]
 80059a0:	613b      	str	r3, [r7, #16]
      break;
 80059a2:	e002      	b.n	80059aa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80059a4:	4b05      	ldr	r3, [pc, #20]	; (80059bc <HAL_RCC_GetSysClockFreq+0x98>)
 80059a6:	613b      	str	r3, [r7, #16]
      break;
 80059a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80059aa:	693b      	ldr	r3, [r7, #16]
}
 80059ac:	4618      	mov	r0, r3
 80059ae:	371c      	adds	r7, #28
 80059b0:	46bd      	mov	sp, r7
 80059b2:	bc80      	pop	{r7}
 80059b4:	4770      	bx	lr
 80059b6:	bf00      	nop
 80059b8:	40021000 	.word	0x40021000
 80059bc:	007a1200 	.word	0x007a1200
 80059c0:	08007ac4 	.word	0x08007ac4
 80059c4:	08007ad4 	.word	0x08007ad4
 80059c8:	003d0900 	.word	0x003d0900

080059cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80059cc:	b480      	push	{r7}
 80059ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80059d0:	4b02      	ldr	r3, [pc, #8]	; (80059dc <HAL_RCC_GetHCLKFreq+0x10>)
 80059d2:	681b      	ldr	r3, [r3, #0]
}
 80059d4:	4618      	mov	r0, r3
 80059d6:	46bd      	mov	sp, r7
 80059d8:	bc80      	pop	{r7}
 80059da:	4770      	bx	lr
 80059dc:	2000003c 	.word	0x2000003c

080059e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80059e4:	f7ff fff2 	bl	80059cc <HAL_RCC_GetHCLKFreq>
 80059e8:	4602      	mov	r2, r0
 80059ea:	4b05      	ldr	r3, [pc, #20]	; (8005a00 <HAL_RCC_GetPCLK1Freq+0x20>)
 80059ec:	685b      	ldr	r3, [r3, #4]
 80059ee:	0a1b      	lsrs	r3, r3, #8
 80059f0:	f003 0307 	and.w	r3, r3, #7
 80059f4:	4903      	ldr	r1, [pc, #12]	; (8005a04 <HAL_RCC_GetPCLK1Freq+0x24>)
 80059f6:	5ccb      	ldrb	r3, [r1, r3]
 80059f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80059fc:	4618      	mov	r0, r3
 80059fe:	bd80      	pop	{r7, pc}
 8005a00:	40021000 	.word	0x40021000
 8005a04:	08007abc 	.word	0x08007abc

08005a08 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005a08:	b480      	push	{r7}
 8005a0a:	b085      	sub	sp, #20
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005a10:	4b0a      	ldr	r3, [pc, #40]	; (8005a3c <RCC_Delay+0x34>)
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	4a0a      	ldr	r2, [pc, #40]	; (8005a40 <RCC_Delay+0x38>)
 8005a16:	fba2 2303 	umull	r2, r3, r2, r3
 8005a1a:	0a5b      	lsrs	r3, r3, #9
 8005a1c:	687a      	ldr	r2, [r7, #4]
 8005a1e:	fb02 f303 	mul.w	r3, r2, r3
 8005a22:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005a24:	bf00      	nop
  }
  while (Delay --);
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	1e5a      	subs	r2, r3, #1
 8005a2a:	60fa      	str	r2, [r7, #12]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d1f9      	bne.n	8005a24 <RCC_Delay+0x1c>
}
 8005a30:	bf00      	nop
 8005a32:	bf00      	nop
 8005a34:	3714      	adds	r7, #20
 8005a36:	46bd      	mov	sp, r7
 8005a38:	bc80      	pop	{r7}
 8005a3a:	4770      	bx	lr
 8005a3c:	2000003c 	.word	0x2000003c
 8005a40:	10624dd3 	.word	0x10624dd3

08005a44 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b082      	sub	sp, #8
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d101      	bne.n	8005a56 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005a52:	2301      	movs	r3, #1
 8005a54:	e041      	b.n	8005ada <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a5c:	b2db      	uxtb	r3, r3
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d106      	bne.n	8005a70 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2200      	movs	r2, #0
 8005a66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005a6a:	6878      	ldr	r0, [r7, #4]
 8005a6c:	f7fd f8d0 	bl	8002c10 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2202      	movs	r2, #2
 8005a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681a      	ldr	r2, [r3, #0]
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	3304      	adds	r3, #4
 8005a80:	4619      	mov	r1, r3
 8005a82:	4610      	mov	r0, r2
 8005a84:	f000 fabe 	bl	8006004 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2201      	movs	r2, #1
 8005a8c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2201      	movs	r2, #1
 8005a94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2201      	movs	r2, #1
 8005a9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2201      	movs	r2, #1
 8005aa4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2201      	movs	r2, #1
 8005aac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2201      	movs	r2, #1
 8005ab4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2201      	movs	r2, #1
 8005abc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2201      	movs	r2, #1
 8005ac4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2201      	movs	r2, #1
 8005acc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2201      	movs	r2, #1
 8005ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005ad8:	2300      	movs	r3, #0
}
 8005ada:	4618      	mov	r0, r3
 8005adc:	3708      	adds	r7, #8
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	bd80      	pop	{r7, pc}
	...

08005ae4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	b085      	sub	sp, #20
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005af2:	b2db      	uxtb	r3, r3
 8005af4:	2b01      	cmp	r3, #1
 8005af6:	d001      	beq.n	8005afc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005af8:	2301      	movs	r3, #1
 8005afa:	e032      	b.n	8005b62 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2202      	movs	r2, #2
 8005b00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	4a18      	ldr	r2, [pc, #96]	; (8005b6c <HAL_TIM_Base_Start+0x88>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d00e      	beq.n	8005b2c <HAL_TIM_Base_Start+0x48>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b16:	d009      	beq.n	8005b2c <HAL_TIM_Base_Start+0x48>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	4a14      	ldr	r2, [pc, #80]	; (8005b70 <HAL_TIM_Base_Start+0x8c>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d004      	beq.n	8005b2c <HAL_TIM_Base_Start+0x48>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	4a13      	ldr	r2, [pc, #76]	; (8005b74 <HAL_TIM_Base_Start+0x90>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d111      	bne.n	8005b50 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	689b      	ldr	r3, [r3, #8]
 8005b32:	f003 0307 	and.w	r3, r3, #7
 8005b36:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	2b06      	cmp	r3, #6
 8005b3c:	d010      	beq.n	8005b60 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	681a      	ldr	r2, [r3, #0]
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f042 0201 	orr.w	r2, r2, #1
 8005b4c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b4e:	e007      	b.n	8005b60 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	681a      	ldr	r2, [r3, #0]
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f042 0201 	orr.w	r2, r2, #1
 8005b5e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005b60:	2300      	movs	r3, #0
}
 8005b62:	4618      	mov	r0, r3
 8005b64:	3714      	adds	r7, #20
 8005b66:	46bd      	mov	sp, r7
 8005b68:	bc80      	pop	{r7}
 8005b6a:	4770      	bx	lr
 8005b6c:	40012c00 	.word	0x40012c00
 8005b70:	40000400 	.word	0x40000400
 8005b74:	40000800 	.word	0x40000800

08005b78 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005b78:	b480      	push	{r7}
 8005b7a:	b085      	sub	sp, #20
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b86:	b2db      	uxtb	r3, r3
 8005b88:	2b01      	cmp	r3, #1
 8005b8a:	d001      	beq.n	8005b90 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005b8c:	2301      	movs	r3, #1
 8005b8e:	e03a      	b.n	8005c06 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2202      	movs	r2, #2
 8005b94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	68da      	ldr	r2, [r3, #12]
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f042 0201 	orr.w	r2, r2, #1
 8005ba6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	4a18      	ldr	r2, [pc, #96]	; (8005c10 <HAL_TIM_Base_Start_IT+0x98>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d00e      	beq.n	8005bd0 <HAL_TIM_Base_Start_IT+0x58>
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bba:	d009      	beq.n	8005bd0 <HAL_TIM_Base_Start_IT+0x58>
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	4a14      	ldr	r2, [pc, #80]	; (8005c14 <HAL_TIM_Base_Start_IT+0x9c>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d004      	beq.n	8005bd0 <HAL_TIM_Base_Start_IT+0x58>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	4a13      	ldr	r2, [pc, #76]	; (8005c18 <HAL_TIM_Base_Start_IT+0xa0>)
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	d111      	bne.n	8005bf4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	689b      	ldr	r3, [r3, #8]
 8005bd6:	f003 0307 	and.w	r3, r3, #7
 8005bda:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	2b06      	cmp	r3, #6
 8005be0:	d010      	beq.n	8005c04 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	681a      	ldr	r2, [r3, #0]
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f042 0201 	orr.w	r2, r2, #1
 8005bf0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bf2:	e007      	b.n	8005c04 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	681a      	ldr	r2, [r3, #0]
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f042 0201 	orr.w	r2, r2, #1
 8005c02:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005c04:	2300      	movs	r3, #0
}
 8005c06:	4618      	mov	r0, r3
 8005c08:	3714      	adds	r7, #20
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	bc80      	pop	{r7}
 8005c0e:	4770      	bx	lr
 8005c10:	40012c00 	.word	0x40012c00
 8005c14:	40000400 	.word	0x40000400
 8005c18:	40000800 	.word	0x40000800

08005c1c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b082      	sub	sp, #8
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	691b      	ldr	r3, [r3, #16]
 8005c2a:	f003 0302 	and.w	r3, r3, #2
 8005c2e:	2b02      	cmp	r3, #2
 8005c30:	d122      	bne.n	8005c78 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	68db      	ldr	r3, [r3, #12]
 8005c38:	f003 0302 	and.w	r3, r3, #2
 8005c3c:	2b02      	cmp	r3, #2
 8005c3e:	d11b      	bne.n	8005c78 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f06f 0202 	mvn.w	r2, #2
 8005c48:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2201      	movs	r2, #1
 8005c4e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	699b      	ldr	r3, [r3, #24]
 8005c56:	f003 0303 	and.w	r3, r3, #3
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d003      	beq.n	8005c66 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005c5e:	6878      	ldr	r0, [r7, #4]
 8005c60:	f000 f9b4 	bl	8005fcc <HAL_TIM_IC_CaptureCallback>
 8005c64:	e005      	b.n	8005c72 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c66:	6878      	ldr	r0, [r7, #4]
 8005c68:	f000 f9a7 	bl	8005fba <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c6c:	6878      	ldr	r0, [r7, #4]
 8005c6e:	f000 f9b6 	bl	8005fde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2200      	movs	r2, #0
 8005c76:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	691b      	ldr	r3, [r3, #16]
 8005c7e:	f003 0304 	and.w	r3, r3, #4
 8005c82:	2b04      	cmp	r3, #4
 8005c84:	d122      	bne.n	8005ccc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	68db      	ldr	r3, [r3, #12]
 8005c8c:	f003 0304 	and.w	r3, r3, #4
 8005c90:	2b04      	cmp	r3, #4
 8005c92:	d11b      	bne.n	8005ccc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f06f 0204 	mvn.w	r2, #4
 8005c9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2202      	movs	r2, #2
 8005ca2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	699b      	ldr	r3, [r3, #24]
 8005caa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d003      	beq.n	8005cba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005cb2:	6878      	ldr	r0, [r7, #4]
 8005cb4:	f000 f98a 	bl	8005fcc <HAL_TIM_IC_CaptureCallback>
 8005cb8:	e005      	b.n	8005cc6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cba:	6878      	ldr	r0, [r7, #4]
 8005cbc:	f000 f97d 	bl	8005fba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005cc0:	6878      	ldr	r0, [r7, #4]
 8005cc2:	f000 f98c 	bl	8005fde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2200      	movs	r2, #0
 8005cca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	691b      	ldr	r3, [r3, #16]
 8005cd2:	f003 0308 	and.w	r3, r3, #8
 8005cd6:	2b08      	cmp	r3, #8
 8005cd8:	d122      	bne.n	8005d20 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	68db      	ldr	r3, [r3, #12]
 8005ce0:	f003 0308 	and.w	r3, r3, #8
 8005ce4:	2b08      	cmp	r3, #8
 8005ce6:	d11b      	bne.n	8005d20 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f06f 0208 	mvn.w	r2, #8
 8005cf0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2204      	movs	r2, #4
 8005cf6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	69db      	ldr	r3, [r3, #28]
 8005cfe:	f003 0303 	and.w	r3, r3, #3
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d003      	beq.n	8005d0e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d06:	6878      	ldr	r0, [r7, #4]
 8005d08:	f000 f960 	bl	8005fcc <HAL_TIM_IC_CaptureCallback>
 8005d0c:	e005      	b.n	8005d1a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d0e:	6878      	ldr	r0, [r7, #4]
 8005d10:	f000 f953 	bl	8005fba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d14:	6878      	ldr	r0, [r7, #4]
 8005d16:	f000 f962 	bl	8005fde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	691b      	ldr	r3, [r3, #16]
 8005d26:	f003 0310 	and.w	r3, r3, #16
 8005d2a:	2b10      	cmp	r3, #16
 8005d2c:	d122      	bne.n	8005d74 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	68db      	ldr	r3, [r3, #12]
 8005d34:	f003 0310 	and.w	r3, r3, #16
 8005d38:	2b10      	cmp	r3, #16
 8005d3a:	d11b      	bne.n	8005d74 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f06f 0210 	mvn.w	r2, #16
 8005d44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2208      	movs	r2, #8
 8005d4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	69db      	ldr	r3, [r3, #28]
 8005d52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d003      	beq.n	8005d62 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d5a:	6878      	ldr	r0, [r7, #4]
 8005d5c:	f000 f936 	bl	8005fcc <HAL_TIM_IC_CaptureCallback>
 8005d60:	e005      	b.n	8005d6e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d62:	6878      	ldr	r0, [r7, #4]
 8005d64:	f000 f929 	bl	8005fba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d68:	6878      	ldr	r0, [r7, #4]
 8005d6a:	f000 f938 	bl	8005fde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2200      	movs	r2, #0
 8005d72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	691b      	ldr	r3, [r3, #16]
 8005d7a:	f003 0301 	and.w	r3, r3, #1
 8005d7e:	2b01      	cmp	r3, #1
 8005d80:	d10e      	bne.n	8005da0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	68db      	ldr	r3, [r3, #12]
 8005d88:	f003 0301 	and.w	r3, r3, #1
 8005d8c:	2b01      	cmp	r3, #1
 8005d8e:	d107      	bne.n	8005da0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f06f 0201 	mvn.w	r2, #1
 8005d98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005d9a:	6878      	ldr	r0, [r7, #4]
 8005d9c:	f7fc fc78 	bl	8002690 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	691b      	ldr	r3, [r3, #16]
 8005da6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005daa:	2b80      	cmp	r3, #128	; 0x80
 8005dac:	d10e      	bne.n	8005dcc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	68db      	ldr	r3, [r3, #12]
 8005db4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005db8:	2b80      	cmp	r3, #128	; 0x80
 8005dba:	d107      	bne.n	8005dcc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005dc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005dc6:	6878      	ldr	r0, [r7, #4]
 8005dc8:	f000 fa7b 	bl	80062c2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	691b      	ldr	r3, [r3, #16]
 8005dd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dd6:	2b40      	cmp	r3, #64	; 0x40
 8005dd8:	d10e      	bne.n	8005df8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	68db      	ldr	r3, [r3, #12]
 8005de0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005de4:	2b40      	cmp	r3, #64	; 0x40
 8005de6:	d107      	bne.n	8005df8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005df0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005df2:	6878      	ldr	r0, [r7, #4]
 8005df4:	f000 f8fc 	bl	8005ff0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	691b      	ldr	r3, [r3, #16]
 8005dfe:	f003 0320 	and.w	r3, r3, #32
 8005e02:	2b20      	cmp	r3, #32
 8005e04:	d10e      	bne.n	8005e24 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	68db      	ldr	r3, [r3, #12]
 8005e0c:	f003 0320 	and.w	r3, r3, #32
 8005e10:	2b20      	cmp	r3, #32
 8005e12:	d107      	bne.n	8005e24 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f06f 0220 	mvn.w	r2, #32
 8005e1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005e1e:	6878      	ldr	r0, [r7, #4]
 8005e20:	f000 fa46 	bl	80062b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005e24:	bf00      	nop
 8005e26:	3708      	adds	r7, #8
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	bd80      	pop	{r7, pc}

08005e2c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b084      	sub	sp, #16
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
 8005e34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005e36:	2300      	movs	r3, #0
 8005e38:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e40:	2b01      	cmp	r3, #1
 8005e42:	d101      	bne.n	8005e48 <HAL_TIM_ConfigClockSource+0x1c>
 8005e44:	2302      	movs	r3, #2
 8005e46:	e0b4      	b.n	8005fb2 <HAL_TIM_ConfigClockSource+0x186>
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2201      	movs	r2, #1
 8005e4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2202      	movs	r2, #2
 8005e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	689b      	ldr	r3, [r3, #8]
 8005e5e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005e60:	68bb      	ldr	r3, [r7, #8]
 8005e62:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005e66:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e68:	68bb      	ldr	r3, [r7, #8]
 8005e6a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005e6e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	68ba      	ldr	r2, [r7, #8]
 8005e76:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e80:	d03e      	beq.n	8005f00 <HAL_TIM_ConfigClockSource+0xd4>
 8005e82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e86:	f200 8087 	bhi.w	8005f98 <HAL_TIM_ConfigClockSource+0x16c>
 8005e8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e8e:	f000 8086 	beq.w	8005f9e <HAL_TIM_ConfigClockSource+0x172>
 8005e92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e96:	d87f      	bhi.n	8005f98 <HAL_TIM_ConfigClockSource+0x16c>
 8005e98:	2b70      	cmp	r3, #112	; 0x70
 8005e9a:	d01a      	beq.n	8005ed2 <HAL_TIM_ConfigClockSource+0xa6>
 8005e9c:	2b70      	cmp	r3, #112	; 0x70
 8005e9e:	d87b      	bhi.n	8005f98 <HAL_TIM_ConfigClockSource+0x16c>
 8005ea0:	2b60      	cmp	r3, #96	; 0x60
 8005ea2:	d050      	beq.n	8005f46 <HAL_TIM_ConfigClockSource+0x11a>
 8005ea4:	2b60      	cmp	r3, #96	; 0x60
 8005ea6:	d877      	bhi.n	8005f98 <HAL_TIM_ConfigClockSource+0x16c>
 8005ea8:	2b50      	cmp	r3, #80	; 0x50
 8005eaa:	d03c      	beq.n	8005f26 <HAL_TIM_ConfigClockSource+0xfa>
 8005eac:	2b50      	cmp	r3, #80	; 0x50
 8005eae:	d873      	bhi.n	8005f98 <HAL_TIM_ConfigClockSource+0x16c>
 8005eb0:	2b40      	cmp	r3, #64	; 0x40
 8005eb2:	d058      	beq.n	8005f66 <HAL_TIM_ConfigClockSource+0x13a>
 8005eb4:	2b40      	cmp	r3, #64	; 0x40
 8005eb6:	d86f      	bhi.n	8005f98 <HAL_TIM_ConfigClockSource+0x16c>
 8005eb8:	2b30      	cmp	r3, #48	; 0x30
 8005eba:	d064      	beq.n	8005f86 <HAL_TIM_ConfigClockSource+0x15a>
 8005ebc:	2b30      	cmp	r3, #48	; 0x30
 8005ebe:	d86b      	bhi.n	8005f98 <HAL_TIM_ConfigClockSource+0x16c>
 8005ec0:	2b20      	cmp	r3, #32
 8005ec2:	d060      	beq.n	8005f86 <HAL_TIM_ConfigClockSource+0x15a>
 8005ec4:	2b20      	cmp	r3, #32
 8005ec6:	d867      	bhi.n	8005f98 <HAL_TIM_ConfigClockSource+0x16c>
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d05c      	beq.n	8005f86 <HAL_TIM_ConfigClockSource+0x15a>
 8005ecc:	2b10      	cmp	r3, #16
 8005ece:	d05a      	beq.n	8005f86 <HAL_TIM_ConfigClockSource+0x15a>
 8005ed0:	e062      	b.n	8005f98 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6818      	ldr	r0, [r3, #0]
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	6899      	ldr	r1, [r3, #8]
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	685a      	ldr	r2, [r3, #4]
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	68db      	ldr	r3, [r3, #12]
 8005ee2:	f000 f968 	bl	80061b6 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	689b      	ldr	r3, [r3, #8]
 8005eec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005eee:	68bb      	ldr	r3, [r7, #8]
 8005ef0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005ef4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	68ba      	ldr	r2, [r7, #8]
 8005efc:	609a      	str	r2, [r3, #8]
      break;
 8005efe:	e04f      	b.n	8005fa0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	6818      	ldr	r0, [r3, #0]
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	6899      	ldr	r1, [r3, #8]
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	685a      	ldr	r2, [r3, #4]
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	68db      	ldr	r3, [r3, #12]
 8005f10:	f000 f951 	bl	80061b6 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	689a      	ldr	r2, [r3, #8]
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005f22:	609a      	str	r2, [r3, #8]
      break;
 8005f24:	e03c      	b.n	8005fa0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6818      	ldr	r0, [r3, #0]
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	6859      	ldr	r1, [r3, #4]
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	68db      	ldr	r3, [r3, #12]
 8005f32:	461a      	mov	r2, r3
 8005f34:	f000 f8c8 	bl	80060c8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	2150      	movs	r1, #80	; 0x50
 8005f3e:	4618      	mov	r0, r3
 8005f40:	f000 f91f 	bl	8006182 <TIM_ITRx_SetConfig>
      break;
 8005f44:	e02c      	b.n	8005fa0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6818      	ldr	r0, [r3, #0]
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	6859      	ldr	r1, [r3, #4]
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	68db      	ldr	r3, [r3, #12]
 8005f52:	461a      	mov	r2, r3
 8005f54:	f000 f8e6 	bl	8006124 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	2160      	movs	r1, #96	; 0x60
 8005f5e:	4618      	mov	r0, r3
 8005f60:	f000 f90f 	bl	8006182 <TIM_ITRx_SetConfig>
      break;
 8005f64:	e01c      	b.n	8005fa0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6818      	ldr	r0, [r3, #0]
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	6859      	ldr	r1, [r3, #4]
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	68db      	ldr	r3, [r3, #12]
 8005f72:	461a      	mov	r2, r3
 8005f74:	f000 f8a8 	bl	80060c8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	2140      	movs	r1, #64	; 0x40
 8005f7e:	4618      	mov	r0, r3
 8005f80:	f000 f8ff 	bl	8006182 <TIM_ITRx_SetConfig>
      break;
 8005f84:	e00c      	b.n	8005fa0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681a      	ldr	r2, [r3, #0]
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	4619      	mov	r1, r3
 8005f90:	4610      	mov	r0, r2
 8005f92:	f000 f8f6 	bl	8006182 <TIM_ITRx_SetConfig>
      break;
 8005f96:	e003      	b.n	8005fa0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005f98:	2301      	movs	r3, #1
 8005f9a:	73fb      	strb	r3, [r7, #15]
      break;
 8005f9c:	e000      	b.n	8005fa0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005f9e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2201      	movs	r2, #1
 8005fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2200      	movs	r2, #0
 8005fac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005fb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	3710      	adds	r7, #16
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	bd80      	pop	{r7, pc}

08005fba <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005fba:	b480      	push	{r7}
 8005fbc:	b083      	sub	sp, #12
 8005fbe:	af00      	add	r7, sp, #0
 8005fc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005fc2:	bf00      	nop
 8005fc4:	370c      	adds	r7, #12
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	bc80      	pop	{r7}
 8005fca:	4770      	bx	lr

08005fcc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005fcc:	b480      	push	{r7}
 8005fce:	b083      	sub	sp, #12
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005fd4:	bf00      	nop
 8005fd6:	370c      	adds	r7, #12
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	bc80      	pop	{r7}
 8005fdc:	4770      	bx	lr

08005fde <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005fde:	b480      	push	{r7}
 8005fe0:	b083      	sub	sp, #12
 8005fe2:	af00      	add	r7, sp, #0
 8005fe4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005fe6:	bf00      	nop
 8005fe8:	370c      	adds	r7, #12
 8005fea:	46bd      	mov	sp, r7
 8005fec:	bc80      	pop	{r7}
 8005fee:	4770      	bx	lr

08005ff0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005ff0:	b480      	push	{r7}
 8005ff2:	b083      	sub	sp, #12
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005ff8:	bf00      	nop
 8005ffa:	370c      	adds	r7, #12
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	bc80      	pop	{r7}
 8006000:	4770      	bx	lr
	...

08006004 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006004:	b480      	push	{r7}
 8006006:	b085      	sub	sp, #20
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
 800600c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	4a29      	ldr	r2, [pc, #164]	; (80060bc <TIM_Base_SetConfig+0xb8>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d00b      	beq.n	8006034 <TIM_Base_SetConfig+0x30>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006022:	d007      	beq.n	8006034 <TIM_Base_SetConfig+0x30>
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	4a26      	ldr	r2, [pc, #152]	; (80060c0 <TIM_Base_SetConfig+0xbc>)
 8006028:	4293      	cmp	r3, r2
 800602a:	d003      	beq.n	8006034 <TIM_Base_SetConfig+0x30>
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	4a25      	ldr	r2, [pc, #148]	; (80060c4 <TIM_Base_SetConfig+0xc0>)
 8006030:	4293      	cmp	r3, r2
 8006032:	d108      	bne.n	8006046 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800603a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	685b      	ldr	r3, [r3, #4]
 8006040:	68fa      	ldr	r2, [r7, #12]
 8006042:	4313      	orrs	r3, r2
 8006044:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	4a1c      	ldr	r2, [pc, #112]	; (80060bc <TIM_Base_SetConfig+0xb8>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d00b      	beq.n	8006066 <TIM_Base_SetConfig+0x62>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006054:	d007      	beq.n	8006066 <TIM_Base_SetConfig+0x62>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	4a19      	ldr	r2, [pc, #100]	; (80060c0 <TIM_Base_SetConfig+0xbc>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d003      	beq.n	8006066 <TIM_Base_SetConfig+0x62>
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	4a18      	ldr	r2, [pc, #96]	; (80060c4 <TIM_Base_SetConfig+0xc0>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d108      	bne.n	8006078 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800606c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	68db      	ldr	r3, [r3, #12]
 8006072:	68fa      	ldr	r2, [r7, #12]
 8006074:	4313      	orrs	r3, r2
 8006076:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	695b      	ldr	r3, [r3, #20]
 8006082:	4313      	orrs	r3, r2
 8006084:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	68fa      	ldr	r2, [r7, #12]
 800608a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	689a      	ldr	r2, [r3, #8]
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	681a      	ldr	r2, [r3, #0]
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	4a07      	ldr	r2, [pc, #28]	; (80060bc <TIM_Base_SetConfig+0xb8>)
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d103      	bne.n	80060ac <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	691a      	ldr	r2, [r3, #16]
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2201      	movs	r2, #1
 80060b0:	615a      	str	r2, [r3, #20]
}
 80060b2:	bf00      	nop
 80060b4:	3714      	adds	r7, #20
 80060b6:	46bd      	mov	sp, r7
 80060b8:	bc80      	pop	{r7}
 80060ba:	4770      	bx	lr
 80060bc:	40012c00 	.word	0x40012c00
 80060c0:	40000400 	.word	0x40000400
 80060c4:	40000800 	.word	0x40000800

080060c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80060c8:	b480      	push	{r7}
 80060ca:	b087      	sub	sp, #28
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	60f8      	str	r0, [r7, #12]
 80060d0:	60b9      	str	r1, [r7, #8]
 80060d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	6a1b      	ldr	r3, [r3, #32]
 80060d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	6a1b      	ldr	r3, [r3, #32]
 80060de:	f023 0201 	bic.w	r2, r3, #1
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	699b      	ldr	r3, [r3, #24]
 80060ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80060ec:	693b      	ldr	r3, [r7, #16]
 80060ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80060f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	011b      	lsls	r3, r3, #4
 80060f8:	693a      	ldr	r2, [r7, #16]
 80060fa:	4313      	orrs	r3, r2
 80060fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80060fe:	697b      	ldr	r3, [r7, #20]
 8006100:	f023 030a 	bic.w	r3, r3, #10
 8006104:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006106:	697a      	ldr	r2, [r7, #20]
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	4313      	orrs	r3, r2
 800610c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	693a      	ldr	r2, [r7, #16]
 8006112:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	697a      	ldr	r2, [r7, #20]
 8006118:	621a      	str	r2, [r3, #32]
}
 800611a:	bf00      	nop
 800611c:	371c      	adds	r7, #28
 800611e:	46bd      	mov	sp, r7
 8006120:	bc80      	pop	{r7}
 8006122:	4770      	bx	lr

08006124 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006124:	b480      	push	{r7}
 8006126:	b087      	sub	sp, #28
 8006128:	af00      	add	r7, sp, #0
 800612a:	60f8      	str	r0, [r7, #12]
 800612c:	60b9      	str	r1, [r7, #8]
 800612e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	6a1b      	ldr	r3, [r3, #32]
 8006134:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	6a1b      	ldr	r3, [r3, #32]
 800613a:	f023 0210 	bic.w	r2, r3, #16
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	699b      	ldr	r3, [r3, #24]
 8006146:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006148:	693b      	ldr	r3, [r7, #16]
 800614a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800614e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	031b      	lsls	r3, r3, #12
 8006154:	693a      	ldr	r2, [r7, #16]
 8006156:	4313      	orrs	r3, r2
 8006158:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800615a:	697b      	ldr	r3, [r7, #20]
 800615c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006160:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006162:	68bb      	ldr	r3, [r7, #8]
 8006164:	011b      	lsls	r3, r3, #4
 8006166:	697a      	ldr	r2, [r7, #20]
 8006168:	4313      	orrs	r3, r2
 800616a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	693a      	ldr	r2, [r7, #16]
 8006170:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	697a      	ldr	r2, [r7, #20]
 8006176:	621a      	str	r2, [r3, #32]
}
 8006178:	bf00      	nop
 800617a:	371c      	adds	r7, #28
 800617c:	46bd      	mov	sp, r7
 800617e:	bc80      	pop	{r7}
 8006180:	4770      	bx	lr

08006182 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006182:	b480      	push	{r7}
 8006184:	b085      	sub	sp, #20
 8006186:	af00      	add	r7, sp, #0
 8006188:	6078      	str	r0, [r7, #4]
 800618a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	689b      	ldr	r3, [r3, #8]
 8006190:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006198:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800619a:	683a      	ldr	r2, [r7, #0]
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	4313      	orrs	r3, r2
 80061a0:	f043 0307 	orr.w	r3, r3, #7
 80061a4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	68fa      	ldr	r2, [r7, #12]
 80061aa:	609a      	str	r2, [r3, #8]
}
 80061ac:	bf00      	nop
 80061ae:	3714      	adds	r7, #20
 80061b0:	46bd      	mov	sp, r7
 80061b2:	bc80      	pop	{r7}
 80061b4:	4770      	bx	lr

080061b6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80061b6:	b480      	push	{r7}
 80061b8:	b087      	sub	sp, #28
 80061ba:	af00      	add	r7, sp, #0
 80061bc:	60f8      	str	r0, [r7, #12]
 80061be:	60b9      	str	r1, [r7, #8]
 80061c0:	607a      	str	r2, [r7, #4]
 80061c2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	689b      	ldr	r3, [r3, #8]
 80061c8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80061ca:	697b      	ldr	r3, [r7, #20]
 80061cc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80061d0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	021a      	lsls	r2, r3, #8
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	431a      	orrs	r2, r3
 80061da:	68bb      	ldr	r3, [r7, #8]
 80061dc:	4313      	orrs	r3, r2
 80061de:	697a      	ldr	r2, [r7, #20]
 80061e0:	4313      	orrs	r3, r2
 80061e2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	697a      	ldr	r2, [r7, #20]
 80061e8:	609a      	str	r2, [r3, #8]
}
 80061ea:	bf00      	nop
 80061ec:	371c      	adds	r7, #28
 80061ee:	46bd      	mov	sp, r7
 80061f0:	bc80      	pop	{r7}
 80061f2:	4770      	bx	lr

080061f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80061f4:	b480      	push	{r7}
 80061f6:	b085      	sub	sp, #20
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
 80061fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006204:	2b01      	cmp	r3, #1
 8006206:	d101      	bne.n	800620c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006208:	2302      	movs	r3, #2
 800620a:	e046      	b.n	800629a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2201      	movs	r2, #1
 8006210:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2202      	movs	r2, #2
 8006218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	685b      	ldr	r3, [r3, #4]
 8006222:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	689b      	ldr	r3, [r3, #8]
 800622a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006232:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	68fa      	ldr	r2, [r7, #12]
 800623a:	4313      	orrs	r3, r2
 800623c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	68fa      	ldr	r2, [r7, #12]
 8006244:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	4a16      	ldr	r2, [pc, #88]	; (80062a4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800624c:	4293      	cmp	r3, r2
 800624e:	d00e      	beq.n	800626e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006258:	d009      	beq.n	800626e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	4a12      	ldr	r2, [pc, #72]	; (80062a8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006260:	4293      	cmp	r3, r2
 8006262:	d004      	beq.n	800626e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	4a10      	ldr	r2, [pc, #64]	; (80062ac <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800626a:	4293      	cmp	r3, r2
 800626c:	d10c      	bne.n	8006288 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800626e:	68bb      	ldr	r3, [r7, #8]
 8006270:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006274:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	685b      	ldr	r3, [r3, #4]
 800627a:	68ba      	ldr	r2, [r7, #8]
 800627c:	4313      	orrs	r3, r2
 800627e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	68ba      	ldr	r2, [r7, #8]
 8006286:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2201      	movs	r2, #1
 800628c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2200      	movs	r2, #0
 8006294:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006298:	2300      	movs	r3, #0
}
 800629a:	4618      	mov	r0, r3
 800629c:	3714      	adds	r7, #20
 800629e:	46bd      	mov	sp, r7
 80062a0:	bc80      	pop	{r7}
 80062a2:	4770      	bx	lr
 80062a4:	40012c00 	.word	0x40012c00
 80062a8:	40000400 	.word	0x40000400
 80062ac:	40000800 	.word	0x40000800

080062b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80062b0:	b480      	push	{r7}
 80062b2:	b083      	sub	sp, #12
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80062b8:	bf00      	nop
 80062ba:	370c      	adds	r7, #12
 80062bc:	46bd      	mov	sp, r7
 80062be:	bc80      	pop	{r7}
 80062c0:	4770      	bx	lr

080062c2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80062c2:	b480      	push	{r7}
 80062c4:	b083      	sub	sp, #12
 80062c6:	af00      	add	r7, sp, #0
 80062c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80062ca:	bf00      	nop
 80062cc:	370c      	adds	r7, #12
 80062ce:	46bd      	mov	sp, r7
 80062d0:	bc80      	pop	{r7}
 80062d2:	4770      	bx	lr

080062d4 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b082      	sub	sp, #8
 80062d8:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 80062da:	f000 fc4f 	bl	8006b7c <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 80062de:	f644 6320 	movw	r3, #20000	; 0x4e20
 80062e2:	2201      	movs	r2, #1
 80062e4:	2178      	movs	r1, #120	; 0x78
 80062e6:	485b      	ldr	r0, [pc, #364]	; (8006454 <SSD1306_Init+0x180>)
 80062e8:	f7fd fefe 	bl	80040e8 <HAL_I2C_IsDeviceReady>
 80062ec:	4603      	mov	r3, r0
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d001      	beq.n	80062f6 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 80062f2:	2300      	movs	r3, #0
 80062f4:	e0a9      	b.n	800644a <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 80062f6:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80062fa:	607b      	str	r3, [r7, #4]
	while(p>0)
 80062fc:	e002      	b.n	8006304 <SSD1306_Init+0x30>
		p--;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	3b01      	subs	r3, #1
 8006302:	607b      	str	r3, [r7, #4]
	while(p>0)
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d1f9      	bne.n	80062fe <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 800630a:	22ae      	movs	r2, #174	; 0xae
 800630c:	2100      	movs	r1, #0
 800630e:	2078      	movs	r0, #120	; 0x78
 8006310:	f000 fcae 	bl	8006c70 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8006314:	2220      	movs	r2, #32
 8006316:	2100      	movs	r1, #0
 8006318:	2078      	movs	r0, #120	; 0x78
 800631a:	f000 fca9 	bl	8006c70 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 800631e:	2210      	movs	r2, #16
 8006320:	2100      	movs	r1, #0
 8006322:	2078      	movs	r0, #120	; 0x78
 8006324:	f000 fca4 	bl	8006c70 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8006328:	22b0      	movs	r2, #176	; 0xb0
 800632a:	2100      	movs	r1, #0
 800632c:	2078      	movs	r0, #120	; 0x78
 800632e:	f000 fc9f 	bl	8006c70 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8006332:	22c8      	movs	r2, #200	; 0xc8
 8006334:	2100      	movs	r1, #0
 8006336:	2078      	movs	r0, #120	; 0x78
 8006338:	f000 fc9a 	bl	8006c70 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 800633c:	2200      	movs	r2, #0
 800633e:	2100      	movs	r1, #0
 8006340:	2078      	movs	r0, #120	; 0x78
 8006342:	f000 fc95 	bl	8006c70 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8006346:	2210      	movs	r2, #16
 8006348:	2100      	movs	r1, #0
 800634a:	2078      	movs	r0, #120	; 0x78
 800634c:	f000 fc90 	bl	8006c70 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8006350:	2240      	movs	r2, #64	; 0x40
 8006352:	2100      	movs	r1, #0
 8006354:	2078      	movs	r0, #120	; 0x78
 8006356:	f000 fc8b 	bl	8006c70 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 800635a:	2281      	movs	r2, #129	; 0x81
 800635c:	2100      	movs	r1, #0
 800635e:	2078      	movs	r0, #120	; 0x78
 8006360:	f000 fc86 	bl	8006c70 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8006364:	22ff      	movs	r2, #255	; 0xff
 8006366:	2100      	movs	r1, #0
 8006368:	2078      	movs	r0, #120	; 0x78
 800636a:	f000 fc81 	bl	8006c70 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 800636e:	22a1      	movs	r2, #161	; 0xa1
 8006370:	2100      	movs	r1, #0
 8006372:	2078      	movs	r0, #120	; 0x78
 8006374:	f000 fc7c 	bl	8006c70 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8006378:	22a6      	movs	r2, #166	; 0xa6
 800637a:	2100      	movs	r1, #0
 800637c:	2078      	movs	r0, #120	; 0x78
 800637e:	f000 fc77 	bl	8006c70 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8006382:	22a8      	movs	r2, #168	; 0xa8
 8006384:	2100      	movs	r1, #0
 8006386:	2078      	movs	r0, #120	; 0x78
 8006388:	f000 fc72 	bl	8006c70 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 800638c:	223f      	movs	r2, #63	; 0x3f
 800638e:	2100      	movs	r1, #0
 8006390:	2078      	movs	r0, #120	; 0x78
 8006392:	f000 fc6d 	bl	8006c70 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8006396:	22a4      	movs	r2, #164	; 0xa4
 8006398:	2100      	movs	r1, #0
 800639a:	2078      	movs	r0, #120	; 0x78
 800639c:	f000 fc68 	bl	8006c70 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 80063a0:	22d3      	movs	r2, #211	; 0xd3
 80063a2:	2100      	movs	r1, #0
 80063a4:	2078      	movs	r0, #120	; 0x78
 80063a6:	f000 fc63 	bl	8006c70 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 80063aa:	2200      	movs	r2, #0
 80063ac:	2100      	movs	r1, #0
 80063ae:	2078      	movs	r0, #120	; 0x78
 80063b0:	f000 fc5e 	bl	8006c70 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 80063b4:	22d5      	movs	r2, #213	; 0xd5
 80063b6:	2100      	movs	r1, #0
 80063b8:	2078      	movs	r0, #120	; 0x78
 80063ba:	f000 fc59 	bl	8006c70 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 80063be:	22f0      	movs	r2, #240	; 0xf0
 80063c0:	2100      	movs	r1, #0
 80063c2:	2078      	movs	r0, #120	; 0x78
 80063c4:	f000 fc54 	bl	8006c70 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 80063c8:	22d9      	movs	r2, #217	; 0xd9
 80063ca:	2100      	movs	r1, #0
 80063cc:	2078      	movs	r0, #120	; 0x78
 80063ce:	f000 fc4f 	bl	8006c70 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 80063d2:	2222      	movs	r2, #34	; 0x22
 80063d4:	2100      	movs	r1, #0
 80063d6:	2078      	movs	r0, #120	; 0x78
 80063d8:	f000 fc4a 	bl	8006c70 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 80063dc:	22da      	movs	r2, #218	; 0xda
 80063de:	2100      	movs	r1, #0
 80063e0:	2078      	movs	r0, #120	; 0x78
 80063e2:	f000 fc45 	bl	8006c70 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 80063e6:	2212      	movs	r2, #18
 80063e8:	2100      	movs	r1, #0
 80063ea:	2078      	movs	r0, #120	; 0x78
 80063ec:	f000 fc40 	bl	8006c70 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80063f0:	22db      	movs	r2, #219	; 0xdb
 80063f2:	2100      	movs	r1, #0
 80063f4:	2078      	movs	r0, #120	; 0x78
 80063f6:	f000 fc3b 	bl	8006c70 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80063fa:	2220      	movs	r2, #32
 80063fc:	2100      	movs	r1, #0
 80063fe:	2078      	movs	r0, #120	; 0x78
 8006400:	f000 fc36 	bl	8006c70 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8006404:	228d      	movs	r2, #141	; 0x8d
 8006406:	2100      	movs	r1, #0
 8006408:	2078      	movs	r0, #120	; 0x78
 800640a:	f000 fc31 	bl	8006c70 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 800640e:	2214      	movs	r2, #20
 8006410:	2100      	movs	r1, #0
 8006412:	2078      	movs	r0, #120	; 0x78
 8006414:	f000 fc2c 	bl	8006c70 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8006418:	22af      	movs	r2, #175	; 0xaf
 800641a:	2100      	movs	r1, #0
 800641c:	2078      	movs	r0, #120	; 0x78
 800641e:	f000 fc27 	bl	8006c70 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8006422:	222e      	movs	r2, #46	; 0x2e
 8006424:	2100      	movs	r1, #0
 8006426:	2078      	movs	r0, #120	; 0x78
 8006428:	f000 fc22 	bl	8006c70 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 800642c:	2000      	movs	r0, #0
 800642e:	f000 f843 	bl	80064b8 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8006432:	f000 f813 	bl	800645c <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8006436:	4b08      	ldr	r3, [pc, #32]	; (8006458 <SSD1306_Init+0x184>)
 8006438:	2200      	movs	r2, #0
 800643a:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 800643c:	4b06      	ldr	r3, [pc, #24]	; (8006458 <SSD1306_Init+0x184>)
 800643e:	2200      	movs	r2, #0
 8006440:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8006442:	4b05      	ldr	r3, [pc, #20]	; (8006458 <SSD1306_Init+0x184>)
 8006444:	2201      	movs	r2, #1
 8006446:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8006448:	2301      	movs	r3, #1
}
 800644a:	4618      	mov	r0, r3
 800644c:	3708      	adds	r7, #8
 800644e:	46bd      	mov	sp, r7
 8006450:	bd80      	pop	{r7, pc}
 8006452:	bf00      	nop
 8006454:	200000e0 	.word	0x200000e0
 8006458:	20000650 	.word	0x20000650

0800645c <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 800645c:	b580      	push	{r7, lr}
 800645e:	b082      	sub	sp, #8
 8006460:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8006462:	2300      	movs	r3, #0
 8006464:	71fb      	strb	r3, [r7, #7]
 8006466:	e01d      	b.n	80064a4 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8006468:	79fb      	ldrb	r3, [r7, #7]
 800646a:	3b50      	subs	r3, #80	; 0x50
 800646c:	b2db      	uxtb	r3, r3
 800646e:	461a      	mov	r2, r3
 8006470:	2100      	movs	r1, #0
 8006472:	2078      	movs	r0, #120	; 0x78
 8006474:	f000 fbfc 	bl	8006c70 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8006478:	2200      	movs	r2, #0
 800647a:	2100      	movs	r1, #0
 800647c:	2078      	movs	r0, #120	; 0x78
 800647e:	f000 fbf7 	bl	8006c70 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8006482:	2210      	movs	r2, #16
 8006484:	2100      	movs	r1, #0
 8006486:	2078      	movs	r0, #120	; 0x78
 8006488:	f000 fbf2 	bl	8006c70 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 800648c:	79fb      	ldrb	r3, [r7, #7]
 800648e:	01db      	lsls	r3, r3, #7
 8006490:	4a08      	ldr	r2, [pc, #32]	; (80064b4 <SSD1306_UpdateScreen+0x58>)
 8006492:	441a      	add	r2, r3
 8006494:	2380      	movs	r3, #128	; 0x80
 8006496:	2140      	movs	r1, #64	; 0x40
 8006498:	2078      	movs	r0, #120	; 0x78
 800649a:	f000 fb83 	bl	8006ba4 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 800649e:	79fb      	ldrb	r3, [r7, #7]
 80064a0:	3301      	adds	r3, #1
 80064a2:	71fb      	strb	r3, [r7, #7]
 80064a4:	79fb      	ldrb	r3, [r7, #7]
 80064a6:	2b07      	cmp	r3, #7
 80064a8:	d9de      	bls.n	8006468 <SSD1306_UpdateScreen+0xc>
	}
}
 80064aa:	bf00      	nop
 80064ac:	bf00      	nop
 80064ae:	3708      	adds	r7, #8
 80064b0:	46bd      	mov	sp, r7
 80064b2:	bd80      	pop	{r7, pc}
 80064b4:	20000250 	.word	0x20000250

080064b8 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b082      	sub	sp, #8
 80064bc:	af00      	add	r7, sp, #0
 80064be:	4603      	mov	r3, r0
 80064c0:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80064c2:	79fb      	ldrb	r3, [r7, #7]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d101      	bne.n	80064cc <SSD1306_Fill+0x14>
 80064c8:	2300      	movs	r3, #0
 80064ca:	e000      	b.n	80064ce <SSD1306_Fill+0x16>
 80064cc:	23ff      	movs	r3, #255	; 0xff
 80064ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80064d2:	4619      	mov	r1, r3
 80064d4:	4803      	ldr	r0, [pc, #12]	; (80064e4 <SSD1306_Fill+0x2c>)
 80064d6:	f000 fd77 	bl	8006fc8 <memset>
}
 80064da:	bf00      	nop
 80064dc:	3708      	adds	r7, #8
 80064de:	46bd      	mov	sp, r7
 80064e0:	bd80      	pop	{r7, pc}
 80064e2:	bf00      	nop
 80064e4:	20000250 	.word	0x20000250

080064e8 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 80064e8:	b480      	push	{r7}
 80064ea:	b083      	sub	sp, #12
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	4603      	mov	r3, r0
 80064f0:	80fb      	strh	r3, [r7, #6]
 80064f2:	460b      	mov	r3, r1
 80064f4:	80bb      	strh	r3, [r7, #4]
 80064f6:	4613      	mov	r3, r2
 80064f8:	70fb      	strb	r3, [r7, #3]
	if (
 80064fa:	88fb      	ldrh	r3, [r7, #6]
 80064fc:	2b7f      	cmp	r3, #127	; 0x7f
 80064fe:	d848      	bhi.n	8006592 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8006500:	88bb      	ldrh	r3, [r7, #4]
 8006502:	2b3f      	cmp	r3, #63	; 0x3f
 8006504:	d845      	bhi.n	8006592 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8006506:	4b25      	ldr	r3, [pc, #148]	; (800659c <SSD1306_DrawPixel+0xb4>)
 8006508:	791b      	ldrb	r3, [r3, #4]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d006      	beq.n	800651c <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 800650e:	78fb      	ldrb	r3, [r7, #3]
 8006510:	2b00      	cmp	r3, #0
 8006512:	bf0c      	ite	eq
 8006514:	2301      	moveq	r3, #1
 8006516:	2300      	movne	r3, #0
 8006518:	b2db      	uxtb	r3, r3
 800651a:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 800651c:	78fb      	ldrb	r3, [r7, #3]
 800651e:	2b01      	cmp	r3, #1
 8006520:	d11a      	bne.n	8006558 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8006522:	88fa      	ldrh	r2, [r7, #6]
 8006524:	88bb      	ldrh	r3, [r7, #4]
 8006526:	08db      	lsrs	r3, r3, #3
 8006528:	b298      	uxth	r0, r3
 800652a:	4603      	mov	r3, r0
 800652c:	01db      	lsls	r3, r3, #7
 800652e:	4413      	add	r3, r2
 8006530:	4a1b      	ldr	r2, [pc, #108]	; (80065a0 <SSD1306_DrawPixel+0xb8>)
 8006532:	5cd3      	ldrb	r3, [r2, r3]
 8006534:	b25a      	sxtb	r2, r3
 8006536:	88bb      	ldrh	r3, [r7, #4]
 8006538:	f003 0307 	and.w	r3, r3, #7
 800653c:	2101      	movs	r1, #1
 800653e:	fa01 f303 	lsl.w	r3, r1, r3
 8006542:	b25b      	sxtb	r3, r3
 8006544:	4313      	orrs	r3, r2
 8006546:	b259      	sxtb	r1, r3
 8006548:	88fa      	ldrh	r2, [r7, #6]
 800654a:	4603      	mov	r3, r0
 800654c:	01db      	lsls	r3, r3, #7
 800654e:	4413      	add	r3, r2
 8006550:	b2c9      	uxtb	r1, r1
 8006552:	4a13      	ldr	r2, [pc, #76]	; (80065a0 <SSD1306_DrawPixel+0xb8>)
 8006554:	54d1      	strb	r1, [r2, r3]
 8006556:	e01d      	b.n	8006594 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8006558:	88fa      	ldrh	r2, [r7, #6]
 800655a:	88bb      	ldrh	r3, [r7, #4]
 800655c:	08db      	lsrs	r3, r3, #3
 800655e:	b298      	uxth	r0, r3
 8006560:	4603      	mov	r3, r0
 8006562:	01db      	lsls	r3, r3, #7
 8006564:	4413      	add	r3, r2
 8006566:	4a0e      	ldr	r2, [pc, #56]	; (80065a0 <SSD1306_DrawPixel+0xb8>)
 8006568:	5cd3      	ldrb	r3, [r2, r3]
 800656a:	b25a      	sxtb	r2, r3
 800656c:	88bb      	ldrh	r3, [r7, #4]
 800656e:	f003 0307 	and.w	r3, r3, #7
 8006572:	2101      	movs	r1, #1
 8006574:	fa01 f303 	lsl.w	r3, r1, r3
 8006578:	b25b      	sxtb	r3, r3
 800657a:	43db      	mvns	r3, r3
 800657c:	b25b      	sxtb	r3, r3
 800657e:	4013      	ands	r3, r2
 8006580:	b259      	sxtb	r1, r3
 8006582:	88fa      	ldrh	r2, [r7, #6]
 8006584:	4603      	mov	r3, r0
 8006586:	01db      	lsls	r3, r3, #7
 8006588:	4413      	add	r3, r2
 800658a:	b2c9      	uxtb	r1, r1
 800658c:	4a04      	ldr	r2, [pc, #16]	; (80065a0 <SSD1306_DrawPixel+0xb8>)
 800658e:	54d1      	strb	r1, [r2, r3]
 8006590:	e000      	b.n	8006594 <SSD1306_DrawPixel+0xac>
		return;
 8006592:	bf00      	nop
	}
}
 8006594:	370c      	adds	r7, #12
 8006596:	46bd      	mov	sp, r7
 8006598:	bc80      	pop	{r7}
 800659a:	4770      	bx	lr
 800659c:	20000650 	.word	0x20000650
 80065a0:	20000250 	.word	0x20000250

080065a4 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 80065a4:	b480      	push	{r7}
 80065a6:	b083      	sub	sp, #12
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	4603      	mov	r3, r0
 80065ac:	460a      	mov	r2, r1
 80065ae:	80fb      	strh	r3, [r7, #6]
 80065b0:	4613      	mov	r3, r2
 80065b2:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 80065b4:	4a05      	ldr	r2, [pc, #20]	; (80065cc <SSD1306_GotoXY+0x28>)
 80065b6:	88fb      	ldrh	r3, [r7, #6]
 80065b8:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 80065ba:	4a04      	ldr	r2, [pc, #16]	; (80065cc <SSD1306_GotoXY+0x28>)
 80065bc:	88bb      	ldrh	r3, [r7, #4]
 80065be:	8053      	strh	r3, [r2, #2]
}
 80065c0:	bf00      	nop
 80065c2:	370c      	adds	r7, #12
 80065c4:	46bd      	mov	sp, r7
 80065c6:	bc80      	pop	{r7}
 80065c8:	4770      	bx	lr
 80065ca:	bf00      	nop
 80065cc:	20000650 	.word	0x20000650

080065d0 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b086      	sub	sp, #24
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	4603      	mov	r3, r0
 80065d8:	6039      	str	r1, [r7, #0]
 80065da:	71fb      	strb	r3, [r7, #7]
 80065dc:	4613      	mov	r3, r2
 80065de:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80065e0:	4b3a      	ldr	r3, [pc, #232]	; (80066cc <SSD1306_Putc+0xfc>)
 80065e2:	881b      	ldrh	r3, [r3, #0]
 80065e4:	461a      	mov	r2, r3
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	781b      	ldrb	r3, [r3, #0]
 80065ea:	4413      	add	r3, r2
	if (
 80065ec:	2b7f      	cmp	r3, #127	; 0x7f
 80065ee:	dc07      	bgt.n	8006600 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 80065f0:	4b36      	ldr	r3, [pc, #216]	; (80066cc <SSD1306_Putc+0xfc>)
 80065f2:	885b      	ldrh	r3, [r3, #2]
 80065f4:	461a      	mov	r2, r3
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	785b      	ldrb	r3, [r3, #1]
 80065fa:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80065fc:	2b3f      	cmp	r3, #63	; 0x3f
 80065fe:	dd01      	ble.n	8006604 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8006600:	2300      	movs	r3, #0
 8006602:	e05e      	b.n	80066c2 <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8006604:	2300      	movs	r3, #0
 8006606:	617b      	str	r3, [r7, #20]
 8006608:	e04b      	b.n	80066a2 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	685a      	ldr	r2, [r3, #4]
 800660e:	79fb      	ldrb	r3, [r7, #7]
 8006610:	3b20      	subs	r3, #32
 8006612:	6839      	ldr	r1, [r7, #0]
 8006614:	7849      	ldrb	r1, [r1, #1]
 8006616:	fb01 f303 	mul.w	r3, r1, r3
 800661a:	4619      	mov	r1, r3
 800661c:	697b      	ldr	r3, [r7, #20]
 800661e:	440b      	add	r3, r1
 8006620:	005b      	lsls	r3, r3, #1
 8006622:	4413      	add	r3, r2
 8006624:	881b      	ldrh	r3, [r3, #0]
 8006626:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8006628:	2300      	movs	r3, #0
 800662a:	613b      	str	r3, [r7, #16]
 800662c:	e030      	b.n	8006690 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 800662e:	68fa      	ldr	r2, [r7, #12]
 8006630:	693b      	ldr	r3, [r7, #16]
 8006632:	fa02 f303 	lsl.w	r3, r2, r3
 8006636:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800663a:	2b00      	cmp	r3, #0
 800663c:	d010      	beq.n	8006660 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 800663e:	4b23      	ldr	r3, [pc, #140]	; (80066cc <SSD1306_Putc+0xfc>)
 8006640:	881a      	ldrh	r2, [r3, #0]
 8006642:	693b      	ldr	r3, [r7, #16]
 8006644:	b29b      	uxth	r3, r3
 8006646:	4413      	add	r3, r2
 8006648:	b298      	uxth	r0, r3
 800664a:	4b20      	ldr	r3, [pc, #128]	; (80066cc <SSD1306_Putc+0xfc>)
 800664c:	885a      	ldrh	r2, [r3, #2]
 800664e:	697b      	ldr	r3, [r7, #20]
 8006650:	b29b      	uxth	r3, r3
 8006652:	4413      	add	r3, r2
 8006654:	b29b      	uxth	r3, r3
 8006656:	79ba      	ldrb	r2, [r7, #6]
 8006658:	4619      	mov	r1, r3
 800665a:	f7ff ff45 	bl	80064e8 <SSD1306_DrawPixel>
 800665e:	e014      	b.n	800668a <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8006660:	4b1a      	ldr	r3, [pc, #104]	; (80066cc <SSD1306_Putc+0xfc>)
 8006662:	881a      	ldrh	r2, [r3, #0]
 8006664:	693b      	ldr	r3, [r7, #16]
 8006666:	b29b      	uxth	r3, r3
 8006668:	4413      	add	r3, r2
 800666a:	b298      	uxth	r0, r3
 800666c:	4b17      	ldr	r3, [pc, #92]	; (80066cc <SSD1306_Putc+0xfc>)
 800666e:	885a      	ldrh	r2, [r3, #2]
 8006670:	697b      	ldr	r3, [r7, #20]
 8006672:	b29b      	uxth	r3, r3
 8006674:	4413      	add	r3, r2
 8006676:	b299      	uxth	r1, r3
 8006678:	79bb      	ldrb	r3, [r7, #6]
 800667a:	2b00      	cmp	r3, #0
 800667c:	bf0c      	ite	eq
 800667e:	2301      	moveq	r3, #1
 8006680:	2300      	movne	r3, #0
 8006682:	b2db      	uxtb	r3, r3
 8006684:	461a      	mov	r2, r3
 8006686:	f7ff ff2f 	bl	80064e8 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 800668a:	693b      	ldr	r3, [r7, #16]
 800668c:	3301      	adds	r3, #1
 800668e:	613b      	str	r3, [r7, #16]
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	781b      	ldrb	r3, [r3, #0]
 8006694:	461a      	mov	r2, r3
 8006696:	693b      	ldr	r3, [r7, #16]
 8006698:	4293      	cmp	r3, r2
 800669a:	d3c8      	bcc.n	800662e <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 800669c:	697b      	ldr	r3, [r7, #20]
 800669e:	3301      	adds	r3, #1
 80066a0:	617b      	str	r3, [r7, #20]
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	785b      	ldrb	r3, [r3, #1]
 80066a6:	461a      	mov	r2, r3
 80066a8:	697b      	ldr	r3, [r7, #20]
 80066aa:	4293      	cmp	r3, r2
 80066ac:	d3ad      	bcc.n	800660a <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 80066ae:	4b07      	ldr	r3, [pc, #28]	; (80066cc <SSD1306_Putc+0xfc>)
 80066b0:	881a      	ldrh	r2, [r3, #0]
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	781b      	ldrb	r3, [r3, #0]
 80066b6:	b29b      	uxth	r3, r3
 80066b8:	4413      	add	r3, r2
 80066ba:	b29a      	uxth	r2, r3
 80066bc:	4b03      	ldr	r3, [pc, #12]	; (80066cc <SSD1306_Putc+0xfc>)
 80066be:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 80066c0:	79fb      	ldrb	r3, [r7, #7]
}
 80066c2:	4618      	mov	r0, r3
 80066c4:	3718      	adds	r7, #24
 80066c6:	46bd      	mov	sp, r7
 80066c8:	bd80      	pop	{r7, pc}
 80066ca:	bf00      	nop
 80066cc:	20000650 	.word	0x20000650

080066d0 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b084      	sub	sp, #16
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	60f8      	str	r0, [r7, #12]
 80066d8:	60b9      	str	r1, [r7, #8]
 80066da:	4613      	mov	r3, r2
 80066dc:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 80066de:	e012      	b.n	8006706 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	781b      	ldrb	r3, [r3, #0]
 80066e4:	79fa      	ldrb	r2, [r7, #7]
 80066e6:	68b9      	ldr	r1, [r7, #8]
 80066e8:	4618      	mov	r0, r3
 80066ea:	f7ff ff71 	bl	80065d0 <SSD1306_Putc>
 80066ee:	4603      	mov	r3, r0
 80066f0:	461a      	mov	r2, r3
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	781b      	ldrb	r3, [r3, #0]
 80066f6:	429a      	cmp	r2, r3
 80066f8:	d002      	beq.n	8006700 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	781b      	ldrb	r3, [r3, #0]
 80066fe:	e008      	b.n	8006712 <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	3301      	adds	r3, #1
 8006704:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	781b      	ldrb	r3, [r3, #0]
 800670a:	2b00      	cmp	r3, #0
 800670c:	d1e8      	bne.n	80066e0 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	781b      	ldrb	r3, [r3, #0]
}
 8006712:	4618      	mov	r0, r3
 8006714:	3710      	adds	r7, #16
 8006716:	46bd      	mov	sp, r7
 8006718:	bd80      	pop	{r7, pc}

0800671a <SSD1306_DrawLine>:
 

void SSD1306_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, SSD1306_COLOR_t c) {
 800671a:	b590      	push	{r4, r7, lr}
 800671c:	b087      	sub	sp, #28
 800671e:	af00      	add	r7, sp, #0
 8006720:	4604      	mov	r4, r0
 8006722:	4608      	mov	r0, r1
 8006724:	4611      	mov	r1, r2
 8006726:	461a      	mov	r2, r3
 8006728:	4623      	mov	r3, r4
 800672a:	80fb      	strh	r3, [r7, #6]
 800672c:	4603      	mov	r3, r0
 800672e:	80bb      	strh	r3, [r7, #4]
 8006730:	460b      	mov	r3, r1
 8006732:	807b      	strh	r3, [r7, #2]
 8006734:	4613      	mov	r3, r2
 8006736:	803b      	strh	r3, [r7, #0]
	int16_t dx, dy, sx, sy, err, e2, i, tmp; 
	
	/* Check for overflow */
	if (x0 >= SSD1306_WIDTH) {
 8006738:	88fb      	ldrh	r3, [r7, #6]
 800673a:	2b7f      	cmp	r3, #127	; 0x7f
 800673c:	d901      	bls.n	8006742 <SSD1306_DrawLine+0x28>
		x0 = SSD1306_WIDTH - 1;
 800673e:	237f      	movs	r3, #127	; 0x7f
 8006740:	80fb      	strh	r3, [r7, #6]
	}
	if (x1 >= SSD1306_WIDTH) {
 8006742:	887b      	ldrh	r3, [r7, #2]
 8006744:	2b7f      	cmp	r3, #127	; 0x7f
 8006746:	d901      	bls.n	800674c <SSD1306_DrawLine+0x32>
		x1 = SSD1306_WIDTH - 1;
 8006748:	237f      	movs	r3, #127	; 0x7f
 800674a:	807b      	strh	r3, [r7, #2]
	}
	if (y0 >= SSD1306_HEIGHT) {
 800674c:	88bb      	ldrh	r3, [r7, #4]
 800674e:	2b3f      	cmp	r3, #63	; 0x3f
 8006750:	d901      	bls.n	8006756 <SSD1306_DrawLine+0x3c>
		y0 = SSD1306_HEIGHT - 1;
 8006752:	233f      	movs	r3, #63	; 0x3f
 8006754:	80bb      	strh	r3, [r7, #4]
	}
	if (y1 >= SSD1306_HEIGHT) {
 8006756:	883b      	ldrh	r3, [r7, #0]
 8006758:	2b3f      	cmp	r3, #63	; 0x3f
 800675a:	d901      	bls.n	8006760 <SSD1306_DrawLine+0x46>
		y1 = SSD1306_HEIGHT - 1;
 800675c:	233f      	movs	r3, #63	; 0x3f
 800675e:	803b      	strh	r3, [r7, #0]
	}
	
	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1); 
 8006760:	88fa      	ldrh	r2, [r7, #6]
 8006762:	887b      	ldrh	r3, [r7, #2]
 8006764:	429a      	cmp	r2, r3
 8006766:	d205      	bcs.n	8006774 <SSD1306_DrawLine+0x5a>
 8006768:	887a      	ldrh	r2, [r7, #2]
 800676a:	88fb      	ldrh	r3, [r7, #6]
 800676c:	1ad3      	subs	r3, r2, r3
 800676e:	b29b      	uxth	r3, r3
 8006770:	b21b      	sxth	r3, r3
 8006772:	e004      	b.n	800677e <SSD1306_DrawLine+0x64>
 8006774:	88fa      	ldrh	r2, [r7, #6]
 8006776:	887b      	ldrh	r3, [r7, #2]
 8006778:	1ad3      	subs	r3, r2, r3
 800677a:	b29b      	uxth	r3, r3
 800677c:	b21b      	sxth	r3, r3
 800677e:	827b      	strh	r3, [r7, #18]
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 8006780:	88ba      	ldrh	r2, [r7, #4]
 8006782:	883b      	ldrh	r3, [r7, #0]
 8006784:	429a      	cmp	r2, r3
 8006786:	d205      	bcs.n	8006794 <SSD1306_DrawLine+0x7a>
 8006788:	883a      	ldrh	r2, [r7, #0]
 800678a:	88bb      	ldrh	r3, [r7, #4]
 800678c:	1ad3      	subs	r3, r2, r3
 800678e:	b29b      	uxth	r3, r3
 8006790:	b21b      	sxth	r3, r3
 8006792:	e004      	b.n	800679e <SSD1306_DrawLine+0x84>
 8006794:	88ba      	ldrh	r2, [r7, #4]
 8006796:	883b      	ldrh	r3, [r7, #0]
 8006798:	1ad3      	subs	r3, r2, r3
 800679a:	b29b      	uxth	r3, r3
 800679c:	b21b      	sxth	r3, r3
 800679e:	823b      	strh	r3, [r7, #16]
	sx = (x0 < x1) ? 1 : -1; 
 80067a0:	88fa      	ldrh	r2, [r7, #6]
 80067a2:	887b      	ldrh	r3, [r7, #2]
 80067a4:	429a      	cmp	r2, r3
 80067a6:	d201      	bcs.n	80067ac <SSD1306_DrawLine+0x92>
 80067a8:	2301      	movs	r3, #1
 80067aa:	e001      	b.n	80067b0 <SSD1306_DrawLine+0x96>
 80067ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80067b0:	81fb      	strh	r3, [r7, #14]
	sy = (y0 < y1) ? 1 : -1; 
 80067b2:	88ba      	ldrh	r2, [r7, #4]
 80067b4:	883b      	ldrh	r3, [r7, #0]
 80067b6:	429a      	cmp	r2, r3
 80067b8:	d201      	bcs.n	80067be <SSD1306_DrawLine+0xa4>
 80067ba:	2301      	movs	r3, #1
 80067bc:	e001      	b.n	80067c2 <SSD1306_DrawLine+0xa8>
 80067be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80067c2:	81bb      	strh	r3, [r7, #12]
	err = ((dx > dy) ? dx : -dy) / 2; 
 80067c4:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80067c8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80067cc:	429a      	cmp	r2, r3
 80067ce:	dd06      	ble.n	80067de <SSD1306_DrawLine+0xc4>
 80067d0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80067d4:	0fda      	lsrs	r2, r3, #31
 80067d6:	4413      	add	r3, r2
 80067d8:	105b      	asrs	r3, r3, #1
 80067da:	b21b      	sxth	r3, r3
 80067dc:	e006      	b.n	80067ec <SSD1306_DrawLine+0xd2>
 80067de:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80067e2:	0fda      	lsrs	r2, r3, #31
 80067e4:	4413      	add	r3, r2
 80067e6:	105b      	asrs	r3, r3, #1
 80067e8:	425b      	negs	r3, r3
 80067ea:	b21b      	sxth	r3, r3
 80067ec:	82fb      	strh	r3, [r7, #22]

	if (dx == 0) {
 80067ee:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d129      	bne.n	800684a <SSD1306_DrawLine+0x130>
		if (y1 < y0) {
 80067f6:	883a      	ldrh	r2, [r7, #0]
 80067f8:	88bb      	ldrh	r3, [r7, #4]
 80067fa:	429a      	cmp	r2, r3
 80067fc:	d205      	bcs.n	800680a <SSD1306_DrawLine+0xf0>
			tmp = y1;
 80067fe:	883b      	ldrh	r3, [r7, #0]
 8006800:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 8006802:	88bb      	ldrh	r3, [r7, #4]
 8006804:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 8006806:	893b      	ldrh	r3, [r7, #8]
 8006808:	80bb      	strh	r3, [r7, #4]
		}
		
		if (x1 < x0) {
 800680a:	887a      	ldrh	r2, [r7, #2]
 800680c:	88fb      	ldrh	r3, [r7, #6]
 800680e:	429a      	cmp	r2, r3
 8006810:	d205      	bcs.n	800681e <SSD1306_DrawLine+0x104>
			tmp = x1;
 8006812:	887b      	ldrh	r3, [r7, #2]
 8006814:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 8006816:	88fb      	ldrh	r3, [r7, #6]
 8006818:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 800681a:	893b      	ldrh	r3, [r7, #8]
 800681c:	80fb      	strh	r3, [r7, #6]
		}
		
		/* Vertical line */
		for (i = y0; i <= y1; i++) {
 800681e:	88bb      	ldrh	r3, [r7, #4]
 8006820:	82bb      	strh	r3, [r7, #20]
 8006822:	e00c      	b.n	800683e <SSD1306_DrawLine+0x124>
			SSD1306_DrawPixel(x0, i, c);
 8006824:	8ab9      	ldrh	r1, [r7, #20]
 8006826:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800682a:	88fb      	ldrh	r3, [r7, #6]
 800682c:	4618      	mov	r0, r3
 800682e:	f7ff fe5b 	bl	80064e8 <SSD1306_DrawPixel>
		for (i = y0; i <= y1; i++) {
 8006832:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8006836:	b29b      	uxth	r3, r3
 8006838:	3301      	adds	r3, #1
 800683a:	b29b      	uxth	r3, r3
 800683c:	82bb      	strh	r3, [r7, #20]
 800683e:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8006842:	883b      	ldrh	r3, [r7, #0]
 8006844:	429a      	cmp	r2, r3
 8006846:	dded      	ble.n	8006824 <SSD1306_DrawLine+0x10a>
		}
		
		/* Return from function */
		return;
 8006848:	e05f      	b.n	800690a <SSD1306_DrawLine+0x1f0>
	}
	
	if (dy == 0) {
 800684a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d129      	bne.n	80068a6 <SSD1306_DrawLine+0x18c>
		if (y1 < y0) {
 8006852:	883a      	ldrh	r2, [r7, #0]
 8006854:	88bb      	ldrh	r3, [r7, #4]
 8006856:	429a      	cmp	r2, r3
 8006858:	d205      	bcs.n	8006866 <SSD1306_DrawLine+0x14c>
			tmp = y1;
 800685a:	883b      	ldrh	r3, [r7, #0]
 800685c:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 800685e:	88bb      	ldrh	r3, [r7, #4]
 8006860:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 8006862:	893b      	ldrh	r3, [r7, #8]
 8006864:	80bb      	strh	r3, [r7, #4]
		}
		
		if (x1 < x0) {
 8006866:	887a      	ldrh	r2, [r7, #2]
 8006868:	88fb      	ldrh	r3, [r7, #6]
 800686a:	429a      	cmp	r2, r3
 800686c:	d205      	bcs.n	800687a <SSD1306_DrawLine+0x160>
			tmp = x1;
 800686e:	887b      	ldrh	r3, [r7, #2]
 8006870:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 8006872:	88fb      	ldrh	r3, [r7, #6]
 8006874:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 8006876:	893b      	ldrh	r3, [r7, #8]
 8006878:	80fb      	strh	r3, [r7, #6]
		}
		
		/* Horizontal line */
		for (i = x0; i <= x1; i++) {
 800687a:	88fb      	ldrh	r3, [r7, #6]
 800687c:	82bb      	strh	r3, [r7, #20]
 800687e:	e00c      	b.n	800689a <SSD1306_DrawLine+0x180>
			SSD1306_DrawPixel(i, y0, c);
 8006880:	8abb      	ldrh	r3, [r7, #20]
 8006882:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8006886:	88b9      	ldrh	r1, [r7, #4]
 8006888:	4618      	mov	r0, r3
 800688a:	f7ff fe2d 	bl	80064e8 <SSD1306_DrawPixel>
		for (i = x0; i <= x1; i++) {
 800688e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8006892:	b29b      	uxth	r3, r3
 8006894:	3301      	adds	r3, #1
 8006896:	b29b      	uxth	r3, r3
 8006898:	82bb      	strh	r3, [r7, #20]
 800689a:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800689e:	887b      	ldrh	r3, [r7, #2]
 80068a0:	429a      	cmp	r2, r3
 80068a2:	dded      	ble.n	8006880 <SSD1306_DrawLine+0x166>
		}
		
		/* Return from function */
		return;
 80068a4:	e031      	b.n	800690a <SSD1306_DrawLine+0x1f0>
	}
	
	while (1) {
		SSD1306_DrawPixel(x0, y0, c);
 80068a6:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80068aa:	88b9      	ldrh	r1, [r7, #4]
 80068ac:	88fb      	ldrh	r3, [r7, #6]
 80068ae:	4618      	mov	r0, r3
 80068b0:	f7ff fe1a 	bl	80064e8 <SSD1306_DrawPixel>
		if (x0 == x1 && y0 == y1) {
 80068b4:	88fa      	ldrh	r2, [r7, #6]
 80068b6:	887b      	ldrh	r3, [r7, #2]
 80068b8:	429a      	cmp	r2, r3
 80068ba:	d103      	bne.n	80068c4 <SSD1306_DrawLine+0x1aa>
 80068bc:	88ba      	ldrh	r2, [r7, #4]
 80068be:	883b      	ldrh	r3, [r7, #0]
 80068c0:	429a      	cmp	r2, r3
 80068c2:	d021      	beq.n	8006908 <SSD1306_DrawLine+0x1ee>
			break;
		}
		e2 = err; 
 80068c4:	8afb      	ldrh	r3, [r7, #22]
 80068c6:	817b      	strh	r3, [r7, #10]
		if (e2 > -dx) {
 80068c8:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80068cc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80068d0:	425b      	negs	r3, r3
 80068d2:	429a      	cmp	r2, r3
 80068d4:	dd08      	ble.n	80068e8 <SSD1306_DrawLine+0x1ce>
			err -= dy;
 80068d6:	8afa      	ldrh	r2, [r7, #22]
 80068d8:	8a3b      	ldrh	r3, [r7, #16]
 80068da:	1ad3      	subs	r3, r2, r3
 80068dc:	b29b      	uxth	r3, r3
 80068de:	82fb      	strh	r3, [r7, #22]
			x0 += sx;
 80068e0:	89fa      	ldrh	r2, [r7, #14]
 80068e2:	88fb      	ldrh	r3, [r7, #6]
 80068e4:	4413      	add	r3, r2
 80068e6:	80fb      	strh	r3, [r7, #6]
		} 
		if (e2 < dy) {
 80068e8:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80068ec:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80068f0:	429a      	cmp	r2, r3
 80068f2:	dad8      	bge.n	80068a6 <SSD1306_DrawLine+0x18c>
			err += dx;
 80068f4:	8afa      	ldrh	r2, [r7, #22]
 80068f6:	8a7b      	ldrh	r3, [r7, #18]
 80068f8:	4413      	add	r3, r2
 80068fa:	b29b      	uxth	r3, r3
 80068fc:	82fb      	strh	r3, [r7, #22]
			y0 += sy;
 80068fe:	89ba      	ldrh	r2, [r7, #12]
 8006900:	88bb      	ldrh	r3, [r7, #4]
 8006902:	4413      	add	r3, r2
 8006904:	80bb      	strh	r3, [r7, #4]
		SSD1306_DrawPixel(x0, y0, c);
 8006906:	e7ce      	b.n	80068a6 <SSD1306_DrawLine+0x18c>
			break;
 8006908:	bf00      	nop
		} 
	}
}
 800690a:	371c      	adds	r7, #28
 800690c:	46bd      	mov	sp, r7
 800690e:	bd90      	pop	{r4, r7, pc}

08006910 <SSD1306_DrawRectangle>:

void SSD1306_DrawRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, SSD1306_COLOR_t c) {
 8006910:	b590      	push	{r4, r7, lr}
 8006912:	b085      	sub	sp, #20
 8006914:	af02      	add	r7, sp, #8
 8006916:	4604      	mov	r4, r0
 8006918:	4608      	mov	r0, r1
 800691a:	4611      	mov	r1, r2
 800691c:	461a      	mov	r2, r3
 800691e:	4623      	mov	r3, r4
 8006920:	80fb      	strh	r3, [r7, #6]
 8006922:	4603      	mov	r3, r0
 8006924:	80bb      	strh	r3, [r7, #4]
 8006926:	460b      	mov	r3, r1
 8006928:	807b      	strh	r3, [r7, #2]
 800692a:	4613      	mov	r3, r2
 800692c:	803b      	strh	r3, [r7, #0]
	/* Check input parameters */
	if (
 800692e:	88fb      	ldrh	r3, [r7, #6]
 8006930:	2b7f      	cmp	r3, #127	; 0x7f
 8006932:	d853      	bhi.n	80069dc <SSD1306_DrawRectangle+0xcc>
		x >= SSD1306_WIDTH ||
 8006934:	88bb      	ldrh	r3, [r7, #4]
 8006936:	2b3f      	cmp	r3, #63	; 0x3f
 8006938:	d850      	bhi.n	80069dc <SSD1306_DrawRectangle+0xcc>
		/* Return error */
		return;
	}
	
	/* Check width and height */
	if ((x + w) >= SSD1306_WIDTH) {
 800693a:	88fa      	ldrh	r2, [r7, #6]
 800693c:	887b      	ldrh	r3, [r7, #2]
 800693e:	4413      	add	r3, r2
 8006940:	2b7f      	cmp	r3, #127	; 0x7f
 8006942:	dd03      	ble.n	800694c <SSD1306_DrawRectangle+0x3c>
		w = SSD1306_WIDTH - x;
 8006944:	88fb      	ldrh	r3, [r7, #6]
 8006946:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 800694a:	807b      	strh	r3, [r7, #2]
	}
	if ((y + h) >= SSD1306_HEIGHT) {
 800694c:	88ba      	ldrh	r2, [r7, #4]
 800694e:	883b      	ldrh	r3, [r7, #0]
 8006950:	4413      	add	r3, r2
 8006952:	2b3f      	cmp	r3, #63	; 0x3f
 8006954:	dd03      	ble.n	800695e <SSD1306_DrawRectangle+0x4e>
		h = SSD1306_HEIGHT - y;
 8006956:	88bb      	ldrh	r3, [r7, #4]
 8006958:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 800695c:	803b      	strh	r3, [r7, #0]
	}
	
	/* Draw 4 lines */
	SSD1306_DrawLine(x, y, x + w, y, c);         /* Top line */
 800695e:	88fa      	ldrh	r2, [r7, #6]
 8006960:	887b      	ldrh	r3, [r7, #2]
 8006962:	4413      	add	r3, r2
 8006964:	b29a      	uxth	r2, r3
 8006966:	88bc      	ldrh	r4, [r7, #4]
 8006968:	88b9      	ldrh	r1, [r7, #4]
 800696a:	88f8      	ldrh	r0, [r7, #6]
 800696c:	7e3b      	ldrb	r3, [r7, #24]
 800696e:	9300      	str	r3, [sp, #0]
 8006970:	4623      	mov	r3, r4
 8006972:	f7ff fed2 	bl	800671a <SSD1306_DrawLine>
	SSD1306_DrawLine(x, y + h, x + w, y + h, c); /* Bottom line */
 8006976:	88ba      	ldrh	r2, [r7, #4]
 8006978:	883b      	ldrh	r3, [r7, #0]
 800697a:	4413      	add	r3, r2
 800697c:	b299      	uxth	r1, r3
 800697e:	88fa      	ldrh	r2, [r7, #6]
 8006980:	887b      	ldrh	r3, [r7, #2]
 8006982:	4413      	add	r3, r2
 8006984:	b29c      	uxth	r4, r3
 8006986:	88ba      	ldrh	r2, [r7, #4]
 8006988:	883b      	ldrh	r3, [r7, #0]
 800698a:	4413      	add	r3, r2
 800698c:	b29a      	uxth	r2, r3
 800698e:	88f8      	ldrh	r0, [r7, #6]
 8006990:	7e3b      	ldrb	r3, [r7, #24]
 8006992:	9300      	str	r3, [sp, #0]
 8006994:	4613      	mov	r3, r2
 8006996:	4622      	mov	r2, r4
 8006998:	f7ff febf 	bl	800671a <SSD1306_DrawLine>
	SSD1306_DrawLine(x, y, x, y + h, c);         /* Left line */
 800699c:	88ba      	ldrh	r2, [r7, #4]
 800699e:	883b      	ldrh	r3, [r7, #0]
 80069a0:	4413      	add	r3, r2
 80069a2:	b29c      	uxth	r4, r3
 80069a4:	88fa      	ldrh	r2, [r7, #6]
 80069a6:	88b9      	ldrh	r1, [r7, #4]
 80069a8:	88f8      	ldrh	r0, [r7, #6]
 80069aa:	7e3b      	ldrb	r3, [r7, #24]
 80069ac:	9300      	str	r3, [sp, #0]
 80069ae:	4623      	mov	r3, r4
 80069b0:	f7ff feb3 	bl	800671a <SSD1306_DrawLine>
	SSD1306_DrawLine(x + w, y, x + w, y + h, c); /* Right line */
 80069b4:	88fa      	ldrh	r2, [r7, #6]
 80069b6:	887b      	ldrh	r3, [r7, #2]
 80069b8:	4413      	add	r3, r2
 80069ba:	b298      	uxth	r0, r3
 80069bc:	88fa      	ldrh	r2, [r7, #6]
 80069be:	887b      	ldrh	r3, [r7, #2]
 80069c0:	4413      	add	r3, r2
 80069c2:	b29c      	uxth	r4, r3
 80069c4:	88ba      	ldrh	r2, [r7, #4]
 80069c6:	883b      	ldrh	r3, [r7, #0]
 80069c8:	4413      	add	r3, r2
 80069ca:	b29a      	uxth	r2, r3
 80069cc:	88b9      	ldrh	r1, [r7, #4]
 80069ce:	7e3b      	ldrb	r3, [r7, #24]
 80069d0:	9300      	str	r3, [sp, #0]
 80069d2:	4613      	mov	r3, r2
 80069d4:	4622      	mov	r2, r4
 80069d6:	f7ff fea0 	bl	800671a <SSD1306_DrawLine>
 80069da:	e000      	b.n	80069de <SSD1306_DrawRectangle+0xce>
		return;
 80069dc:	bf00      	nop
}
 80069de:	370c      	adds	r7, #12
 80069e0:	46bd      	mov	sp, r7
 80069e2:	bd90      	pop	{r4, r7, pc}

080069e4 <SSD1306_DrawFilledTriangle>:
	SSD1306_DrawLine(x2, y2, x3, y3, color);
	SSD1306_DrawLine(x3, y3, x1, y1, color);
}


void SSD1306_DrawFilledTriangle(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t x3, uint16_t y3, SSD1306_COLOR_t color) {
 80069e4:	b590      	push	{r4, r7, lr}
 80069e6:	b08d      	sub	sp, #52	; 0x34
 80069e8:	af02      	add	r7, sp, #8
 80069ea:	4604      	mov	r4, r0
 80069ec:	4608      	mov	r0, r1
 80069ee:	4611      	mov	r1, r2
 80069f0:	461a      	mov	r2, r3
 80069f2:	4623      	mov	r3, r4
 80069f4:	80fb      	strh	r3, [r7, #6]
 80069f6:	4603      	mov	r3, r0
 80069f8:	80bb      	strh	r3, [r7, #4]
 80069fa:	460b      	mov	r3, r1
 80069fc:	807b      	strh	r3, [r7, #2]
 80069fe:	4613      	mov	r3, r2
 8006a00:	803b      	strh	r3, [r7, #0]
	int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0, 
 8006a02:	2300      	movs	r3, #0
 8006a04:	823b      	strh	r3, [r7, #16]
 8006a06:	2300      	movs	r3, #0
 8006a08:	81fb      	strh	r3, [r7, #14]
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006a0e:	2300      	movs	r3, #0
 8006a10:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006a12:	2300      	movs	r3, #0
 8006a14:	847b      	strh	r3, [r7, #34]	; 0x22
 8006a16:	2300      	movs	r3, #0
 8006a18:	843b      	strh	r3, [r7, #32]
	yinc1 = 0, yinc2 = 0, den = 0, num = 0, numadd = 0, numpixels = 0, 
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	83fb      	strh	r3, [r7, #30]
 8006a1e:	2300      	movs	r3, #0
 8006a20:	83bb      	strh	r3, [r7, #28]
 8006a22:	2300      	movs	r3, #0
 8006a24:	837b      	strh	r3, [r7, #26]
 8006a26:	2300      	movs	r3, #0
 8006a28:	833b      	strh	r3, [r7, #24]
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	82fb      	strh	r3, [r7, #22]
 8006a2e:	2300      	movs	r3, #0
 8006a30:	82bb      	strh	r3, [r7, #20]
	curpixel = 0;
 8006a32:	2300      	movs	r3, #0
 8006a34:	827b      	strh	r3, [r7, #18]
	
	deltax = ABS(x2 - x1);
 8006a36:	887a      	ldrh	r2, [r7, #2]
 8006a38:	88fb      	ldrh	r3, [r7, #6]
 8006a3a:	1ad3      	subs	r3, r2, r3
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	bfb8      	it	lt
 8006a40:	425b      	neglt	r3, r3
 8006a42:	823b      	strh	r3, [r7, #16]
	deltay = ABS(y2 - y1);
 8006a44:	883a      	ldrh	r2, [r7, #0]
 8006a46:	88bb      	ldrh	r3, [r7, #4]
 8006a48:	1ad3      	subs	r3, r2, r3
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	bfb8      	it	lt
 8006a4e:	425b      	neglt	r3, r3
 8006a50:	81fb      	strh	r3, [r7, #14]
	x = x1;
 8006a52:	88fb      	ldrh	r3, [r7, #6]
 8006a54:	84fb      	strh	r3, [r7, #38]	; 0x26
	y = y1;
 8006a56:	88bb      	ldrh	r3, [r7, #4]
 8006a58:	84bb      	strh	r3, [r7, #36]	; 0x24

	if (x2 >= x1) {
 8006a5a:	887a      	ldrh	r2, [r7, #2]
 8006a5c:	88fb      	ldrh	r3, [r7, #6]
 8006a5e:	429a      	cmp	r2, r3
 8006a60:	d304      	bcc.n	8006a6c <SSD1306_DrawFilledTriangle+0x88>
		xinc1 = 1;
 8006a62:	2301      	movs	r3, #1
 8006a64:	847b      	strh	r3, [r7, #34]	; 0x22
		xinc2 = 1;
 8006a66:	2301      	movs	r3, #1
 8006a68:	843b      	strh	r3, [r7, #32]
 8006a6a:	e005      	b.n	8006a78 <SSD1306_DrawFilledTriangle+0x94>
	} else {
		xinc1 = -1;
 8006a6c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006a70:	847b      	strh	r3, [r7, #34]	; 0x22
		xinc2 = -1;
 8006a72:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006a76:	843b      	strh	r3, [r7, #32]
	}

	if (y2 >= y1) {
 8006a78:	883a      	ldrh	r2, [r7, #0]
 8006a7a:	88bb      	ldrh	r3, [r7, #4]
 8006a7c:	429a      	cmp	r2, r3
 8006a7e:	d304      	bcc.n	8006a8a <SSD1306_DrawFilledTriangle+0xa6>
		yinc1 = 1;
 8006a80:	2301      	movs	r3, #1
 8006a82:	83fb      	strh	r3, [r7, #30]
		yinc2 = 1;
 8006a84:	2301      	movs	r3, #1
 8006a86:	83bb      	strh	r3, [r7, #28]
 8006a88:	e005      	b.n	8006a96 <SSD1306_DrawFilledTriangle+0xb2>
	} else {
		yinc1 = -1;
 8006a8a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006a8e:	83fb      	strh	r3, [r7, #30]
		yinc2 = -1;
 8006a90:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006a94:	83bb      	strh	r3, [r7, #28]
	}

	if (deltax >= deltay){
 8006a96:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8006a9a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006a9e:	429a      	cmp	r2, r3
 8006aa0:	db10      	blt.n	8006ac4 <SSD1306_DrawFilledTriangle+0xe0>
		xinc1 = 0;
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	847b      	strh	r3, [r7, #34]	; 0x22
		yinc2 = 0;
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	83bb      	strh	r3, [r7, #28]
		den = deltax;
 8006aaa:	8a3b      	ldrh	r3, [r7, #16]
 8006aac:	837b      	strh	r3, [r7, #26]
		num = deltax / 2;
 8006aae:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8006ab2:	0fda      	lsrs	r2, r3, #31
 8006ab4:	4413      	add	r3, r2
 8006ab6:	105b      	asrs	r3, r3, #1
 8006ab8:	833b      	strh	r3, [r7, #24]
		numadd = deltay;
 8006aba:	89fb      	ldrh	r3, [r7, #14]
 8006abc:	82fb      	strh	r3, [r7, #22]
		numpixels = deltax;
 8006abe:	8a3b      	ldrh	r3, [r7, #16]
 8006ac0:	82bb      	strh	r3, [r7, #20]
 8006ac2:	e00f      	b.n	8006ae4 <SSD1306_DrawFilledTriangle+0x100>
	} else {
		xinc2 = 0;
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	843b      	strh	r3, [r7, #32]
		yinc1 = 0;
 8006ac8:	2300      	movs	r3, #0
 8006aca:	83fb      	strh	r3, [r7, #30]
		den = deltay;
 8006acc:	89fb      	ldrh	r3, [r7, #14]
 8006ace:	837b      	strh	r3, [r7, #26]
		num = deltay / 2;
 8006ad0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006ad4:	0fda      	lsrs	r2, r3, #31
 8006ad6:	4413      	add	r3, r2
 8006ad8:	105b      	asrs	r3, r3, #1
 8006ada:	833b      	strh	r3, [r7, #24]
		numadd = deltax;
 8006adc:	8a3b      	ldrh	r3, [r7, #16]
 8006ade:	82fb      	strh	r3, [r7, #22]
		numpixels = deltay;
 8006ae0:	89fb      	ldrh	r3, [r7, #14]
 8006ae2:	82bb      	strh	r3, [r7, #20]
	}

	for (curpixel = 0; curpixel <= numpixels; curpixel++) {
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	827b      	strh	r3, [r7, #18]
 8006ae8:	e033      	b.n	8006b52 <SSD1306_DrawFilledTriangle+0x16e>
		SSD1306_DrawLine(x, y, x3, y3, color);
 8006aea:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 8006aec:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8006aee:	8fbc      	ldrh	r4, [r7, #60]	; 0x3c
 8006af0:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8006af2:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8006af6:	9300      	str	r3, [sp, #0]
 8006af8:	4623      	mov	r3, r4
 8006afa:	f7ff fe0e 	bl	800671a <SSD1306_DrawLine>

		num += numadd;
 8006afe:	8b3a      	ldrh	r2, [r7, #24]
 8006b00:	8afb      	ldrh	r3, [r7, #22]
 8006b02:	4413      	add	r3, r2
 8006b04:	b29b      	uxth	r3, r3
 8006b06:	833b      	strh	r3, [r7, #24]
		if (num >= den) {
 8006b08:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8006b0c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8006b10:	429a      	cmp	r2, r3
 8006b12:	db0e      	blt.n	8006b32 <SSD1306_DrawFilledTriangle+0x14e>
			num -= den;
 8006b14:	8b3a      	ldrh	r2, [r7, #24]
 8006b16:	8b7b      	ldrh	r3, [r7, #26]
 8006b18:	1ad3      	subs	r3, r2, r3
 8006b1a:	b29b      	uxth	r3, r3
 8006b1c:	833b      	strh	r3, [r7, #24]
			x += xinc1;
 8006b1e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006b20:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006b22:	4413      	add	r3, r2
 8006b24:	b29b      	uxth	r3, r3
 8006b26:	84fb      	strh	r3, [r7, #38]	; 0x26
			y += yinc1;
 8006b28:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006b2a:	8bfb      	ldrh	r3, [r7, #30]
 8006b2c:	4413      	add	r3, r2
 8006b2e:	b29b      	uxth	r3, r3
 8006b30:	84bb      	strh	r3, [r7, #36]	; 0x24
		}
		x += xinc2;
 8006b32:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006b34:	8c3b      	ldrh	r3, [r7, #32]
 8006b36:	4413      	add	r3, r2
 8006b38:	b29b      	uxth	r3, r3
 8006b3a:	84fb      	strh	r3, [r7, #38]	; 0x26
		y += yinc2;
 8006b3c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006b3e:	8bbb      	ldrh	r3, [r7, #28]
 8006b40:	4413      	add	r3, r2
 8006b42:	b29b      	uxth	r3, r3
 8006b44:	84bb      	strh	r3, [r7, #36]	; 0x24
	for (curpixel = 0; curpixel <= numpixels; curpixel++) {
 8006b46:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006b4a:	b29b      	uxth	r3, r3
 8006b4c:	3301      	adds	r3, #1
 8006b4e:	b29b      	uxth	r3, r3
 8006b50:	827b      	strh	r3, [r7, #18]
 8006b52:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8006b56:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8006b5a:	429a      	cmp	r2, r3
 8006b5c:	ddc5      	ble.n	8006aea <SSD1306_DrawFilledTriangle+0x106>
	}
}
 8006b5e:	bf00      	nop
 8006b60:	bf00      	nop
 8006b62:	372c      	adds	r7, #44	; 0x2c
 8006b64:	46bd      	mov	sp, r7
 8006b66:	bd90      	pop	{r4, r7, pc}

08006b68 <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8006b6c:	2000      	movs	r0, #0
 8006b6e:	f7ff fca3 	bl	80064b8 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8006b72:	f7ff fc73 	bl	800645c <SSD1306_UpdateScreen>
}
 8006b76:	bf00      	nop
 8006b78:	bd80      	pop	{r7, pc}
	...

08006b7c <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8006b7c:	b480      	push	{r7}
 8006b7e:	b083      	sub	sp, #12
 8006b80:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8006b82:	4b07      	ldr	r3, [pc, #28]	; (8006ba0 <ssd1306_I2C_Init+0x24>)
 8006b84:	607b      	str	r3, [r7, #4]
	while(p>0)
 8006b86:	e002      	b.n	8006b8e <ssd1306_I2C_Init+0x12>
		p--;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	3b01      	subs	r3, #1
 8006b8c:	607b      	str	r3, [r7, #4]
	while(p>0)
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d1f9      	bne.n	8006b88 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8006b94:	bf00      	nop
 8006b96:	bf00      	nop
 8006b98:	370c      	adds	r7, #12
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	bc80      	pop	{r7}
 8006b9e:	4770      	bx	lr
 8006ba0:	0003d090 	.word	0x0003d090

08006ba4 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8006ba4:	b590      	push	{r4, r7, lr}
 8006ba6:	b0c7      	sub	sp, #284	; 0x11c
 8006ba8:	af02      	add	r7, sp, #8
 8006baa:	4604      	mov	r4, r0
 8006bac:	4608      	mov	r0, r1
 8006bae:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8006bb2:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 8006bb6:	600a      	str	r2, [r1, #0]
 8006bb8:	4619      	mov	r1, r3
 8006bba:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006bbe:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8006bc2:	4622      	mov	r2, r4
 8006bc4:	701a      	strb	r2, [r3, #0]
 8006bc6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006bca:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8006bce:	4602      	mov	r2, r0
 8006bd0:	701a      	strb	r2, [r3, #0]
 8006bd2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006bd6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006bda:	460a      	mov	r2, r1
 8006bdc:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8006bde:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006be2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006be6:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8006bea:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 8006bee:	7812      	ldrb	r2, [r2, #0]
 8006bf0:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8006bf8:	e015      	b.n	8006c26 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8006bfa:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8006bfe:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8006c02:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8006c06:	6812      	ldr	r2, [r2, #0]
 8006c08:	441a      	add	r2, r3
 8006c0a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8006c0e:	3301      	adds	r3, #1
 8006c10:	7811      	ldrb	r1, [r2, #0]
 8006c12:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8006c16:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8006c1a:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8006c1c:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8006c20:	3301      	adds	r3, #1
 8006c22:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8006c26:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8006c2a:	b29b      	uxth	r3, r3
 8006c2c:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8006c30:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8006c34:	8812      	ldrh	r2, [r2, #0]
 8006c36:	429a      	cmp	r2, r3
 8006c38:	d8df      	bhi.n	8006bfa <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8006c3a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006c3e:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8006c42:	781b      	ldrb	r3, [r3, #0]
 8006c44:	b299      	uxth	r1, r3
 8006c46:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006c4a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006c4e:	881b      	ldrh	r3, [r3, #0]
 8006c50:	3301      	adds	r3, #1
 8006c52:	b29b      	uxth	r3, r3
 8006c54:	f107 020c 	add.w	r2, r7, #12
 8006c58:	200a      	movs	r0, #10
 8006c5a:	9000      	str	r0, [sp, #0]
 8006c5c:	4803      	ldr	r0, [pc, #12]	; (8006c6c <ssd1306_I2C_WriteMulti+0xc8>)
 8006c5e:	f7fc fddf 	bl	8003820 <HAL_I2C_Master_Transmit>
}
 8006c62:	bf00      	nop
 8006c64:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	bd90      	pop	{r4, r7, pc}
 8006c6c:	200000e0 	.word	0x200000e0

08006c70 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b086      	sub	sp, #24
 8006c74:	af02      	add	r7, sp, #8
 8006c76:	4603      	mov	r3, r0
 8006c78:	71fb      	strb	r3, [r7, #7]
 8006c7a:	460b      	mov	r3, r1
 8006c7c:	71bb      	strb	r3, [r7, #6]
 8006c7e:	4613      	mov	r3, r2
 8006c80:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8006c82:	79bb      	ldrb	r3, [r7, #6]
 8006c84:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8006c86:	797b      	ldrb	r3, [r7, #5]
 8006c88:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8006c8a:	79fb      	ldrb	r3, [r7, #7]
 8006c8c:	b299      	uxth	r1, r3
 8006c8e:	f107 020c 	add.w	r2, r7, #12
 8006c92:	230a      	movs	r3, #10
 8006c94:	9300      	str	r3, [sp, #0]
 8006c96:	2302      	movs	r3, #2
 8006c98:	4803      	ldr	r0, [pc, #12]	; (8006ca8 <ssd1306_I2C_Write+0x38>)
 8006c9a:	f7fc fdc1 	bl	8003820 <HAL_I2C_Master_Transmit>
}
 8006c9e:	bf00      	nop
 8006ca0:	3710      	adds	r7, #16
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	bd80      	pop	{r7, pc}
 8006ca6:	bf00      	nop
 8006ca8:	200000e0 	.word	0x200000e0

08006cac <ResetCommand>:
 * 
 * @param Rojo_BH1750: Structture that handles the sensor
 * @return Rojo_Status 
 */
static Rojo_Status ResetCommand(Rojo_BH1750 *Rojo_BH1750)
{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b084      	sub	sp, #16
 8006cb0:	af02      	add	r7, sp, #8
 8006cb2:	6078      	str	r0, [r7, #4]
	Buffer = Reset;
 8006cb4:	4b0b      	ldr	r3, [pc, #44]	; (8006ce4 <ResetCommand+0x38>)
 8006cb6:	2207      	movs	r2, #7
 8006cb8:	701a      	strb	r2, [r3, #0]
	if(HAL_I2C_Master_Transmit(Rojo_BH1750 -> I2C, Rojo_BH1750 -> Address, &Buffer, 1, 100) != HAL_OK)
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6818      	ldr	r0, [r3, #0]
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	791b      	ldrb	r3, [r3, #4]
 8006cc2:	b299      	uxth	r1, r3
 8006cc4:	2364      	movs	r3, #100	; 0x64
 8006cc6:	9300      	str	r3, [sp, #0]
 8006cc8:	2301      	movs	r3, #1
 8006cca:	4a06      	ldr	r2, [pc, #24]	; (8006ce4 <ResetCommand+0x38>)
 8006ccc:	f7fc fda8 	bl	8003820 <HAL_I2C_Master_Transmit>
 8006cd0:	4603      	mov	r3, r0
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d001      	beq.n	8006cda <ResetCommand+0x2e>
		return Rojo_Error;
 8006cd6:	2308      	movs	r3, #8
 8006cd8:	e000      	b.n	8006cdc <ResetCommand+0x30>
	else
		return Rojo_OK;
 8006cda:	2300      	movs	r3, #0
}
 8006cdc:	4618      	mov	r0, r3
 8006cde:	3708      	adds	r7, #8
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	bd80      	pop	{r7, pc}
 8006ce4:	20000656 	.word	0x20000656

08006ce8 <PowerOnCommand>:
 * 
 * @param Rojo_BH1750: Structture that handles the sensor
 * @return Rojo_Status 
 */
static Rojo_Status PowerOnCommand(Rojo_BH1750 *Rojo_BH1750)
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b084      	sub	sp, #16
 8006cec:	af02      	add	r7, sp, #8
 8006cee:	6078      	str	r0, [r7, #4]
	Buffer = PowerOn;
 8006cf0:	4b0b      	ldr	r3, [pc, #44]	; (8006d20 <PowerOnCommand+0x38>)
 8006cf2:	2201      	movs	r2, #1
 8006cf4:	701a      	strb	r2, [r3, #0]
	if(HAL_I2C_Master_Transmit(Rojo_BH1750 -> I2C, Rojo_BH1750 -> Address, &Buffer, 1, 100) != HAL_OK)
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	6818      	ldr	r0, [r3, #0]
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	791b      	ldrb	r3, [r3, #4]
 8006cfe:	b299      	uxth	r1, r3
 8006d00:	2364      	movs	r3, #100	; 0x64
 8006d02:	9300      	str	r3, [sp, #0]
 8006d04:	2301      	movs	r3, #1
 8006d06:	4a06      	ldr	r2, [pc, #24]	; (8006d20 <PowerOnCommand+0x38>)
 8006d08:	f7fc fd8a 	bl	8003820 <HAL_I2C_Master_Transmit>
 8006d0c:	4603      	mov	r3, r0
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d001      	beq.n	8006d16 <PowerOnCommand+0x2e>
		return Rojo_Error;
 8006d12:	2308      	movs	r3, #8
 8006d14:	e000      	b.n	8006d18 <PowerOnCommand+0x30>
	else
		return Rojo_OK;
 8006d16:	2300      	movs	r3, #0
}
 8006d18:	4618      	mov	r0, r3
 8006d1a:	3708      	adds	r7, #8
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	bd80      	pop	{r7, pc}
 8006d20:	20000656 	.word	0x20000656

08006d24 <PowerDownCommand>:
 * 
 * @param Rojo_BH1750: Structture that handles the sensor
 * @return Rojo_Status 
 */
static Rojo_Status PowerDownCommand(Rojo_BH1750 *Rojo_BH1750)
{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b084      	sub	sp, #16
 8006d28:	af02      	add	r7, sp, #8
 8006d2a:	6078      	str	r0, [r7, #4]
	Buffer = PowerDown;
 8006d2c:	4b0b      	ldr	r3, [pc, #44]	; (8006d5c <PowerDownCommand+0x38>)
 8006d2e:	2200      	movs	r2, #0
 8006d30:	701a      	strb	r2, [r3, #0]
	if(HAL_I2C_Master_Transmit(Rojo_BH1750 -> I2C, Rojo_BH1750 -> Address, &Buffer, 1, 100) != HAL_OK)
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	6818      	ldr	r0, [r3, #0]
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	791b      	ldrb	r3, [r3, #4]
 8006d3a:	b299      	uxth	r1, r3
 8006d3c:	2364      	movs	r3, #100	; 0x64
 8006d3e:	9300      	str	r3, [sp, #0]
 8006d40:	2301      	movs	r3, #1
 8006d42:	4a06      	ldr	r2, [pc, #24]	; (8006d5c <PowerDownCommand+0x38>)
 8006d44:	f7fc fd6c 	bl	8003820 <HAL_I2C_Master_Transmit>
 8006d48:	4603      	mov	r3, r0
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d001      	beq.n	8006d52 <PowerDownCommand+0x2e>
		return Rojo_Error;
 8006d4e:	2308      	movs	r3, #8
 8006d50:	e000      	b.n	8006d54 <PowerDownCommand+0x30>
	else
		return Rojo_OK;
 8006d52:	2300      	movs	r3, #0
}
 8006d54:	4618      	mov	r0, r3
 8006d56:	3708      	adds	r7, #8
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	bd80      	pop	{r7, pc}
 8006d5c:	20000656 	.word	0x20000656

08006d60 <Measure_Subrutine>:
 * 
 * @param Rojo_BH1750: Structture that handles the sensor
 * @return uint16_t: Value of the meausure in 16 bit code (Not luxes)
 */
static uint16_t Measure_Subrutine(Rojo_BH1750 *Rojo_BH1750)
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b086      	sub	sp, #24
 8006d64:	af02      	add	r7, sp, #8
 8006d66:	6078      	str	r0, [r7, #4]
	uint8_t Data[2];
	switch(Rojo_BH1750 -> Resolution)
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	795b      	ldrb	r3, [r3, #5]
 8006d6c:	2b02      	cmp	r3, #2
 8006d6e:	d00e      	beq.n	8006d8e <Measure_Subrutine+0x2e>
 8006d70:	2b02      	cmp	r3, #2
 8006d72:	dc10      	bgt.n	8006d96 <Measure_Subrutine+0x36>
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d002      	beq.n	8006d7e <Measure_Subrutine+0x1e>
 8006d78:	2b01      	cmp	r3, #1
 8006d7a:	d004      	beq.n	8006d86 <Measure_Subrutine+0x26>
 8006d7c:	e00b      	b.n	8006d96 <Measure_Subrutine+0x36>
	{
		case High_Res:
			Buffer = Continuously_H_ResolutionMode2;
 8006d7e:	4b22      	ldr	r3, [pc, #136]	; (8006e08 <Measure_Subrutine+0xa8>)
 8006d80:	2211      	movs	r2, #17
 8006d82:	701a      	strb	r2, [r3, #0]
		break;
 8006d84:	e009      	b.n	8006d9a <Measure_Subrutine+0x3a>
		case Medium_Res:
			Buffer = Continuously_H_ResolutionMode;
 8006d86:	4b20      	ldr	r3, [pc, #128]	; (8006e08 <Measure_Subrutine+0xa8>)
 8006d88:	2210      	movs	r2, #16
 8006d8a:	701a      	strb	r2, [r3, #0]
		break;
 8006d8c:	e005      	b.n	8006d9a <Measure_Subrutine+0x3a>
		case Low_Res:
			Buffer = Continuously_L_ResolutionMode;
 8006d8e:	4b1e      	ldr	r3, [pc, #120]	; (8006e08 <Measure_Subrutine+0xa8>)
 8006d90:	2213      	movs	r2, #19
 8006d92:	701a      	strb	r2, [r3, #0]
		break;
 8006d94:	e001      	b.n	8006d9a <Measure_Subrutine+0x3a>
		default:
			return 0;
 8006d96:	2300      	movs	r3, #0
 8006d98:	e031      	b.n	8006dfe <Measure_Subrutine+0x9e>
		break;
	}
	Rojo_BH1750 -> Status = Busy;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	2201      	movs	r2, #1
 8006d9e:	719a      	strb	r2, [r3, #6]
	if(HAL_I2C_Master_Transmit(Rojo_BH1750 -> I2C, Rojo_BH1750 -> Address, &Buffer, 1, 100) != HAL_OK)
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	6818      	ldr	r0, [r3, #0]
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	791b      	ldrb	r3, [r3, #4]
 8006da8:	b299      	uxth	r1, r3
 8006daa:	2364      	movs	r3, #100	; 0x64
 8006dac:	9300      	str	r3, [sp, #0]
 8006dae:	2301      	movs	r3, #1
 8006db0:	4a15      	ldr	r2, [pc, #84]	; (8006e08 <Measure_Subrutine+0xa8>)
 8006db2:	f7fc fd35 	bl	8003820 <HAL_I2C_Master_Transmit>
 8006db6:	4603      	mov	r3, r0
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d001      	beq.n	8006dc0 <Measure_Subrutine+0x60>
		return 0;
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	e01e      	b.n	8006dfe <Measure_Subrutine+0x9e>
	HAL_Delay(120);
 8006dc0:	2078      	movs	r0, #120	; 0x78
 8006dc2:	f7fc f877 	bl	8002eb4 <HAL_Delay>
	if(HAL_I2C_Master_Receive(Rojo_BH1750 -> I2C, Rojo_BH1750 -> Address, Data, 2, 100) != HAL_OK)
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	6818      	ldr	r0, [r3, #0]
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	791b      	ldrb	r3, [r3, #4]
 8006dce:	b299      	uxth	r1, r3
 8006dd0:	f107 020c 	add.w	r2, r7, #12
 8006dd4:	2364      	movs	r3, #100	; 0x64
 8006dd6:	9300      	str	r3, [sp, #0]
 8006dd8:	2302      	movs	r3, #2
 8006dda:	f7fc fe1f 	bl	8003a1c <HAL_I2C_Master_Receive>
 8006dde:	4603      	mov	r3, r0
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d001      	beq.n	8006de8 <Measure_Subrutine+0x88>
		return 0;
 8006de4:	2300      	movs	r3, #0
 8006de6:	e00a      	b.n	8006dfe <Measure_Subrutine+0x9e>
	Rojo_BH1750 -> Status = Standby;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2200      	movs	r2, #0
 8006dec:	719a      	strb	r2, [r3, #6]
	return (uint16_t) (Data[0] << 8 | Data[1]);
 8006dee:	7b3b      	ldrb	r3, [r7, #12]
 8006df0:	021b      	lsls	r3, r3, #8
 8006df2:	b21a      	sxth	r2, r3
 8006df4:	7b7b      	ldrb	r3, [r7, #13]
 8006df6:	b21b      	sxth	r3, r3
 8006df8:	4313      	orrs	r3, r2
 8006dfa:	b21b      	sxth	r3, r3
 8006dfc:	b29b      	uxth	r3, r3
}
 8006dfe:	4618      	mov	r0, r3
 8006e00:	3710      	adds	r7, #16
 8006e02:	46bd      	mov	sp, r7
 8006e04:	bd80      	pop	{r7, pc}
 8006e06:	bf00      	nop
 8006e08:	20000656 	.word	0x20000656

08006e0c <BH1750_Init>:

/*END OF STATIC ZONE*/

Rojo_Status BH1750_Init(Rojo_BH1750 *Rojo_BH1750, I2C_HandleTypeDef *hi2c, uint8_t Address)
{
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	b084      	sub	sp, #16
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	60f8      	str	r0, [r7, #12]
 8006e14:	60b9      	str	r1, [r7, #8]
 8006e16:	4613      	mov	r3, r2
 8006e18:	71fb      	strb	r3, [r7, #7]

	Rojo_BH1750 -> I2C = hi2c;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	68ba      	ldr	r2, [r7, #8]
 8006e1e:	601a      	str	r2, [r3, #0]
	Rojo_BH1750 -> Address = Address;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	79fa      	ldrb	r2, [r7, #7]
 8006e24:	711a      	strb	r2, [r3, #4]
	Rojo_BH1750 -> Resolution = Medium_Res;
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	2201      	movs	r2, #1
 8006e2a:	715a      	strb	r2, [r3, #5]
	Rojo_BH1750 -> Status = Standby;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	2200      	movs	r2, #0
 8006e30:	719a      	strb	r2, [r3, #6]
	Rojo_BH1750 -> Value = 0;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	2200      	movs	r2, #0
 8006e36:	811a      	strh	r2, [r3, #8]
	if(PowerOnCommand(Rojo_BH1750) != Rojo_OK) //Waking the sensor logic
 8006e38:	68f8      	ldr	r0, [r7, #12]
 8006e3a:	f7ff ff55 	bl	8006ce8 <PowerOnCommand>
 8006e3e:	4603      	mov	r3, r0
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d001      	beq.n	8006e48 <BH1750_Init+0x3c>
		return Rojo_Error;
 8006e44:	2308      	movs	r3, #8
 8006e46:	e00b      	b.n	8006e60 <BH1750_Init+0x54>
	HAL_Delay(10);
 8006e48:	200a      	movs	r0, #10
 8006e4a:	f7fc f833 	bl	8002eb4 <HAL_Delay>
	if(ResetCommand(Rojo_BH1750) != Rojo_OK) //Clearing all the register of the sensor
 8006e4e:	68f8      	ldr	r0, [r7, #12]
 8006e50:	f7ff ff2c 	bl	8006cac <ResetCommand>
 8006e54:	4603      	mov	r3, r0
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d001      	beq.n	8006e5e <BH1750_Init+0x52>
		return Rojo_Error;
 8006e5a:	2308      	movs	r3, #8
 8006e5c:	e000      	b.n	8006e60 <BH1750_Init+0x54>
	return Rojo_OK;
 8006e5e:	2300      	movs	r3, #0
}
 8006e60:	4618      	mov	r0, r3
 8006e62:	3710      	adds	r7, #16
 8006e64:	46bd      	mov	sp, r7
 8006e66:	bd80      	pop	{r7, pc}

08006e68 <BH1750_Read>:

Rojo_Status BH1750_Read(Rojo_BH1750 *Rojo_BH1750, float *Measure)
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b084      	sub	sp, #16
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
 8006e70:	6039      	str	r1, [r7, #0]
	uint16_t RegisterValue;
	switch(Rojo_BH1750 -> Status)
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	799b      	ldrb	r3, [r3, #6]
 8006e76:	2b02      	cmp	r3, #2
 8006e78:	d012      	beq.n	8006ea0 <BH1750_Read+0x38>
 8006e7a:	2b02      	cmp	r3, #2
 8006e7c:	dc21      	bgt.n	8006ec2 <BH1750_Read+0x5a>
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d008      	beq.n	8006e94 <BH1750_Read+0x2c>
 8006e82:	2b01      	cmp	r3, #1
 8006e84:	d11d      	bne.n	8006ec2 <BH1750_Read+0x5a>
	{
		case Busy:
			RegisterValue = Rojo_BH1750 -> Value;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	891b      	ldrh	r3, [r3, #8]
 8006e8a:	81fb      	strh	r3, [r7, #14]
			Rojo_BH1750 -> Status = Standby;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2200      	movs	r2, #0
 8006e90:	719a      	strb	r2, [r3, #6]
		break;
 8006e92:	e018      	b.n	8006ec6 <BH1750_Read+0x5e>
		case Standby:
			RegisterValue = Measure_Subrutine(Rojo_BH1750);
 8006e94:	6878      	ldr	r0, [r7, #4]
 8006e96:	f7ff ff63 	bl	8006d60 <Measure_Subrutine>
 8006e9a:	4603      	mov	r3, r0
 8006e9c:	81fb      	strh	r3, [r7, #14]
		break;
 8006e9e:	e012      	b.n	8006ec6 <BH1750_Read+0x5e>
		case Sleep:
			if(PowerDownCommand(Rojo_BH1750) != Rojo_OK)
 8006ea0:	6878      	ldr	r0, [r7, #4]
 8006ea2:	f7ff ff3f 	bl	8006d24 <PowerDownCommand>
 8006ea6:	4603      	mov	r3, r0
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d001      	beq.n	8006eb0 <BH1750_Read+0x48>
				return Rojo_Error;
 8006eac:	2308      	movs	r3, #8
 8006eae:	e01d      	b.n	8006eec <BH1750_Read+0x84>
			HAL_Delay(10);
 8006eb0:	200a      	movs	r0, #10
 8006eb2:	f7fb ffff 	bl	8002eb4 <HAL_Delay>
			RegisterValue = Measure_Subrutine(Rojo_BH1750);
 8006eb6:	6878      	ldr	r0, [r7, #4]
 8006eb8:	f7ff ff52 	bl	8006d60 <Measure_Subrutine>
 8006ebc:	4603      	mov	r3, r0
 8006ebe:	81fb      	strh	r3, [r7, #14]
		break;
 8006ec0:	e001      	b.n	8006ec6 <BH1750_Read+0x5e>
		default:
			return Rojo_Error;
 8006ec2:	2308      	movs	r3, #8
 8006ec4:	e012      	b.n	8006eec <BH1750_Read+0x84>
		break;
	}
	*Measure = RegisterValue / 1.2;
 8006ec6:	89fb      	ldrh	r3, [r7, #14]
 8006ec8:	4618      	mov	r0, r3
 8006eca:	f7f9 fb47 	bl	800055c <__aeabi_i2d>
 8006ece:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8006ed2:	4b08      	ldr	r3, [pc, #32]	; (8006ef4 <BH1750_Read+0x8c>)
 8006ed4:	f7f9 fcd6 	bl	8000884 <__aeabi_ddiv>
 8006ed8:	4602      	mov	r2, r0
 8006eda:	460b      	mov	r3, r1
 8006edc:	4610      	mov	r0, r2
 8006ede:	4619      	mov	r1, r3
 8006ee0:	f7f9 fdd8 	bl	8000a94 <__aeabi_d2f>
 8006ee4:	4602      	mov	r2, r0
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	601a      	str	r2, [r3, #0]
	return Rojo_OK;
 8006eea:	2300      	movs	r3, #0
}
 8006eec:	4618      	mov	r0, r3
 8006eee:	3710      	adds	r7, #16
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	bd80      	pop	{r7, pc}
 8006ef4:	3ff33333 	.word	0x3ff33333

08006ef8 <BH1750_ReCalibrate>:

Rojo_Status BH1750_ReCalibrate(Rojo_BH1750 *Rojo_BH1750)
{
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b082      	sub	sp, #8
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
	switch(Rojo_BH1750 -> Status)
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	799b      	ldrb	r3, [r3, #6]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d002      	beq.n	8006f0e <BH1750_ReCalibrate+0x16>
 8006f08:	2b02      	cmp	r3, #2
 8006f0a:	d008      	beq.n	8006f1e <BH1750_ReCalibrate+0x26>
 8006f0c:	e017      	b.n	8006f3e <BH1750_ReCalibrate+0x46>
	{
		case Standby:
			if(ResetCommand(Rojo_BH1750) != Rojo_OK) //Just making the reset
 8006f0e:	6878      	ldr	r0, [r7, #4]
 8006f10:	f7ff fecc 	bl	8006cac <ResetCommand>
 8006f14:	4603      	mov	r3, r0
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d013      	beq.n	8006f42 <BH1750_ReCalibrate+0x4a>
				return Rojo_Error;
 8006f1a:	2308      	movs	r3, #8
 8006f1c:	e015      	b.n	8006f4a <BH1750_ReCalibrate+0x52>
		break;
		case Sleep:
			if(PowerOnCommand(Rojo_BH1750) != Rojo_OK) //Waking up the sensor logic
 8006f1e:	6878      	ldr	r0, [r7, #4]
 8006f20:	f7ff fee2 	bl	8006ce8 <PowerOnCommand>
 8006f24:	4603      	mov	r3, r0
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d001      	beq.n	8006f2e <BH1750_ReCalibrate+0x36>
				return Rojo_Error;
 8006f2a:	2308      	movs	r3, #8
 8006f2c:	e00d      	b.n	8006f4a <BH1750_ReCalibrate+0x52>
			if(ResetCommand(Rojo_BH1750) != Rojo_OK) //Making the reset
 8006f2e:	6878      	ldr	r0, [r7, #4]
 8006f30:	f7ff febc 	bl	8006cac <ResetCommand>
 8006f34:	4603      	mov	r3, r0
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d005      	beq.n	8006f46 <BH1750_ReCalibrate+0x4e>
				return Rojo_Error;
 8006f3a:	2308      	movs	r3, #8
 8006f3c:	e005      	b.n	8006f4a <BH1750_ReCalibrate+0x52>
		break;
		default:
			return Rojo_Error;
 8006f3e:	2308      	movs	r3, #8
 8006f40:	e003      	b.n	8006f4a <BH1750_ReCalibrate+0x52>
		break;
 8006f42:	bf00      	nop
 8006f44:	e000      	b.n	8006f48 <BH1750_ReCalibrate+0x50>
		break;
 8006f46:	bf00      	nop
		break;
	}
	return Rojo_OK;
 8006f48:	2300      	movs	r3, #0
}
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	3708      	adds	r7, #8
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	bd80      	pop	{r7, pc}
	...

08006f54 <calloc>:
 8006f54:	4b02      	ldr	r3, [pc, #8]	; (8006f60 <calloc+0xc>)
 8006f56:	460a      	mov	r2, r1
 8006f58:	4601      	mov	r1, r0
 8006f5a:	6818      	ldr	r0, [r3, #0]
 8006f5c:	f000 b83c 	b.w	8006fd8 <_calloc_r>
 8006f60:	20000060 	.word	0x20000060

08006f64 <__errno>:
 8006f64:	4b01      	ldr	r3, [pc, #4]	; (8006f6c <__errno+0x8>)
 8006f66:	6818      	ldr	r0, [r3, #0]
 8006f68:	4770      	bx	lr
 8006f6a:	bf00      	nop
 8006f6c:	20000060 	.word	0x20000060

08006f70 <__libc_init_array>:
 8006f70:	b570      	push	{r4, r5, r6, lr}
 8006f72:	2600      	movs	r6, #0
 8006f74:	4d0c      	ldr	r5, [pc, #48]	; (8006fa8 <__libc_init_array+0x38>)
 8006f76:	4c0d      	ldr	r4, [pc, #52]	; (8006fac <__libc_init_array+0x3c>)
 8006f78:	1b64      	subs	r4, r4, r5
 8006f7a:	10a4      	asrs	r4, r4, #2
 8006f7c:	42a6      	cmp	r6, r4
 8006f7e:	d109      	bne.n	8006f94 <__libc_init_array+0x24>
 8006f80:	f000 fcb8 	bl	80078f4 <_init>
 8006f84:	2600      	movs	r6, #0
 8006f86:	4d0a      	ldr	r5, [pc, #40]	; (8006fb0 <__libc_init_array+0x40>)
 8006f88:	4c0a      	ldr	r4, [pc, #40]	; (8006fb4 <__libc_init_array+0x44>)
 8006f8a:	1b64      	subs	r4, r4, r5
 8006f8c:	10a4      	asrs	r4, r4, #2
 8006f8e:	42a6      	cmp	r6, r4
 8006f90:	d105      	bne.n	8006f9e <__libc_init_array+0x2e>
 8006f92:	bd70      	pop	{r4, r5, r6, pc}
 8006f94:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f98:	4798      	blx	r3
 8006f9a:	3601      	adds	r6, #1
 8006f9c:	e7ee      	b.n	8006f7c <__libc_init_array+0xc>
 8006f9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006fa2:	4798      	blx	r3
 8006fa4:	3601      	adds	r6, #1
 8006fa6:	e7f2      	b.n	8006f8e <__libc_init_array+0x1e>
 8006fa8:	0800a320 	.word	0x0800a320
 8006fac:	0800a320 	.word	0x0800a320
 8006fb0:	0800a320 	.word	0x0800a320
 8006fb4:	0800a324 	.word	0x0800a324

08006fb8 <free>:
 8006fb8:	4b02      	ldr	r3, [pc, #8]	; (8006fc4 <free+0xc>)
 8006fba:	4601      	mov	r1, r0
 8006fbc:	6818      	ldr	r0, [r3, #0]
 8006fbe:	f000 b81f 	b.w	8007000 <_free_r>
 8006fc2:	bf00      	nop
 8006fc4:	20000060 	.word	0x20000060

08006fc8 <memset>:
 8006fc8:	4603      	mov	r3, r0
 8006fca:	4402      	add	r2, r0
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	d100      	bne.n	8006fd2 <memset+0xa>
 8006fd0:	4770      	bx	lr
 8006fd2:	f803 1b01 	strb.w	r1, [r3], #1
 8006fd6:	e7f9      	b.n	8006fcc <memset+0x4>

08006fd8 <_calloc_r>:
 8006fd8:	b570      	push	{r4, r5, r6, lr}
 8006fda:	fba1 5402 	umull	r5, r4, r1, r2
 8006fde:	b934      	cbnz	r4, 8006fee <_calloc_r+0x16>
 8006fe0:	4629      	mov	r1, r5
 8006fe2:	f000 f875 	bl	80070d0 <_malloc_r>
 8006fe6:	4606      	mov	r6, r0
 8006fe8:	b928      	cbnz	r0, 8006ff6 <_calloc_r+0x1e>
 8006fea:	4630      	mov	r0, r6
 8006fec:	bd70      	pop	{r4, r5, r6, pc}
 8006fee:	220c      	movs	r2, #12
 8006ff0:	2600      	movs	r6, #0
 8006ff2:	6002      	str	r2, [r0, #0]
 8006ff4:	e7f9      	b.n	8006fea <_calloc_r+0x12>
 8006ff6:	462a      	mov	r2, r5
 8006ff8:	4621      	mov	r1, r4
 8006ffa:	f7ff ffe5 	bl	8006fc8 <memset>
 8006ffe:	e7f4      	b.n	8006fea <_calloc_r+0x12>

08007000 <_free_r>:
 8007000:	b538      	push	{r3, r4, r5, lr}
 8007002:	4605      	mov	r5, r0
 8007004:	2900      	cmp	r1, #0
 8007006:	d040      	beq.n	800708a <_free_r+0x8a>
 8007008:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800700c:	1f0c      	subs	r4, r1, #4
 800700e:	2b00      	cmp	r3, #0
 8007010:	bfb8      	it	lt
 8007012:	18e4      	addlt	r4, r4, r3
 8007014:	f000 f900 	bl	8007218 <__malloc_lock>
 8007018:	4a1c      	ldr	r2, [pc, #112]	; (800708c <_free_r+0x8c>)
 800701a:	6813      	ldr	r3, [r2, #0]
 800701c:	b933      	cbnz	r3, 800702c <_free_r+0x2c>
 800701e:	6063      	str	r3, [r4, #4]
 8007020:	6014      	str	r4, [r2, #0]
 8007022:	4628      	mov	r0, r5
 8007024:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007028:	f000 b8fc 	b.w	8007224 <__malloc_unlock>
 800702c:	42a3      	cmp	r3, r4
 800702e:	d908      	bls.n	8007042 <_free_r+0x42>
 8007030:	6820      	ldr	r0, [r4, #0]
 8007032:	1821      	adds	r1, r4, r0
 8007034:	428b      	cmp	r3, r1
 8007036:	bf01      	itttt	eq
 8007038:	6819      	ldreq	r1, [r3, #0]
 800703a:	685b      	ldreq	r3, [r3, #4]
 800703c:	1809      	addeq	r1, r1, r0
 800703e:	6021      	streq	r1, [r4, #0]
 8007040:	e7ed      	b.n	800701e <_free_r+0x1e>
 8007042:	461a      	mov	r2, r3
 8007044:	685b      	ldr	r3, [r3, #4]
 8007046:	b10b      	cbz	r3, 800704c <_free_r+0x4c>
 8007048:	42a3      	cmp	r3, r4
 800704a:	d9fa      	bls.n	8007042 <_free_r+0x42>
 800704c:	6811      	ldr	r1, [r2, #0]
 800704e:	1850      	adds	r0, r2, r1
 8007050:	42a0      	cmp	r0, r4
 8007052:	d10b      	bne.n	800706c <_free_r+0x6c>
 8007054:	6820      	ldr	r0, [r4, #0]
 8007056:	4401      	add	r1, r0
 8007058:	1850      	adds	r0, r2, r1
 800705a:	4283      	cmp	r3, r0
 800705c:	6011      	str	r1, [r2, #0]
 800705e:	d1e0      	bne.n	8007022 <_free_r+0x22>
 8007060:	6818      	ldr	r0, [r3, #0]
 8007062:	685b      	ldr	r3, [r3, #4]
 8007064:	4401      	add	r1, r0
 8007066:	6011      	str	r1, [r2, #0]
 8007068:	6053      	str	r3, [r2, #4]
 800706a:	e7da      	b.n	8007022 <_free_r+0x22>
 800706c:	d902      	bls.n	8007074 <_free_r+0x74>
 800706e:	230c      	movs	r3, #12
 8007070:	602b      	str	r3, [r5, #0]
 8007072:	e7d6      	b.n	8007022 <_free_r+0x22>
 8007074:	6820      	ldr	r0, [r4, #0]
 8007076:	1821      	adds	r1, r4, r0
 8007078:	428b      	cmp	r3, r1
 800707a:	bf01      	itttt	eq
 800707c:	6819      	ldreq	r1, [r3, #0]
 800707e:	685b      	ldreq	r3, [r3, #4]
 8007080:	1809      	addeq	r1, r1, r0
 8007082:	6021      	streq	r1, [r4, #0]
 8007084:	6063      	str	r3, [r4, #4]
 8007086:	6054      	str	r4, [r2, #4]
 8007088:	e7cb      	b.n	8007022 <_free_r+0x22>
 800708a:	bd38      	pop	{r3, r4, r5, pc}
 800708c:	20000658 	.word	0x20000658

08007090 <sbrk_aligned>:
 8007090:	b570      	push	{r4, r5, r6, lr}
 8007092:	4e0e      	ldr	r6, [pc, #56]	; (80070cc <sbrk_aligned+0x3c>)
 8007094:	460c      	mov	r4, r1
 8007096:	6831      	ldr	r1, [r6, #0]
 8007098:	4605      	mov	r5, r0
 800709a:	b911      	cbnz	r1, 80070a2 <sbrk_aligned+0x12>
 800709c:	f000 f88c 	bl	80071b8 <_sbrk_r>
 80070a0:	6030      	str	r0, [r6, #0]
 80070a2:	4621      	mov	r1, r4
 80070a4:	4628      	mov	r0, r5
 80070a6:	f000 f887 	bl	80071b8 <_sbrk_r>
 80070aa:	1c43      	adds	r3, r0, #1
 80070ac:	d00a      	beq.n	80070c4 <sbrk_aligned+0x34>
 80070ae:	1cc4      	adds	r4, r0, #3
 80070b0:	f024 0403 	bic.w	r4, r4, #3
 80070b4:	42a0      	cmp	r0, r4
 80070b6:	d007      	beq.n	80070c8 <sbrk_aligned+0x38>
 80070b8:	1a21      	subs	r1, r4, r0
 80070ba:	4628      	mov	r0, r5
 80070bc:	f000 f87c 	bl	80071b8 <_sbrk_r>
 80070c0:	3001      	adds	r0, #1
 80070c2:	d101      	bne.n	80070c8 <sbrk_aligned+0x38>
 80070c4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80070c8:	4620      	mov	r0, r4
 80070ca:	bd70      	pop	{r4, r5, r6, pc}
 80070cc:	2000065c 	.word	0x2000065c

080070d0 <_malloc_r>:
 80070d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070d4:	1ccd      	adds	r5, r1, #3
 80070d6:	f025 0503 	bic.w	r5, r5, #3
 80070da:	3508      	adds	r5, #8
 80070dc:	2d0c      	cmp	r5, #12
 80070de:	bf38      	it	cc
 80070e0:	250c      	movcc	r5, #12
 80070e2:	2d00      	cmp	r5, #0
 80070e4:	4607      	mov	r7, r0
 80070e6:	db01      	blt.n	80070ec <_malloc_r+0x1c>
 80070e8:	42a9      	cmp	r1, r5
 80070ea:	d905      	bls.n	80070f8 <_malloc_r+0x28>
 80070ec:	230c      	movs	r3, #12
 80070ee:	2600      	movs	r6, #0
 80070f0:	603b      	str	r3, [r7, #0]
 80070f2:	4630      	mov	r0, r6
 80070f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80070f8:	4e2e      	ldr	r6, [pc, #184]	; (80071b4 <_malloc_r+0xe4>)
 80070fa:	f000 f88d 	bl	8007218 <__malloc_lock>
 80070fe:	6833      	ldr	r3, [r6, #0]
 8007100:	461c      	mov	r4, r3
 8007102:	bb34      	cbnz	r4, 8007152 <_malloc_r+0x82>
 8007104:	4629      	mov	r1, r5
 8007106:	4638      	mov	r0, r7
 8007108:	f7ff ffc2 	bl	8007090 <sbrk_aligned>
 800710c:	1c43      	adds	r3, r0, #1
 800710e:	4604      	mov	r4, r0
 8007110:	d14d      	bne.n	80071ae <_malloc_r+0xde>
 8007112:	6834      	ldr	r4, [r6, #0]
 8007114:	4626      	mov	r6, r4
 8007116:	2e00      	cmp	r6, #0
 8007118:	d140      	bne.n	800719c <_malloc_r+0xcc>
 800711a:	6823      	ldr	r3, [r4, #0]
 800711c:	4631      	mov	r1, r6
 800711e:	4638      	mov	r0, r7
 8007120:	eb04 0803 	add.w	r8, r4, r3
 8007124:	f000 f848 	bl	80071b8 <_sbrk_r>
 8007128:	4580      	cmp	r8, r0
 800712a:	d13a      	bne.n	80071a2 <_malloc_r+0xd2>
 800712c:	6821      	ldr	r1, [r4, #0]
 800712e:	3503      	adds	r5, #3
 8007130:	1a6d      	subs	r5, r5, r1
 8007132:	f025 0503 	bic.w	r5, r5, #3
 8007136:	3508      	adds	r5, #8
 8007138:	2d0c      	cmp	r5, #12
 800713a:	bf38      	it	cc
 800713c:	250c      	movcc	r5, #12
 800713e:	4638      	mov	r0, r7
 8007140:	4629      	mov	r1, r5
 8007142:	f7ff ffa5 	bl	8007090 <sbrk_aligned>
 8007146:	3001      	adds	r0, #1
 8007148:	d02b      	beq.n	80071a2 <_malloc_r+0xd2>
 800714a:	6823      	ldr	r3, [r4, #0]
 800714c:	442b      	add	r3, r5
 800714e:	6023      	str	r3, [r4, #0]
 8007150:	e00e      	b.n	8007170 <_malloc_r+0xa0>
 8007152:	6822      	ldr	r2, [r4, #0]
 8007154:	1b52      	subs	r2, r2, r5
 8007156:	d41e      	bmi.n	8007196 <_malloc_r+0xc6>
 8007158:	2a0b      	cmp	r2, #11
 800715a:	d916      	bls.n	800718a <_malloc_r+0xba>
 800715c:	1961      	adds	r1, r4, r5
 800715e:	42a3      	cmp	r3, r4
 8007160:	6025      	str	r5, [r4, #0]
 8007162:	bf18      	it	ne
 8007164:	6059      	strne	r1, [r3, #4]
 8007166:	6863      	ldr	r3, [r4, #4]
 8007168:	bf08      	it	eq
 800716a:	6031      	streq	r1, [r6, #0]
 800716c:	5162      	str	r2, [r4, r5]
 800716e:	604b      	str	r3, [r1, #4]
 8007170:	4638      	mov	r0, r7
 8007172:	f104 060b 	add.w	r6, r4, #11
 8007176:	f000 f855 	bl	8007224 <__malloc_unlock>
 800717a:	f026 0607 	bic.w	r6, r6, #7
 800717e:	1d23      	adds	r3, r4, #4
 8007180:	1af2      	subs	r2, r6, r3
 8007182:	d0b6      	beq.n	80070f2 <_malloc_r+0x22>
 8007184:	1b9b      	subs	r3, r3, r6
 8007186:	50a3      	str	r3, [r4, r2]
 8007188:	e7b3      	b.n	80070f2 <_malloc_r+0x22>
 800718a:	6862      	ldr	r2, [r4, #4]
 800718c:	42a3      	cmp	r3, r4
 800718e:	bf0c      	ite	eq
 8007190:	6032      	streq	r2, [r6, #0]
 8007192:	605a      	strne	r2, [r3, #4]
 8007194:	e7ec      	b.n	8007170 <_malloc_r+0xa0>
 8007196:	4623      	mov	r3, r4
 8007198:	6864      	ldr	r4, [r4, #4]
 800719a:	e7b2      	b.n	8007102 <_malloc_r+0x32>
 800719c:	4634      	mov	r4, r6
 800719e:	6876      	ldr	r6, [r6, #4]
 80071a0:	e7b9      	b.n	8007116 <_malloc_r+0x46>
 80071a2:	230c      	movs	r3, #12
 80071a4:	4638      	mov	r0, r7
 80071a6:	603b      	str	r3, [r7, #0]
 80071a8:	f000 f83c 	bl	8007224 <__malloc_unlock>
 80071ac:	e7a1      	b.n	80070f2 <_malloc_r+0x22>
 80071ae:	6025      	str	r5, [r4, #0]
 80071b0:	e7de      	b.n	8007170 <_malloc_r+0xa0>
 80071b2:	bf00      	nop
 80071b4:	20000658 	.word	0x20000658

080071b8 <_sbrk_r>:
 80071b8:	b538      	push	{r3, r4, r5, lr}
 80071ba:	2300      	movs	r3, #0
 80071bc:	4d05      	ldr	r5, [pc, #20]	; (80071d4 <_sbrk_r+0x1c>)
 80071be:	4604      	mov	r4, r0
 80071c0:	4608      	mov	r0, r1
 80071c2:	602b      	str	r3, [r5, #0]
 80071c4:	f7fb fdb2 	bl	8002d2c <_sbrk>
 80071c8:	1c43      	adds	r3, r0, #1
 80071ca:	d102      	bne.n	80071d2 <_sbrk_r+0x1a>
 80071cc:	682b      	ldr	r3, [r5, #0]
 80071ce:	b103      	cbz	r3, 80071d2 <_sbrk_r+0x1a>
 80071d0:	6023      	str	r3, [r4, #0]
 80071d2:	bd38      	pop	{r3, r4, r5, pc}
 80071d4:	20000660 	.word	0x20000660

080071d8 <siprintf>:
 80071d8:	b40e      	push	{r1, r2, r3}
 80071da:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80071de:	b500      	push	{lr}
 80071e0:	b09c      	sub	sp, #112	; 0x70
 80071e2:	ab1d      	add	r3, sp, #116	; 0x74
 80071e4:	9002      	str	r0, [sp, #8]
 80071e6:	9006      	str	r0, [sp, #24]
 80071e8:	9107      	str	r1, [sp, #28]
 80071ea:	9104      	str	r1, [sp, #16]
 80071ec:	4808      	ldr	r0, [pc, #32]	; (8007210 <siprintf+0x38>)
 80071ee:	4909      	ldr	r1, [pc, #36]	; (8007214 <siprintf+0x3c>)
 80071f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80071f4:	9105      	str	r1, [sp, #20]
 80071f6:	6800      	ldr	r0, [r0, #0]
 80071f8:	a902      	add	r1, sp, #8
 80071fa:	9301      	str	r3, [sp, #4]
 80071fc:	f000 f874 	bl	80072e8 <_svfiprintf_r>
 8007200:	2200      	movs	r2, #0
 8007202:	9b02      	ldr	r3, [sp, #8]
 8007204:	701a      	strb	r2, [r3, #0]
 8007206:	b01c      	add	sp, #112	; 0x70
 8007208:	f85d eb04 	ldr.w	lr, [sp], #4
 800720c:	b003      	add	sp, #12
 800720e:	4770      	bx	lr
 8007210:	20000060 	.word	0x20000060
 8007214:	ffff0208 	.word	0xffff0208

08007218 <__malloc_lock>:
 8007218:	4801      	ldr	r0, [pc, #4]	; (8007220 <__malloc_lock+0x8>)
 800721a:	f000 bafb 	b.w	8007814 <__retarget_lock_acquire_recursive>
 800721e:	bf00      	nop
 8007220:	20000664 	.word	0x20000664

08007224 <__malloc_unlock>:
 8007224:	4801      	ldr	r0, [pc, #4]	; (800722c <__malloc_unlock+0x8>)
 8007226:	f000 baf6 	b.w	8007816 <__retarget_lock_release_recursive>
 800722a:	bf00      	nop
 800722c:	20000664 	.word	0x20000664

08007230 <__ssputs_r>:
 8007230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007234:	688e      	ldr	r6, [r1, #8]
 8007236:	4682      	mov	sl, r0
 8007238:	429e      	cmp	r6, r3
 800723a:	460c      	mov	r4, r1
 800723c:	4690      	mov	r8, r2
 800723e:	461f      	mov	r7, r3
 8007240:	d838      	bhi.n	80072b4 <__ssputs_r+0x84>
 8007242:	898a      	ldrh	r2, [r1, #12]
 8007244:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007248:	d032      	beq.n	80072b0 <__ssputs_r+0x80>
 800724a:	6825      	ldr	r5, [r4, #0]
 800724c:	6909      	ldr	r1, [r1, #16]
 800724e:	3301      	adds	r3, #1
 8007250:	eba5 0901 	sub.w	r9, r5, r1
 8007254:	6965      	ldr	r5, [r4, #20]
 8007256:	444b      	add	r3, r9
 8007258:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800725c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007260:	106d      	asrs	r5, r5, #1
 8007262:	429d      	cmp	r5, r3
 8007264:	bf38      	it	cc
 8007266:	461d      	movcc	r5, r3
 8007268:	0553      	lsls	r3, r2, #21
 800726a:	d531      	bpl.n	80072d0 <__ssputs_r+0xa0>
 800726c:	4629      	mov	r1, r5
 800726e:	f7ff ff2f 	bl	80070d0 <_malloc_r>
 8007272:	4606      	mov	r6, r0
 8007274:	b950      	cbnz	r0, 800728c <__ssputs_r+0x5c>
 8007276:	230c      	movs	r3, #12
 8007278:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800727c:	f8ca 3000 	str.w	r3, [sl]
 8007280:	89a3      	ldrh	r3, [r4, #12]
 8007282:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007286:	81a3      	strh	r3, [r4, #12]
 8007288:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800728c:	464a      	mov	r2, r9
 800728e:	6921      	ldr	r1, [r4, #16]
 8007290:	f000 fad0 	bl	8007834 <memcpy>
 8007294:	89a3      	ldrh	r3, [r4, #12]
 8007296:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800729a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800729e:	81a3      	strh	r3, [r4, #12]
 80072a0:	6126      	str	r6, [r4, #16]
 80072a2:	444e      	add	r6, r9
 80072a4:	6026      	str	r6, [r4, #0]
 80072a6:	463e      	mov	r6, r7
 80072a8:	6165      	str	r5, [r4, #20]
 80072aa:	eba5 0509 	sub.w	r5, r5, r9
 80072ae:	60a5      	str	r5, [r4, #8]
 80072b0:	42be      	cmp	r6, r7
 80072b2:	d900      	bls.n	80072b6 <__ssputs_r+0x86>
 80072b4:	463e      	mov	r6, r7
 80072b6:	4632      	mov	r2, r6
 80072b8:	4641      	mov	r1, r8
 80072ba:	6820      	ldr	r0, [r4, #0]
 80072bc:	f000 fac8 	bl	8007850 <memmove>
 80072c0:	68a3      	ldr	r3, [r4, #8]
 80072c2:	2000      	movs	r0, #0
 80072c4:	1b9b      	subs	r3, r3, r6
 80072c6:	60a3      	str	r3, [r4, #8]
 80072c8:	6823      	ldr	r3, [r4, #0]
 80072ca:	4433      	add	r3, r6
 80072cc:	6023      	str	r3, [r4, #0]
 80072ce:	e7db      	b.n	8007288 <__ssputs_r+0x58>
 80072d0:	462a      	mov	r2, r5
 80072d2:	f000 fad7 	bl	8007884 <_realloc_r>
 80072d6:	4606      	mov	r6, r0
 80072d8:	2800      	cmp	r0, #0
 80072da:	d1e1      	bne.n	80072a0 <__ssputs_r+0x70>
 80072dc:	4650      	mov	r0, sl
 80072de:	6921      	ldr	r1, [r4, #16]
 80072e0:	f7ff fe8e 	bl	8007000 <_free_r>
 80072e4:	e7c7      	b.n	8007276 <__ssputs_r+0x46>
	...

080072e8 <_svfiprintf_r>:
 80072e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072ec:	4698      	mov	r8, r3
 80072ee:	898b      	ldrh	r3, [r1, #12]
 80072f0:	4607      	mov	r7, r0
 80072f2:	061b      	lsls	r3, r3, #24
 80072f4:	460d      	mov	r5, r1
 80072f6:	4614      	mov	r4, r2
 80072f8:	b09d      	sub	sp, #116	; 0x74
 80072fa:	d50e      	bpl.n	800731a <_svfiprintf_r+0x32>
 80072fc:	690b      	ldr	r3, [r1, #16]
 80072fe:	b963      	cbnz	r3, 800731a <_svfiprintf_r+0x32>
 8007300:	2140      	movs	r1, #64	; 0x40
 8007302:	f7ff fee5 	bl	80070d0 <_malloc_r>
 8007306:	6028      	str	r0, [r5, #0]
 8007308:	6128      	str	r0, [r5, #16]
 800730a:	b920      	cbnz	r0, 8007316 <_svfiprintf_r+0x2e>
 800730c:	230c      	movs	r3, #12
 800730e:	603b      	str	r3, [r7, #0]
 8007310:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007314:	e0d1      	b.n	80074ba <_svfiprintf_r+0x1d2>
 8007316:	2340      	movs	r3, #64	; 0x40
 8007318:	616b      	str	r3, [r5, #20]
 800731a:	2300      	movs	r3, #0
 800731c:	9309      	str	r3, [sp, #36]	; 0x24
 800731e:	2320      	movs	r3, #32
 8007320:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007324:	2330      	movs	r3, #48	; 0x30
 8007326:	f04f 0901 	mov.w	r9, #1
 800732a:	f8cd 800c 	str.w	r8, [sp, #12]
 800732e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80074d4 <_svfiprintf_r+0x1ec>
 8007332:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007336:	4623      	mov	r3, r4
 8007338:	469a      	mov	sl, r3
 800733a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800733e:	b10a      	cbz	r2, 8007344 <_svfiprintf_r+0x5c>
 8007340:	2a25      	cmp	r2, #37	; 0x25
 8007342:	d1f9      	bne.n	8007338 <_svfiprintf_r+0x50>
 8007344:	ebba 0b04 	subs.w	fp, sl, r4
 8007348:	d00b      	beq.n	8007362 <_svfiprintf_r+0x7a>
 800734a:	465b      	mov	r3, fp
 800734c:	4622      	mov	r2, r4
 800734e:	4629      	mov	r1, r5
 8007350:	4638      	mov	r0, r7
 8007352:	f7ff ff6d 	bl	8007230 <__ssputs_r>
 8007356:	3001      	adds	r0, #1
 8007358:	f000 80aa 	beq.w	80074b0 <_svfiprintf_r+0x1c8>
 800735c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800735e:	445a      	add	r2, fp
 8007360:	9209      	str	r2, [sp, #36]	; 0x24
 8007362:	f89a 3000 	ldrb.w	r3, [sl]
 8007366:	2b00      	cmp	r3, #0
 8007368:	f000 80a2 	beq.w	80074b0 <_svfiprintf_r+0x1c8>
 800736c:	2300      	movs	r3, #0
 800736e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007372:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007376:	f10a 0a01 	add.w	sl, sl, #1
 800737a:	9304      	str	r3, [sp, #16]
 800737c:	9307      	str	r3, [sp, #28]
 800737e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007382:	931a      	str	r3, [sp, #104]	; 0x68
 8007384:	4654      	mov	r4, sl
 8007386:	2205      	movs	r2, #5
 8007388:	f814 1b01 	ldrb.w	r1, [r4], #1
 800738c:	4851      	ldr	r0, [pc, #324]	; (80074d4 <_svfiprintf_r+0x1ec>)
 800738e:	f000 fa43 	bl	8007818 <memchr>
 8007392:	9a04      	ldr	r2, [sp, #16]
 8007394:	b9d8      	cbnz	r0, 80073ce <_svfiprintf_r+0xe6>
 8007396:	06d0      	lsls	r0, r2, #27
 8007398:	bf44      	itt	mi
 800739a:	2320      	movmi	r3, #32
 800739c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80073a0:	0711      	lsls	r1, r2, #28
 80073a2:	bf44      	itt	mi
 80073a4:	232b      	movmi	r3, #43	; 0x2b
 80073a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80073aa:	f89a 3000 	ldrb.w	r3, [sl]
 80073ae:	2b2a      	cmp	r3, #42	; 0x2a
 80073b0:	d015      	beq.n	80073de <_svfiprintf_r+0xf6>
 80073b2:	4654      	mov	r4, sl
 80073b4:	2000      	movs	r0, #0
 80073b6:	f04f 0c0a 	mov.w	ip, #10
 80073ba:	9a07      	ldr	r2, [sp, #28]
 80073bc:	4621      	mov	r1, r4
 80073be:	f811 3b01 	ldrb.w	r3, [r1], #1
 80073c2:	3b30      	subs	r3, #48	; 0x30
 80073c4:	2b09      	cmp	r3, #9
 80073c6:	d94e      	bls.n	8007466 <_svfiprintf_r+0x17e>
 80073c8:	b1b0      	cbz	r0, 80073f8 <_svfiprintf_r+0x110>
 80073ca:	9207      	str	r2, [sp, #28]
 80073cc:	e014      	b.n	80073f8 <_svfiprintf_r+0x110>
 80073ce:	eba0 0308 	sub.w	r3, r0, r8
 80073d2:	fa09 f303 	lsl.w	r3, r9, r3
 80073d6:	4313      	orrs	r3, r2
 80073d8:	46a2      	mov	sl, r4
 80073da:	9304      	str	r3, [sp, #16]
 80073dc:	e7d2      	b.n	8007384 <_svfiprintf_r+0x9c>
 80073de:	9b03      	ldr	r3, [sp, #12]
 80073e0:	1d19      	adds	r1, r3, #4
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	9103      	str	r1, [sp, #12]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	bfbb      	ittet	lt
 80073ea:	425b      	neglt	r3, r3
 80073ec:	f042 0202 	orrlt.w	r2, r2, #2
 80073f0:	9307      	strge	r3, [sp, #28]
 80073f2:	9307      	strlt	r3, [sp, #28]
 80073f4:	bfb8      	it	lt
 80073f6:	9204      	strlt	r2, [sp, #16]
 80073f8:	7823      	ldrb	r3, [r4, #0]
 80073fa:	2b2e      	cmp	r3, #46	; 0x2e
 80073fc:	d10c      	bne.n	8007418 <_svfiprintf_r+0x130>
 80073fe:	7863      	ldrb	r3, [r4, #1]
 8007400:	2b2a      	cmp	r3, #42	; 0x2a
 8007402:	d135      	bne.n	8007470 <_svfiprintf_r+0x188>
 8007404:	9b03      	ldr	r3, [sp, #12]
 8007406:	3402      	adds	r4, #2
 8007408:	1d1a      	adds	r2, r3, #4
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	9203      	str	r2, [sp, #12]
 800740e:	2b00      	cmp	r3, #0
 8007410:	bfb8      	it	lt
 8007412:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007416:	9305      	str	r3, [sp, #20]
 8007418:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80074d8 <_svfiprintf_r+0x1f0>
 800741c:	2203      	movs	r2, #3
 800741e:	4650      	mov	r0, sl
 8007420:	7821      	ldrb	r1, [r4, #0]
 8007422:	f000 f9f9 	bl	8007818 <memchr>
 8007426:	b140      	cbz	r0, 800743a <_svfiprintf_r+0x152>
 8007428:	2340      	movs	r3, #64	; 0x40
 800742a:	eba0 000a 	sub.w	r0, r0, sl
 800742e:	fa03 f000 	lsl.w	r0, r3, r0
 8007432:	9b04      	ldr	r3, [sp, #16]
 8007434:	3401      	adds	r4, #1
 8007436:	4303      	orrs	r3, r0
 8007438:	9304      	str	r3, [sp, #16]
 800743a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800743e:	2206      	movs	r2, #6
 8007440:	4826      	ldr	r0, [pc, #152]	; (80074dc <_svfiprintf_r+0x1f4>)
 8007442:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007446:	f000 f9e7 	bl	8007818 <memchr>
 800744a:	2800      	cmp	r0, #0
 800744c:	d038      	beq.n	80074c0 <_svfiprintf_r+0x1d8>
 800744e:	4b24      	ldr	r3, [pc, #144]	; (80074e0 <_svfiprintf_r+0x1f8>)
 8007450:	bb1b      	cbnz	r3, 800749a <_svfiprintf_r+0x1b2>
 8007452:	9b03      	ldr	r3, [sp, #12]
 8007454:	3307      	adds	r3, #7
 8007456:	f023 0307 	bic.w	r3, r3, #7
 800745a:	3308      	adds	r3, #8
 800745c:	9303      	str	r3, [sp, #12]
 800745e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007460:	4433      	add	r3, r6
 8007462:	9309      	str	r3, [sp, #36]	; 0x24
 8007464:	e767      	b.n	8007336 <_svfiprintf_r+0x4e>
 8007466:	460c      	mov	r4, r1
 8007468:	2001      	movs	r0, #1
 800746a:	fb0c 3202 	mla	r2, ip, r2, r3
 800746e:	e7a5      	b.n	80073bc <_svfiprintf_r+0xd4>
 8007470:	2300      	movs	r3, #0
 8007472:	f04f 0c0a 	mov.w	ip, #10
 8007476:	4619      	mov	r1, r3
 8007478:	3401      	adds	r4, #1
 800747a:	9305      	str	r3, [sp, #20]
 800747c:	4620      	mov	r0, r4
 800747e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007482:	3a30      	subs	r2, #48	; 0x30
 8007484:	2a09      	cmp	r2, #9
 8007486:	d903      	bls.n	8007490 <_svfiprintf_r+0x1a8>
 8007488:	2b00      	cmp	r3, #0
 800748a:	d0c5      	beq.n	8007418 <_svfiprintf_r+0x130>
 800748c:	9105      	str	r1, [sp, #20]
 800748e:	e7c3      	b.n	8007418 <_svfiprintf_r+0x130>
 8007490:	4604      	mov	r4, r0
 8007492:	2301      	movs	r3, #1
 8007494:	fb0c 2101 	mla	r1, ip, r1, r2
 8007498:	e7f0      	b.n	800747c <_svfiprintf_r+0x194>
 800749a:	ab03      	add	r3, sp, #12
 800749c:	9300      	str	r3, [sp, #0]
 800749e:	462a      	mov	r2, r5
 80074a0:	4638      	mov	r0, r7
 80074a2:	4b10      	ldr	r3, [pc, #64]	; (80074e4 <_svfiprintf_r+0x1fc>)
 80074a4:	a904      	add	r1, sp, #16
 80074a6:	f3af 8000 	nop.w
 80074aa:	1c42      	adds	r2, r0, #1
 80074ac:	4606      	mov	r6, r0
 80074ae:	d1d6      	bne.n	800745e <_svfiprintf_r+0x176>
 80074b0:	89ab      	ldrh	r3, [r5, #12]
 80074b2:	065b      	lsls	r3, r3, #25
 80074b4:	f53f af2c 	bmi.w	8007310 <_svfiprintf_r+0x28>
 80074b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80074ba:	b01d      	add	sp, #116	; 0x74
 80074bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074c0:	ab03      	add	r3, sp, #12
 80074c2:	9300      	str	r3, [sp, #0]
 80074c4:	462a      	mov	r2, r5
 80074c6:	4638      	mov	r0, r7
 80074c8:	4b06      	ldr	r3, [pc, #24]	; (80074e4 <_svfiprintf_r+0x1fc>)
 80074ca:	a904      	add	r1, sp, #16
 80074cc:	f000 f87c 	bl	80075c8 <_printf_i>
 80074d0:	e7eb      	b.n	80074aa <_svfiprintf_r+0x1c2>
 80074d2:	bf00      	nop
 80074d4:	0800a2ec 	.word	0x0800a2ec
 80074d8:	0800a2f2 	.word	0x0800a2f2
 80074dc:	0800a2f6 	.word	0x0800a2f6
 80074e0:	00000000 	.word	0x00000000
 80074e4:	08007231 	.word	0x08007231

080074e8 <_printf_common>:
 80074e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80074ec:	4616      	mov	r6, r2
 80074ee:	4699      	mov	r9, r3
 80074f0:	688a      	ldr	r2, [r1, #8]
 80074f2:	690b      	ldr	r3, [r1, #16]
 80074f4:	4607      	mov	r7, r0
 80074f6:	4293      	cmp	r3, r2
 80074f8:	bfb8      	it	lt
 80074fa:	4613      	movlt	r3, r2
 80074fc:	6033      	str	r3, [r6, #0]
 80074fe:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007502:	460c      	mov	r4, r1
 8007504:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007508:	b10a      	cbz	r2, 800750e <_printf_common+0x26>
 800750a:	3301      	adds	r3, #1
 800750c:	6033      	str	r3, [r6, #0]
 800750e:	6823      	ldr	r3, [r4, #0]
 8007510:	0699      	lsls	r1, r3, #26
 8007512:	bf42      	ittt	mi
 8007514:	6833      	ldrmi	r3, [r6, #0]
 8007516:	3302      	addmi	r3, #2
 8007518:	6033      	strmi	r3, [r6, #0]
 800751a:	6825      	ldr	r5, [r4, #0]
 800751c:	f015 0506 	ands.w	r5, r5, #6
 8007520:	d106      	bne.n	8007530 <_printf_common+0x48>
 8007522:	f104 0a19 	add.w	sl, r4, #25
 8007526:	68e3      	ldr	r3, [r4, #12]
 8007528:	6832      	ldr	r2, [r6, #0]
 800752a:	1a9b      	subs	r3, r3, r2
 800752c:	42ab      	cmp	r3, r5
 800752e:	dc28      	bgt.n	8007582 <_printf_common+0x9a>
 8007530:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007534:	1e13      	subs	r3, r2, #0
 8007536:	6822      	ldr	r2, [r4, #0]
 8007538:	bf18      	it	ne
 800753a:	2301      	movne	r3, #1
 800753c:	0692      	lsls	r2, r2, #26
 800753e:	d42d      	bmi.n	800759c <_printf_common+0xb4>
 8007540:	4649      	mov	r1, r9
 8007542:	4638      	mov	r0, r7
 8007544:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007548:	47c0      	blx	r8
 800754a:	3001      	adds	r0, #1
 800754c:	d020      	beq.n	8007590 <_printf_common+0xa8>
 800754e:	6823      	ldr	r3, [r4, #0]
 8007550:	68e5      	ldr	r5, [r4, #12]
 8007552:	f003 0306 	and.w	r3, r3, #6
 8007556:	2b04      	cmp	r3, #4
 8007558:	bf18      	it	ne
 800755a:	2500      	movne	r5, #0
 800755c:	6832      	ldr	r2, [r6, #0]
 800755e:	f04f 0600 	mov.w	r6, #0
 8007562:	68a3      	ldr	r3, [r4, #8]
 8007564:	bf08      	it	eq
 8007566:	1aad      	subeq	r5, r5, r2
 8007568:	6922      	ldr	r2, [r4, #16]
 800756a:	bf08      	it	eq
 800756c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007570:	4293      	cmp	r3, r2
 8007572:	bfc4      	itt	gt
 8007574:	1a9b      	subgt	r3, r3, r2
 8007576:	18ed      	addgt	r5, r5, r3
 8007578:	341a      	adds	r4, #26
 800757a:	42b5      	cmp	r5, r6
 800757c:	d11a      	bne.n	80075b4 <_printf_common+0xcc>
 800757e:	2000      	movs	r0, #0
 8007580:	e008      	b.n	8007594 <_printf_common+0xac>
 8007582:	2301      	movs	r3, #1
 8007584:	4652      	mov	r2, sl
 8007586:	4649      	mov	r1, r9
 8007588:	4638      	mov	r0, r7
 800758a:	47c0      	blx	r8
 800758c:	3001      	adds	r0, #1
 800758e:	d103      	bne.n	8007598 <_printf_common+0xb0>
 8007590:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007594:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007598:	3501      	adds	r5, #1
 800759a:	e7c4      	b.n	8007526 <_printf_common+0x3e>
 800759c:	2030      	movs	r0, #48	; 0x30
 800759e:	18e1      	adds	r1, r4, r3
 80075a0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80075a4:	1c5a      	adds	r2, r3, #1
 80075a6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80075aa:	4422      	add	r2, r4
 80075ac:	3302      	adds	r3, #2
 80075ae:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80075b2:	e7c5      	b.n	8007540 <_printf_common+0x58>
 80075b4:	2301      	movs	r3, #1
 80075b6:	4622      	mov	r2, r4
 80075b8:	4649      	mov	r1, r9
 80075ba:	4638      	mov	r0, r7
 80075bc:	47c0      	blx	r8
 80075be:	3001      	adds	r0, #1
 80075c0:	d0e6      	beq.n	8007590 <_printf_common+0xa8>
 80075c2:	3601      	adds	r6, #1
 80075c4:	e7d9      	b.n	800757a <_printf_common+0x92>
	...

080075c8 <_printf_i>:
 80075c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80075cc:	7e0f      	ldrb	r7, [r1, #24]
 80075ce:	4691      	mov	r9, r2
 80075d0:	2f78      	cmp	r7, #120	; 0x78
 80075d2:	4680      	mov	r8, r0
 80075d4:	460c      	mov	r4, r1
 80075d6:	469a      	mov	sl, r3
 80075d8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80075da:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80075de:	d807      	bhi.n	80075f0 <_printf_i+0x28>
 80075e0:	2f62      	cmp	r7, #98	; 0x62
 80075e2:	d80a      	bhi.n	80075fa <_printf_i+0x32>
 80075e4:	2f00      	cmp	r7, #0
 80075e6:	f000 80d9 	beq.w	800779c <_printf_i+0x1d4>
 80075ea:	2f58      	cmp	r7, #88	; 0x58
 80075ec:	f000 80a4 	beq.w	8007738 <_printf_i+0x170>
 80075f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80075f4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80075f8:	e03a      	b.n	8007670 <_printf_i+0xa8>
 80075fa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80075fe:	2b15      	cmp	r3, #21
 8007600:	d8f6      	bhi.n	80075f0 <_printf_i+0x28>
 8007602:	a101      	add	r1, pc, #4	; (adr r1, 8007608 <_printf_i+0x40>)
 8007604:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007608:	08007661 	.word	0x08007661
 800760c:	08007675 	.word	0x08007675
 8007610:	080075f1 	.word	0x080075f1
 8007614:	080075f1 	.word	0x080075f1
 8007618:	080075f1 	.word	0x080075f1
 800761c:	080075f1 	.word	0x080075f1
 8007620:	08007675 	.word	0x08007675
 8007624:	080075f1 	.word	0x080075f1
 8007628:	080075f1 	.word	0x080075f1
 800762c:	080075f1 	.word	0x080075f1
 8007630:	080075f1 	.word	0x080075f1
 8007634:	08007783 	.word	0x08007783
 8007638:	080076a5 	.word	0x080076a5
 800763c:	08007765 	.word	0x08007765
 8007640:	080075f1 	.word	0x080075f1
 8007644:	080075f1 	.word	0x080075f1
 8007648:	080077a5 	.word	0x080077a5
 800764c:	080075f1 	.word	0x080075f1
 8007650:	080076a5 	.word	0x080076a5
 8007654:	080075f1 	.word	0x080075f1
 8007658:	080075f1 	.word	0x080075f1
 800765c:	0800776d 	.word	0x0800776d
 8007660:	682b      	ldr	r3, [r5, #0]
 8007662:	1d1a      	adds	r2, r3, #4
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	602a      	str	r2, [r5, #0]
 8007668:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800766c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007670:	2301      	movs	r3, #1
 8007672:	e0a4      	b.n	80077be <_printf_i+0x1f6>
 8007674:	6820      	ldr	r0, [r4, #0]
 8007676:	6829      	ldr	r1, [r5, #0]
 8007678:	0606      	lsls	r6, r0, #24
 800767a:	f101 0304 	add.w	r3, r1, #4
 800767e:	d50a      	bpl.n	8007696 <_printf_i+0xce>
 8007680:	680e      	ldr	r6, [r1, #0]
 8007682:	602b      	str	r3, [r5, #0]
 8007684:	2e00      	cmp	r6, #0
 8007686:	da03      	bge.n	8007690 <_printf_i+0xc8>
 8007688:	232d      	movs	r3, #45	; 0x2d
 800768a:	4276      	negs	r6, r6
 800768c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007690:	230a      	movs	r3, #10
 8007692:	485e      	ldr	r0, [pc, #376]	; (800780c <_printf_i+0x244>)
 8007694:	e019      	b.n	80076ca <_printf_i+0x102>
 8007696:	680e      	ldr	r6, [r1, #0]
 8007698:	f010 0f40 	tst.w	r0, #64	; 0x40
 800769c:	602b      	str	r3, [r5, #0]
 800769e:	bf18      	it	ne
 80076a0:	b236      	sxthne	r6, r6
 80076a2:	e7ef      	b.n	8007684 <_printf_i+0xbc>
 80076a4:	682b      	ldr	r3, [r5, #0]
 80076a6:	6820      	ldr	r0, [r4, #0]
 80076a8:	1d19      	adds	r1, r3, #4
 80076aa:	6029      	str	r1, [r5, #0]
 80076ac:	0601      	lsls	r1, r0, #24
 80076ae:	d501      	bpl.n	80076b4 <_printf_i+0xec>
 80076b0:	681e      	ldr	r6, [r3, #0]
 80076b2:	e002      	b.n	80076ba <_printf_i+0xf2>
 80076b4:	0646      	lsls	r6, r0, #25
 80076b6:	d5fb      	bpl.n	80076b0 <_printf_i+0xe8>
 80076b8:	881e      	ldrh	r6, [r3, #0]
 80076ba:	2f6f      	cmp	r7, #111	; 0x6f
 80076bc:	bf0c      	ite	eq
 80076be:	2308      	moveq	r3, #8
 80076c0:	230a      	movne	r3, #10
 80076c2:	4852      	ldr	r0, [pc, #328]	; (800780c <_printf_i+0x244>)
 80076c4:	2100      	movs	r1, #0
 80076c6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80076ca:	6865      	ldr	r5, [r4, #4]
 80076cc:	2d00      	cmp	r5, #0
 80076ce:	bfa8      	it	ge
 80076d0:	6821      	ldrge	r1, [r4, #0]
 80076d2:	60a5      	str	r5, [r4, #8]
 80076d4:	bfa4      	itt	ge
 80076d6:	f021 0104 	bicge.w	r1, r1, #4
 80076da:	6021      	strge	r1, [r4, #0]
 80076dc:	b90e      	cbnz	r6, 80076e2 <_printf_i+0x11a>
 80076de:	2d00      	cmp	r5, #0
 80076e0:	d04d      	beq.n	800777e <_printf_i+0x1b6>
 80076e2:	4615      	mov	r5, r2
 80076e4:	fbb6 f1f3 	udiv	r1, r6, r3
 80076e8:	fb03 6711 	mls	r7, r3, r1, r6
 80076ec:	5dc7      	ldrb	r7, [r0, r7]
 80076ee:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80076f2:	4637      	mov	r7, r6
 80076f4:	42bb      	cmp	r3, r7
 80076f6:	460e      	mov	r6, r1
 80076f8:	d9f4      	bls.n	80076e4 <_printf_i+0x11c>
 80076fa:	2b08      	cmp	r3, #8
 80076fc:	d10b      	bne.n	8007716 <_printf_i+0x14e>
 80076fe:	6823      	ldr	r3, [r4, #0]
 8007700:	07de      	lsls	r6, r3, #31
 8007702:	d508      	bpl.n	8007716 <_printf_i+0x14e>
 8007704:	6923      	ldr	r3, [r4, #16]
 8007706:	6861      	ldr	r1, [r4, #4]
 8007708:	4299      	cmp	r1, r3
 800770a:	bfde      	ittt	le
 800770c:	2330      	movle	r3, #48	; 0x30
 800770e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007712:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8007716:	1b52      	subs	r2, r2, r5
 8007718:	6122      	str	r2, [r4, #16]
 800771a:	464b      	mov	r3, r9
 800771c:	4621      	mov	r1, r4
 800771e:	4640      	mov	r0, r8
 8007720:	f8cd a000 	str.w	sl, [sp]
 8007724:	aa03      	add	r2, sp, #12
 8007726:	f7ff fedf 	bl	80074e8 <_printf_common>
 800772a:	3001      	adds	r0, #1
 800772c:	d14c      	bne.n	80077c8 <_printf_i+0x200>
 800772e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007732:	b004      	add	sp, #16
 8007734:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007738:	4834      	ldr	r0, [pc, #208]	; (800780c <_printf_i+0x244>)
 800773a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800773e:	6829      	ldr	r1, [r5, #0]
 8007740:	6823      	ldr	r3, [r4, #0]
 8007742:	f851 6b04 	ldr.w	r6, [r1], #4
 8007746:	6029      	str	r1, [r5, #0]
 8007748:	061d      	lsls	r5, r3, #24
 800774a:	d514      	bpl.n	8007776 <_printf_i+0x1ae>
 800774c:	07df      	lsls	r7, r3, #31
 800774e:	bf44      	itt	mi
 8007750:	f043 0320 	orrmi.w	r3, r3, #32
 8007754:	6023      	strmi	r3, [r4, #0]
 8007756:	b91e      	cbnz	r6, 8007760 <_printf_i+0x198>
 8007758:	6823      	ldr	r3, [r4, #0]
 800775a:	f023 0320 	bic.w	r3, r3, #32
 800775e:	6023      	str	r3, [r4, #0]
 8007760:	2310      	movs	r3, #16
 8007762:	e7af      	b.n	80076c4 <_printf_i+0xfc>
 8007764:	6823      	ldr	r3, [r4, #0]
 8007766:	f043 0320 	orr.w	r3, r3, #32
 800776a:	6023      	str	r3, [r4, #0]
 800776c:	2378      	movs	r3, #120	; 0x78
 800776e:	4828      	ldr	r0, [pc, #160]	; (8007810 <_printf_i+0x248>)
 8007770:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007774:	e7e3      	b.n	800773e <_printf_i+0x176>
 8007776:	0659      	lsls	r1, r3, #25
 8007778:	bf48      	it	mi
 800777a:	b2b6      	uxthmi	r6, r6
 800777c:	e7e6      	b.n	800774c <_printf_i+0x184>
 800777e:	4615      	mov	r5, r2
 8007780:	e7bb      	b.n	80076fa <_printf_i+0x132>
 8007782:	682b      	ldr	r3, [r5, #0]
 8007784:	6826      	ldr	r6, [r4, #0]
 8007786:	1d18      	adds	r0, r3, #4
 8007788:	6961      	ldr	r1, [r4, #20]
 800778a:	6028      	str	r0, [r5, #0]
 800778c:	0635      	lsls	r5, r6, #24
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	d501      	bpl.n	8007796 <_printf_i+0x1ce>
 8007792:	6019      	str	r1, [r3, #0]
 8007794:	e002      	b.n	800779c <_printf_i+0x1d4>
 8007796:	0670      	lsls	r0, r6, #25
 8007798:	d5fb      	bpl.n	8007792 <_printf_i+0x1ca>
 800779a:	8019      	strh	r1, [r3, #0]
 800779c:	2300      	movs	r3, #0
 800779e:	4615      	mov	r5, r2
 80077a0:	6123      	str	r3, [r4, #16]
 80077a2:	e7ba      	b.n	800771a <_printf_i+0x152>
 80077a4:	682b      	ldr	r3, [r5, #0]
 80077a6:	2100      	movs	r1, #0
 80077a8:	1d1a      	adds	r2, r3, #4
 80077aa:	602a      	str	r2, [r5, #0]
 80077ac:	681d      	ldr	r5, [r3, #0]
 80077ae:	6862      	ldr	r2, [r4, #4]
 80077b0:	4628      	mov	r0, r5
 80077b2:	f000 f831 	bl	8007818 <memchr>
 80077b6:	b108      	cbz	r0, 80077bc <_printf_i+0x1f4>
 80077b8:	1b40      	subs	r0, r0, r5
 80077ba:	6060      	str	r0, [r4, #4]
 80077bc:	6863      	ldr	r3, [r4, #4]
 80077be:	6123      	str	r3, [r4, #16]
 80077c0:	2300      	movs	r3, #0
 80077c2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80077c6:	e7a8      	b.n	800771a <_printf_i+0x152>
 80077c8:	462a      	mov	r2, r5
 80077ca:	4649      	mov	r1, r9
 80077cc:	4640      	mov	r0, r8
 80077ce:	6923      	ldr	r3, [r4, #16]
 80077d0:	47d0      	blx	sl
 80077d2:	3001      	adds	r0, #1
 80077d4:	d0ab      	beq.n	800772e <_printf_i+0x166>
 80077d6:	6823      	ldr	r3, [r4, #0]
 80077d8:	079b      	lsls	r3, r3, #30
 80077da:	d413      	bmi.n	8007804 <_printf_i+0x23c>
 80077dc:	68e0      	ldr	r0, [r4, #12]
 80077de:	9b03      	ldr	r3, [sp, #12]
 80077e0:	4298      	cmp	r0, r3
 80077e2:	bfb8      	it	lt
 80077e4:	4618      	movlt	r0, r3
 80077e6:	e7a4      	b.n	8007732 <_printf_i+0x16a>
 80077e8:	2301      	movs	r3, #1
 80077ea:	4632      	mov	r2, r6
 80077ec:	4649      	mov	r1, r9
 80077ee:	4640      	mov	r0, r8
 80077f0:	47d0      	blx	sl
 80077f2:	3001      	adds	r0, #1
 80077f4:	d09b      	beq.n	800772e <_printf_i+0x166>
 80077f6:	3501      	adds	r5, #1
 80077f8:	68e3      	ldr	r3, [r4, #12]
 80077fa:	9903      	ldr	r1, [sp, #12]
 80077fc:	1a5b      	subs	r3, r3, r1
 80077fe:	42ab      	cmp	r3, r5
 8007800:	dcf2      	bgt.n	80077e8 <_printf_i+0x220>
 8007802:	e7eb      	b.n	80077dc <_printf_i+0x214>
 8007804:	2500      	movs	r5, #0
 8007806:	f104 0619 	add.w	r6, r4, #25
 800780a:	e7f5      	b.n	80077f8 <_printf_i+0x230>
 800780c:	0800a2fd 	.word	0x0800a2fd
 8007810:	0800a30e 	.word	0x0800a30e

08007814 <__retarget_lock_acquire_recursive>:
 8007814:	4770      	bx	lr

08007816 <__retarget_lock_release_recursive>:
 8007816:	4770      	bx	lr

08007818 <memchr>:
 8007818:	4603      	mov	r3, r0
 800781a:	b510      	push	{r4, lr}
 800781c:	b2c9      	uxtb	r1, r1
 800781e:	4402      	add	r2, r0
 8007820:	4293      	cmp	r3, r2
 8007822:	4618      	mov	r0, r3
 8007824:	d101      	bne.n	800782a <memchr+0x12>
 8007826:	2000      	movs	r0, #0
 8007828:	e003      	b.n	8007832 <memchr+0x1a>
 800782a:	7804      	ldrb	r4, [r0, #0]
 800782c:	3301      	adds	r3, #1
 800782e:	428c      	cmp	r4, r1
 8007830:	d1f6      	bne.n	8007820 <memchr+0x8>
 8007832:	bd10      	pop	{r4, pc}

08007834 <memcpy>:
 8007834:	440a      	add	r2, r1
 8007836:	4291      	cmp	r1, r2
 8007838:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800783c:	d100      	bne.n	8007840 <memcpy+0xc>
 800783e:	4770      	bx	lr
 8007840:	b510      	push	{r4, lr}
 8007842:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007846:	4291      	cmp	r1, r2
 8007848:	f803 4f01 	strb.w	r4, [r3, #1]!
 800784c:	d1f9      	bne.n	8007842 <memcpy+0xe>
 800784e:	bd10      	pop	{r4, pc}

08007850 <memmove>:
 8007850:	4288      	cmp	r0, r1
 8007852:	b510      	push	{r4, lr}
 8007854:	eb01 0402 	add.w	r4, r1, r2
 8007858:	d902      	bls.n	8007860 <memmove+0x10>
 800785a:	4284      	cmp	r4, r0
 800785c:	4623      	mov	r3, r4
 800785e:	d807      	bhi.n	8007870 <memmove+0x20>
 8007860:	1e43      	subs	r3, r0, #1
 8007862:	42a1      	cmp	r1, r4
 8007864:	d008      	beq.n	8007878 <memmove+0x28>
 8007866:	f811 2b01 	ldrb.w	r2, [r1], #1
 800786a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800786e:	e7f8      	b.n	8007862 <memmove+0x12>
 8007870:	4601      	mov	r1, r0
 8007872:	4402      	add	r2, r0
 8007874:	428a      	cmp	r2, r1
 8007876:	d100      	bne.n	800787a <memmove+0x2a>
 8007878:	bd10      	pop	{r4, pc}
 800787a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800787e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007882:	e7f7      	b.n	8007874 <memmove+0x24>

08007884 <_realloc_r>:
 8007884:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007888:	4680      	mov	r8, r0
 800788a:	4614      	mov	r4, r2
 800788c:	460e      	mov	r6, r1
 800788e:	b921      	cbnz	r1, 800789a <_realloc_r+0x16>
 8007890:	4611      	mov	r1, r2
 8007892:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007896:	f7ff bc1b 	b.w	80070d0 <_malloc_r>
 800789a:	b92a      	cbnz	r2, 80078a8 <_realloc_r+0x24>
 800789c:	f7ff fbb0 	bl	8007000 <_free_r>
 80078a0:	4625      	mov	r5, r4
 80078a2:	4628      	mov	r0, r5
 80078a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80078a8:	f000 f81b 	bl	80078e2 <_malloc_usable_size_r>
 80078ac:	4284      	cmp	r4, r0
 80078ae:	4607      	mov	r7, r0
 80078b0:	d802      	bhi.n	80078b8 <_realloc_r+0x34>
 80078b2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80078b6:	d812      	bhi.n	80078de <_realloc_r+0x5a>
 80078b8:	4621      	mov	r1, r4
 80078ba:	4640      	mov	r0, r8
 80078bc:	f7ff fc08 	bl	80070d0 <_malloc_r>
 80078c0:	4605      	mov	r5, r0
 80078c2:	2800      	cmp	r0, #0
 80078c4:	d0ed      	beq.n	80078a2 <_realloc_r+0x1e>
 80078c6:	42bc      	cmp	r4, r7
 80078c8:	4622      	mov	r2, r4
 80078ca:	4631      	mov	r1, r6
 80078cc:	bf28      	it	cs
 80078ce:	463a      	movcs	r2, r7
 80078d0:	f7ff ffb0 	bl	8007834 <memcpy>
 80078d4:	4631      	mov	r1, r6
 80078d6:	4640      	mov	r0, r8
 80078d8:	f7ff fb92 	bl	8007000 <_free_r>
 80078dc:	e7e1      	b.n	80078a2 <_realloc_r+0x1e>
 80078de:	4635      	mov	r5, r6
 80078e0:	e7df      	b.n	80078a2 <_realloc_r+0x1e>

080078e2 <_malloc_usable_size_r>:
 80078e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80078e6:	1f18      	subs	r0, r3, #4
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	bfbc      	itt	lt
 80078ec:	580b      	ldrlt	r3, [r1, r0]
 80078ee:	18c0      	addlt	r0, r0, r3
 80078f0:	4770      	bx	lr
	...

080078f4 <_init>:
 80078f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078f6:	bf00      	nop
 80078f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078fa:	bc08      	pop	{r3}
 80078fc:	469e      	mov	lr, r3
 80078fe:	4770      	bx	lr

08007900 <_fini>:
 8007900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007902:	bf00      	nop
 8007904:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007906:	bc08      	pop	{r3}
 8007908:	469e      	mov	lr, r3
 800790a:	4770      	bx	lr
