
Luxometro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006604  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000029b0  08006710  08006710  00016710  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080090c0  080090c0  00020088  2**0
                  CONTENTS
  4 .ARM          00000000  080090c0  080090c0  00020088  2**0
                  CONTENTS
  5 .preinit_array 00000000  080090c0  080090c0  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080090c0  080090c0  000190c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080090c4  080090c4  000190c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  080090c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000055c  20000088  08009150  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005e4  08009150  000205e4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e3a0  00000000  00000000  000200b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000235a  00000000  00000000  0002e451  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f08  00000000  00000000  000307b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e18  00000000  00000000  000316b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001898d  00000000  00000000  000324d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000112df  00000000  00000000  0004ae5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c024  00000000  00000000  0005c13c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e8160  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000443c  00000000  00000000  000e81b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000088 	.word	0x20000088
 8000128:	00000000 	.word	0x00000000
 800012c:	080066f8 	.word	0x080066f8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000008c 	.word	0x2000008c
 8000148:	080066f8 	.word	0x080066f8

0800014c <__aeabi_fmul>:
 800014c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000150:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000154:	bf1e      	ittt	ne
 8000156:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800015a:	ea92 0f0c 	teqne	r2, ip
 800015e:	ea93 0f0c 	teqne	r3, ip
 8000162:	d06f      	beq.n	8000244 <__aeabi_fmul+0xf8>
 8000164:	441a      	add	r2, r3
 8000166:	ea80 0c01 	eor.w	ip, r0, r1
 800016a:	0240      	lsls	r0, r0, #9
 800016c:	bf18      	it	ne
 800016e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000172:	d01e      	beq.n	80001b2 <__aeabi_fmul+0x66>
 8000174:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000178:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 800017c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000180:	fba0 3101 	umull	r3, r1, r0, r1
 8000184:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000188:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800018c:	bf3e      	ittt	cc
 800018e:	0049      	lslcc	r1, r1, #1
 8000190:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000194:	005b      	lslcc	r3, r3, #1
 8000196:	ea40 0001 	orr.w	r0, r0, r1
 800019a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 800019e:	2afd      	cmp	r2, #253	; 0xfd
 80001a0:	d81d      	bhi.n	80001de <__aeabi_fmul+0x92>
 80001a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001a6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001aa:	bf08      	it	eq
 80001ac:	f020 0001 	biceq.w	r0, r0, #1
 80001b0:	4770      	bx	lr
 80001b2:	f090 0f00 	teq	r0, #0
 80001b6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001ba:	bf08      	it	eq
 80001bc:	0249      	lsleq	r1, r1, #9
 80001be:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001c2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001c6:	3a7f      	subs	r2, #127	; 0x7f
 80001c8:	bfc2      	ittt	gt
 80001ca:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001ce:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001d2:	4770      	bxgt	lr
 80001d4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001d8:	f04f 0300 	mov.w	r3, #0
 80001dc:	3a01      	subs	r2, #1
 80001de:	dc5d      	bgt.n	800029c <__aeabi_fmul+0x150>
 80001e0:	f112 0f19 	cmn.w	r2, #25
 80001e4:	bfdc      	itt	le
 80001e6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80001ea:	4770      	bxle	lr
 80001ec:	f1c2 0200 	rsb	r2, r2, #0
 80001f0:	0041      	lsls	r1, r0, #1
 80001f2:	fa21 f102 	lsr.w	r1, r1, r2
 80001f6:	f1c2 0220 	rsb	r2, r2, #32
 80001fa:	fa00 fc02 	lsl.w	ip, r0, r2
 80001fe:	ea5f 0031 	movs.w	r0, r1, rrx
 8000202:	f140 0000 	adc.w	r0, r0, #0
 8000206:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800020a:	bf08      	it	eq
 800020c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000210:	4770      	bx	lr
 8000212:	f092 0f00 	teq	r2, #0
 8000216:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800021a:	bf02      	ittt	eq
 800021c:	0040      	lsleq	r0, r0, #1
 800021e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000222:	3a01      	subeq	r2, #1
 8000224:	d0f9      	beq.n	800021a <__aeabi_fmul+0xce>
 8000226:	ea40 000c 	orr.w	r0, r0, ip
 800022a:	f093 0f00 	teq	r3, #0
 800022e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000232:	bf02      	ittt	eq
 8000234:	0049      	lsleq	r1, r1, #1
 8000236:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800023a:	3b01      	subeq	r3, #1
 800023c:	d0f9      	beq.n	8000232 <__aeabi_fmul+0xe6>
 800023e:	ea41 010c 	orr.w	r1, r1, ip
 8000242:	e78f      	b.n	8000164 <__aeabi_fmul+0x18>
 8000244:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000248:	ea92 0f0c 	teq	r2, ip
 800024c:	bf18      	it	ne
 800024e:	ea93 0f0c 	teqne	r3, ip
 8000252:	d00a      	beq.n	800026a <__aeabi_fmul+0x11e>
 8000254:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000258:	bf18      	it	ne
 800025a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800025e:	d1d8      	bne.n	8000212 <__aeabi_fmul+0xc6>
 8000260:	ea80 0001 	eor.w	r0, r0, r1
 8000264:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000268:	4770      	bx	lr
 800026a:	f090 0f00 	teq	r0, #0
 800026e:	bf17      	itett	ne
 8000270:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000274:	4608      	moveq	r0, r1
 8000276:	f091 0f00 	teqne	r1, #0
 800027a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800027e:	d014      	beq.n	80002aa <__aeabi_fmul+0x15e>
 8000280:	ea92 0f0c 	teq	r2, ip
 8000284:	d101      	bne.n	800028a <__aeabi_fmul+0x13e>
 8000286:	0242      	lsls	r2, r0, #9
 8000288:	d10f      	bne.n	80002aa <__aeabi_fmul+0x15e>
 800028a:	ea93 0f0c 	teq	r3, ip
 800028e:	d103      	bne.n	8000298 <__aeabi_fmul+0x14c>
 8000290:	024b      	lsls	r3, r1, #9
 8000292:	bf18      	it	ne
 8000294:	4608      	movne	r0, r1
 8000296:	d108      	bne.n	80002aa <__aeabi_fmul+0x15e>
 8000298:	ea80 0001 	eor.w	r0, r0, r1
 800029c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002a0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002a4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002a8:	4770      	bx	lr
 80002aa:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002ae:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002b2:	4770      	bx	lr

080002b4 <__aeabi_drsub>:
 80002b4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b8:	e002      	b.n	80002c0 <__adddf3>
 80002ba:	bf00      	nop

080002bc <__aeabi_dsub>:
 80002bc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002c0 <__adddf3>:
 80002c0:	b530      	push	{r4, r5, lr}
 80002c2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002ca:	ea94 0f05 	teq	r4, r5
 80002ce:	bf08      	it	eq
 80002d0:	ea90 0f02 	teqeq	r0, r2
 80002d4:	bf1f      	itttt	ne
 80002d6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002da:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002de:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002e2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e6:	f000 80e2 	beq.w	80004ae <__adddf3+0x1ee>
 80002ea:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ee:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002f2:	bfb8      	it	lt
 80002f4:	426d      	neglt	r5, r5
 80002f6:	dd0c      	ble.n	8000312 <__adddf3+0x52>
 80002f8:	442c      	add	r4, r5
 80002fa:	ea80 0202 	eor.w	r2, r0, r2
 80002fe:	ea81 0303 	eor.w	r3, r1, r3
 8000302:	ea82 0000 	eor.w	r0, r2, r0
 8000306:	ea83 0101 	eor.w	r1, r3, r1
 800030a:	ea80 0202 	eor.w	r2, r0, r2
 800030e:	ea81 0303 	eor.w	r3, r1, r3
 8000312:	2d36      	cmp	r5, #54	; 0x36
 8000314:	bf88      	it	hi
 8000316:	bd30      	pophi	{r4, r5, pc}
 8000318:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800031c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000320:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000324:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x70>
 800032a:	4240      	negs	r0, r0
 800032c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000330:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000334:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000338:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800033c:	d002      	beq.n	8000344 <__adddf3+0x84>
 800033e:	4252      	negs	r2, r2
 8000340:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000344:	ea94 0f05 	teq	r4, r5
 8000348:	f000 80a7 	beq.w	800049a <__adddf3+0x1da>
 800034c:	f1a4 0401 	sub.w	r4, r4, #1
 8000350:	f1d5 0e20 	rsbs	lr, r5, #32
 8000354:	db0d      	blt.n	8000372 <__adddf3+0xb2>
 8000356:	fa02 fc0e 	lsl.w	ip, r2, lr
 800035a:	fa22 f205 	lsr.w	r2, r2, r5
 800035e:	1880      	adds	r0, r0, r2
 8000360:	f141 0100 	adc.w	r1, r1, #0
 8000364:	fa03 f20e 	lsl.w	r2, r3, lr
 8000368:	1880      	adds	r0, r0, r2
 800036a:	fa43 f305 	asr.w	r3, r3, r5
 800036e:	4159      	adcs	r1, r3
 8000370:	e00e      	b.n	8000390 <__adddf3+0xd0>
 8000372:	f1a5 0520 	sub.w	r5, r5, #32
 8000376:	f10e 0e20 	add.w	lr, lr, #32
 800037a:	2a01      	cmp	r2, #1
 800037c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000380:	bf28      	it	cs
 8000382:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	18c0      	adds	r0, r0, r3
 800038c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000390:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000394:	d507      	bpl.n	80003a6 <__adddf3+0xe6>
 8000396:	f04f 0e00 	mov.w	lr, #0
 800039a:	f1dc 0c00 	rsbs	ip, ip, #0
 800039e:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003a2:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003aa:	d31b      	bcc.n	80003e4 <__adddf3+0x124>
 80003ac:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003b0:	d30c      	bcc.n	80003cc <__adddf3+0x10c>
 80003b2:	0849      	lsrs	r1, r1, #1
 80003b4:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003bc:	f104 0401 	add.w	r4, r4, #1
 80003c0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c8:	f080 809a 	bcs.w	8000500 <__adddf3+0x240>
 80003cc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003d0:	bf08      	it	eq
 80003d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d6:	f150 0000 	adcs.w	r0, r0, #0
 80003da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003de:	ea41 0105 	orr.w	r1, r1, r5
 80003e2:	bd30      	pop	{r4, r5, pc}
 80003e4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e8:	4140      	adcs	r0, r0
 80003ea:	eb41 0101 	adc.w	r1, r1, r1
 80003ee:	3c01      	subs	r4, #1
 80003f0:	bf28      	it	cs
 80003f2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f6:	d2e9      	bcs.n	80003cc <__adddf3+0x10c>
 80003f8:	f091 0f00 	teq	r1, #0
 80003fc:	bf04      	itt	eq
 80003fe:	4601      	moveq	r1, r0
 8000400:	2000      	moveq	r0, #0
 8000402:	fab1 f381 	clz	r3, r1
 8000406:	bf08      	it	eq
 8000408:	3320      	addeq	r3, #32
 800040a:	f1a3 030b 	sub.w	r3, r3, #11
 800040e:	f1b3 0220 	subs.w	r2, r3, #32
 8000412:	da0c      	bge.n	800042e <__adddf3+0x16e>
 8000414:	320c      	adds	r2, #12
 8000416:	dd08      	ble.n	800042a <__adddf3+0x16a>
 8000418:	f102 0c14 	add.w	ip, r2, #20
 800041c:	f1c2 020c 	rsb	r2, r2, #12
 8000420:	fa01 f00c 	lsl.w	r0, r1, ip
 8000424:	fa21 f102 	lsr.w	r1, r1, r2
 8000428:	e00c      	b.n	8000444 <__adddf3+0x184>
 800042a:	f102 0214 	add.w	r2, r2, #20
 800042e:	bfd8      	it	le
 8000430:	f1c2 0c20 	rsble	ip, r2, #32
 8000434:	fa01 f102 	lsl.w	r1, r1, r2
 8000438:	fa20 fc0c 	lsr.w	ip, r0, ip
 800043c:	bfdc      	itt	le
 800043e:	ea41 010c 	orrle.w	r1, r1, ip
 8000442:	4090      	lslle	r0, r2
 8000444:	1ae4      	subs	r4, r4, r3
 8000446:	bfa2      	ittt	ge
 8000448:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800044c:	4329      	orrge	r1, r5
 800044e:	bd30      	popge	{r4, r5, pc}
 8000450:	ea6f 0404 	mvn.w	r4, r4
 8000454:	3c1f      	subs	r4, #31
 8000456:	da1c      	bge.n	8000492 <__adddf3+0x1d2>
 8000458:	340c      	adds	r4, #12
 800045a:	dc0e      	bgt.n	800047a <__adddf3+0x1ba>
 800045c:	f104 0414 	add.w	r4, r4, #20
 8000460:	f1c4 0220 	rsb	r2, r4, #32
 8000464:	fa20 f004 	lsr.w	r0, r0, r4
 8000468:	fa01 f302 	lsl.w	r3, r1, r2
 800046c:	ea40 0003 	orr.w	r0, r0, r3
 8000470:	fa21 f304 	lsr.w	r3, r1, r4
 8000474:	ea45 0103 	orr.w	r1, r5, r3
 8000478:	bd30      	pop	{r4, r5, pc}
 800047a:	f1c4 040c 	rsb	r4, r4, #12
 800047e:	f1c4 0220 	rsb	r2, r4, #32
 8000482:	fa20 f002 	lsr.w	r0, r0, r2
 8000486:	fa01 f304 	lsl.w	r3, r1, r4
 800048a:	ea40 0003 	orr.w	r0, r0, r3
 800048e:	4629      	mov	r1, r5
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	fa21 f004 	lsr.w	r0, r1, r4
 8000496:	4629      	mov	r1, r5
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	f094 0f00 	teq	r4, #0
 800049e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004a2:	bf06      	itte	eq
 80004a4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a8:	3401      	addeq	r4, #1
 80004aa:	3d01      	subne	r5, #1
 80004ac:	e74e      	b.n	800034c <__adddf3+0x8c>
 80004ae:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004b2:	bf18      	it	ne
 80004b4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b8:	d029      	beq.n	800050e <__adddf3+0x24e>
 80004ba:	ea94 0f05 	teq	r4, r5
 80004be:	bf08      	it	eq
 80004c0:	ea90 0f02 	teqeq	r0, r2
 80004c4:	d005      	beq.n	80004d2 <__adddf3+0x212>
 80004c6:	ea54 0c00 	orrs.w	ip, r4, r0
 80004ca:	bf04      	itt	eq
 80004cc:	4619      	moveq	r1, r3
 80004ce:	4610      	moveq	r0, r2
 80004d0:	bd30      	pop	{r4, r5, pc}
 80004d2:	ea91 0f03 	teq	r1, r3
 80004d6:	bf1e      	ittt	ne
 80004d8:	2100      	movne	r1, #0
 80004da:	2000      	movne	r0, #0
 80004dc:	bd30      	popne	{r4, r5, pc}
 80004de:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004e2:	d105      	bne.n	80004f0 <__adddf3+0x230>
 80004e4:	0040      	lsls	r0, r0, #1
 80004e6:	4149      	adcs	r1, r1
 80004e8:	bf28      	it	cs
 80004ea:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ee:	bd30      	pop	{r4, r5, pc}
 80004f0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f4:	bf3c      	itt	cc
 80004f6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004fa:	bd30      	popcc	{r4, r5, pc}
 80004fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000500:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000504:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000508:	f04f 0000 	mov.w	r0, #0
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000512:	bf1a      	itte	ne
 8000514:	4619      	movne	r1, r3
 8000516:	4610      	movne	r0, r2
 8000518:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800051c:	bf1c      	itt	ne
 800051e:	460b      	movne	r3, r1
 8000520:	4602      	movne	r2, r0
 8000522:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000526:	bf06      	itte	eq
 8000528:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800052c:	ea91 0f03 	teqeq	r1, r3
 8000530:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000534:	bd30      	pop	{r4, r5, pc}
 8000536:	bf00      	nop

08000538 <__aeabi_ui2d>:
 8000538:	f090 0f00 	teq	r0, #0
 800053c:	bf04      	itt	eq
 800053e:	2100      	moveq	r1, #0
 8000540:	4770      	bxeq	lr
 8000542:	b530      	push	{r4, r5, lr}
 8000544:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000548:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800054c:	f04f 0500 	mov.w	r5, #0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e750      	b.n	80003f8 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_i2d>:
 8000558:	f090 0f00 	teq	r0, #0
 800055c:	bf04      	itt	eq
 800055e:	2100      	moveq	r1, #0
 8000560:	4770      	bxeq	lr
 8000562:	b530      	push	{r4, r5, lr}
 8000564:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000568:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000570:	bf48      	it	mi
 8000572:	4240      	negmi	r0, r0
 8000574:	f04f 0100 	mov.w	r1, #0
 8000578:	e73e      	b.n	80003f8 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_f2d>:
 800057c:	0042      	lsls	r2, r0, #1
 800057e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000582:	ea4f 0131 	mov.w	r1, r1, rrx
 8000586:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800058a:	bf1f      	itttt	ne
 800058c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000590:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000594:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000598:	4770      	bxne	lr
 800059a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059e:	bf08      	it	eq
 80005a0:	4770      	bxeq	lr
 80005a2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a6:	bf04      	itt	eq
 80005a8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005ac:	4770      	bxeq	lr
 80005ae:	b530      	push	{r4, r5, lr}
 80005b0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005bc:	e71c      	b.n	80003f8 <__adddf3+0x138>
 80005be:	bf00      	nop

080005c0 <__aeabi_ul2d>:
 80005c0:	ea50 0201 	orrs.w	r2, r0, r1
 80005c4:	bf08      	it	eq
 80005c6:	4770      	bxeq	lr
 80005c8:	b530      	push	{r4, r5, lr}
 80005ca:	f04f 0500 	mov.w	r5, #0
 80005ce:	e00a      	b.n	80005e6 <__aeabi_l2d+0x16>

080005d0 <__aeabi_l2d>:
 80005d0:	ea50 0201 	orrs.w	r2, r0, r1
 80005d4:	bf08      	it	eq
 80005d6:	4770      	bxeq	lr
 80005d8:	b530      	push	{r4, r5, lr}
 80005da:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005de:	d502      	bpl.n	80005e6 <__aeabi_l2d+0x16>
 80005e0:	4240      	negs	r0, r0
 80005e2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ea:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ee:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005f2:	f43f aed8 	beq.w	80003a6 <__adddf3+0xe6>
 80005f6:	f04f 0203 	mov.w	r2, #3
 80005fa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fe:	bf18      	it	ne
 8000600:	3203      	addne	r2, #3
 8000602:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000606:	bf18      	it	ne
 8000608:	3203      	addne	r2, #3
 800060a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060e:	f1c2 0320 	rsb	r3, r2, #32
 8000612:	fa00 fc03 	lsl.w	ip, r0, r3
 8000616:	fa20 f002 	lsr.w	r0, r0, r2
 800061a:	fa01 fe03 	lsl.w	lr, r1, r3
 800061e:	ea40 000e 	orr.w	r0, r0, lr
 8000622:	fa21 f102 	lsr.w	r1, r1, r2
 8000626:	4414      	add	r4, r2
 8000628:	e6bd      	b.n	80003a6 <__adddf3+0xe6>
 800062a:	bf00      	nop

0800062c <__aeabi_dmul>:
 800062c:	b570      	push	{r4, r5, r6, lr}
 800062e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000632:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000636:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800063a:	bf1d      	ittte	ne
 800063c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000640:	ea94 0f0c 	teqne	r4, ip
 8000644:	ea95 0f0c 	teqne	r5, ip
 8000648:	f000 f8de 	bleq	8000808 <__aeabi_dmul+0x1dc>
 800064c:	442c      	add	r4, r5
 800064e:	ea81 0603 	eor.w	r6, r1, r3
 8000652:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000656:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800065a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065e:	bf18      	it	ne
 8000660:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800066c:	d038      	beq.n	80006e0 <__aeabi_dmul+0xb4>
 800066e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000672:	f04f 0500 	mov.w	r5, #0
 8000676:	fbe1 e502 	umlal	lr, r5, r1, r2
 800067a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000682:	f04f 0600 	mov.w	r6, #0
 8000686:	fbe1 5603 	umlal	r5, r6, r1, r3
 800068a:	f09c 0f00 	teq	ip, #0
 800068e:	bf18      	it	ne
 8000690:	f04e 0e01 	orrne.w	lr, lr, #1
 8000694:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000698:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800069c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006a0:	d204      	bcs.n	80006ac <__aeabi_dmul+0x80>
 80006a2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a6:	416d      	adcs	r5, r5
 80006a8:	eb46 0606 	adc.w	r6, r6, r6
 80006ac:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006b0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006bc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006c0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c4:	bf88      	it	hi
 80006c6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006ca:	d81e      	bhi.n	800070a <__aeabi_dmul+0xde>
 80006cc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006d0:	bf08      	it	eq
 80006d2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d6:	f150 0000 	adcs.w	r0, r0, #0
 80006da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006de:	bd70      	pop	{r4, r5, r6, pc}
 80006e0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e4:	ea46 0101 	orr.w	r1, r6, r1
 80006e8:	ea40 0002 	orr.w	r0, r0, r2
 80006ec:	ea81 0103 	eor.w	r1, r1, r3
 80006f0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f4:	bfc2      	ittt	gt
 80006f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000700:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000704:	f04f 0e00 	mov.w	lr, #0
 8000708:	3c01      	subs	r4, #1
 800070a:	f300 80ab 	bgt.w	8000864 <__aeabi_dmul+0x238>
 800070e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000712:	bfde      	ittt	le
 8000714:	2000      	movle	r0, #0
 8000716:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800071a:	bd70      	pople	{r4, r5, r6, pc}
 800071c:	f1c4 0400 	rsb	r4, r4, #0
 8000720:	3c20      	subs	r4, #32
 8000722:	da35      	bge.n	8000790 <__aeabi_dmul+0x164>
 8000724:	340c      	adds	r4, #12
 8000726:	dc1b      	bgt.n	8000760 <__aeabi_dmul+0x134>
 8000728:	f104 0414 	add.w	r4, r4, #20
 800072c:	f1c4 0520 	rsb	r5, r4, #32
 8000730:	fa00 f305 	lsl.w	r3, r0, r5
 8000734:	fa20 f004 	lsr.w	r0, r0, r4
 8000738:	fa01 f205 	lsl.w	r2, r1, r5
 800073c:	ea40 0002 	orr.w	r0, r0, r2
 8000740:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000744:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	fa21 f604 	lsr.w	r6, r1, r4
 8000750:	eb42 0106 	adc.w	r1, r2, r6
 8000754:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000758:	bf08      	it	eq
 800075a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075e:	bd70      	pop	{r4, r5, r6, pc}
 8000760:	f1c4 040c 	rsb	r4, r4, #12
 8000764:	f1c4 0520 	rsb	r5, r4, #32
 8000768:	fa00 f304 	lsl.w	r3, r0, r4
 800076c:	fa20 f005 	lsr.w	r0, r0, r5
 8000770:	fa01 f204 	lsl.w	r2, r1, r4
 8000774:	ea40 0002 	orr.w	r0, r0, r2
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000780:	f141 0100 	adc.w	r1, r1, #0
 8000784:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000788:	bf08      	it	eq
 800078a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078e:	bd70      	pop	{r4, r5, r6, pc}
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f205 	lsl.w	r2, r0, r5
 8000798:	ea4e 0e02 	orr.w	lr, lr, r2
 800079c:	fa20 f304 	lsr.w	r3, r0, r4
 80007a0:	fa01 f205 	lsl.w	r2, r1, r5
 80007a4:	ea43 0302 	orr.w	r3, r3, r2
 80007a8:	fa21 f004 	lsr.w	r0, r1, r4
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	fa21 f204 	lsr.w	r2, r1, r4
 80007b4:	ea20 0002 	bic.w	r0, r0, r2
 80007b8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007bc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c0:	bf08      	it	eq
 80007c2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c6:	bd70      	pop	{r4, r5, r6, pc}
 80007c8:	f094 0f00 	teq	r4, #0
 80007cc:	d10f      	bne.n	80007ee <__aeabi_dmul+0x1c2>
 80007ce:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007d2:	0040      	lsls	r0, r0, #1
 80007d4:	eb41 0101 	adc.w	r1, r1, r1
 80007d8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007dc:	bf08      	it	eq
 80007de:	3c01      	subeq	r4, #1
 80007e0:	d0f7      	beq.n	80007d2 <__aeabi_dmul+0x1a6>
 80007e2:	ea41 0106 	orr.w	r1, r1, r6
 80007e6:	f095 0f00 	teq	r5, #0
 80007ea:	bf18      	it	ne
 80007ec:	4770      	bxne	lr
 80007ee:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007f2:	0052      	lsls	r2, r2, #1
 80007f4:	eb43 0303 	adc.w	r3, r3, r3
 80007f8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007fc:	bf08      	it	eq
 80007fe:	3d01      	subeq	r5, #1
 8000800:	d0f7      	beq.n	80007f2 <__aeabi_dmul+0x1c6>
 8000802:	ea43 0306 	orr.w	r3, r3, r6
 8000806:	4770      	bx	lr
 8000808:	ea94 0f0c 	teq	r4, ip
 800080c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000810:	bf18      	it	ne
 8000812:	ea95 0f0c 	teqne	r5, ip
 8000816:	d00c      	beq.n	8000832 <__aeabi_dmul+0x206>
 8000818:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800081c:	bf18      	it	ne
 800081e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000822:	d1d1      	bne.n	80007c8 <__aeabi_dmul+0x19c>
 8000824:	ea81 0103 	eor.w	r1, r1, r3
 8000828:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000836:	bf06      	itte	eq
 8000838:	4610      	moveq	r0, r2
 800083a:	4619      	moveq	r1, r3
 800083c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000840:	d019      	beq.n	8000876 <__aeabi_dmul+0x24a>
 8000842:	ea94 0f0c 	teq	r4, ip
 8000846:	d102      	bne.n	800084e <__aeabi_dmul+0x222>
 8000848:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800084c:	d113      	bne.n	8000876 <__aeabi_dmul+0x24a>
 800084e:	ea95 0f0c 	teq	r5, ip
 8000852:	d105      	bne.n	8000860 <__aeabi_dmul+0x234>
 8000854:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000858:	bf1c      	itt	ne
 800085a:	4610      	movne	r0, r2
 800085c:	4619      	movne	r1, r3
 800085e:	d10a      	bne.n	8000876 <__aeabi_dmul+0x24a>
 8000860:	ea81 0103 	eor.w	r1, r1, r3
 8000864:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000868:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800086c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000870:	f04f 0000 	mov.w	r0, #0
 8000874:	bd70      	pop	{r4, r5, r6, pc}
 8000876:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800087a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087e:	bd70      	pop	{r4, r5, r6, pc}

08000880 <__aeabi_ddiv>:
 8000880:	b570      	push	{r4, r5, r6, lr}
 8000882:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000886:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800088a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088e:	bf1d      	ittte	ne
 8000890:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000894:	ea94 0f0c 	teqne	r4, ip
 8000898:	ea95 0f0c 	teqne	r5, ip
 800089c:	f000 f8a7 	bleq	80009ee <__aeabi_ddiv+0x16e>
 80008a0:	eba4 0405 	sub.w	r4, r4, r5
 80008a4:	ea81 0e03 	eor.w	lr, r1, r3
 80008a8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008ac:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008b0:	f000 8088 	beq.w	80009c4 <__aeabi_ddiv+0x144>
 80008b4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008bc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008c0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008cc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008d0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d8:	429d      	cmp	r5, r3
 80008da:	bf08      	it	eq
 80008dc:	4296      	cmpeq	r6, r2
 80008de:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008e2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e6:	d202      	bcs.n	80008ee <__aeabi_ddiv+0x6e>
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	1ab6      	subs	r6, r6, r2
 80008f0:	eb65 0503 	sbc.w	r5, r5, r3
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fe:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000902:	ebb6 0e02 	subs.w	lr, r6, r2
 8000906:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090a:	bf22      	ittt	cs
 800090c:	1ab6      	subcs	r6, r6, r2
 800090e:	4675      	movcs	r5, lr
 8000910:	ea40 000c 	orrcs.w	r0, r0, ip
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	ebb6 0e02 	subs.w	lr, r6, r2
 800091e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000922:	bf22      	ittt	cs
 8000924:	1ab6      	subcs	r6, r6, r2
 8000926:	4675      	movcs	r5, lr
 8000928:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800092c:	085b      	lsrs	r3, r3, #1
 800092e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000932:	ebb6 0e02 	subs.w	lr, r6, r2
 8000936:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093a:	bf22      	ittt	cs
 800093c:	1ab6      	subcs	r6, r6, r2
 800093e:	4675      	movcs	r5, lr
 8000940:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000944:	085b      	lsrs	r3, r3, #1
 8000946:	ea4f 0232 	mov.w	r2, r2, rrx
 800094a:	ebb6 0e02 	subs.w	lr, r6, r2
 800094e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000952:	bf22      	ittt	cs
 8000954:	1ab6      	subcs	r6, r6, r2
 8000956:	4675      	movcs	r5, lr
 8000958:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800095c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000960:	d018      	beq.n	8000994 <__aeabi_ddiv+0x114>
 8000962:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000966:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800096a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000972:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000976:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800097a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097e:	d1c0      	bne.n	8000902 <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	d10b      	bne.n	800099e <__aeabi_ddiv+0x11e>
 8000986:	ea41 0100 	orr.w	r1, r1, r0
 800098a:	f04f 0000 	mov.w	r0, #0
 800098e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000992:	e7b6      	b.n	8000902 <__aeabi_ddiv+0x82>
 8000994:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000998:	bf04      	itt	eq
 800099a:	4301      	orreq	r1, r0
 800099c:	2000      	moveq	r0, #0
 800099e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009a2:	bf88      	it	hi
 80009a4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a8:	f63f aeaf 	bhi.w	800070a <__aeabi_dmul+0xde>
 80009ac:	ebb5 0c03 	subs.w	ip, r5, r3
 80009b0:	bf04      	itt	eq
 80009b2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ba:	f150 0000 	adcs.w	r0, r0, #0
 80009be:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009c2:	bd70      	pop	{r4, r5, r6, pc}
 80009c4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009cc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009d0:	bfc2      	ittt	gt
 80009d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009da:	bd70      	popgt	{r4, r5, r6, pc}
 80009dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009e0:	f04f 0e00 	mov.w	lr, #0
 80009e4:	3c01      	subs	r4, #1
 80009e6:	e690      	b.n	800070a <__aeabi_dmul+0xde>
 80009e8:	ea45 0e06 	orr.w	lr, r5, r6
 80009ec:	e68d      	b.n	800070a <__aeabi_dmul+0xde>
 80009ee:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009f2:	ea94 0f0c 	teq	r4, ip
 80009f6:	bf08      	it	eq
 80009f8:	ea95 0f0c 	teqeq	r5, ip
 80009fc:	f43f af3b 	beq.w	8000876 <__aeabi_dmul+0x24a>
 8000a00:	ea94 0f0c 	teq	r4, ip
 8000a04:	d10a      	bne.n	8000a1c <__aeabi_ddiv+0x19c>
 8000a06:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a0a:	f47f af34 	bne.w	8000876 <__aeabi_dmul+0x24a>
 8000a0e:	ea95 0f0c 	teq	r5, ip
 8000a12:	f47f af25 	bne.w	8000860 <__aeabi_dmul+0x234>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e72c      	b.n	8000876 <__aeabi_dmul+0x24a>
 8000a1c:	ea95 0f0c 	teq	r5, ip
 8000a20:	d106      	bne.n	8000a30 <__aeabi_ddiv+0x1b0>
 8000a22:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a26:	f43f aefd 	beq.w	8000824 <__aeabi_dmul+0x1f8>
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	e722      	b.n	8000876 <__aeabi_dmul+0x24a>
 8000a30:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a34:	bf18      	it	ne
 8000a36:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a3a:	f47f aec5 	bne.w	80007c8 <__aeabi_dmul+0x19c>
 8000a3e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a42:	f47f af0d 	bne.w	8000860 <__aeabi_dmul+0x234>
 8000a46:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a4a:	f47f aeeb 	bne.w	8000824 <__aeabi_dmul+0x1f8>
 8000a4e:	e712      	b.n	8000876 <__aeabi_dmul+0x24a>

08000a50 <__aeabi_d2f>:
 8000a50:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a54:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a58:	bf24      	itt	cs
 8000a5a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a5e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a62:	d90d      	bls.n	8000a80 <__aeabi_d2f+0x30>
 8000a64:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a68:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a6c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a70:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a74:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a78:	bf08      	it	eq
 8000a7a:	f020 0001 	biceq.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a84:	d121      	bne.n	8000aca <__aeabi_d2f+0x7a>
 8000a86:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a8a:	bfbc      	itt	lt
 8000a8c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a90:	4770      	bxlt	lr
 8000a92:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a96:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a9a:	f1c2 0218 	rsb	r2, r2, #24
 8000a9e:	f1c2 0c20 	rsb	ip, r2, #32
 8000aa2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aa6:	fa20 f002 	lsr.w	r0, r0, r2
 8000aaa:	bf18      	it	ne
 8000aac:	f040 0001 	orrne.w	r0, r0, #1
 8000ab0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ab8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000abc:	ea40 000c 	orr.w	r0, r0, ip
 8000ac0:	fa23 f302 	lsr.w	r3, r3, r2
 8000ac4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ac8:	e7cc      	b.n	8000a64 <__aeabi_d2f+0x14>
 8000aca:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ace:	d107      	bne.n	8000ae0 <__aeabi_d2f+0x90>
 8000ad0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ad4:	bf1e      	ittt	ne
 8000ad6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ada:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ade:	4770      	bxne	lr
 8000ae0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ae4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ae8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <__aeabi_frsub>:
 8000af0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000af4:	e002      	b.n	8000afc <__addsf3>
 8000af6:	bf00      	nop

08000af8 <__aeabi_fsub>:
 8000af8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000afc <__addsf3>:
 8000afc:	0042      	lsls	r2, r0, #1
 8000afe:	bf1f      	itttt	ne
 8000b00:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b04:	ea92 0f03 	teqne	r2, r3
 8000b08:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b0c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b10:	d06a      	beq.n	8000be8 <__addsf3+0xec>
 8000b12:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b16:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b1a:	bfc1      	itttt	gt
 8000b1c:	18d2      	addgt	r2, r2, r3
 8000b1e:	4041      	eorgt	r1, r0
 8000b20:	4048      	eorgt	r0, r1
 8000b22:	4041      	eorgt	r1, r0
 8000b24:	bfb8      	it	lt
 8000b26:	425b      	neglt	r3, r3
 8000b28:	2b19      	cmp	r3, #25
 8000b2a:	bf88      	it	hi
 8000b2c:	4770      	bxhi	lr
 8000b2e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b32:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b36:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b3a:	bf18      	it	ne
 8000b3c:	4240      	negne	r0, r0
 8000b3e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b42:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b46:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b4a:	bf18      	it	ne
 8000b4c:	4249      	negne	r1, r1
 8000b4e:	ea92 0f03 	teq	r2, r3
 8000b52:	d03f      	beq.n	8000bd4 <__addsf3+0xd8>
 8000b54:	f1a2 0201 	sub.w	r2, r2, #1
 8000b58:	fa41 fc03 	asr.w	ip, r1, r3
 8000b5c:	eb10 000c 	adds.w	r0, r0, ip
 8000b60:	f1c3 0320 	rsb	r3, r3, #32
 8000b64:	fa01 f103 	lsl.w	r1, r1, r3
 8000b68:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b6c:	d502      	bpl.n	8000b74 <__addsf3+0x78>
 8000b6e:	4249      	negs	r1, r1
 8000b70:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b74:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b78:	d313      	bcc.n	8000ba2 <__addsf3+0xa6>
 8000b7a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b7e:	d306      	bcc.n	8000b8e <__addsf3+0x92>
 8000b80:	0840      	lsrs	r0, r0, #1
 8000b82:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b86:	f102 0201 	add.w	r2, r2, #1
 8000b8a:	2afe      	cmp	r2, #254	; 0xfe
 8000b8c:	d251      	bcs.n	8000c32 <__addsf3+0x136>
 8000b8e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b92:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b96:	bf08      	it	eq
 8000b98:	f020 0001 	biceq.w	r0, r0, #1
 8000b9c:	ea40 0003 	orr.w	r0, r0, r3
 8000ba0:	4770      	bx	lr
 8000ba2:	0049      	lsls	r1, r1, #1
 8000ba4:	eb40 0000 	adc.w	r0, r0, r0
 8000ba8:	3a01      	subs	r2, #1
 8000baa:	bf28      	it	cs
 8000bac:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000bb0:	d2ed      	bcs.n	8000b8e <__addsf3+0x92>
 8000bb2:	fab0 fc80 	clz	ip, r0
 8000bb6:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bba:	ebb2 020c 	subs.w	r2, r2, ip
 8000bbe:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bc2:	bfaa      	itet	ge
 8000bc4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bc8:	4252      	neglt	r2, r2
 8000bca:	4318      	orrge	r0, r3
 8000bcc:	bfbc      	itt	lt
 8000bce:	40d0      	lsrlt	r0, r2
 8000bd0:	4318      	orrlt	r0, r3
 8000bd2:	4770      	bx	lr
 8000bd4:	f092 0f00 	teq	r2, #0
 8000bd8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000bdc:	bf06      	itte	eq
 8000bde:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000be2:	3201      	addeq	r2, #1
 8000be4:	3b01      	subne	r3, #1
 8000be6:	e7b5      	b.n	8000b54 <__addsf3+0x58>
 8000be8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bec:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bf0:	bf18      	it	ne
 8000bf2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bf6:	d021      	beq.n	8000c3c <__addsf3+0x140>
 8000bf8:	ea92 0f03 	teq	r2, r3
 8000bfc:	d004      	beq.n	8000c08 <__addsf3+0x10c>
 8000bfe:	f092 0f00 	teq	r2, #0
 8000c02:	bf08      	it	eq
 8000c04:	4608      	moveq	r0, r1
 8000c06:	4770      	bx	lr
 8000c08:	ea90 0f01 	teq	r0, r1
 8000c0c:	bf1c      	itt	ne
 8000c0e:	2000      	movne	r0, #0
 8000c10:	4770      	bxne	lr
 8000c12:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c16:	d104      	bne.n	8000c22 <__addsf3+0x126>
 8000c18:	0040      	lsls	r0, r0, #1
 8000c1a:	bf28      	it	cs
 8000c1c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c20:	4770      	bx	lr
 8000c22:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c26:	bf3c      	itt	cc
 8000c28:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c2c:	4770      	bxcc	lr
 8000c2e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c32:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c36:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c3a:	4770      	bx	lr
 8000c3c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c40:	bf16      	itet	ne
 8000c42:	4608      	movne	r0, r1
 8000c44:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c48:	4601      	movne	r1, r0
 8000c4a:	0242      	lsls	r2, r0, #9
 8000c4c:	bf06      	itte	eq
 8000c4e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c52:	ea90 0f01 	teqeq	r0, r1
 8000c56:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c5a:	4770      	bx	lr

08000c5c <__aeabi_ui2f>:
 8000c5c:	f04f 0300 	mov.w	r3, #0
 8000c60:	e004      	b.n	8000c6c <__aeabi_i2f+0x8>
 8000c62:	bf00      	nop

08000c64 <__aeabi_i2f>:
 8000c64:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c68:	bf48      	it	mi
 8000c6a:	4240      	negmi	r0, r0
 8000c6c:	ea5f 0c00 	movs.w	ip, r0
 8000c70:	bf08      	it	eq
 8000c72:	4770      	bxeq	lr
 8000c74:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c78:	4601      	mov	r1, r0
 8000c7a:	f04f 0000 	mov.w	r0, #0
 8000c7e:	e01c      	b.n	8000cba <__aeabi_l2f+0x2a>

08000c80 <__aeabi_ul2f>:
 8000c80:	ea50 0201 	orrs.w	r2, r0, r1
 8000c84:	bf08      	it	eq
 8000c86:	4770      	bxeq	lr
 8000c88:	f04f 0300 	mov.w	r3, #0
 8000c8c:	e00a      	b.n	8000ca4 <__aeabi_l2f+0x14>
 8000c8e:	bf00      	nop

08000c90 <__aeabi_l2f>:
 8000c90:	ea50 0201 	orrs.w	r2, r0, r1
 8000c94:	bf08      	it	eq
 8000c96:	4770      	bxeq	lr
 8000c98:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c9c:	d502      	bpl.n	8000ca4 <__aeabi_l2f+0x14>
 8000c9e:	4240      	negs	r0, r0
 8000ca0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ca4:	ea5f 0c01 	movs.w	ip, r1
 8000ca8:	bf02      	ittt	eq
 8000caa:	4684      	moveq	ip, r0
 8000cac:	4601      	moveq	r1, r0
 8000cae:	2000      	moveq	r0, #0
 8000cb0:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cb4:	bf08      	it	eq
 8000cb6:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cba:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cbe:	fabc f28c 	clz	r2, ip
 8000cc2:	3a08      	subs	r2, #8
 8000cc4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cc8:	db10      	blt.n	8000cec <__aeabi_l2f+0x5c>
 8000cca:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cce:	4463      	add	r3, ip
 8000cd0:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cd4:	f1c2 0220 	rsb	r2, r2, #32
 8000cd8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000cdc:	fa20 f202 	lsr.w	r2, r0, r2
 8000ce0:	eb43 0002 	adc.w	r0, r3, r2
 8000ce4:	bf08      	it	eq
 8000ce6:	f020 0001 	biceq.w	r0, r0, #1
 8000cea:	4770      	bx	lr
 8000cec:	f102 0220 	add.w	r2, r2, #32
 8000cf0:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cf4:	f1c2 0220 	rsb	r2, r2, #32
 8000cf8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cfc:	fa21 f202 	lsr.w	r2, r1, r2
 8000d00:	eb43 0002 	adc.w	r0, r3, r2
 8000d04:	bf08      	it	eq
 8000d06:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d0a:	4770      	bx	lr

08000d0c <__aeabi_f2uiz>:
 8000d0c:	0042      	lsls	r2, r0, #1
 8000d0e:	d20e      	bcs.n	8000d2e <__aeabi_f2uiz+0x22>
 8000d10:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000d14:	d30b      	bcc.n	8000d2e <__aeabi_f2uiz+0x22>
 8000d16:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000d1a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000d1e:	d409      	bmi.n	8000d34 <__aeabi_f2uiz+0x28>
 8000d20:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000d24:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000d28:	fa23 f002 	lsr.w	r0, r3, r2
 8000d2c:	4770      	bx	lr
 8000d2e:	f04f 0000 	mov.w	r0, #0
 8000d32:	4770      	bx	lr
 8000d34:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000d38:	d101      	bne.n	8000d3e <__aeabi_f2uiz+0x32>
 8000d3a:	0242      	lsls	r2, r0, #9
 8000d3c:	d102      	bne.n	8000d44 <__aeabi_f2uiz+0x38>
 8000d3e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d42:	4770      	bx	lr
 8000d44:	f04f 0000 	mov.w	r0, #0
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop

08000d4c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000d50:	f3bf 8f4f 	dsb	sy
}
 8000d54:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000d56:	4b06      	ldr	r3, [pc, #24]	; (8000d70 <__NVIC_SystemReset+0x24>)
 8000d58:	68db      	ldr	r3, [r3, #12]
 8000d5a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000d5e:	4904      	ldr	r1, [pc, #16]	; (8000d70 <__NVIC_SystemReset+0x24>)
 8000d60:	4b04      	ldr	r3, [pc, #16]	; (8000d74 <__NVIC_SystemReset+0x28>)
 8000d62:	4313      	orrs	r3, r2
 8000d64:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000d66:	f3bf 8f4f 	dsb	sy
}
 8000d6a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000d6c:	bf00      	nop
 8000d6e:	e7fd      	b.n	8000d6c <__NVIC_SystemReset+0x20>
 8000d70:	e000ed00 	.word	0xe000ed00
 8000d74:	05fa0004 	.word	0x05fa0004

08000d78 <main>:
Rojo_BH1750 BH1750;
uint32_t IDR_Read;
uint8_t Config_buffer[2]; /*Solve here*/

int main(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b084      	sub	sp, #16
 8000d7c:	af04      	add	r7, sp, #16
  HAL_Init();
 8000d7e:	f001 f83d 	bl	8001dfc <HAL_Init>
  SystemClock_Config();
 8000d82:	f000 fd1c 	bl	80017be <SystemClock_Config>
  MX_GPIO_Init();
 8000d86:	f000 fe25 	bl	80019d4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000d8a:	f000 fd5f 	bl	800184c <MX_I2C1_Init>
  MX_I2C2_Init();
 8000d8e:	f000 fd8b 	bl	80018a8 <MX_I2C2_Init>
  MX_IWDG_Init();
 8000d92:	f000 fdb7 	bl	8001904 <MX_IWDG_Init>
  MX_TIM4_Init();
 8000d96:	f000 fdcf 	bl	8001938 <MX_TIM4_Init>
  HAL_IWDG_Init(&hiwdg);
 8000d9a:	4856      	ldr	r0, [pc, #344]	; (8000ef4 <main+0x17c>)
 8000d9c:	f003 fcdc 	bl	8004758 <HAL_IWDG_Init>
  SSD1306_Init();
 8000da0:	f004 fbe6 	bl	8005570 <SSD1306_Init>
  Configs_init();
 8000da4:	f000 fcd6 	bl	8001754 <Configs_init>
  //Initial Prints
  //SSD1306_GotoXY(7, 5);
  //SSD1306_Puts("Loading", &Font_16x26, 1);

  //Temporal asignation
  Sensor = _BH1750;
 8000da8:	4b53      	ldr	r3, [pc, #332]	; (8000ef8 <main+0x180>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	701a      	strb	r2, [r3, #0]
  //Temporal asignation

  SSD1306_GotoXY(3, 37);
 8000dae:	2125      	movs	r1, #37	; 0x25
 8000db0:	2003      	movs	r0, #3
 8000db2:	f004 fd45 	bl	8005840 <SSD1306_GotoXY>
  SSD1306_Puts("Version 0.3", &Font_11x18, 1);
 8000db6:	2201      	movs	r2, #1
 8000db8:	4950      	ldr	r1, [pc, #320]	; (8000efc <main+0x184>)
 8000dba:	4851      	ldr	r0, [pc, #324]	; (8000f00 <main+0x188>)
 8000dbc:	f004 fdd6 	bl	800596c <SSD1306_Puts>
  SSD1306_UpdateScreen();
 8000dc0:	f004 fc9a 	bl	80056f8 <SSD1306_UpdateScreen>
  HAL_IWDG_Refresh(&hiwdg);
 8000dc4:	484b      	ldr	r0, [pc, #300]	; (8000ef4 <main+0x17c>)
 8000dc6:	f003 fd09 	bl	80047dc <HAL_IWDG_Refresh>
  switch(Sensor)
 8000dca:	4b4b      	ldr	r3, [pc, #300]	; (8000ef8 <main+0x180>)
 8000dcc:	781b      	ldrb	r3, [r3, #0]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d001      	beq.n	8000dd6 <main+0x5e>
 8000dd2:	2b01      	cmp	r3, #1
  	  case _BH1750:
  		  if(BH1750_Init(&BH1750, &hi2c2, Address_Low) != Rojo_OK)
  			  NoConnected_BH1750();
	  break;
	  case _TSL2561:
	  break;
 8000dd4:	e00a      	b.n	8000dec <main+0x74>
  		  if(BH1750_Init(&BH1750, &hi2c2, Address_Low) != Rojo_OK)
 8000dd6:	2246      	movs	r2, #70	; 0x46
 8000dd8:	494a      	ldr	r1, [pc, #296]	; (8000f04 <main+0x18c>)
 8000dda:	484b      	ldr	r0, [pc, #300]	; (8000f08 <main+0x190>)
 8000ddc:	f004 ff3c 	bl	8005c58 <BH1750_Init>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d001      	beq.n	8000dea <main+0x72>
  			  NoConnected_BH1750();
 8000de6:	f000 fb87 	bl	80014f8 <NoConnected_BH1750>
	  break;
 8000dea:	bf00      	nop
  }
  //EEPROM Check & Configurations Read
  if(HAL_I2C_Mem_Read(&hi2c1, EEPROM_ADDR, 0x0, 1, &Configs.Factory_Values, 1, 100) != HAL_OK)
 8000dec:	2364      	movs	r3, #100	; 0x64
 8000dee:	9302      	str	r3, [sp, #8]
 8000df0:	2301      	movs	r3, #1
 8000df2:	9301      	str	r3, [sp, #4]
 8000df4:	4b45      	ldr	r3, [pc, #276]	; (8000f0c <main+0x194>)
 8000df6:	9300      	str	r3, [sp, #0]
 8000df8:	2301      	movs	r3, #1
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	21a0      	movs	r1, #160	; 0xa0
 8000dfe:	4844      	ldr	r0, [pc, #272]	; (8000f10 <main+0x198>)
 8000e00:	f002 f956 	bl	80030b0 <HAL_I2C_Mem_Read>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d001      	beq.n	8000e0e <main+0x96>
	  Fatal_Error_EEPROM();
 8000e0a:	f000 fb0d 	bl	8001428 <Fatal_Error_EEPROM>
  if(Errors.EEPROM_Fatal || Configs.Factory_Values)
 8000e0e:	4b41      	ldr	r3, [pc, #260]	; (8000f14 <main+0x19c>)
 8000e10:	781b      	ldrb	r3, [r3, #0]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d103      	bne.n	8000e1e <main+0xa6>
 8000e16:	4b3d      	ldr	r3, [pc, #244]	; (8000f0c <main+0x194>)
 8000e18:	781b      	ldrb	r3, [r3, #0]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d002      	beq.n	8000e24 <main+0xac>
	  Flash_configs(); //Start by the FLASH configurations
 8000e1e:	f000 f953 	bl	80010c8 <Flash_configs>
 8000e22:	e01f      	b.n	8000e64 <main+0xec>
  else if(!Configs.Factory_Values)
 8000e24:	4b39      	ldr	r3, [pc, #228]	; (8000f0c <main+0x194>)
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d11b      	bne.n	8000e64 <main+0xec>
  {
	  if(HAL_I2C_Mem_Read(&hi2c1, EEPROM_ADDR, 0x1, 1, Config_buffer, 2/*@TODO Change the neccesary buffer*/, 100) != HAL_OK)
 8000e2c:	2364      	movs	r3, #100	; 0x64
 8000e2e:	9302      	str	r3, [sp, #8]
 8000e30:	2302      	movs	r3, #2
 8000e32:	9301      	str	r3, [sp, #4]
 8000e34:	4b38      	ldr	r3, [pc, #224]	; (8000f18 <main+0x1a0>)
 8000e36:	9300      	str	r3, [sp, #0]
 8000e38:	2301      	movs	r3, #1
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	21a0      	movs	r1, #160	; 0xa0
 8000e3e:	4834      	ldr	r0, [pc, #208]	; (8000f10 <main+0x198>)
 8000e40:	f002 f936 	bl	80030b0 <HAL_I2C_Mem_Read>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <main+0xd6>
		  Fatal_Error_EEPROM();
 8000e4a:	f000 faed 	bl	8001428 <Fatal_Error_EEPROM>
	  HAL_IWDG_Refresh(&hiwdg);
 8000e4e:	4829      	ldr	r0, [pc, #164]	; (8000ef4 <main+0x17c>)
 8000e50:	f003 fcc4 	bl	80047dc <HAL_IWDG_Refresh>
	  /*@TODO Check all the configurations*/
	  Config_buffer[0] = Configs.Mode;
 8000e54:	4b2d      	ldr	r3, [pc, #180]	; (8000f0c <main+0x194>)
 8000e56:	785a      	ldrb	r2, [r3, #1]
 8000e58:	4b2f      	ldr	r3, [pc, #188]	; (8000f18 <main+0x1a0>)
 8000e5a:	701a      	strb	r2, [r3, #0]
	  Config_buffer[1] = Configs.Resolution;
 8000e5c:	4b2b      	ldr	r3, [pc, #172]	; (8000f0c <main+0x194>)
 8000e5e:	78da      	ldrb	r2, [r3, #3]
 8000e60:	4b2d      	ldr	r3, [pc, #180]	; (8000f18 <main+0x1a0>)
 8000e62:	705a      	strb	r2, [r3, #1]
  }
  //Final
  HAL_IWDG_Refresh(&hiwdg);
 8000e64:	4823      	ldr	r0, [pc, #140]	; (8000ef4 <main+0x17c>)
 8000e66:	f003 fcb9 	bl	80047dc <HAL_IWDG_Refresh>
  HAL_TIM_Base_Start(&htim4);
 8000e6a:	482c      	ldr	r0, [pc, #176]	; (8000f1c <main+0x1a4>)
 8000e6c:	f004 f91c 	bl	80050a8 <HAL_TIM_Base_Start>
  ISR = None;
 8000e70:	4b2b      	ldr	r3, [pc, #172]	; (8000f20 <main+0x1a8>)
 8000e72:	2202      	movs	r2, #2
 8000e74:	701a      	strb	r2, [r3, #0]
  Timer_Delay_250ms(Seconds(1.5f));
 8000e76:	2006      	movs	r0, #6
 8000e78:	f000 fc0a 	bl	8001690 <Timer_Delay_250ms>
  //Final Clear
  SSD1306_Clear();
 8000e7c:	f004 fd9b 	bl	80059b6 <SSD1306_Clear>
  SSD1306_UpdateScreen();
 8000e80:	f004 fc3a 	bl	80056f8 <SSD1306_UpdateScreen>
  while (1)
  {
	  //Check ISR's
	  switch(ISR)
 8000e84:	4b26      	ldr	r3, [pc, #152]	; (8000f20 <main+0x1a8>)
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	b2db      	uxtb	r3, r3
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d007      	beq.n	8000e9e <main+0x126>
 8000e8e:	2b01      	cmp	r3, #1
 8000e90:	d10b      	bne.n	8000eaa <main+0x132>
	  {
	  	  case Menu:
	  		  ISR = None;
 8000e92:	4b23      	ldr	r3, [pc, #140]	; (8000f20 <main+0x1a8>)
 8000e94:	2202      	movs	r2, #2
 8000e96:	701a      	strb	r2, [r3, #0]
	  		  MenuGUI();
 8000e98:	f000 f91c 	bl	80010d4 <MenuGUI>
	  		  //Configs.Last_Mode = Idle;
	  	  break;
 8000e9c:	e006      	b.n	8000eac <main+0x134>
	  	  case MCU_Reset:
	  		  ISR = None;
 8000e9e:	4b20      	ldr	r3, [pc, #128]	; (8000f20 <main+0x1a8>)
 8000ea0:	2202      	movs	r2, #2
 8000ea2:	701a      	strb	r2, [r3, #0]
	  		  MCU_Reset_Subrutine();
 8000ea4:	f000 faa8 	bl	80013f8 <MCU_Reset_Subrutine>
	  	  break;
 8000ea8:	e000      	b.n	8000eac <main+0x134>
	  	  default:
	  	  break;
 8000eaa:	bf00      	nop
	  }
	  //Check & Run the mode
	  switch(Configs.Mode)
 8000eac:	4b17      	ldr	r3, [pc, #92]	; (8000f0c <main+0x194>)
 8000eae:	785b      	ldrb	r3, [r3, #1]
 8000eb0:	2b06      	cmp	r3, #6
 8000eb2:	d81a      	bhi.n	8000eea <main+0x172>
 8000eb4:	a201      	add	r2, pc, #4	; (adr r2, 8000ebc <main+0x144>)
 8000eb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000eba:	bf00      	nop
 8000ebc:	08000ed9 	.word	0x08000ed9
 8000ec0:	08000edf 	.word	0x08000edf
 8000ec4:	08000eeb 	.word	0x08000eeb
 8000ec8:	08000eeb 	.word	0x08000eeb
 8000ecc:	08000ee5 	.word	0x08000ee5
 8000ed0:	08000eeb 	.word	0x08000eeb
 8000ed4:	08000eeb 	.word	0x08000eeb
	  {
	  	  case Continuous: //Basic Software mode
	  		  Continous_mode();
 8000ed8:	f000 f824 	bl	8000f24 <Continous_mode>
	  	  break;
 8000edc:	e005      	b.n	8000eea <main+0x172>
	  	  case Hold: //Basic Software mode
	  		  Hold_mode();
 8000ede:	f000 f85f 	bl	8000fa0 <Hold_mode>
	  	  break;
 8000ee2:	e002      	b.n	8000eea <main+0x172>
	  	  case Reset_Sensor: //Basic Software mode
	  		  Reset_sensor_mode();
 8000ee4:	f000 f896 	bl	8001014 <Reset_sensor_mode>
		  break;
 8000ee8:	bf00      	nop
	  	  case Select_Diode: //IR Software mode
	  	  break;
	  	  case Idle:
	  	  break;
	  }
	  HAL_IWDG_Refresh(&hiwdg);
 8000eea:	4802      	ldr	r0, [pc, #8]	; (8000ef4 <main+0x17c>)
 8000eec:	f003 fc76 	bl	80047dc <HAL_IWDG_Refresh>
	  switch(ISR)
 8000ef0:	e7c8      	b.n	8000e84 <main+0x10c>
 8000ef2:	bf00      	nop
 8000ef4:	20000194 	.word	0x20000194
 8000ef8:	200001a0 	.word	0x200001a0
 8000efc:	20000014 	.word	0x20000014
 8000f00:	08006710 	.word	0x08006710
 8000f04:	200000f8 	.word	0x200000f8
 8000f08:	200001b0 	.word	0x200001b0
 8000f0c:	200001a8 	.word	0x200001a8
 8000f10:	200000a4 	.word	0x200000a4
 8000f14:	200001a4 	.word	0x200001a4
 8000f18:	200001c0 	.word	0x200001c0
 8000f1c:	2000014c 	.word	0x2000014c
 8000f20:	200001a1 	.word	0x200001a1

08000f24 <Continous_mode>:
  }
}

//Basic software modes
void Continous_mode(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0
	HAL_IWDG_Refresh(&hiwdg);
 8000f28:	4816      	ldr	r0, [pc, #88]	; (8000f84 <Continous_mode+0x60>)
 8000f2a:	f003 fc57 	bl	80047dc <HAL_IWDG_Refresh>
	if(Configs.Last_Mode != Continuous)
 8000f2e:	4b16      	ldr	r3, [pc, #88]	; (8000f88 <Continous_mode+0x64>)
 8000f30:	789b      	ldrb	r3, [r3, #2]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d015      	beq.n	8000f62 <Continous_mode+0x3e>
	{
		SSD1306_Clear();
 8000f36:	f004 fd3e 	bl	80059b6 <SSD1306_Clear>
		SSD1306_GotoXY(36, 8);
 8000f3a:	2108      	movs	r1, #8
 8000f3c:	2024      	movs	r0, #36	; 0x24
 8000f3e:	f004 fc7f 	bl	8005840 <SSD1306_GotoXY>
		SSD1306_Puts("Valor", &Font_11x18, 1);
 8000f42:	2201      	movs	r2, #1
 8000f44:	4911      	ldr	r1, [pc, #68]	; (8000f8c <Continous_mode+0x68>)
 8000f46:	4812      	ldr	r0, [pc, #72]	; (8000f90 <Continous_mode+0x6c>)
 8000f48:	f004 fd10 	bl	800596c <SSD1306_Puts>
		SSD1306_GotoXY(28, 53);
 8000f4c:	2135      	movs	r1, #53	; 0x35
 8000f4e:	201c      	movs	r0, #28
 8000f50:	f004 fc76 	bl	8005840 <SSD1306_GotoXY>
		SSD1306_Puts("Continuous", &Font_7x10, 1);
 8000f54:	2201      	movs	r2, #1
 8000f56:	490f      	ldr	r1, [pc, #60]	; (8000f94 <Continous_mode+0x70>)
 8000f58:	480f      	ldr	r0, [pc, #60]	; (8000f98 <Continous_mode+0x74>)
 8000f5a:	f004 fd07 	bl	800596c <SSD1306_Puts>
		SSD1306_UpdateScreen();
 8000f5e:	f004 fbcb 	bl	80056f8 <SSD1306_UpdateScreen>
	}
	SensorRead();
 8000f62:	f000 fbdd 	bl	8001720 <SensorRead>
	HAL_IWDG_Refresh(&hiwdg);
 8000f66:	4807      	ldr	r0, [pc, #28]	; (8000f84 <Continous_mode+0x60>)
 8000f68:	f003 fc38 	bl	80047dc <HAL_IWDG_Refresh>
	Print_Measure(Measure, 14, 30);
 8000f6c:	4b0b      	ldr	r3, [pc, #44]	; (8000f9c <Continous_mode+0x78>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	221e      	movs	r2, #30
 8000f72:	210e      	movs	r1, #14
 8000f74:	4618      	mov	r0, r3
 8000f76:	f000 faf3 	bl	8001560 <Print_Measure>
	Configs.Last_Mode = Continuous;
 8000f7a:	4b03      	ldr	r3, [pc, #12]	; (8000f88 <Continous_mode+0x64>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	709a      	strb	r2, [r3, #2]
}
 8000f80:	bf00      	nop
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	20000194 	.word	0x20000194
 8000f88:	200001a8 	.word	0x200001a8
 8000f8c:	20000014 	.word	0x20000014
 8000f90:	0800671c 	.word	0x0800671c
 8000f94:	2000000c 	.word	0x2000000c
 8000f98:	08006724 	.word	0x08006724
 8000f9c:	200001ac 	.word	0x200001ac

08000fa0 <Hold_mode>:

void Hold_mode(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
	if(Configs.Last_Mode != Hold)
 8000fa4:	4b15      	ldr	r3, [pc, #84]	; (8000ffc <Hold_mode+0x5c>)
 8000fa6:	789b      	ldrb	r3, [r3, #2]
 8000fa8:	2b01      	cmp	r3, #1
 8000faa:	d015      	beq.n	8000fd8 <Hold_mode+0x38>
	{
		SSD1306_Clear();
 8000fac:	f004 fd03 	bl	80059b6 <SSD1306_Clear>
		SSD1306_GotoXY(36, 8);
 8000fb0:	2108      	movs	r1, #8
 8000fb2:	2024      	movs	r0, #36	; 0x24
 8000fb4:	f004 fc44 	bl	8005840 <SSD1306_GotoXY>
		SSD1306_Puts("Valor", &Font_11x18, 1);
 8000fb8:	2201      	movs	r2, #1
 8000fba:	4911      	ldr	r1, [pc, #68]	; (8001000 <Hold_mode+0x60>)
 8000fbc:	4811      	ldr	r0, [pc, #68]	; (8001004 <Hold_mode+0x64>)
 8000fbe:	f004 fcd5 	bl	800596c <SSD1306_Puts>
		SSD1306_GotoXY(43, 53);
 8000fc2:	2135      	movs	r1, #53	; 0x35
 8000fc4:	202b      	movs	r0, #43	; 0x2b
 8000fc6:	f004 fc3b 	bl	8005840 <SSD1306_GotoXY>
		SSD1306_Puts("Hold", &Font_7x10, 1);
 8000fca:	2201      	movs	r2, #1
 8000fcc:	490e      	ldr	r1, [pc, #56]	; (8001008 <Hold_mode+0x68>)
 8000fce:	480f      	ldr	r0, [pc, #60]	; (800100c <Hold_mode+0x6c>)
 8000fd0:	f004 fccc 	bl	800596c <SSD1306_Puts>
		SSD1306_UpdateScreen();
 8000fd4:	f004 fb90 	bl	80056f8 <SSD1306_UpdateScreen>
	}
	SensorRead();
 8000fd8:	f000 fba2 	bl	8001720 <SensorRead>
	Print_Measure(Measure, 14, 30);
 8000fdc:	4b0c      	ldr	r3, [pc, #48]	; (8001010 <Hold_mode+0x70>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	221e      	movs	r2, #30
 8000fe2:	210e      	movs	r1, #14
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f000 fabb 	bl	8001560 <Print_Measure>
	wait_until_press(Ok);
 8000fea:	200f      	movs	r0, #15
 8000fec:	f000 fb2c 	bl	8001648 <wait_until_press>
	Configs.Last_Mode = Hold;
 8000ff0:	4b02      	ldr	r3, [pc, #8]	; (8000ffc <Hold_mode+0x5c>)
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	709a      	strb	r2, [r3, #2]
}
 8000ff6:	bf00      	nop
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	200001a8 	.word	0x200001a8
 8001000:	20000014 	.word	0x20000014
 8001004:	0800671c 	.word	0x0800671c
 8001008:	2000000c 	.word	0x2000000c
 800100c:	08006730 	.word	0x08006730
 8001010:	200001ac 	.word	0x200001ac

08001014 <Reset_sensor_mode>:
	Configs.Mode = Continuous;
}

//@TODO check error reset sensor mode
void Reset_sensor_mode(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0

	SSD1306_Clear();
 8001018:	f004 fccd 	bl	80059b6 <SSD1306_Clear>
	HAL_IWDG_Refresh(&hiwdg);
 800101c:	4821      	ldr	r0, [pc, #132]	; (80010a4 <Reset_sensor_mode+0x90>)
 800101e:	f003 fbdd 	bl	80047dc <HAL_IWDG_Refresh>
	switch(Sensor)
 8001022:	4b21      	ldr	r3, [pc, #132]	; (80010a8 <Reset_sensor_mode+0x94>)
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d001      	beq.n	800102e <Reset_sensor_mode+0x1a>
 800102a:	2b01      	cmp	r3, #1
		case _BH1750:
			if(BH1750_ReCalibrate(&BH1750) != Rojo_OK)
				Fatal_Error_BH1750();
		break;
		case _TSL2561:
		break;
 800102c:	e008      	b.n	8001040 <Reset_sensor_mode+0x2c>
			if(BH1750_ReCalibrate(&BH1750) != Rojo_OK)
 800102e:	481f      	ldr	r0, [pc, #124]	; (80010ac <Reset_sensor_mode+0x98>)
 8001030:	f004 fe88 	bl	8005d44 <BH1750_ReCalibrate>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d001      	beq.n	800103e <Reset_sensor_mode+0x2a>
				Fatal_Error_BH1750();
 800103a:	f000 fa29 	bl	8001490 <Fatal_Error_BH1750>
		break;
 800103e:	bf00      	nop
	}
	SSD1306_GotoXY(29, 5);
 8001040:	2105      	movs	r1, #5
 8001042:	201d      	movs	r0, #29
 8001044:	f004 fbfc 	bl	8005840 <SSD1306_GotoXY>
	SSD1306_Puts("The sensor", &Font_7x10, 1);
 8001048:	2201      	movs	r2, #1
 800104a:	4919      	ldr	r1, [pc, #100]	; (80010b0 <Reset_sensor_mode+0x9c>)
 800104c:	4819      	ldr	r0, [pc, #100]	; (80010b4 <Reset_sensor_mode+0xa0>)
 800104e:	f004 fc8d 	bl	800596c <SSD1306_Puts>
	SSD1306_GotoXY(8, 17);
 8001052:	2111      	movs	r1, #17
 8001054:	2008      	movs	r0, #8
 8001056:	f004 fbf3 	bl	8005840 <SSD1306_GotoXY>
	SSD1306_Puts("has been reseted", &Font_7x10, 1);
 800105a:	2201      	movs	r2, #1
 800105c:	4914      	ldr	r1, [pc, #80]	; (80010b0 <Reset_sensor_mode+0x9c>)
 800105e:	4816      	ldr	r0, [pc, #88]	; (80010b8 <Reset_sensor_mode+0xa4>)
 8001060:	f004 fc84 	bl	800596c <SSD1306_Puts>
	SSD1306_GotoXY(36, 29);
 8001064:	211d      	movs	r1, #29
 8001066:	2024      	movs	r0, #36	; 0x24
 8001068:	f004 fbea 	bl	8005840 <SSD1306_GotoXY>
	SSD1306_Puts("Press OK", &Font_7x10, 1);
 800106c:	2201      	movs	r2, #1
 800106e:	4910      	ldr	r1, [pc, #64]	; (80010b0 <Reset_sensor_mode+0x9c>)
 8001070:	4812      	ldr	r0, [pc, #72]	; (80010bc <Reset_sensor_mode+0xa8>)
 8001072:	f004 fc7b 	bl	800596c <SSD1306_Puts>
	SSD1306_GotoXY(25, 41);
 8001076:	2129      	movs	r1, #41	; 0x29
 8001078:	2019      	movs	r0, #25
 800107a:	f004 fbe1 	bl	8005840 <SSD1306_GotoXY>
	SSD1306_Puts("to continue", &Font_7x10, 1);
 800107e:	2201      	movs	r2, #1
 8001080:	490b      	ldr	r1, [pc, #44]	; (80010b0 <Reset_sensor_mode+0x9c>)
 8001082:	480f      	ldr	r0, [pc, #60]	; (80010c0 <Reset_sensor_mode+0xac>)
 8001084:	f004 fc72 	bl	800596c <SSD1306_Puts>
	SSD1306_UpdateScreen();
 8001088:	f004 fb36 	bl	80056f8 <SSD1306_UpdateScreen>
	wait_until_press(Ok);
 800108c:	200f      	movs	r0, #15
 800108e:	f000 fadb 	bl	8001648 <wait_until_press>
	Configs.Mode = Configs.Last_Mode;
 8001092:	4b0c      	ldr	r3, [pc, #48]	; (80010c4 <Reset_sensor_mode+0xb0>)
 8001094:	789a      	ldrb	r2, [r3, #2]
 8001096:	4b0b      	ldr	r3, [pc, #44]	; (80010c4 <Reset_sensor_mode+0xb0>)
 8001098:	705a      	strb	r2, [r3, #1]
	Configs.Last_Mode = Reset_Sensor;
 800109a:	4b0a      	ldr	r3, [pc, #40]	; (80010c4 <Reset_sensor_mode+0xb0>)
 800109c:	2204      	movs	r2, #4
 800109e:	709a      	strb	r2, [r3, #2]
}
 80010a0:	bf00      	nop
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	20000194 	.word	0x20000194
 80010a8:	200001a0 	.word	0x200001a0
 80010ac:	200001b0 	.word	0x200001b0
 80010b0:	2000000c 	.word	0x2000000c
 80010b4:	08006760 	.word	0x08006760
 80010b8:	0800676c 	.word	0x0800676c
 80010bc:	08006780 	.word	0x08006780
 80010c0:	0800678c 	.word	0x0800678c
 80010c4:	200001a8 	.word	0x200001a8

080010c8 <Flash_configs>:
void Select_sensor_mode(void);
//@TODO All select diode sensor mode
void Select_diode_mode(void);
//@TODO Flash configurations
void Flash_configs(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0

}
 80010cc:	bf00      	nop
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bc80      	pop	{r7}
 80010d2:	4770      	bx	lr

080010d4 <MenuGUI>:

void MenuGUI(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b088      	sub	sp, #32
 80010d8:	af04      	add	r7, sp, #16
	bool Not_Filled = true;
 80010da:	2301      	movs	r3, #1
 80010dc:	73fb      	strb	r3, [r7, #15]
	int16_t Mode_Displayed = Continuous;
 80010de:	2300      	movs	r3, #0
 80010e0:	807b      	strh	r3, [r7, #2]
	uint32_t Past_IDR_Read = 0xFF;
 80010e2:	23ff      	movs	r3, #255	; 0xff
 80010e4:	60bb      	str	r3, [r7, #8]
	const uint16_t animation_counts = 4;
 80010e6:	2304      	movs	r3, #4
 80010e8:	80bb      	strh	r3, [r7, #4]

	Timer_Delay_250ms(1);
 80010ea:	2001      	movs	r0, #1
 80010ec:	f000 fad0 	bl	8001690 <Timer_Delay_250ms>
	SSD1306_Clear();
 80010f0:	f004 fc61 	bl	80059b6 <SSD1306_Clear>
	SSD1306_GotoXY(31, 5);
 80010f4:	2105      	movs	r1, #5
 80010f6:	201f      	movs	r0, #31
 80010f8:	f004 fba2 	bl	8005840 <SSD1306_GotoXY>
	SSD1306_Puts("Mode", &Font_16x26, 1);
 80010fc:	2201      	movs	r2, #1
 80010fe:	4993      	ldr	r1, [pc, #588]	; (800134c <MenuGUI+0x278>)
 8001100:	4893      	ldr	r0, [pc, #588]	; (8001350 <MenuGUI+0x27c>)
 8001102:	f004 fc33 	bl	800596c <SSD1306_Puts>
	SSD1306_UpdateScreen();
 8001106:	f004 faf7 	bl	80056f8 <SSD1306_UpdateScreen>
	Mode_Displayed = Configs.Last_Mode;
 800110a:	4b92      	ldr	r3, [pc, #584]	; (8001354 <MenuGUI+0x280>)
 800110c:	789b      	ldrb	r3, [r3, #2]
 800110e:	b21b      	sxth	r3, r3
 8001110:	807b      	strh	r3, [r7, #2]
	HAL_IWDG_Refresh(&hiwdg);
 8001112:	4891      	ldr	r0, [pc, #580]	; (8001358 <MenuGUI+0x284>)
 8001114:	f003 fb62 	bl	80047dc <HAL_IWDG_Refresh>
	do
	{
		HAL_IWDG_Refresh(&hiwdg);
 8001118:	488f      	ldr	r0, [pc, #572]	; (8001358 <MenuGUI+0x284>)
 800111a:	f003 fb5f 	bl	80047dc <HAL_IWDG_Refresh>
		IDR_Read = (GPIOA -> IDR & ReadMask);
 800111e:	4b8f      	ldr	r3, [pc, #572]	; (800135c <MenuGUI+0x288>)
 8001120:	689b      	ldr	r3, [r3, #8]
 8001122:	f003 031f 	and.w	r3, r3, #31
 8001126:	4a8e      	ldr	r2, [pc, #568]	; (8001360 <MenuGUI+0x28c>)
 8001128:	6013      	str	r3, [r2, #0]
		//Displaying the selection
		if(Past_IDR_Read != IDR_Read)
 800112a:	4b8d      	ldr	r3, [pc, #564]	; (8001360 <MenuGUI+0x28c>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	68ba      	ldr	r2, [r7, #8]
 8001130:	429a      	cmp	r2, r3
 8001132:	f000 80f4 	beq.w	800131e <MenuGUI+0x24a>
		{
			switch(Mode_Displayed)
 8001136:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800113a:	2b05      	cmp	r3, #5
 800113c:	d86d      	bhi.n	800121a <MenuGUI+0x146>
 800113e:	a201      	add	r2, pc, #4	; (adr r2, 8001144 <MenuGUI+0x70>)
 8001140:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001144:	0800115d 	.word	0x0800115d
 8001148:	08001183 	.word	0x08001183
 800114c:	080011a9 	.word	0x080011a9
 8001150:	080011cf 	.word	0x080011cf
 8001154:	080011f5 	.word	0x080011f5
 8001158:	0800121b 	.word	0x0800121b
			{
				case Continuous:
					SSD1306_GotoXY(3, 37);
 800115c:	2125      	movs	r1, #37	; 0x25
 800115e:	2003      	movs	r0, #3
 8001160:	f004 fb6e 	bl	8005840 <SSD1306_GotoXY>
					SSD1306_Puts("            ", &Font_11x18, 1);
 8001164:	2201      	movs	r2, #1
 8001166:	497f      	ldr	r1, [pc, #508]	; (8001364 <MenuGUI+0x290>)
 8001168:	487f      	ldr	r0, [pc, #508]	; (8001368 <MenuGUI+0x294>)
 800116a:	f004 fbff 	bl	800596c <SSD1306_Puts>
					SSD1306_GotoXY(8, 37);
 800116e:	2125      	movs	r1, #37	; 0x25
 8001170:	2008      	movs	r0, #8
 8001172:	f004 fb65 	bl	8005840 <SSD1306_GotoXY>
					SSD1306_Puts("Continuous", &Font_11x18, 1);
 8001176:	2201      	movs	r2, #1
 8001178:	497a      	ldr	r1, [pc, #488]	; (8001364 <MenuGUI+0x290>)
 800117a:	487c      	ldr	r0, [pc, #496]	; (800136c <MenuGUI+0x298>)
 800117c:	f004 fbf6 	bl	800596c <SSD1306_Puts>
				break;
 8001180:	e04b      	b.n	800121a <MenuGUI+0x146>
				case Hold:
					SSD1306_GotoXY(3, 37);
 8001182:	2125      	movs	r1, #37	; 0x25
 8001184:	2003      	movs	r0, #3
 8001186:	f004 fb5b 	bl	8005840 <SSD1306_GotoXY>
					SSD1306_Puts("             ", &Font_11x18, 1);
 800118a:	2201      	movs	r2, #1
 800118c:	4975      	ldr	r1, [pc, #468]	; (8001364 <MenuGUI+0x290>)
 800118e:	4878      	ldr	r0, [pc, #480]	; (8001370 <MenuGUI+0x29c>)
 8001190:	f004 fbec 	bl	800596c <SSD1306_Puts>
					SSD1306_GotoXY(41, 37);
 8001194:	2125      	movs	r1, #37	; 0x25
 8001196:	2029      	movs	r0, #41	; 0x29
 8001198:	f004 fb52 	bl	8005840 <SSD1306_GotoXY>
					SSD1306_Puts("Hold", &Font_11x18, 1);
 800119c:	2201      	movs	r2, #1
 800119e:	4971      	ldr	r1, [pc, #452]	; (8001364 <MenuGUI+0x290>)
 80011a0:	4874      	ldr	r0, [pc, #464]	; (8001374 <MenuGUI+0x2a0>)
 80011a2:	f004 fbe3 	bl	800596c <SSD1306_Puts>
				break;
 80011a6:	e038      	b.n	800121a <MenuGUI+0x146>
				case Plot:
					SSD1306_GotoXY(3, 37);
 80011a8:	2125      	movs	r1, #37	; 0x25
 80011aa:	2003      	movs	r0, #3
 80011ac:	f004 fb48 	bl	8005840 <SSD1306_GotoXY>
					SSD1306_Puts("             ", &Font_11x18, 1);
 80011b0:	2201      	movs	r2, #1
 80011b2:	496c      	ldr	r1, [pc, #432]	; (8001364 <MenuGUI+0x290>)
 80011b4:	486e      	ldr	r0, [pc, #440]	; (8001370 <MenuGUI+0x29c>)
 80011b6:	f004 fbd9 	bl	800596c <SSD1306_Puts>
					SSD1306_GotoXY(41, 37);
 80011ba:	2125      	movs	r1, #37	; 0x25
 80011bc:	2029      	movs	r0, #41	; 0x29
 80011be:	f004 fb3f 	bl	8005840 <SSD1306_GotoXY>
					SSD1306_Puts("Plot", &Font_11x18, 1);
 80011c2:	2201      	movs	r2, #1
 80011c4:	4967      	ldr	r1, [pc, #412]	; (8001364 <MenuGUI+0x290>)
 80011c6:	486c      	ldr	r0, [pc, #432]	; (8001378 <MenuGUI+0x2a4>)
 80011c8:	f004 fbd0 	bl	800596c <SSD1306_Puts>
				break;
 80011cc:	e025      	b.n	800121a <MenuGUI+0x146>
				case Select_Sensor:
					SSD1306_GotoXY(3, 37);
 80011ce:	2125      	movs	r1, #37	; 0x25
 80011d0:	2003      	movs	r0, #3
 80011d2:	f004 fb35 	bl	8005840 <SSD1306_GotoXY>
					SSD1306_Puts("             ", &Font_11x18, 1);
 80011d6:	2201      	movs	r2, #1
 80011d8:	4962      	ldr	r1, [pc, #392]	; (8001364 <MenuGUI+0x290>)
 80011da:	4865      	ldr	r0, [pc, #404]	; (8001370 <MenuGUI+0x29c>)
 80011dc:	f004 fbc6 	bl	800596c <SSD1306_Puts>
					SSD1306_GotoXY(9, 37);
 80011e0:	2125      	movs	r1, #37	; 0x25
 80011e2:	2009      	movs	r0, #9
 80011e4:	f004 fb2c 	bl	8005840 <SSD1306_GotoXY>
					SSD1306_Puts("Sel Sensor", &Font_11x18, 1);
 80011e8:	2201      	movs	r2, #1
 80011ea:	495e      	ldr	r1, [pc, #376]	; (8001364 <MenuGUI+0x290>)
 80011ec:	4863      	ldr	r0, [pc, #396]	; (800137c <MenuGUI+0x2a8>)
 80011ee:	f004 fbbd 	bl	800596c <SSD1306_Puts>
				break;
 80011f2:	e012      	b.n	800121a <MenuGUI+0x146>
				case Reset_Sensor:
					SSD1306_GotoXY(3, 37);
 80011f4:	2125      	movs	r1, #37	; 0x25
 80011f6:	2003      	movs	r0, #3
 80011f8:	f004 fb22 	bl	8005840 <SSD1306_GotoXY>
					SSD1306_Puts("             ", &Font_11x18, 1);
 80011fc:	2201      	movs	r2, #1
 80011fe:	4959      	ldr	r1, [pc, #356]	; (8001364 <MenuGUI+0x290>)
 8001200:	485b      	ldr	r0, [pc, #364]	; (8001370 <MenuGUI+0x29c>)
 8001202:	f004 fbb3 	bl	800596c <SSD1306_Puts>
					SSD1306_GotoXY(3, 37);
 8001206:	2125      	movs	r1, #37	; 0x25
 8001208:	2003      	movs	r0, #3
 800120a:	f004 fb19 	bl	8005840 <SSD1306_GotoXY>
					SSD1306_Puts("Reset Sense", &Font_11x18, 1);
 800120e:	2201      	movs	r2, #1
 8001210:	4954      	ldr	r1, [pc, #336]	; (8001364 <MenuGUI+0x290>)
 8001212:	485b      	ldr	r0, [pc, #364]	; (8001380 <MenuGUI+0x2ac>)
 8001214:	f004 fbaa 	bl	800596c <SSD1306_Puts>
				break;
 8001218:	bf00      	nop
				case Idle:
				break;
			}
			SSD1306_UpdateScreen();
 800121a:	f004 fa6d 	bl	80056f8 <SSD1306_UpdateScreen>
			HAL_IWDG_Refresh(&hiwdg);
 800121e:	484e      	ldr	r0, [pc, #312]	; (8001358 <MenuGUI+0x284>)
 8001220:	f003 fadc 	bl	80047dc <HAL_IWDG_Refresh>
			//Reading for the selection
			switch(IDR_Read)
 8001224:	4b4e      	ldr	r3, [pc, #312]	; (8001360 <MenuGUI+0x28c>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	2b1b      	cmp	r3, #27
 800122a:	d006      	beq.n	800123a <MenuGUI+0x166>
 800122c:	2b1b      	cmp	r3, #27
 800122e:	d87d      	bhi.n	800132c <MenuGUI+0x258>
 8001230:	2b0f      	cmp	r3, #15
 8001232:	d01e      	beq.n	8001272 <MenuGUI+0x19e>
 8001234:	2b17      	cmp	r3, #23
 8001236:	d00e      	beq.n	8001256 <MenuGUI+0x182>
 8001238:	e078      	b.n	800132c <MenuGUI+0x258>
			{
				case Right:
					Mode_Displayed++;
 800123a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800123e:	b29b      	uxth	r3, r3
 8001240:	3301      	adds	r3, #1
 8001242:	b29b      	uxth	r3, r3
 8001244:	b21b      	sxth	r3, r3
 8001246:	807b      	strh	r3, [r7, #2]
					if(Mode_Displayed > Reset_Sensor)
 8001248:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800124c:	2b04      	cmp	r3, #4
 800124e:	dd6a      	ble.n	8001326 <MenuGUI+0x252>
						Mode_Displayed = Continuous;
 8001250:	2300      	movs	r3, #0
 8001252:	807b      	strh	r3, [r7, #2]
				break;
 8001254:	e067      	b.n	8001326 <MenuGUI+0x252>
				case Left:
					Mode_Displayed--;
 8001256:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800125a:	b29b      	uxth	r3, r3
 800125c:	3b01      	subs	r3, #1
 800125e:	b29b      	uxth	r3, r3
 8001260:	b21b      	sxth	r3, r3
 8001262:	807b      	strh	r3, [r7, #2]
					if(Mode_Displayed < Continuous)
 8001264:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001268:	2b00      	cmp	r3, #0
 800126a:	da5e      	bge.n	800132a <MenuGUI+0x256>
						Mode_Displayed = Reset_Sensor;
 800126c:	2304      	movs	r3, #4
 800126e:	807b      	strh	r3, [r7, #2]
				break;
 8001270:	e05b      	b.n	800132a <MenuGUI+0x256>
				case Ok:
					Configs.Mode = Mode_Displayed;
 8001272:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001276:	b2da      	uxtb	r2, r3
 8001278:	4b36      	ldr	r3, [pc, #216]	; (8001354 <MenuGUI+0x280>)
 800127a:	705a      	strb	r2, [r3, #1]
					Not_Filled = false;
 800127c:	2300      	movs	r3, #0
 800127e:	73fb      	strb	r3, [r7, #15]
					HAL_I2C_Mem_Write(&hi2c1, EEPROM_ADDR, 0x1, 1, (uint8_t *) &Mode_Displayed, 1, 100);
 8001280:	2364      	movs	r3, #100	; 0x64
 8001282:	9302      	str	r3, [sp, #8]
 8001284:	2301      	movs	r3, #1
 8001286:	9301      	str	r3, [sp, #4]
 8001288:	1cbb      	adds	r3, r7, #2
 800128a:	9300      	str	r3, [sp, #0]
 800128c:	2301      	movs	r3, #1
 800128e:	2201      	movs	r2, #1
 8001290:	21a0      	movs	r1, #160	; 0xa0
 8001292:	483c      	ldr	r0, [pc, #240]	; (8001384 <MenuGUI+0x2b0>)
 8001294:	f001 fe12 	bl	8002ebc <HAL_I2C_Mem_Write>
					HAL_IWDG_Refresh(&hiwdg);
 8001298:	482f      	ldr	r0, [pc, #188]	; (8001358 <MenuGUI+0x284>)
 800129a:	f003 fa9f 	bl	80047dc <HAL_IWDG_Refresh>
					for(uint16_t i = 0; i < animation_counts; i++)
 800129e:	2300      	movs	r3, #0
 80012a0:	80fb      	strh	r3, [r7, #6]
 80012a2:	e034      	b.n	800130e <MenuGUI+0x23a>
					{
						switch(Mode_Displayed)
 80012a4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80012a8:	2b05      	cmp	r3, #5
 80012aa:	d82d      	bhi.n	8001308 <MenuGUI+0x234>
 80012ac:	a201      	add	r2, pc, #4	; (adr r2, 80012b4 <MenuGUI+0x1e0>)
 80012ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012b2:	bf00      	nop
 80012b4:	080012cd 	.word	0x080012cd
 80012b8:	080012d9 	.word	0x080012d9
 80012bc:	080012e5 	.word	0x080012e5
 80012c0:	080012f1 	.word	0x080012f1
 80012c4:	080012fd 	.word	0x080012fd
 80012c8:	08001309 	.word	0x08001309
						{
							case Continuous:
								Select_animation("Continuous", 8, 37);
 80012cc:	2225      	movs	r2, #37	; 0x25
 80012ce:	2108      	movs	r1, #8
 80012d0:	4826      	ldr	r0, [pc, #152]	; (800136c <MenuGUI+0x298>)
 80012d2:	f000 f85f 	bl	8001394 <Select_animation>
							break;
 80012d6:	e017      	b.n	8001308 <MenuGUI+0x234>
							case Hold:
								Select_animation("Hold      ", 41, 37);
 80012d8:	2225      	movs	r2, #37	; 0x25
 80012da:	2129      	movs	r1, #41	; 0x29
 80012dc:	482a      	ldr	r0, [pc, #168]	; (8001388 <MenuGUI+0x2b4>)
 80012de:	f000 f859 	bl	8001394 <Select_animation>
							break;
 80012e2:	e011      	b.n	8001308 <MenuGUI+0x234>
							case Plot:
								Select_animation("Plot      ", 41, 37);
 80012e4:	2225      	movs	r2, #37	; 0x25
 80012e6:	2129      	movs	r1, #41	; 0x29
 80012e8:	4828      	ldr	r0, [pc, #160]	; (800138c <MenuGUI+0x2b8>)
 80012ea:	f000 f853 	bl	8001394 <Select_animation>
							break;
 80012ee:	e00b      	b.n	8001308 <MenuGUI+0x234>
							case Select_Sensor:
								Select_animation("Sel Sensor", 9, 37);
 80012f0:	2225      	movs	r2, #37	; 0x25
 80012f2:	2109      	movs	r1, #9
 80012f4:	4821      	ldr	r0, [pc, #132]	; (800137c <MenuGUI+0x2a8>)
 80012f6:	f000 f84d 	bl	8001394 <Select_animation>
							break;
 80012fa:	e005      	b.n	8001308 <MenuGUI+0x234>
							case Reset_Sensor:
								Select_animation("Reset Sense", 3, 37);
 80012fc:	2225      	movs	r2, #37	; 0x25
 80012fe:	2103      	movs	r1, #3
 8001300:	481f      	ldr	r0, [pc, #124]	; (8001380 <MenuGUI+0x2ac>)
 8001302:	f000 f847 	bl	8001394 <Select_animation>
							break;
 8001306:	bf00      	nop
					for(uint16_t i = 0; i < animation_counts; i++)
 8001308:	88fb      	ldrh	r3, [r7, #6]
 800130a:	3301      	adds	r3, #1
 800130c:	80fb      	strh	r3, [r7, #6]
 800130e:	88fa      	ldrh	r2, [r7, #6]
 8001310:	88bb      	ldrh	r3, [r7, #4]
 8001312:	429a      	cmp	r2, r3
 8001314:	d3c6      	bcc.n	80012a4 <MenuGUI+0x1d0>
							case Idle:
							break;
						}
					}
					Timer_Delay_250ms(1);
 8001316:	2001      	movs	r0, #1
 8001318:	f000 f9ba 	bl	8001690 <Timer_Delay_250ms>
				break;
 800131c:	e006      	b.n	800132c <MenuGUI+0x258>
			}
		}
		else
			HAL_IWDG_Refresh(&hiwdg);
 800131e:	480e      	ldr	r0, [pc, #56]	; (8001358 <MenuGUI+0x284>)
 8001320:	f003 fa5c 	bl	80047dc <HAL_IWDG_Refresh>
 8001324:	e002      	b.n	800132c <MenuGUI+0x258>
				break;
 8001326:	bf00      	nop
 8001328:	e000      	b.n	800132c <MenuGUI+0x258>
				break;
 800132a:	bf00      	nop
		Past_IDR_Read = IDR_Read;
 800132c:	4b0c      	ldr	r3, [pc, #48]	; (8001360 <MenuGUI+0x28c>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	60bb      	str	r3, [r7, #8]
	}while(Not_Filled && ISR != MCU_Reset);
 8001332:	7bfb      	ldrb	r3, [r7, #15]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d005      	beq.n	8001344 <MenuGUI+0x270>
 8001338:	4b15      	ldr	r3, [pc, #84]	; (8001390 <MenuGUI+0x2bc>)
 800133a:	781b      	ldrb	r3, [r3, #0]
 800133c:	b2db      	uxtb	r3, r3
 800133e:	2b00      	cmp	r3, #0
 8001340:	f47f aeea 	bne.w	8001118 <MenuGUI+0x44>
}
 8001344:	bf00      	nop
 8001346:	3710      	adds	r7, #16
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}
 800134c:	2000001c 	.word	0x2000001c
 8001350:	08006798 	.word	0x08006798
 8001354:	200001a8 	.word	0x200001a8
 8001358:	20000194 	.word	0x20000194
 800135c:	40010800 	.word	0x40010800
 8001360:	200001bc 	.word	0x200001bc
 8001364:	20000014 	.word	0x20000014
 8001368:	080067a0 	.word	0x080067a0
 800136c:	08006724 	.word	0x08006724
 8001370:	080067b0 	.word	0x080067b0
 8001374:	08006730 	.word	0x08006730
 8001378:	080067c0 	.word	0x080067c0
 800137c:	080067c8 	.word	0x080067c8
 8001380:	080067d4 	.word	0x080067d4
 8001384:	200000a4 	.word	0x200000a4
 8001388:	080067e0 	.word	0x080067e0
 800138c:	080067ec 	.word	0x080067ec
 8001390:	200001a1 	.word	0x200001a1

08001394 <Select_animation>:

//@TODO Code a fancy animation
void Select_animation(char String[], uint16_t x, uint16_t y)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
 800139c:	460b      	mov	r3, r1
 800139e:	807b      	strh	r3, [r7, #2]
 80013a0:	4613      	mov	r3, r2
 80013a2:	803b      	strh	r3, [r7, #0]
	static uint32_t i = 0;
	extern const uint16_t animation_counts;
	HAL_IWDG_Refresh(&hiwdg);
 80013a4:	4811      	ldr	r0, [pc, #68]	; (80013ec <Select_animation+0x58>)
 80013a6:	f003 fa19 	bl	80047dc <HAL_IWDG_Refresh>
	SSD1306_GotoXY(x, y);
 80013aa:	883a      	ldrh	r2, [r7, #0]
 80013ac:	887b      	ldrh	r3, [r7, #2]
 80013ae:	4611      	mov	r1, r2
 80013b0:	4618      	mov	r0, r3
 80013b2:	f004 fa45 	bl	8005840 <SSD1306_GotoXY>
	SSD1306_Puts(String, &Font_11x18, 1);
 80013b6:	2201      	movs	r2, #1
 80013b8:	490d      	ldr	r1, [pc, #52]	; (80013f0 <Select_animation+0x5c>)
 80013ba:	6878      	ldr	r0, [r7, #4]
 80013bc:	f004 fad6 	bl	800596c <SSD1306_Puts>
	SSD1306_UpdateScreen();
 80013c0:	f004 f99a 	bl	80056f8 <SSD1306_UpdateScreen>
	//Timer_Delay_250ms(1);
	Timer_Delay_at_274PSC(30000, 1);
 80013c4:	2101      	movs	r1, #1
 80013c6:	f247 5030 	movw	r0, #30000	; 0x7530
 80013ca:	f000 f971 	bl	80016b0 <Timer_Delay_at_274PSC>
	SSD1306_GotoXY(3, 37);
 80013ce:	2125      	movs	r1, #37	; 0x25
 80013d0:	2003      	movs	r0, #3
 80013d2:	f004 fa35 	bl	8005840 <SSD1306_GotoXY>
	SSD1306_Puts("            ", &Font_11x18, 1);
 80013d6:	2201      	movs	r2, #1
 80013d8:	4905      	ldr	r1, [pc, #20]	; (80013f0 <Select_animation+0x5c>)
 80013da:	4806      	ldr	r0, [pc, #24]	; (80013f4 <Select_animation+0x60>)
 80013dc:	f004 fac6 	bl	800596c <SSD1306_Puts>
	SSD1306_UpdateScreen();
 80013e0:	f004 f98a 	bl	80056f8 <SSD1306_UpdateScreen>
	if(i == animation_counts)
	{

	}

}
 80013e4:	bf00      	nop
 80013e6:	3708      	adds	r7, #8
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	20000194 	.word	0x20000194
 80013f0:	20000014 	.word	0x20000014
 80013f4:	080067a0 	.word	0x080067a0

080013f8 <MCU_Reset_Subrutine>:

void MCU_Reset_Subrutine(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	af00      	add	r7, sp, #0
	SSD1306_Clear();
 80013fc:	f004 fadb 	bl	80059b6 <SSD1306_Clear>
	SSD1306_GotoXY(23, 17);
 8001400:	2111      	movs	r1, #17
 8001402:	2017      	movs	r0, #23
 8001404:	f004 fa1c 	bl	8005840 <SSD1306_GotoXY>
	SSD1306_Puts("Reset", &Font_16x26, 1);
 8001408:	2201      	movs	r2, #1
 800140a:	4905      	ldr	r1, [pc, #20]	; (8001420 <MCU_Reset_Subrutine+0x28>)
 800140c:	4805      	ldr	r0, [pc, #20]	; (8001424 <MCU_Reset_Subrutine+0x2c>)
 800140e:	f004 faad 	bl	800596c <SSD1306_Puts>
	SSD1306_UpdateScreen();
 8001412:	f004 f971 	bl	80056f8 <SSD1306_UpdateScreen>
	Timer_Delay_250ms(Seconds(1.5f));
 8001416:	2006      	movs	r0, #6
 8001418:	f000 f93a 	bl	8001690 <Timer_Delay_250ms>
	NVIC_SystemReset(); //Reset de MCU
 800141c:	f7ff fc96 	bl	8000d4c <__NVIC_SystemReset>
 8001420:	2000001c 	.word	0x2000001c
 8001424:	080067f8 	.word	0x080067f8

08001428 <Fatal_Error_EEPROM>:
}

//OLED Prints
void Fatal_Error_EEPROM(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0
	if(!Errors.EEPROM_Fatal)
 800142c:	4b13      	ldr	r3, [pc, #76]	; (800147c <Fatal_Error_EEPROM+0x54>)
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d121      	bne.n	8001478 <Fatal_Error_EEPROM+0x50>
	{
		SSD1306_Clear();
 8001434:	f004 fabf 	bl	80059b6 <SSD1306_Clear>
		SSD1306_GotoXY(3, 18);
 8001438:	2112      	movs	r1, #18
 800143a:	2003      	movs	r0, #3
 800143c:	f004 fa00 	bl	8005840 <SSD1306_GotoXY>
		SSD1306_Puts("Fatal Error: EEPROM", &Font_7x10, 1);
 8001440:	2201      	movs	r2, #1
 8001442:	490f      	ldr	r1, [pc, #60]	; (8001480 <Fatal_Error_EEPROM+0x58>)
 8001444:	480f      	ldr	r0, [pc, #60]	; (8001484 <Fatal_Error_EEPROM+0x5c>)
 8001446:	f004 fa91 	bl	800596c <SSD1306_Puts>
		SSD1306_GotoXY(6, 33);
 800144a:	2121      	movs	r1, #33	; 0x21
 800144c:	2006      	movs	r0, #6
 800144e:	f004 f9f7 	bl	8005840 <SSD1306_GotoXY>
		SSD1306_Puts("Press OK to continue", &Font_7x10, 1);
 8001452:	2201      	movs	r2, #1
 8001454:	490a      	ldr	r1, [pc, #40]	; (8001480 <Fatal_Error_EEPROM+0x58>)
 8001456:	480c      	ldr	r0, [pc, #48]	; (8001488 <Fatal_Error_EEPROM+0x60>)
 8001458:	f004 fa88 	bl	800596c <SSD1306_Puts>
		SSD1306_UpdateScreen();
 800145c:	f004 f94c 	bl	80056f8 <SSD1306_UpdateScreen>
		HAL_IWDG_Refresh(&hiwdg);
 8001460:	480a      	ldr	r0, [pc, #40]	; (800148c <Fatal_Error_EEPROM+0x64>)
 8001462:	f003 f9bb 	bl	80047dc <HAL_IWDG_Refresh>
		wait_until_press(Ok);
 8001466:	200f      	movs	r0, #15
 8001468:	f000 f8ee 	bl	8001648 <wait_until_press>
		Errors.EEPROM_Fatal = true;
 800146c:	4b03      	ldr	r3, [pc, #12]	; (800147c <Fatal_Error_EEPROM+0x54>)
 800146e:	2201      	movs	r2, #1
 8001470:	701a      	strb	r2, [r3, #0]
		HAL_IWDG_Refresh(&hiwdg);
 8001472:	4806      	ldr	r0, [pc, #24]	; (800148c <Fatal_Error_EEPROM+0x64>)
 8001474:	f003 f9b2 	bl	80047dc <HAL_IWDG_Refresh>
	}
}
 8001478:	bf00      	nop
 800147a:	bd80      	pop	{r7, pc}
 800147c:	200001a4 	.word	0x200001a4
 8001480:	2000000c 	.word	0x2000000c
 8001484:	08006800 	.word	0x08006800
 8001488:	08006748 	.word	0x08006748
 800148c:	20000194 	.word	0x20000194

08001490 <Fatal_Error_BH1750>:

void Fatal_Error_BH1750(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0
	if(!Errors.BH1750_Fatal)
 8001494:	4b13      	ldr	r3, [pc, #76]	; (80014e4 <Fatal_Error_BH1750+0x54>)
 8001496:	785b      	ldrb	r3, [r3, #1]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d121      	bne.n	80014e0 <Fatal_Error_BH1750+0x50>
	{
		SSD1306_Clear();
 800149c:	f004 fa8b 	bl	80059b6 <SSD1306_Clear>
		SSD1306_GotoXY(3, 18);
 80014a0:	2112      	movs	r1, #18
 80014a2:	2003      	movs	r0, #3
 80014a4:	f004 f9cc 	bl	8005840 <SSD1306_GotoXY>
		SSD1306_Puts("Fatal Error: BH1750", &Font_7x10, 1);
 80014a8:	2201      	movs	r2, #1
 80014aa:	490f      	ldr	r1, [pc, #60]	; (80014e8 <Fatal_Error_BH1750+0x58>)
 80014ac:	480f      	ldr	r0, [pc, #60]	; (80014ec <Fatal_Error_BH1750+0x5c>)
 80014ae:	f004 fa5d 	bl	800596c <SSD1306_Puts>
		SSD1306_GotoXY(6, 33);
 80014b2:	2121      	movs	r1, #33	; 0x21
 80014b4:	2006      	movs	r0, #6
 80014b6:	f004 f9c3 	bl	8005840 <SSD1306_GotoXY>
		SSD1306_Puts("Press OK to continue", &Font_7x10, 1);
 80014ba:	2201      	movs	r2, #1
 80014bc:	490a      	ldr	r1, [pc, #40]	; (80014e8 <Fatal_Error_BH1750+0x58>)
 80014be:	480c      	ldr	r0, [pc, #48]	; (80014f0 <Fatal_Error_BH1750+0x60>)
 80014c0:	f004 fa54 	bl	800596c <SSD1306_Puts>
		SSD1306_UpdateScreen();
 80014c4:	f004 f918 	bl	80056f8 <SSD1306_UpdateScreen>
		HAL_IWDG_Refresh(&hiwdg);
 80014c8:	480a      	ldr	r0, [pc, #40]	; (80014f4 <Fatal_Error_BH1750+0x64>)
 80014ca:	f003 f987 	bl	80047dc <HAL_IWDG_Refresh>
		wait_until_press(Ok);
 80014ce:	200f      	movs	r0, #15
 80014d0:	f000 f8ba 	bl	8001648 <wait_until_press>
		Errors.BH1750_Fatal = true;
 80014d4:	4b03      	ldr	r3, [pc, #12]	; (80014e4 <Fatal_Error_BH1750+0x54>)
 80014d6:	2201      	movs	r2, #1
 80014d8:	705a      	strb	r2, [r3, #1]
		HAL_IWDG_Refresh(&hiwdg);
 80014da:	4806      	ldr	r0, [pc, #24]	; (80014f4 <Fatal_Error_BH1750+0x64>)
 80014dc:	f003 f97e 	bl	80047dc <HAL_IWDG_Refresh>
	}
}
 80014e0:	bf00      	nop
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	200001a4 	.word	0x200001a4
 80014e8:	2000000c 	.word	0x2000000c
 80014ec:	08006814 	.word	0x08006814
 80014f0:	08006748 	.word	0x08006748
 80014f4:	20000194 	.word	0x20000194

080014f8 <NoConnected_BH1750>:

//@TODO error check in NoConnected sensor error function
void NoConnected_BH1750(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	af00      	add	r7, sp, #0
	if(!Errors.BH1750_NoConn)
 80014fc:	4b13      	ldr	r3, [pc, #76]	; (800154c <NoConnected_BH1750+0x54>)
 80014fe:	789b      	ldrb	r3, [r3, #2]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d121      	bne.n	8001548 <NoConnected_BH1750+0x50>
	{
		SSD1306_Clear();
 8001504:	f004 fa57 	bl	80059b6 <SSD1306_Clear>
		SSD1306_GotoXY(3, 18);
 8001508:	2112      	movs	r1, #18
 800150a:	2003      	movs	r0, #3
 800150c:	f004 f998 	bl	8005840 <SSD1306_GotoXY>
		SSD1306_Puts("BH1750 No Connected", &Font_7x10, 1);
 8001510:	2201      	movs	r2, #1
 8001512:	490f      	ldr	r1, [pc, #60]	; (8001550 <NoConnected_BH1750+0x58>)
 8001514:	480f      	ldr	r0, [pc, #60]	; (8001554 <NoConnected_BH1750+0x5c>)
 8001516:	f004 fa29 	bl	800596c <SSD1306_Puts>
		SSD1306_GotoXY(6, 33);
 800151a:	2121      	movs	r1, #33	; 0x21
 800151c:	2006      	movs	r0, #6
 800151e:	f004 f98f 	bl	8005840 <SSD1306_GotoXY>
		SSD1306_Puts("Press OK to continue", &Font_7x10, 1);
 8001522:	2201      	movs	r2, #1
 8001524:	490a      	ldr	r1, [pc, #40]	; (8001550 <NoConnected_BH1750+0x58>)
 8001526:	480c      	ldr	r0, [pc, #48]	; (8001558 <NoConnected_BH1750+0x60>)
 8001528:	f004 fa20 	bl	800596c <SSD1306_Puts>
		SSD1306_UpdateScreen();
 800152c:	f004 f8e4 	bl	80056f8 <SSD1306_UpdateScreen>
		//ISR = None;
		HAL_IWDG_Refresh(&hiwdg);
 8001530:	480a      	ldr	r0, [pc, #40]	; (800155c <NoConnected_BH1750+0x64>)
 8001532:	f003 f953 	bl	80047dc <HAL_IWDG_Refresh>
		wait_until_press(Ok);
 8001536:	200f      	movs	r0, #15
 8001538:	f000 f886 	bl	8001648 <wait_until_press>
		Errors.BH1750_NoConn = true;
 800153c:	4b03      	ldr	r3, [pc, #12]	; (800154c <NoConnected_BH1750+0x54>)
 800153e:	2201      	movs	r2, #1
 8001540:	709a      	strb	r2, [r3, #2]
		HAL_IWDG_Refresh(&hiwdg);
 8001542:	4806      	ldr	r0, [pc, #24]	; (800155c <NoConnected_BH1750+0x64>)
 8001544:	f003 f94a 	bl	80047dc <HAL_IWDG_Refresh>
	}
}
 8001548:	bf00      	nop
 800154a:	bd80      	pop	{r7, pc}
 800154c:	200001a4 	.word	0x200001a4
 8001550:	2000000c 	.word	0x2000000c
 8001554:	08006828 	.word	0x08006828
 8001558:	08006748 	.word	0x08006748
 800155c:	20000194 	.word	0x20000194

08001560 <Print_Measure>:

//@TODO At Print_Measure print allways in the center
void Print_Measure(float Measure, uint16_t x, uint16_t y)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b088      	sub	sp, #32
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
 8001568:	460b      	mov	r3, r1
 800156a:	807b      	strh	r3, [r7, #2]
 800156c:	4613      	mov	r3, r2
 800156e:	803b      	strh	r3, [r7, #0]
	char Integer_part[5];
	char Fraccional_part[3];
	uint32_t Integer_measure;
	uint32_t Fraccional_measure;

	Integer_measure = (uint32_t) Measure;
 8001570:	6878      	ldr	r0, [r7, #4]
 8001572:	f7ff fbcb 	bl	8000d0c <__aeabi_f2uiz>
 8001576:	4603      	mov	r3, r0
 8001578:	61fb      	str	r3, [r7, #28]
	Integer_measure = (uint32_t) Measure;
 800157a:	6878      	ldr	r0, [r7, #4]
 800157c:	f7ff fbc6 	bl	8000d0c <__aeabi_f2uiz>
 8001580:	4603      	mov	r3, r0
 8001582:	61fb      	str	r3, [r7, #28]
	Fraccional_measure = (uint32_t) ((Measure - Integer_measure) * 100);
 8001584:	69f8      	ldr	r0, [r7, #28]
 8001586:	f7ff fb69 	bl	8000c5c <__aeabi_ui2f>
 800158a:	4603      	mov	r3, r0
 800158c:	4619      	mov	r1, r3
 800158e:	6878      	ldr	r0, [r7, #4]
 8001590:	f7ff fab2 	bl	8000af8 <__aeabi_fsub>
 8001594:	4603      	mov	r3, r0
 8001596:	4926      	ldr	r1, [pc, #152]	; (8001630 <Print_Measure+0xd0>)
 8001598:	4618      	mov	r0, r3
 800159a:	f7fe fdd7 	bl	800014c <__aeabi_fmul>
 800159e:	4603      	mov	r3, r0
 80015a0:	4618      	mov	r0, r3
 80015a2:	f7ff fbb3 	bl	8000d0c <__aeabi_f2uiz>
 80015a6:	4603      	mov	r3, r0
 80015a8:	61bb      	str	r3, [r7, #24]
	sprintf(Integer_part, "%d", (int)Integer_measure);
 80015aa:	69fa      	ldr	r2, [r7, #28]
 80015ac:	f107 0310 	add.w	r3, r7, #16
 80015b0:	4920      	ldr	r1, [pc, #128]	; (8001634 <Print_Measure+0xd4>)
 80015b2:	4618      	mov	r0, r3
 80015b4:	f004 fc26 	bl	8005e04 <siprintf>
	sprintf(Fraccional_part, "%d", (int)Fraccional_measure);
 80015b8:	69ba      	ldr	r2, [r7, #24]
 80015ba:	f107 030c 	add.w	r3, r7, #12
 80015be:	491d      	ldr	r1, [pc, #116]	; (8001634 <Print_Measure+0xd4>)
 80015c0:	4618      	mov	r0, r3
 80015c2:	f004 fc1f 	bl	8005e04 <siprintf>
	HAL_IWDG_Refresh(&hiwdg);
 80015c6:	481c      	ldr	r0, [pc, #112]	; (8001638 <Print_Measure+0xd8>)
 80015c8:	f003 f908 	bl	80047dc <HAL_IWDG_Refresh>

	SSD1306_GotoXY(x, y);
 80015cc:	883a      	ldrh	r2, [r7, #0]
 80015ce:	887b      	ldrh	r3, [r7, #2]
 80015d0:	4611      	mov	r1, r2
 80015d2:	4618      	mov	r0, r3
 80015d4:	f004 f934 	bl	8005840 <SSD1306_GotoXY>
	SSD1306_Puts("         ", &Font_11x18, 1);
 80015d8:	2201      	movs	r2, #1
 80015da:	4918      	ldr	r1, [pc, #96]	; (800163c <Print_Measure+0xdc>)
 80015dc:	4818      	ldr	r0, [pc, #96]	; (8001640 <Print_Measure+0xe0>)
 80015de:	f004 f9c5 	bl	800596c <SSD1306_Puts>
	SSD1306_GotoXY(x, y);
 80015e2:	883a      	ldrh	r2, [r7, #0]
 80015e4:	887b      	ldrh	r3, [r7, #2]
 80015e6:	4611      	mov	r1, r2
 80015e8:	4618      	mov	r0, r3
 80015ea:	f004 f929 	bl	8005840 <SSD1306_GotoXY>
	SSD1306_Puts(Integer_part, &Font_11x18, 1);
 80015ee:	f107 0310 	add.w	r3, r7, #16
 80015f2:	2201      	movs	r2, #1
 80015f4:	4911      	ldr	r1, [pc, #68]	; (800163c <Print_Measure+0xdc>)
 80015f6:	4618      	mov	r0, r3
 80015f8:	f004 f9b8 	bl	800596c <SSD1306_Puts>
	SSD1306_Putc('.', &Font_11x18, 1);
 80015fc:	2201      	movs	r2, #1
 80015fe:	490f      	ldr	r1, [pc, #60]	; (800163c <Print_Measure+0xdc>)
 8001600:	202e      	movs	r0, #46	; 0x2e
 8001602:	f004 f933 	bl	800586c <SSD1306_Putc>
	SSD1306_Puts(Fraccional_part, &Font_11x18, 1);
 8001606:	f107 030c 	add.w	r3, r7, #12
 800160a:	2201      	movs	r2, #1
 800160c:	490b      	ldr	r1, [pc, #44]	; (800163c <Print_Measure+0xdc>)
 800160e:	4618      	mov	r0, r3
 8001610:	f004 f9ac 	bl	800596c <SSD1306_Puts>
	SSD1306_Puts("lx", &Font_11x18, 1);
 8001614:	2201      	movs	r2, #1
 8001616:	4909      	ldr	r1, [pc, #36]	; (800163c <Print_Measure+0xdc>)
 8001618:	480a      	ldr	r0, [pc, #40]	; (8001644 <Print_Measure+0xe4>)
 800161a:	f004 f9a7 	bl	800596c <SSD1306_Puts>
	HAL_IWDG_Refresh(&hiwdg);
 800161e:	4806      	ldr	r0, [pc, #24]	; (8001638 <Print_Measure+0xd8>)
 8001620:	f003 f8dc 	bl	80047dc <HAL_IWDG_Refresh>
	SSD1306_UpdateScreen();
 8001624:	f004 f868 	bl	80056f8 <SSD1306_UpdateScreen>
}
 8001628:	bf00      	nop
 800162a:	3720      	adds	r7, #32
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}
 8001630:	42c80000 	.word	0x42c80000
 8001634:	0800683c 	.word	0x0800683c
 8001638:	20000194 	.word	0x20000194
 800163c:	20000014 	.word	0x20000014
 8001640:	08006840 	.word	0x08006840
 8001644:	0800684c 	.word	0x0800684c

08001648 <wait_until_press>:

void wait_until_press(Buttons Button)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0
 800164e:	4603      	mov	r3, r0
 8001650:	71fb      	strb	r3, [r7, #7]
	do{
		IDR_Read = (GPIOA -> IDR & ReadMask);
 8001652:	4b0b      	ldr	r3, [pc, #44]	; (8001680 <wait_until_press+0x38>)
 8001654:	689b      	ldr	r3, [r3, #8]
 8001656:	f003 031f 	and.w	r3, r3, #31
 800165a:	4a0a      	ldr	r2, [pc, #40]	; (8001684 <wait_until_press+0x3c>)
 800165c:	6013      	str	r3, [r2, #0]
		HAL_IWDG_Refresh(&hiwdg);
 800165e:	480a      	ldr	r0, [pc, #40]	; (8001688 <wait_until_press+0x40>)
 8001660:	f003 f8bc 	bl	80047dc <HAL_IWDG_Refresh>
	}while(IDR_Read != Button && ISR == None);
 8001664:	79fa      	ldrb	r2, [r7, #7]
 8001666:	4b07      	ldr	r3, [pc, #28]	; (8001684 <wait_until_press+0x3c>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	429a      	cmp	r2, r3
 800166c:	d004      	beq.n	8001678 <wait_until_press+0x30>
 800166e:	4b07      	ldr	r3, [pc, #28]	; (800168c <wait_until_press+0x44>)
 8001670:	781b      	ldrb	r3, [r3, #0]
 8001672:	b2db      	uxtb	r3, r3
 8001674:	2b02      	cmp	r3, #2
 8001676:	d0ec      	beq.n	8001652 <wait_until_press+0xa>
}
 8001678:	bf00      	nop
 800167a:	3708      	adds	r7, #8
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	40010800 	.word	0x40010800
 8001684:	200001bc 	.word	0x200001bc
 8001688:	20000194 	.word	0x20000194
 800168c:	200001a1 	.word	0x200001a1

08001690 <Timer_Delay_250ms>:
			HAL_IWDG_Refresh(&hiwdg);
	}
}

void Timer_Delay_250ms(uint16_t Value)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b082      	sub	sp, #8
 8001694:	af00      	add	r7, sp, #0
 8001696:	4603      	mov	r3, r0
 8001698:	80fb      	strh	r3, [r7, #6]
	Timer_Delay_at_274PSC(EndOfCounts250ms, Value);
 800169a:	88fb      	ldrh	r3, [r7, #6]
 800169c:	4619      	mov	r1, r3
 800169e:	f64f 70ae 	movw	r0, #65454	; 0xffae
 80016a2:	f000 f805 	bl	80016b0 <Timer_Delay_at_274PSC>
}
 80016a6:	bf00      	nop
 80016a8:	3708      	adds	r7, #8
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
	...

080016b0 <Timer_Delay_at_274PSC>:

void Timer_Delay_at_274PSC(uint16_t Counts, uint16_t Overflows) //Period of 0.000003806
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b084      	sub	sp, #16
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	4603      	mov	r3, r0
 80016b8:	460a      	mov	r2, r1
 80016ba:	80fb      	strh	r3, [r7, #6]
 80016bc:	4613      	mov	r3, r2
 80016be:	80bb      	strh	r3, [r7, #4]
	if(Overflows == 0)
 80016c0:	88bb      	ldrh	r3, [r7, #4]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d102      	bne.n	80016cc <Timer_Delay_at_274PSC+0x1c>
		Overflows++;
 80016c6:	88bb      	ldrh	r3, [r7, #4]
 80016c8:	3301      	adds	r3, #1
 80016ca:	80bb      	strh	r3, [r7, #4]
	bool Time_not_reached = true;
 80016cc:	2301      	movs	r3, #1
 80016ce:	73fb      	strb	r3, [r7, #15]
	uint32_t i = 0;
 80016d0:	2300      	movs	r3, #0
 80016d2:	60bb      	str	r3, [r7, #8]
	__HAL_TIM_SET_COUNTER(&htim4, 0);
 80016d4:	4b10      	ldr	r3, [pc, #64]	; (8001718 <Timer_Delay_at_274PSC+0x68>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	2200      	movs	r2, #0
 80016da:	625a      	str	r2, [r3, #36]	; 0x24
	do{
		HAL_IWDG_Refresh(&hiwdg);
 80016dc:	480f      	ldr	r0, [pc, #60]	; (800171c <Timer_Delay_at_274PSC+0x6c>)
 80016de:	f003 f87d 	bl	80047dc <HAL_IWDG_Refresh>
		if(__HAL_TIM_GET_COUNTER(&htim4) == Counts)
 80016e2:	4b0d      	ldr	r3, [pc, #52]	; (8001718 <Timer_Delay_at_274PSC+0x68>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80016e8:	88fb      	ldrh	r3, [r7, #6]
 80016ea:	429a      	cmp	r2, r3
 80016ec:	d106      	bne.n	80016fc <Timer_Delay_at_274PSC+0x4c>
		{
			__HAL_TIM_SET_COUNTER(&htim4, 0);
 80016ee:	4b0a      	ldr	r3, [pc, #40]	; (8001718 <Timer_Delay_at_274PSC+0x68>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	2200      	movs	r2, #0
 80016f4:	625a      	str	r2, [r3, #36]	; 0x24
			i++;
 80016f6:	68bb      	ldr	r3, [r7, #8]
 80016f8:	3301      	adds	r3, #1
 80016fa:	60bb      	str	r3, [r7, #8]
		}
		if(i == Overflows)
 80016fc:	88bb      	ldrh	r3, [r7, #4]
 80016fe:	68ba      	ldr	r2, [r7, #8]
 8001700:	429a      	cmp	r2, r3
 8001702:	d101      	bne.n	8001708 <Timer_Delay_at_274PSC+0x58>
			Time_not_reached = false;
 8001704:	2300      	movs	r3, #0
 8001706:	73fb      	strb	r3, [r7, #15]
	}while(Time_not_reached);
 8001708:	7bfb      	ldrb	r3, [r7, #15]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d1e6      	bne.n	80016dc <Timer_Delay_at_274PSC+0x2c>
}
 800170e:	bf00      	nop
 8001710:	bf00      	nop
 8001712:	3710      	adds	r7, #16
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}
 8001718:	2000014c 	.word	0x2000014c
 800171c:	20000194 	.word	0x20000194

08001720 <SensorRead>:

void SensorRead(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	af00      	add	r7, sp, #0
	switch(Sensor)
 8001724:	4b08      	ldr	r3, [pc, #32]	; (8001748 <SensorRead+0x28>)
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d001      	beq.n	8001730 <SensorRead+0x10>
 800172c:	2b01      	cmp	r3, #1
		case _BH1750:
			if(BH1750_Read(&BH1750, &Measure) != Rojo_OK)
				NoConnected_BH1750();
		break;
		case _TSL2561:
		break;
 800172e:	e009      	b.n	8001744 <SensorRead+0x24>
			if(BH1750_Read(&BH1750, &Measure) != Rojo_OK)
 8001730:	4906      	ldr	r1, [pc, #24]	; (800174c <SensorRead+0x2c>)
 8001732:	4807      	ldr	r0, [pc, #28]	; (8001750 <SensorRead+0x30>)
 8001734:	f004 fabe 	bl	8005cb4 <BH1750_Read>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d001      	beq.n	8001742 <SensorRead+0x22>
				NoConnected_BH1750();
 800173e:	f7ff fedb 	bl	80014f8 <NoConnected_BH1750>
		break;
 8001742:	bf00      	nop
	}
}
 8001744:	bf00      	nop
 8001746:	bd80      	pop	{r7, pc}
 8001748:	200001a0 	.word	0x200001a0
 800174c:	200001ac 	.word	0x200001ac
 8001750:	200001b0 	.word	0x200001b0

08001754 <Configs_init>:

void Configs_init(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
	Configs.Factory_Values = 0;
 8001758:	4b07      	ldr	r3, [pc, #28]	; (8001778 <Configs_init+0x24>)
 800175a:	2200      	movs	r2, #0
 800175c:	701a      	strb	r2, [r3, #0]
	Configs.Last_Mode = Idle;
 800175e:	4b06      	ldr	r3, [pc, #24]	; (8001778 <Configs_init+0x24>)
 8001760:	2205      	movs	r2, #5
 8001762:	709a      	strb	r2, [r3, #2]
	Configs.Mode = Continuous;
 8001764:	4b04      	ldr	r3, [pc, #16]	; (8001778 <Configs_init+0x24>)
 8001766:	2200      	movs	r2, #0
 8001768:	705a      	strb	r2, [r3, #1]
	Configs.Resolution = Medium_Res;
 800176a:	4b03      	ldr	r3, [pc, #12]	; (8001778 <Configs_init+0x24>)
 800176c:	2201      	movs	r2, #1
 800176e:	70da      	strb	r2, [r3, #3]
}
 8001770:	bf00      	nop
 8001772:	46bd      	mov	sp, r7
 8001774:	bc80      	pop	{r7}
 8001776:	4770      	bx	lr
 8001778:	200001a8 	.word	0x200001a8

0800177c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800177c:	b480      	push	{r7}
 800177e:	b083      	sub	sp, #12
 8001780:	af00      	add	r7, sp, #0
 8001782:	4603      	mov	r3, r0
 8001784:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_0)
 8001786:	88fb      	ldrh	r3, [r7, #6]
 8001788:	2b01      	cmp	r3, #1
 800178a:	d102      	bne.n	8001792 <HAL_GPIO_EXTI_Callback+0x16>
		ISR = Menu;
 800178c:	4b06      	ldr	r3, [pc, #24]	; (80017a8 <HAL_GPIO_EXTI_Callback+0x2c>)
 800178e:	2201      	movs	r2, #1
 8001790:	701a      	strb	r2, [r3, #0]
	if(GPIO_Pin == GPIO_PIN_1)
 8001792:	88fb      	ldrh	r3, [r7, #6]
 8001794:	2b02      	cmp	r3, #2
 8001796:	d102      	bne.n	800179e <HAL_GPIO_EXTI_Callback+0x22>
		ISR = MCU_Reset;
 8001798:	4b03      	ldr	r3, [pc, #12]	; (80017a8 <HAL_GPIO_EXTI_Callback+0x2c>)
 800179a:	2200      	movs	r2, #0
 800179c:	701a      	strb	r2, [r3, #0]
}
 800179e:	bf00      	nop
 80017a0:	370c      	adds	r7, #12
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bc80      	pop	{r7}
 80017a6:	4770      	bx	lr
 80017a8:	200001a1 	.word	0x200001a1

080017ac <HAL_I2C_ErrorCallback>:

void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b083      	sub	sp, #12
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80017b4:	bf00      	nop
 80017b6:	370c      	adds	r7, #12
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bc80      	pop	{r7}
 80017bc:	4770      	bx	lr

080017be <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017be:	b580      	push	{r7, lr}
 80017c0:	b090      	sub	sp, #64	; 0x40
 80017c2:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017c4:	f107 0318 	add.w	r3, r7, #24
 80017c8:	2228      	movs	r2, #40	; 0x28
 80017ca:	2100      	movs	r1, #0
 80017cc:	4618      	mov	r0, r3
 80017ce:	f004 fb11 	bl	8005df4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017d2:	1d3b      	adds	r3, r7, #4
 80017d4:	2200      	movs	r2, #0
 80017d6:	601a      	str	r2, [r3, #0]
 80017d8:	605a      	str	r2, [r3, #4]
 80017da:	609a      	str	r2, [r3, #8]
 80017dc:	60da      	str	r2, [r3, #12]
 80017de:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80017e0:	2309      	movs	r3, #9
 80017e2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80017e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017e8:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80017ea:	2300      	movs	r3, #0
 80017ec:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017ee:	2301      	movs	r3, #1
 80017f0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80017f2:	2301      	movs	r3, #1
 80017f4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017f6:	2302      	movs	r3, #2
 80017f8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80017fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017fe:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001800:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001804:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001806:	f107 0318 	add.w	r3, r7, #24
 800180a:	4618      	mov	r0, r3
 800180c:	f002 fff6 	bl	80047fc <HAL_RCC_OscConfig>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d001      	beq.n	800181a <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8001816:	f000 f963 	bl	8001ae0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800181a:	230f      	movs	r3, #15
 800181c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800181e:	2302      	movs	r3, #2
 8001820:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001822:	2300      	movs	r3, #0
 8001824:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001826:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800182a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800182c:	2300      	movs	r3, #0
 800182e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001830:	1d3b      	adds	r3, r7, #4
 8001832:	2102      	movs	r1, #2
 8001834:	4618      	mov	r0, r3
 8001836:	f003 fa63 	bl	8004d00 <HAL_RCC_ClockConfig>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d001      	beq.n	8001844 <SystemClock_Config+0x86>
  {
    Error_Handler();
 8001840:	f000 f94e 	bl	8001ae0 <Error_Handler>
  }
}
 8001844:	bf00      	nop
 8001846:	3740      	adds	r7, #64	; 0x40
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}

0800184c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001850:	4b12      	ldr	r3, [pc, #72]	; (800189c <MX_I2C1_Init+0x50>)
 8001852:	4a13      	ldr	r2, [pc, #76]	; (80018a0 <MX_I2C1_Init+0x54>)
 8001854:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001856:	4b11      	ldr	r3, [pc, #68]	; (800189c <MX_I2C1_Init+0x50>)
 8001858:	4a12      	ldr	r2, [pc, #72]	; (80018a4 <MX_I2C1_Init+0x58>)
 800185a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800185c:	4b0f      	ldr	r3, [pc, #60]	; (800189c <MX_I2C1_Init+0x50>)
 800185e:	2200      	movs	r2, #0
 8001860:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001862:	4b0e      	ldr	r3, [pc, #56]	; (800189c <MX_I2C1_Init+0x50>)
 8001864:	2200      	movs	r2, #0
 8001866:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001868:	4b0c      	ldr	r3, [pc, #48]	; (800189c <MX_I2C1_Init+0x50>)
 800186a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800186e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001870:	4b0a      	ldr	r3, [pc, #40]	; (800189c <MX_I2C1_Init+0x50>)
 8001872:	2200      	movs	r2, #0
 8001874:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001876:	4b09      	ldr	r3, [pc, #36]	; (800189c <MX_I2C1_Init+0x50>)
 8001878:	2200      	movs	r2, #0
 800187a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800187c:	4b07      	ldr	r3, [pc, #28]	; (800189c <MX_I2C1_Init+0x50>)
 800187e:	2200      	movs	r2, #0
 8001880:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001882:	4b06      	ldr	r3, [pc, #24]	; (800189c <MX_I2C1_Init+0x50>)
 8001884:	2200      	movs	r2, #0
 8001886:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001888:	4804      	ldr	r0, [pc, #16]	; (800189c <MX_I2C1_Init+0x50>)
 800188a:	f000 fe75 	bl	8002578 <HAL_I2C_Init>
 800188e:	4603      	mov	r3, r0
 8001890:	2b00      	cmp	r3, #0
 8001892:	d001      	beq.n	8001898 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001894:	f000 f924 	bl	8001ae0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001898:	bf00      	nop
 800189a:	bd80      	pop	{r7, pc}
 800189c:	200000a4 	.word	0x200000a4
 80018a0:	40005400 	.word	0x40005400
 80018a4:	00061a80 	.word	0x00061a80

080018a8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80018ac:	4b12      	ldr	r3, [pc, #72]	; (80018f8 <MX_I2C2_Init+0x50>)
 80018ae:	4a13      	ldr	r2, [pc, #76]	; (80018fc <MX_I2C2_Init+0x54>)
 80018b0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 80018b2:	4b11      	ldr	r3, [pc, #68]	; (80018f8 <MX_I2C2_Init+0x50>)
 80018b4:	4a12      	ldr	r2, [pc, #72]	; (8001900 <MX_I2C2_Init+0x58>)
 80018b6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80018b8:	4b0f      	ldr	r3, [pc, #60]	; (80018f8 <MX_I2C2_Init+0x50>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80018be:	4b0e      	ldr	r3, [pc, #56]	; (80018f8 <MX_I2C2_Init+0x50>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80018c4:	4b0c      	ldr	r3, [pc, #48]	; (80018f8 <MX_I2C2_Init+0x50>)
 80018c6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80018ca:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80018cc:	4b0a      	ldr	r3, [pc, #40]	; (80018f8 <MX_I2C2_Init+0x50>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80018d2:	4b09      	ldr	r3, [pc, #36]	; (80018f8 <MX_I2C2_Init+0x50>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80018d8:	4b07      	ldr	r3, [pc, #28]	; (80018f8 <MX_I2C2_Init+0x50>)
 80018da:	2200      	movs	r2, #0
 80018dc:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80018de:	4b06      	ldr	r3, [pc, #24]	; (80018f8 <MX_I2C2_Init+0x50>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80018e4:	4804      	ldr	r0, [pc, #16]	; (80018f8 <MX_I2C2_Init+0x50>)
 80018e6:	f000 fe47 	bl	8002578 <HAL_I2C_Init>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d001      	beq.n	80018f4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80018f0:	f000 f8f6 	bl	8001ae0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80018f4:	bf00      	nop
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	200000f8 	.word	0x200000f8
 80018fc:	40005800 	.word	0x40005800
 8001900:	00061a80 	.word	0x00061a80

08001904 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8001908:	4b09      	ldr	r3, [pc, #36]	; (8001930 <MX_IWDG_Init+0x2c>)
 800190a:	4a0a      	ldr	r2, [pc, #40]	; (8001934 <MX_IWDG_Init+0x30>)
 800190c:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 800190e:	4b08      	ldr	r3, [pc, #32]	; (8001930 <MX_IWDG_Init+0x2c>)
 8001910:	2200      	movs	r2, #0
 8001912:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 4000;
 8001914:	4b06      	ldr	r3, [pc, #24]	; (8001930 <MX_IWDG_Init+0x2c>)
 8001916:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800191a:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 800191c:	4804      	ldr	r0, [pc, #16]	; (8001930 <MX_IWDG_Init+0x2c>)
 800191e:	f002 ff1b 	bl	8004758 <HAL_IWDG_Init>
 8001922:	4603      	mov	r3, r0
 8001924:	2b00      	cmp	r3, #0
 8001926:	d001      	beq.n	800192c <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 8001928:	f000 f8da 	bl	8001ae0 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 800192c:	bf00      	nop
 800192e:	bd80      	pop	{r7, pc}
 8001930:	20000194 	.word	0x20000194
 8001934:	40003000 	.word	0x40003000

08001938 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b086      	sub	sp, #24
 800193c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800193e:	f107 0308 	add.w	r3, r7, #8
 8001942:	2200      	movs	r2, #0
 8001944:	601a      	str	r2, [r3, #0]
 8001946:	605a      	str	r2, [r3, #4]
 8001948:	609a      	str	r2, [r3, #8]
 800194a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800194c:	463b      	mov	r3, r7
 800194e:	2200      	movs	r2, #0
 8001950:	601a      	str	r2, [r3, #0]
 8001952:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001954:	4b1d      	ldr	r3, [pc, #116]	; (80019cc <MX_TIM4_Init+0x94>)
 8001956:	4a1e      	ldr	r2, [pc, #120]	; (80019d0 <MX_TIM4_Init+0x98>)
 8001958:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 274;
 800195a:	4b1c      	ldr	r3, [pc, #112]	; (80019cc <MX_TIM4_Init+0x94>)
 800195c:	f44f 7289 	mov.w	r2, #274	; 0x112
 8001960:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001962:	4b1a      	ldr	r3, [pc, #104]	; (80019cc <MX_TIM4_Init+0x94>)
 8001964:	2200      	movs	r2, #0
 8001966:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001968:	4b18      	ldr	r3, [pc, #96]	; (80019cc <MX_TIM4_Init+0x94>)
 800196a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800196e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001970:	4b16      	ldr	r3, [pc, #88]	; (80019cc <MX_TIM4_Init+0x94>)
 8001972:	2200      	movs	r2, #0
 8001974:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001976:	4b15      	ldr	r3, [pc, #84]	; (80019cc <MX_TIM4_Init+0x94>)
 8001978:	2280      	movs	r2, #128	; 0x80
 800197a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800197c:	4813      	ldr	r0, [pc, #76]	; (80019cc <MX_TIM4_Init+0x94>)
 800197e:	f003 fb43 	bl	8005008 <HAL_TIM_Base_Init>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d001      	beq.n	800198c <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8001988:	f000 f8aa 	bl	8001ae0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800198c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001990:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001992:	f107 0308 	add.w	r3, r7, #8
 8001996:	4619      	mov	r1, r3
 8001998:	480c      	ldr	r0, [pc, #48]	; (80019cc <MX_TIM4_Init+0x94>)
 800199a:	f003 fbcf 	bl	800513c <HAL_TIM_ConfigClockSource>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d001      	beq.n	80019a8 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 80019a4:	f000 f89c 	bl	8001ae0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019a8:	2300      	movs	r3, #0
 80019aa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019ac:	2300      	movs	r3, #0
 80019ae:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80019b0:	463b      	mov	r3, r7
 80019b2:	4619      	mov	r1, r3
 80019b4:	4805      	ldr	r0, [pc, #20]	; (80019cc <MX_TIM4_Init+0x94>)
 80019b6:	f003 fd7d 	bl	80054b4 <HAL_TIMEx_MasterConfigSynchronization>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d001      	beq.n	80019c4 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 80019c0:	f000 f88e 	bl	8001ae0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80019c4:	bf00      	nop
 80019c6:	3718      	adds	r7, #24
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	2000014c 	.word	0x2000014c
 80019d0:	40000800 	.word	0x40000800

080019d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b088      	sub	sp, #32
 80019d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019da:	f107 0310 	add.w	r3, r7, #16
 80019de:	2200      	movs	r2, #0
 80019e0:	601a      	str	r2, [r3, #0]
 80019e2:	605a      	str	r2, [r3, #4]
 80019e4:	609a      	str	r2, [r3, #8]
 80019e6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019e8:	4b38      	ldr	r3, [pc, #224]	; (8001acc <MX_GPIO_Init+0xf8>)
 80019ea:	699b      	ldr	r3, [r3, #24]
 80019ec:	4a37      	ldr	r2, [pc, #220]	; (8001acc <MX_GPIO_Init+0xf8>)
 80019ee:	f043 0310 	orr.w	r3, r3, #16
 80019f2:	6193      	str	r3, [r2, #24]
 80019f4:	4b35      	ldr	r3, [pc, #212]	; (8001acc <MX_GPIO_Init+0xf8>)
 80019f6:	699b      	ldr	r3, [r3, #24]
 80019f8:	f003 0310 	and.w	r3, r3, #16
 80019fc:	60fb      	str	r3, [r7, #12]
 80019fe:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a00:	4b32      	ldr	r3, [pc, #200]	; (8001acc <MX_GPIO_Init+0xf8>)
 8001a02:	699b      	ldr	r3, [r3, #24]
 8001a04:	4a31      	ldr	r2, [pc, #196]	; (8001acc <MX_GPIO_Init+0xf8>)
 8001a06:	f043 0320 	orr.w	r3, r3, #32
 8001a0a:	6193      	str	r3, [r2, #24]
 8001a0c:	4b2f      	ldr	r3, [pc, #188]	; (8001acc <MX_GPIO_Init+0xf8>)
 8001a0e:	699b      	ldr	r3, [r3, #24]
 8001a10:	f003 0320 	and.w	r3, r3, #32
 8001a14:	60bb      	str	r3, [r7, #8]
 8001a16:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a18:	4b2c      	ldr	r3, [pc, #176]	; (8001acc <MX_GPIO_Init+0xf8>)
 8001a1a:	699b      	ldr	r3, [r3, #24]
 8001a1c:	4a2b      	ldr	r2, [pc, #172]	; (8001acc <MX_GPIO_Init+0xf8>)
 8001a1e:	f043 0304 	orr.w	r3, r3, #4
 8001a22:	6193      	str	r3, [r2, #24]
 8001a24:	4b29      	ldr	r3, [pc, #164]	; (8001acc <MX_GPIO_Init+0xf8>)
 8001a26:	699b      	ldr	r3, [r3, #24]
 8001a28:	f003 0304 	and.w	r3, r3, #4
 8001a2c:	607b      	str	r3, [r7, #4]
 8001a2e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a30:	4b26      	ldr	r3, [pc, #152]	; (8001acc <MX_GPIO_Init+0xf8>)
 8001a32:	699b      	ldr	r3, [r3, #24]
 8001a34:	4a25      	ldr	r2, [pc, #148]	; (8001acc <MX_GPIO_Init+0xf8>)
 8001a36:	f043 0308 	orr.w	r3, r3, #8
 8001a3a:	6193      	str	r3, [r2, #24]
 8001a3c:	4b23      	ldr	r3, [pc, #140]	; (8001acc <MX_GPIO_Init+0xf8>)
 8001a3e:	699b      	ldr	r3, [r3, #24]
 8001a40:	f003 0308 	and.w	r3, r3, #8
 8001a44:	603b      	str	r3, [r7, #0]
 8001a46:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001a48:	2200      	movs	r2, #0
 8001a4a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a4e:	4820      	ldr	r0, [pc, #128]	; (8001ad0 <MX_GPIO_Init+0xfc>)
 8001a50:	f000 fd62 	bl	8002518 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001a54:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a58:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a62:	2302      	movs	r3, #2
 8001a64:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a66:	f107 0310 	add.w	r3, r7, #16
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	4818      	ldr	r0, [pc, #96]	; (8001ad0 <MX_GPIO_Init+0xfc>)
 8001a6e:	f000 fbcf 	bl	8002210 <HAL_GPIO_Init>

  /*Configure GPIO pins : Arriba_Pin Abajo_Pin Derecha_Pin Izquierda_Pin
                           Ok_Pin WP_Pin */
  GPIO_InitStruct.Pin = Arriba_Pin|Abajo_Pin|Derecha_Pin|Izquierda_Pin
 8001a72:	233f      	movs	r3, #63	; 0x3f
 8001a74:	613b      	str	r3, [r7, #16]
                          |Ok_Pin|WP_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a76:	2300      	movs	r3, #0
 8001a78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a7e:	f107 0310 	add.w	r3, r7, #16
 8001a82:	4619      	mov	r1, r3
 8001a84:	4813      	ldr	r0, [pc, #76]	; (8001ad4 <MX_GPIO_Init+0x100>)
 8001a86:	f000 fbc3 	bl	8002210 <HAL_GPIO_Init>

  /*Configure GPIO pins : Menu_IT_Pin Reset_IT_Pin */
  GPIO_InitStruct.Pin = Menu_IT_Pin|Reset_IT_Pin;
 8001a8a:	2303      	movs	r3, #3
 8001a8c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001a8e:	4b12      	ldr	r3, [pc, #72]	; (8001ad8 <MX_GPIO_Init+0x104>)
 8001a90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a92:	2300      	movs	r3, #0
 8001a94:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a96:	f107 0310 	add.w	r3, r7, #16
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	480f      	ldr	r0, [pc, #60]	; (8001adc <MX_GPIO_Init+0x108>)
 8001a9e:	f000 fbb7 	bl	8002210 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	2100      	movs	r1, #0
 8001aa6:	2006      	movs	r0, #6
 8001aa8:	f000 fb05 	bl	80020b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001aac:	2006      	movs	r0, #6
 8001aae:	f000 fb1e 	bl	80020ee <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	2100      	movs	r1, #0
 8001ab6:	2007      	movs	r0, #7
 8001ab8:	f000 fafd 	bl	80020b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001abc:	2007      	movs	r0, #7
 8001abe:	f000 fb16 	bl	80020ee <HAL_NVIC_EnableIRQ>

}
 8001ac2:	bf00      	nop
 8001ac4:	3720      	adds	r7, #32
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	40021000 	.word	0x40021000
 8001ad0:	40011000 	.word	0x40011000
 8001ad4:	40010800 	.word	0x40010800
 8001ad8:	10210000 	.word	0x10210000
 8001adc:	40010c00 	.word	0x40010c00

08001ae0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001ae4:	b672      	cpsid	i
}
 8001ae6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ae8:	e7fe      	b.n	8001ae8 <Error_Handler+0x8>
	...

08001aec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b085      	sub	sp, #20
 8001af0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001af2:	4b15      	ldr	r3, [pc, #84]	; (8001b48 <HAL_MspInit+0x5c>)
 8001af4:	699b      	ldr	r3, [r3, #24]
 8001af6:	4a14      	ldr	r2, [pc, #80]	; (8001b48 <HAL_MspInit+0x5c>)
 8001af8:	f043 0301 	orr.w	r3, r3, #1
 8001afc:	6193      	str	r3, [r2, #24]
 8001afe:	4b12      	ldr	r3, [pc, #72]	; (8001b48 <HAL_MspInit+0x5c>)
 8001b00:	699b      	ldr	r3, [r3, #24]
 8001b02:	f003 0301 	and.w	r3, r3, #1
 8001b06:	60bb      	str	r3, [r7, #8]
 8001b08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b0a:	4b0f      	ldr	r3, [pc, #60]	; (8001b48 <HAL_MspInit+0x5c>)
 8001b0c:	69db      	ldr	r3, [r3, #28]
 8001b0e:	4a0e      	ldr	r2, [pc, #56]	; (8001b48 <HAL_MspInit+0x5c>)
 8001b10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b14:	61d3      	str	r3, [r2, #28]
 8001b16:	4b0c      	ldr	r3, [pc, #48]	; (8001b48 <HAL_MspInit+0x5c>)
 8001b18:	69db      	ldr	r3, [r3, #28]
 8001b1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b1e:	607b      	str	r3, [r7, #4]
 8001b20:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001b22:	4b0a      	ldr	r3, [pc, #40]	; (8001b4c <HAL_MspInit+0x60>)
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	60fb      	str	r3, [r7, #12]
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001b2e:	60fb      	str	r3, [r7, #12]
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001b36:	60fb      	str	r3, [r7, #12]
 8001b38:	4a04      	ldr	r2, [pc, #16]	; (8001b4c <HAL_MspInit+0x60>)
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b3e:	bf00      	nop
 8001b40:	3714      	adds	r7, #20
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bc80      	pop	{r7}
 8001b46:	4770      	bx	lr
 8001b48:	40021000 	.word	0x40021000
 8001b4c:	40010000 	.word	0x40010000

08001b50 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b08c      	sub	sp, #48	; 0x30
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b58:	f107 031c 	add.w	r3, r7, #28
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	601a      	str	r2, [r3, #0]
 8001b60:	605a      	str	r2, [r3, #4]
 8001b62:	609a      	str	r2, [r3, #8]
 8001b64:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4a3a      	ldr	r2, [pc, #232]	; (8001c54 <HAL_I2C_MspInit+0x104>)
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	d13b      	bne.n	8001be8 <HAL_I2C_MspInit+0x98>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b70:	4b39      	ldr	r3, [pc, #228]	; (8001c58 <HAL_I2C_MspInit+0x108>)
 8001b72:	699b      	ldr	r3, [r3, #24]
 8001b74:	4a38      	ldr	r2, [pc, #224]	; (8001c58 <HAL_I2C_MspInit+0x108>)
 8001b76:	f043 0308 	orr.w	r3, r3, #8
 8001b7a:	6193      	str	r3, [r2, #24]
 8001b7c:	4b36      	ldr	r3, [pc, #216]	; (8001c58 <HAL_I2C_MspInit+0x108>)
 8001b7e:	699b      	ldr	r3, [r3, #24]
 8001b80:	f003 0308 	and.w	r3, r3, #8
 8001b84:	61bb      	str	r3, [r7, #24]
 8001b86:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001b88:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001b8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b8e:	2312      	movs	r3, #18
 8001b90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b92:	2303      	movs	r3, #3
 8001b94:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b96:	f107 031c 	add.w	r3, r7, #28
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	482f      	ldr	r0, [pc, #188]	; (8001c5c <HAL_I2C_MspInit+0x10c>)
 8001b9e:	f000 fb37 	bl	8002210 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8001ba2:	4b2f      	ldr	r3, [pc, #188]	; (8001c60 <HAL_I2C_MspInit+0x110>)
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001baa:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001bae:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001bb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bb2:	f043 0302 	orr.w	r3, r3, #2
 8001bb6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001bb8:	4a29      	ldr	r2, [pc, #164]	; (8001c60 <HAL_I2C_MspInit+0x110>)
 8001bba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bbc:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001bbe:	4b26      	ldr	r3, [pc, #152]	; (8001c58 <HAL_I2C_MspInit+0x108>)
 8001bc0:	69db      	ldr	r3, [r3, #28]
 8001bc2:	4a25      	ldr	r2, [pc, #148]	; (8001c58 <HAL_I2C_MspInit+0x108>)
 8001bc4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001bc8:	61d3      	str	r3, [r2, #28]
 8001bca:	4b23      	ldr	r3, [pc, #140]	; (8001c58 <HAL_I2C_MspInit+0x108>)
 8001bcc:	69db      	ldr	r3, [r3, #28]
 8001bce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bd2:	617b      	str	r3, [r7, #20]
 8001bd4:	697b      	ldr	r3, [r7, #20]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	2100      	movs	r1, #0
 8001bda:	2020      	movs	r0, #32
 8001bdc:	f000 fa6b 	bl	80020b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001be0:	2020      	movs	r0, #32
 8001be2:	f000 fa84 	bl	80020ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001be6:	e031      	b.n	8001c4c <HAL_I2C_MspInit+0xfc>
  else if(hi2c->Instance==I2C2)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a1d      	ldr	r2, [pc, #116]	; (8001c64 <HAL_I2C_MspInit+0x114>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d12c      	bne.n	8001c4c <HAL_I2C_MspInit+0xfc>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bf2:	4b19      	ldr	r3, [pc, #100]	; (8001c58 <HAL_I2C_MspInit+0x108>)
 8001bf4:	699b      	ldr	r3, [r3, #24]
 8001bf6:	4a18      	ldr	r2, [pc, #96]	; (8001c58 <HAL_I2C_MspInit+0x108>)
 8001bf8:	f043 0308 	orr.w	r3, r3, #8
 8001bfc:	6193      	str	r3, [r2, #24]
 8001bfe:	4b16      	ldr	r3, [pc, #88]	; (8001c58 <HAL_I2C_MspInit+0x108>)
 8001c00:	699b      	ldr	r3, [r3, #24]
 8001c02:	f003 0308 	and.w	r3, r3, #8
 8001c06:	613b      	str	r3, [r7, #16]
 8001c08:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001c0a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001c0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c10:	2312      	movs	r3, #18
 8001c12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c14:	2303      	movs	r3, #3
 8001c16:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c18:	f107 031c 	add.w	r3, r7, #28
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	480f      	ldr	r0, [pc, #60]	; (8001c5c <HAL_I2C_MspInit+0x10c>)
 8001c20:	f000 faf6 	bl	8002210 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001c24:	4b0c      	ldr	r3, [pc, #48]	; (8001c58 <HAL_I2C_MspInit+0x108>)
 8001c26:	69db      	ldr	r3, [r3, #28]
 8001c28:	4a0b      	ldr	r2, [pc, #44]	; (8001c58 <HAL_I2C_MspInit+0x108>)
 8001c2a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001c2e:	61d3      	str	r3, [r2, #28]
 8001c30:	4b09      	ldr	r3, [pc, #36]	; (8001c58 <HAL_I2C_MspInit+0x108>)
 8001c32:	69db      	ldr	r3, [r3, #28]
 8001c34:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c38:	60fb      	str	r3, [r7, #12]
 8001c3a:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	2100      	movs	r1, #0
 8001c40:	2022      	movs	r0, #34	; 0x22
 8001c42:	f000 fa38 	bl	80020b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8001c46:	2022      	movs	r0, #34	; 0x22
 8001c48:	f000 fa51 	bl	80020ee <HAL_NVIC_EnableIRQ>
}
 8001c4c:	bf00      	nop
 8001c4e:	3730      	adds	r7, #48	; 0x30
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	40005400 	.word	0x40005400
 8001c58:	40021000 	.word	0x40021000
 8001c5c:	40010c00 	.word	0x40010c00
 8001c60:	40010000 	.word	0x40010000
 8001c64:	40005800 	.word	0x40005800

08001c68 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b085      	sub	sp, #20
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a09      	ldr	r2, [pc, #36]	; (8001c9c <HAL_TIM_Base_MspInit+0x34>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d10b      	bne.n	8001c92 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001c7a:	4b09      	ldr	r3, [pc, #36]	; (8001ca0 <HAL_TIM_Base_MspInit+0x38>)
 8001c7c:	69db      	ldr	r3, [r3, #28]
 8001c7e:	4a08      	ldr	r2, [pc, #32]	; (8001ca0 <HAL_TIM_Base_MspInit+0x38>)
 8001c80:	f043 0304 	orr.w	r3, r3, #4
 8001c84:	61d3      	str	r3, [r2, #28]
 8001c86:	4b06      	ldr	r3, [pc, #24]	; (8001ca0 <HAL_TIM_Base_MspInit+0x38>)
 8001c88:	69db      	ldr	r3, [r3, #28]
 8001c8a:	f003 0304 	and.w	r3, r3, #4
 8001c8e:	60fb      	str	r3, [r7, #12]
 8001c90:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001c92:	bf00      	nop
 8001c94:	3714      	adds	r7, #20
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bc80      	pop	{r7}
 8001c9a:	4770      	bx	lr
 8001c9c:	40000800 	.word	0x40000800
 8001ca0:	40021000 	.word	0x40021000

08001ca4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ca8:	e7fe      	b.n	8001ca8 <NMI_Handler+0x4>

08001caa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001caa:	b480      	push	{r7}
 8001cac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cae:	e7fe      	b.n	8001cae <HardFault_Handler+0x4>

08001cb0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cb4:	e7fe      	b.n	8001cb4 <MemManage_Handler+0x4>

08001cb6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cb6:	b480      	push	{r7}
 8001cb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cba:	e7fe      	b.n	8001cba <BusFault_Handler+0x4>

08001cbc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cc0:	e7fe      	b.n	8001cc0 <UsageFault_Handler+0x4>

08001cc2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cc2:	b480      	push	{r7}
 8001cc4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cc6:	bf00      	nop
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bc80      	pop	{r7}
 8001ccc:	4770      	bx	lr

08001cce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cce:	b480      	push	{r7}
 8001cd0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cd2:	bf00      	nop
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bc80      	pop	{r7}
 8001cd8:	4770      	bx	lr

08001cda <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cda:	b480      	push	{r7}
 8001cdc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cde:	bf00      	nop
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bc80      	pop	{r7}
 8001ce4:	4770      	bx	lr

08001ce6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ce6:	b580      	push	{r7, lr}
 8001ce8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cea:	f000 f8cd 	bl	8001e88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cee:	bf00      	nop
 8001cf0:	bd80      	pop	{r7, pc}

08001cf2 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001cf2:	b580      	push	{r7, lr}
 8001cf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Menu_IT_Pin);
 8001cf6:	2001      	movs	r0, #1
 8001cf8:	f000 fc26 	bl	8002548 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001cfc:	bf00      	nop
 8001cfe:	bd80      	pop	{r7, pc}

08001d00 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Reset_IT_Pin);
 8001d04:	2002      	movs	r0, #2
 8001d06:	f000 fc1f 	bl	8002548 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001d0a:	bf00      	nop
 8001d0c:	bd80      	pop	{r7, pc}
	...

08001d10 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001d14:	4802      	ldr	r0, [pc, #8]	; (8001d20 <I2C1_ER_IRQHandler+0x10>)
 8001d16:	f001 fd61 	bl	80037dc <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001d1a:	bf00      	nop
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	200000a4 	.word	0x200000a4

08001d24 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8001d28:	4802      	ldr	r0, [pc, #8]	; (8001d34 <I2C2_ER_IRQHandler+0x10>)
 8001d2a:	f001 fd57 	bl	80037dc <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8001d2e:	bf00      	nop
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	200000f8 	.word	0x200000f8

08001d38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b086      	sub	sp, #24
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d40:	4a14      	ldr	r2, [pc, #80]	; (8001d94 <_sbrk+0x5c>)
 8001d42:	4b15      	ldr	r3, [pc, #84]	; (8001d98 <_sbrk+0x60>)
 8001d44:	1ad3      	subs	r3, r2, r3
 8001d46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d4c:	4b13      	ldr	r3, [pc, #76]	; (8001d9c <_sbrk+0x64>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d102      	bne.n	8001d5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d54:	4b11      	ldr	r3, [pc, #68]	; (8001d9c <_sbrk+0x64>)
 8001d56:	4a12      	ldr	r2, [pc, #72]	; (8001da0 <_sbrk+0x68>)
 8001d58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d5a:	4b10      	ldr	r3, [pc, #64]	; (8001d9c <_sbrk+0x64>)
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	4413      	add	r3, r2
 8001d62:	693a      	ldr	r2, [r7, #16]
 8001d64:	429a      	cmp	r2, r3
 8001d66:	d207      	bcs.n	8001d78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d68:	f004 f81a 	bl	8005da0 <__errno>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	220c      	movs	r2, #12
 8001d70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d72:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d76:	e009      	b.n	8001d8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d78:	4b08      	ldr	r3, [pc, #32]	; (8001d9c <_sbrk+0x64>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d7e:	4b07      	ldr	r3, [pc, #28]	; (8001d9c <_sbrk+0x64>)
 8001d80:	681a      	ldr	r2, [r3, #0]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	4413      	add	r3, r2
 8001d86:	4a05      	ldr	r2, [pc, #20]	; (8001d9c <_sbrk+0x64>)
 8001d88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	3718      	adds	r7, #24
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}
 8001d94:	20005000 	.word	0x20005000
 8001d98:	00000400 	.word	0x00000400
 8001d9c:	200001c4 	.word	0x200001c4
 8001da0:	200005e8 	.word	0x200005e8

08001da4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001da4:	b480      	push	{r7}
 8001da6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001da8:	bf00      	nop
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bc80      	pop	{r7}
 8001dae:	4770      	bx	lr

08001db0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001db0:	480c      	ldr	r0, [pc, #48]	; (8001de4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001db2:	490d      	ldr	r1, [pc, #52]	; (8001de8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001db4:	4a0d      	ldr	r2, [pc, #52]	; (8001dec <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001db6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001db8:	e002      	b.n	8001dc0 <LoopCopyDataInit>

08001dba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001dba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001dbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001dbe:	3304      	adds	r3, #4

08001dc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001dc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001dc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001dc4:	d3f9      	bcc.n	8001dba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001dc6:	4a0a      	ldr	r2, [pc, #40]	; (8001df0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001dc8:	4c0a      	ldr	r4, [pc, #40]	; (8001df4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001dca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001dcc:	e001      	b.n	8001dd2 <LoopFillZerobss>

08001dce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001dce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001dd0:	3204      	adds	r2, #4

08001dd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001dd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001dd4:	d3fb      	bcc.n	8001dce <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001dd6:	f7ff ffe5 	bl	8001da4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001dda:	f003 ffe7 	bl	8005dac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001dde:	f7fe ffcb 	bl	8000d78 <main>
  bx lr
 8001de2:	4770      	bx	lr
  ldr r0, =_sdata
 8001de4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001de8:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8001dec:	080090c8 	.word	0x080090c8
  ldr r2, =_sbss
 8001df0:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8001df4:	200005e4 	.word	0x200005e4

08001df8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001df8:	e7fe      	b.n	8001df8 <ADC1_2_IRQHandler>
	...

08001dfc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e00:	4b08      	ldr	r3, [pc, #32]	; (8001e24 <HAL_Init+0x28>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a07      	ldr	r2, [pc, #28]	; (8001e24 <HAL_Init+0x28>)
 8001e06:	f043 0310 	orr.w	r3, r3, #16
 8001e0a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e0c:	2003      	movs	r0, #3
 8001e0e:	f000 f947 	bl	80020a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e12:	200f      	movs	r0, #15
 8001e14:	f000 f808 	bl	8001e28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e18:	f7ff fe68 	bl	8001aec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e1c:	2300      	movs	r3, #0
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	40022000 	.word	0x40022000

08001e28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b082      	sub	sp, #8
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e30:	4b12      	ldr	r3, [pc, #72]	; (8001e7c <HAL_InitTick+0x54>)
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	4b12      	ldr	r3, [pc, #72]	; (8001e80 <HAL_InitTick+0x58>)
 8001e36:	781b      	ldrb	r3, [r3, #0]
 8001e38:	4619      	mov	r1, r3
 8001e3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e42:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e46:	4618      	mov	r0, r3
 8001e48:	f000 f95f 	bl	800210a <HAL_SYSTICK_Config>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d001      	beq.n	8001e56 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	e00e      	b.n	8001e74 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2b0f      	cmp	r3, #15
 8001e5a:	d80a      	bhi.n	8001e72 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	6879      	ldr	r1, [r7, #4]
 8001e60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001e64:	f000 f927 	bl	80020b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e68:	4a06      	ldr	r2, [pc, #24]	; (8001e84 <HAL_InitTick+0x5c>)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	e000      	b.n	8001e74 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	3708      	adds	r7, #8
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	20000000 	.word	0x20000000
 8001e80:	20000008 	.word	0x20000008
 8001e84:	20000004 	.word	0x20000004

08001e88 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e8c:	4b05      	ldr	r3, [pc, #20]	; (8001ea4 <HAL_IncTick+0x1c>)
 8001e8e:	781b      	ldrb	r3, [r3, #0]
 8001e90:	461a      	mov	r2, r3
 8001e92:	4b05      	ldr	r3, [pc, #20]	; (8001ea8 <HAL_IncTick+0x20>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4413      	add	r3, r2
 8001e98:	4a03      	ldr	r2, [pc, #12]	; (8001ea8 <HAL_IncTick+0x20>)
 8001e9a:	6013      	str	r3, [r2, #0]
}
 8001e9c:	bf00      	nop
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bc80      	pop	{r7}
 8001ea2:	4770      	bx	lr
 8001ea4:	20000008 	.word	0x20000008
 8001ea8:	200001c8 	.word	0x200001c8

08001eac <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001eac:	b480      	push	{r7}
 8001eae:	af00      	add	r7, sp, #0
  return uwTick;
 8001eb0:	4b02      	ldr	r3, [pc, #8]	; (8001ebc <HAL_GetTick+0x10>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bc80      	pop	{r7}
 8001eba:	4770      	bx	lr
 8001ebc:	200001c8 	.word	0x200001c8

08001ec0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b084      	sub	sp, #16
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ec8:	f7ff fff0 	bl	8001eac <HAL_GetTick>
 8001ecc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001ed8:	d005      	beq.n	8001ee6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001eda:	4b0a      	ldr	r3, [pc, #40]	; (8001f04 <HAL_Delay+0x44>)
 8001edc:	781b      	ldrb	r3, [r3, #0]
 8001ede:	461a      	mov	r2, r3
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	4413      	add	r3, r2
 8001ee4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ee6:	bf00      	nop
 8001ee8:	f7ff ffe0 	bl	8001eac <HAL_GetTick>
 8001eec:	4602      	mov	r2, r0
 8001eee:	68bb      	ldr	r3, [r7, #8]
 8001ef0:	1ad3      	subs	r3, r2, r3
 8001ef2:	68fa      	ldr	r2, [r7, #12]
 8001ef4:	429a      	cmp	r2, r3
 8001ef6:	d8f7      	bhi.n	8001ee8 <HAL_Delay+0x28>
  {
  }
}
 8001ef8:	bf00      	nop
 8001efa:	bf00      	nop
 8001efc:	3710      	adds	r7, #16
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	20000008 	.word	0x20000008

08001f08 <__NVIC_SetPriorityGrouping>:
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b085      	sub	sp, #20
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	f003 0307 	and.w	r3, r3, #7
 8001f16:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f18:	4b0c      	ldr	r3, [pc, #48]	; (8001f4c <__NVIC_SetPriorityGrouping+0x44>)
 8001f1a:	68db      	ldr	r3, [r3, #12]
 8001f1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f1e:	68ba      	ldr	r2, [r7, #8]
 8001f20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f24:	4013      	ands	r3, r2
 8001f26:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f2c:	68bb      	ldr	r3, [r7, #8]
 8001f2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f3a:	4a04      	ldr	r2, [pc, #16]	; (8001f4c <__NVIC_SetPriorityGrouping+0x44>)
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	60d3      	str	r3, [r2, #12]
}
 8001f40:	bf00      	nop
 8001f42:	3714      	adds	r7, #20
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bc80      	pop	{r7}
 8001f48:	4770      	bx	lr
 8001f4a:	bf00      	nop
 8001f4c:	e000ed00 	.word	0xe000ed00

08001f50 <__NVIC_GetPriorityGrouping>:
{
 8001f50:	b480      	push	{r7}
 8001f52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f54:	4b04      	ldr	r3, [pc, #16]	; (8001f68 <__NVIC_GetPriorityGrouping+0x18>)
 8001f56:	68db      	ldr	r3, [r3, #12]
 8001f58:	0a1b      	lsrs	r3, r3, #8
 8001f5a:	f003 0307 	and.w	r3, r3, #7
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bc80      	pop	{r7}
 8001f64:	4770      	bx	lr
 8001f66:	bf00      	nop
 8001f68:	e000ed00 	.word	0xe000ed00

08001f6c <__NVIC_EnableIRQ>:
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b083      	sub	sp, #12
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	4603      	mov	r3, r0
 8001f74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	db0b      	blt.n	8001f96 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f7e:	79fb      	ldrb	r3, [r7, #7]
 8001f80:	f003 021f 	and.w	r2, r3, #31
 8001f84:	4906      	ldr	r1, [pc, #24]	; (8001fa0 <__NVIC_EnableIRQ+0x34>)
 8001f86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f8a:	095b      	lsrs	r3, r3, #5
 8001f8c:	2001      	movs	r0, #1
 8001f8e:	fa00 f202 	lsl.w	r2, r0, r2
 8001f92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001f96:	bf00      	nop
 8001f98:	370c      	adds	r7, #12
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bc80      	pop	{r7}
 8001f9e:	4770      	bx	lr
 8001fa0:	e000e100 	.word	0xe000e100

08001fa4 <__NVIC_SetPriority>:
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b083      	sub	sp, #12
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	4603      	mov	r3, r0
 8001fac:	6039      	str	r1, [r7, #0]
 8001fae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	db0a      	blt.n	8001fce <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	b2da      	uxtb	r2, r3
 8001fbc:	490c      	ldr	r1, [pc, #48]	; (8001ff0 <__NVIC_SetPriority+0x4c>)
 8001fbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fc2:	0112      	lsls	r2, r2, #4
 8001fc4:	b2d2      	uxtb	r2, r2
 8001fc6:	440b      	add	r3, r1
 8001fc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001fcc:	e00a      	b.n	8001fe4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	b2da      	uxtb	r2, r3
 8001fd2:	4908      	ldr	r1, [pc, #32]	; (8001ff4 <__NVIC_SetPriority+0x50>)
 8001fd4:	79fb      	ldrb	r3, [r7, #7]
 8001fd6:	f003 030f 	and.w	r3, r3, #15
 8001fda:	3b04      	subs	r3, #4
 8001fdc:	0112      	lsls	r2, r2, #4
 8001fde:	b2d2      	uxtb	r2, r2
 8001fe0:	440b      	add	r3, r1
 8001fe2:	761a      	strb	r2, [r3, #24]
}
 8001fe4:	bf00      	nop
 8001fe6:	370c      	adds	r7, #12
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bc80      	pop	{r7}
 8001fec:	4770      	bx	lr
 8001fee:	bf00      	nop
 8001ff0:	e000e100 	.word	0xe000e100
 8001ff4:	e000ed00 	.word	0xe000ed00

08001ff8 <NVIC_EncodePriority>:
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b089      	sub	sp, #36	; 0x24
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	60f8      	str	r0, [r7, #12]
 8002000:	60b9      	str	r1, [r7, #8]
 8002002:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	f003 0307 	and.w	r3, r3, #7
 800200a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800200c:	69fb      	ldr	r3, [r7, #28]
 800200e:	f1c3 0307 	rsb	r3, r3, #7
 8002012:	2b04      	cmp	r3, #4
 8002014:	bf28      	it	cs
 8002016:	2304      	movcs	r3, #4
 8002018:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800201a:	69fb      	ldr	r3, [r7, #28]
 800201c:	3304      	adds	r3, #4
 800201e:	2b06      	cmp	r3, #6
 8002020:	d902      	bls.n	8002028 <NVIC_EncodePriority+0x30>
 8002022:	69fb      	ldr	r3, [r7, #28]
 8002024:	3b03      	subs	r3, #3
 8002026:	e000      	b.n	800202a <NVIC_EncodePriority+0x32>
 8002028:	2300      	movs	r3, #0
 800202a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800202c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002030:	69bb      	ldr	r3, [r7, #24]
 8002032:	fa02 f303 	lsl.w	r3, r2, r3
 8002036:	43da      	mvns	r2, r3
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	401a      	ands	r2, r3
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002040:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	fa01 f303 	lsl.w	r3, r1, r3
 800204a:	43d9      	mvns	r1, r3
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002050:	4313      	orrs	r3, r2
}
 8002052:	4618      	mov	r0, r3
 8002054:	3724      	adds	r7, #36	; 0x24
 8002056:	46bd      	mov	sp, r7
 8002058:	bc80      	pop	{r7}
 800205a:	4770      	bx	lr

0800205c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b082      	sub	sp, #8
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	3b01      	subs	r3, #1
 8002068:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800206c:	d301      	bcc.n	8002072 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800206e:	2301      	movs	r3, #1
 8002070:	e00f      	b.n	8002092 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002072:	4a0a      	ldr	r2, [pc, #40]	; (800209c <SysTick_Config+0x40>)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	3b01      	subs	r3, #1
 8002078:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800207a:	210f      	movs	r1, #15
 800207c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002080:	f7ff ff90 	bl	8001fa4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002084:	4b05      	ldr	r3, [pc, #20]	; (800209c <SysTick_Config+0x40>)
 8002086:	2200      	movs	r2, #0
 8002088:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800208a:	4b04      	ldr	r3, [pc, #16]	; (800209c <SysTick_Config+0x40>)
 800208c:	2207      	movs	r2, #7
 800208e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002090:	2300      	movs	r3, #0
}
 8002092:	4618      	mov	r0, r3
 8002094:	3708      	adds	r7, #8
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	e000e010 	.word	0xe000e010

080020a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b082      	sub	sp, #8
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020a8:	6878      	ldr	r0, [r7, #4]
 80020aa:	f7ff ff2d 	bl	8001f08 <__NVIC_SetPriorityGrouping>
}
 80020ae:	bf00      	nop
 80020b0:	3708      	adds	r7, #8
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}

080020b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020b6:	b580      	push	{r7, lr}
 80020b8:	b086      	sub	sp, #24
 80020ba:	af00      	add	r7, sp, #0
 80020bc:	4603      	mov	r3, r0
 80020be:	60b9      	str	r1, [r7, #8]
 80020c0:	607a      	str	r2, [r7, #4]
 80020c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020c4:	2300      	movs	r3, #0
 80020c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020c8:	f7ff ff42 	bl	8001f50 <__NVIC_GetPriorityGrouping>
 80020cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020ce:	687a      	ldr	r2, [r7, #4]
 80020d0:	68b9      	ldr	r1, [r7, #8]
 80020d2:	6978      	ldr	r0, [r7, #20]
 80020d4:	f7ff ff90 	bl	8001ff8 <NVIC_EncodePriority>
 80020d8:	4602      	mov	r2, r0
 80020da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020de:	4611      	mov	r1, r2
 80020e0:	4618      	mov	r0, r3
 80020e2:	f7ff ff5f 	bl	8001fa4 <__NVIC_SetPriority>
}
 80020e6:	bf00      	nop
 80020e8:	3718      	adds	r7, #24
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}

080020ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020ee:	b580      	push	{r7, lr}
 80020f0:	b082      	sub	sp, #8
 80020f2:	af00      	add	r7, sp, #0
 80020f4:	4603      	mov	r3, r0
 80020f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020fc:	4618      	mov	r0, r3
 80020fe:	f7ff ff35 	bl	8001f6c <__NVIC_EnableIRQ>
}
 8002102:	bf00      	nop
 8002104:	3708      	adds	r7, #8
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}

0800210a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800210a:	b580      	push	{r7, lr}
 800210c:	b082      	sub	sp, #8
 800210e:	af00      	add	r7, sp, #0
 8002110:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	f7ff ffa2 	bl	800205c <SysTick_Config>
 8002118:	4603      	mov	r3, r0
}
 800211a:	4618      	mov	r0, r3
 800211c:	3708      	adds	r7, #8
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
	...

08002124 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002124:	b580      	push	{r7, lr}
 8002126:	b084      	sub	sp, #16
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800212c:	2300      	movs	r3, #0
 800212e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002136:	2b02      	cmp	r3, #2
 8002138:	d005      	beq.n	8002146 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2204      	movs	r2, #4
 800213e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002140:	2301      	movs	r3, #1
 8002142:	73fb      	strb	r3, [r7, #15]
 8002144:	e051      	b.n	80021ea <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	681a      	ldr	r2, [r3, #0]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f022 020e 	bic.w	r2, r2, #14
 8002154:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	681a      	ldr	r2, [r3, #0]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f022 0201 	bic.w	r2, r2, #1
 8002164:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a22      	ldr	r2, [pc, #136]	; (80021f4 <HAL_DMA_Abort_IT+0xd0>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d029      	beq.n	80021c4 <HAL_DMA_Abort_IT+0xa0>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a20      	ldr	r2, [pc, #128]	; (80021f8 <HAL_DMA_Abort_IT+0xd4>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d022      	beq.n	80021c0 <HAL_DMA_Abort_IT+0x9c>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a1f      	ldr	r2, [pc, #124]	; (80021fc <HAL_DMA_Abort_IT+0xd8>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d01a      	beq.n	80021ba <HAL_DMA_Abort_IT+0x96>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a1d      	ldr	r2, [pc, #116]	; (8002200 <HAL_DMA_Abort_IT+0xdc>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d012      	beq.n	80021b4 <HAL_DMA_Abort_IT+0x90>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4a1c      	ldr	r2, [pc, #112]	; (8002204 <HAL_DMA_Abort_IT+0xe0>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d00a      	beq.n	80021ae <HAL_DMA_Abort_IT+0x8a>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a1a      	ldr	r2, [pc, #104]	; (8002208 <HAL_DMA_Abort_IT+0xe4>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d102      	bne.n	80021a8 <HAL_DMA_Abort_IT+0x84>
 80021a2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80021a6:	e00e      	b.n	80021c6 <HAL_DMA_Abort_IT+0xa2>
 80021a8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80021ac:	e00b      	b.n	80021c6 <HAL_DMA_Abort_IT+0xa2>
 80021ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80021b2:	e008      	b.n	80021c6 <HAL_DMA_Abort_IT+0xa2>
 80021b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021b8:	e005      	b.n	80021c6 <HAL_DMA_Abort_IT+0xa2>
 80021ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021be:	e002      	b.n	80021c6 <HAL_DMA_Abort_IT+0xa2>
 80021c0:	2310      	movs	r3, #16
 80021c2:	e000      	b.n	80021c6 <HAL_DMA_Abort_IT+0xa2>
 80021c4:	2301      	movs	r3, #1
 80021c6:	4a11      	ldr	r2, [pc, #68]	; (800220c <HAL_DMA_Abort_IT+0xe8>)
 80021c8:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2201      	movs	r2, #1
 80021ce:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2200      	movs	r2, #0
 80021d6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d003      	beq.n	80021ea <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021e6:	6878      	ldr	r0, [r7, #4]
 80021e8:	4798      	blx	r3
    } 
  }
  return status;
 80021ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	3710      	adds	r7, #16
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}
 80021f4:	40020008 	.word	0x40020008
 80021f8:	4002001c 	.word	0x4002001c
 80021fc:	40020030 	.word	0x40020030
 8002200:	40020044 	.word	0x40020044
 8002204:	40020058 	.word	0x40020058
 8002208:	4002006c 	.word	0x4002006c
 800220c:	40020000 	.word	0x40020000

08002210 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002210:	b480      	push	{r7}
 8002212:	b08b      	sub	sp, #44	; 0x2c
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
 8002218:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800221a:	2300      	movs	r3, #0
 800221c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800221e:	2300      	movs	r3, #0
 8002220:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002222:	e169      	b.n	80024f8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002224:	2201      	movs	r2, #1
 8002226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002228:	fa02 f303 	lsl.w	r3, r2, r3
 800222c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	69fa      	ldr	r2, [r7, #28]
 8002234:	4013      	ands	r3, r2
 8002236:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002238:	69ba      	ldr	r2, [r7, #24]
 800223a:	69fb      	ldr	r3, [r7, #28]
 800223c:	429a      	cmp	r2, r3
 800223e:	f040 8158 	bne.w	80024f2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	4a9a      	ldr	r2, [pc, #616]	; (80024b0 <HAL_GPIO_Init+0x2a0>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d05e      	beq.n	800230a <HAL_GPIO_Init+0xfa>
 800224c:	4a98      	ldr	r2, [pc, #608]	; (80024b0 <HAL_GPIO_Init+0x2a0>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d875      	bhi.n	800233e <HAL_GPIO_Init+0x12e>
 8002252:	4a98      	ldr	r2, [pc, #608]	; (80024b4 <HAL_GPIO_Init+0x2a4>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d058      	beq.n	800230a <HAL_GPIO_Init+0xfa>
 8002258:	4a96      	ldr	r2, [pc, #600]	; (80024b4 <HAL_GPIO_Init+0x2a4>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d86f      	bhi.n	800233e <HAL_GPIO_Init+0x12e>
 800225e:	4a96      	ldr	r2, [pc, #600]	; (80024b8 <HAL_GPIO_Init+0x2a8>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d052      	beq.n	800230a <HAL_GPIO_Init+0xfa>
 8002264:	4a94      	ldr	r2, [pc, #592]	; (80024b8 <HAL_GPIO_Init+0x2a8>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d869      	bhi.n	800233e <HAL_GPIO_Init+0x12e>
 800226a:	4a94      	ldr	r2, [pc, #592]	; (80024bc <HAL_GPIO_Init+0x2ac>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d04c      	beq.n	800230a <HAL_GPIO_Init+0xfa>
 8002270:	4a92      	ldr	r2, [pc, #584]	; (80024bc <HAL_GPIO_Init+0x2ac>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d863      	bhi.n	800233e <HAL_GPIO_Init+0x12e>
 8002276:	4a92      	ldr	r2, [pc, #584]	; (80024c0 <HAL_GPIO_Init+0x2b0>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d046      	beq.n	800230a <HAL_GPIO_Init+0xfa>
 800227c:	4a90      	ldr	r2, [pc, #576]	; (80024c0 <HAL_GPIO_Init+0x2b0>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d85d      	bhi.n	800233e <HAL_GPIO_Init+0x12e>
 8002282:	2b12      	cmp	r3, #18
 8002284:	d82a      	bhi.n	80022dc <HAL_GPIO_Init+0xcc>
 8002286:	2b12      	cmp	r3, #18
 8002288:	d859      	bhi.n	800233e <HAL_GPIO_Init+0x12e>
 800228a:	a201      	add	r2, pc, #4	; (adr r2, 8002290 <HAL_GPIO_Init+0x80>)
 800228c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002290:	0800230b 	.word	0x0800230b
 8002294:	080022e5 	.word	0x080022e5
 8002298:	080022f7 	.word	0x080022f7
 800229c:	08002339 	.word	0x08002339
 80022a0:	0800233f 	.word	0x0800233f
 80022a4:	0800233f 	.word	0x0800233f
 80022a8:	0800233f 	.word	0x0800233f
 80022ac:	0800233f 	.word	0x0800233f
 80022b0:	0800233f 	.word	0x0800233f
 80022b4:	0800233f 	.word	0x0800233f
 80022b8:	0800233f 	.word	0x0800233f
 80022bc:	0800233f 	.word	0x0800233f
 80022c0:	0800233f 	.word	0x0800233f
 80022c4:	0800233f 	.word	0x0800233f
 80022c8:	0800233f 	.word	0x0800233f
 80022cc:	0800233f 	.word	0x0800233f
 80022d0:	0800233f 	.word	0x0800233f
 80022d4:	080022ed 	.word	0x080022ed
 80022d8:	08002301 	.word	0x08002301
 80022dc:	4a79      	ldr	r2, [pc, #484]	; (80024c4 <HAL_GPIO_Init+0x2b4>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d013      	beq.n	800230a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80022e2:	e02c      	b.n	800233e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	68db      	ldr	r3, [r3, #12]
 80022e8:	623b      	str	r3, [r7, #32]
          break;
 80022ea:	e029      	b.n	8002340 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	68db      	ldr	r3, [r3, #12]
 80022f0:	3304      	adds	r3, #4
 80022f2:	623b      	str	r3, [r7, #32]
          break;
 80022f4:	e024      	b.n	8002340 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	68db      	ldr	r3, [r3, #12]
 80022fa:	3308      	adds	r3, #8
 80022fc:	623b      	str	r3, [r7, #32]
          break;
 80022fe:	e01f      	b.n	8002340 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	68db      	ldr	r3, [r3, #12]
 8002304:	330c      	adds	r3, #12
 8002306:	623b      	str	r3, [r7, #32]
          break;
 8002308:	e01a      	b.n	8002340 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	689b      	ldr	r3, [r3, #8]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d102      	bne.n	8002318 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002312:	2304      	movs	r3, #4
 8002314:	623b      	str	r3, [r7, #32]
          break;
 8002316:	e013      	b.n	8002340 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	2b01      	cmp	r3, #1
 800231e:	d105      	bne.n	800232c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002320:	2308      	movs	r3, #8
 8002322:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	69fa      	ldr	r2, [r7, #28]
 8002328:	611a      	str	r2, [r3, #16]
          break;
 800232a:	e009      	b.n	8002340 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800232c:	2308      	movs	r3, #8
 800232e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	69fa      	ldr	r2, [r7, #28]
 8002334:	615a      	str	r2, [r3, #20]
          break;
 8002336:	e003      	b.n	8002340 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002338:	2300      	movs	r3, #0
 800233a:	623b      	str	r3, [r7, #32]
          break;
 800233c:	e000      	b.n	8002340 <HAL_GPIO_Init+0x130>
          break;
 800233e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002340:	69bb      	ldr	r3, [r7, #24]
 8002342:	2bff      	cmp	r3, #255	; 0xff
 8002344:	d801      	bhi.n	800234a <HAL_GPIO_Init+0x13a>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	e001      	b.n	800234e <HAL_GPIO_Init+0x13e>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	3304      	adds	r3, #4
 800234e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002350:	69bb      	ldr	r3, [r7, #24]
 8002352:	2bff      	cmp	r3, #255	; 0xff
 8002354:	d802      	bhi.n	800235c <HAL_GPIO_Init+0x14c>
 8002356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002358:	009b      	lsls	r3, r3, #2
 800235a:	e002      	b.n	8002362 <HAL_GPIO_Init+0x152>
 800235c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800235e:	3b08      	subs	r3, #8
 8002360:	009b      	lsls	r3, r3, #2
 8002362:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	681a      	ldr	r2, [r3, #0]
 8002368:	210f      	movs	r1, #15
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	fa01 f303 	lsl.w	r3, r1, r3
 8002370:	43db      	mvns	r3, r3
 8002372:	401a      	ands	r2, r3
 8002374:	6a39      	ldr	r1, [r7, #32]
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	fa01 f303 	lsl.w	r3, r1, r3
 800237c:	431a      	orrs	r2, r3
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800238a:	2b00      	cmp	r3, #0
 800238c:	f000 80b1 	beq.w	80024f2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002390:	4b4d      	ldr	r3, [pc, #308]	; (80024c8 <HAL_GPIO_Init+0x2b8>)
 8002392:	699b      	ldr	r3, [r3, #24]
 8002394:	4a4c      	ldr	r2, [pc, #304]	; (80024c8 <HAL_GPIO_Init+0x2b8>)
 8002396:	f043 0301 	orr.w	r3, r3, #1
 800239a:	6193      	str	r3, [r2, #24]
 800239c:	4b4a      	ldr	r3, [pc, #296]	; (80024c8 <HAL_GPIO_Init+0x2b8>)
 800239e:	699b      	ldr	r3, [r3, #24]
 80023a0:	f003 0301 	and.w	r3, r3, #1
 80023a4:	60bb      	str	r3, [r7, #8]
 80023a6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80023a8:	4a48      	ldr	r2, [pc, #288]	; (80024cc <HAL_GPIO_Init+0x2bc>)
 80023aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ac:	089b      	lsrs	r3, r3, #2
 80023ae:	3302      	adds	r3, #2
 80023b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023b4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80023b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b8:	f003 0303 	and.w	r3, r3, #3
 80023bc:	009b      	lsls	r3, r3, #2
 80023be:	220f      	movs	r2, #15
 80023c0:	fa02 f303 	lsl.w	r3, r2, r3
 80023c4:	43db      	mvns	r3, r3
 80023c6:	68fa      	ldr	r2, [r7, #12]
 80023c8:	4013      	ands	r3, r2
 80023ca:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	4a40      	ldr	r2, [pc, #256]	; (80024d0 <HAL_GPIO_Init+0x2c0>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d013      	beq.n	80023fc <HAL_GPIO_Init+0x1ec>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	4a3f      	ldr	r2, [pc, #252]	; (80024d4 <HAL_GPIO_Init+0x2c4>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	d00d      	beq.n	80023f8 <HAL_GPIO_Init+0x1e8>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	4a3e      	ldr	r2, [pc, #248]	; (80024d8 <HAL_GPIO_Init+0x2c8>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d007      	beq.n	80023f4 <HAL_GPIO_Init+0x1e4>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	4a3d      	ldr	r2, [pc, #244]	; (80024dc <HAL_GPIO_Init+0x2cc>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d101      	bne.n	80023f0 <HAL_GPIO_Init+0x1e0>
 80023ec:	2303      	movs	r3, #3
 80023ee:	e006      	b.n	80023fe <HAL_GPIO_Init+0x1ee>
 80023f0:	2304      	movs	r3, #4
 80023f2:	e004      	b.n	80023fe <HAL_GPIO_Init+0x1ee>
 80023f4:	2302      	movs	r3, #2
 80023f6:	e002      	b.n	80023fe <HAL_GPIO_Init+0x1ee>
 80023f8:	2301      	movs	r3, #1
 80023fa:	e000      	b.n	80023fe <HAL_GPIO_Init+0x1ee>
 80023fc:	2300      	movs	r3, #0
 80023fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002400:	f002 0203 	and.w	r2, r2, #3
 8002404:	0092      	lsls	r2, r2, #2
 8002406:	4093      	lsls	r3, r2
 8002408:	68fa      	ldr	r2, [r7, #12]
 800240a:	4313      	orrs	r3, r2
 800240c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800240e:	492f      	ldr	r1, [pc, #188]	; (80024cc <HAL_GPIO_Init+0x2bc>)
 8002410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002412:	089b      	lsrs	r3, r3, #2
 8002414:	3302      	adds	r3, #2
 8002416:	68fa      	ldr	r2, [r7, #12]
 8002418:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002424:	2b00      	cmp	r3, #0
 8002426:	d006      	beq.n	8002436 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002428:	4b2d      	ldr	r3, [pc, #180]	; (80024e0 <HAL_GPIO_Init+0x2d0>)
 800242a:	681a      	ldr	r2, [r3, #0]
 800242c:	492c      	ldr	r1, [pc, #176]	; (80024e0 <HAL_GPIO_Init+0x2d0>)
 800242e:	69bb      	ldr	r3, [r7, #24]
 8002430:	4313      	orrs	r3, r2
 8002432:	600b      	str	r3, [r1, #0]
 8002434:	e006      	b.n	8002444 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002436:	4b2a      	ldr	r3, [pc, #168]	; (80024e0 <HAL_GPIO_Init+0x2d0>)
 8002438:	681a      	ldr	r2, [r3, #0]
 800243a:	69bb      	ldr	r3, [r7, #24]
 800243c:	43db      	mvns	r3, r3
 800243e:	4928      	ldr	r1, [pc, #160]	; (80024e0 <HAL_GPIO_Init+0x2d0>)
 8002440:	4013      	ands	r3, r2
 8002442:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800244c:	2b00      	cmp	r3, #0
 800244e:	d006      	beq.n	800245e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002450:	4b23      	ldr	r3, [pc, #140]	; (80024e0 <HAL_GPIO_Init+0x2d0>)
 8002452:	685a      	ldr	r2, [r3, #4]
 8002454:	4922      	ldr	r1, [pc, #136]	; (80024e0 <HAL_GPIO_Init+0x2d0>)
 8002456:	69bb      	ldr	r3, [r7, #24]
 8002458:	4313      	orrs	r3, r2
 800245a:	604b      	str	r3, [r1, #4]
 800245c:	e006      	b.n	800246c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800245e:	4b20      	ldr	r3, [pc, #128]	; (80024e0 <HAL_GPIO_Init+0x2d0>)
 8002460:	685a      	ldr	r2, [r3, #4]
 8002462:	69bb      	ldr	r3, [r7, #24]
 8002464:	43db      	mvns	r3, r3
 8002466:	491e      	ldr	r1, [pc, #120]	; (80024e0 <HAL_GPIO_Init+0x2d0>)
 8002468:	4013      	ands	r3, r2
 800246a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002474:	2b00      	cmp	r3, #0
 8002476:	d006      	beq.n	8002486 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002478:	4b19      	ldr	r3, [pc, #100]	; (80024e0 <HAL_GPIO_Init+0x2d0>)
 800247a:	689a      	ldr	r2, [r3, #8]
 800247c:	4918      	ldr	r1, [pc, #96]	; (80024e0 <HAL_GPIO_Init+0x2d0>)
 800247e:	69bb      	ldr	r3, [r7, #24]
 8002480:	4313      	orrs	r3, r2
 8002482:	608b      	str	r3, [r1, #8]
 8002484:	e006      	b.n	8002494 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002486:	4b16      	ldr	r3, [pc, #88]	; (80024e0 <HAL_GPIO_Init+0x2d0>)
 8002488:	689a      	ldr	r2, [r3, #8]
 800248a:	69bb      	ldr	r3, [r7, #24]
 800248c:	43db      	mvns	r3, r3
 800248e:	4914      	ldr	r1, [pc, #80]	; (80024e0 <HAL_GPIO_Init+0x2d0>)
 8002490:	4013      	ands	r3, r2
 8002492:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800249c:	2b00      	cmp	r3, #0
 800249e:	d021      	beq.n	80024e4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80024a0:	4b0f      	ldr	r3, [pc, #60]	; (80024e0 <HAL_GPIO_Init+0x2d0>)
 80024a2:	68da      	ldr	r2, [r3, #12]
 80024a4:	490e      	ldr	r1, [pc, #56]	; (80024e0 <HAL_GPIO_Init+0x2d0>)
 80024a6:	69bb      	ldr	r3, [r7, #24]
 80024a8:	4313      	orrs	r3, r2
 80024aa:	60cb      	str	r3, [r1, #12]
 80024ac:	e021      	b.n	80024f2 <HAL_GPIO_Init+0x2e2>
 80024ae:	bf00      	nop
 80024b0:	10320000 	.word	0x10320000
 80024b4:	10310000 	.word	0x10310000
 80024b8:	10220000 	.word	0x10220000
 80024bc:	10210000 	.word	0x10210000
 80024c0:	10120000 	.word	0x10120000
 80024c4:	10110000 	.word	0x10110000
 80024c8:	40021000 	.word	0x40021000
 80024cc:	40010000 	.word	0x40010000
 80024d0:	40010800 	.word	0x40010800
 80024d4:	40010c00 	.word	0x40010c00
 80024d8:	40011000 	.word	0x40011000
 80024dc:	40011400 	.word	0x40011400
 80024e0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80024e4:	4b0b      	ldr	r3, [pc, #44]	; (8002514 <HAL_GPIO_Init+0x304>)
 80024e6:	68da      	ldr	r2, [r3, #12]
 80024e8:	69bb      	ldr	r3, [r7, #24]
 80024ea:	43db      	mvns	r3, r3
 80024ec:	4909      	ldr	r1, [pc, #36]	; (8002514 <HAL_GPIO_Init+0x304>)
 80024ee:	4013      	ands	r3, r2
 80024f0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80024f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f4:	3301      	adds	r3, #1
 80024f6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024fe:	fa22 f303 	lsr.w	r3, r2, r3
 8002502:	2b00      	cmp	r3, #0
 8002504:	f47f ae8e 	bne.w	8002224 <HAL_GPIO_Init+0x14>
  }
}
 8002508:	bf00      	nop
 800250a:	bf00      	nop
 800250c:	372c      	adds	r7, #44	; 0x2c
 800250e:	46bd      	mov	sp, r7
 8002510:	bc80      	pop	{r7}
 8002512:	4770      	bx	lr
 8002514:	40010400 	.word	0x40010400

08002518 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002518:	b480      	push	{r7}
 800251a:	b083      	sub	sp, #12
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
 8002520:	460b      	mov	r3, r1
 8002522:	807b      	strh	r3, [r7, #2]
 8002524:	4613      	mov	r3, r2
 8002526:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002528:	787b      	ldrb	r3, [r7, #1]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d003      	beq.n	8002536 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800252e:	887a      	ldrh	r2, [r7, #2]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002534:	e003      	b.n	800253e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002536:	887b      	ldrh	r3, [r7, #2]
 8002538:	041a      	lsls	r2, r3, #16
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	611a      	str	r2, [r3, #16]
}
 800253e:	bf00      	nop
 8002540:	370c      	adds	r7, #12
 8002542:	46bd      	mov	sp, r7
 8002544:	bc80      	pop	{r7}
 8002546:	4770      	bx	lr

08002548 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b082      	sub	sp, #8
 800254c:	af00      	add	r7, sp, #0
 800254e:	4603      	mov	r3, r0
 8002550:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002552:	4b08      	ldr	r3, [pc, #32]	; (8002574 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002554:	695a      	ldr	r2, [r3, #20]
 8002556:	88fb      	ldrh	r3, [r7, #6]
 8002558:	4013      	ands	r3, r2
 800255a:	2b00      	cmp	r3, #0
 800255c:	d006      	beq.n	800256c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800255e:	4a05      	ldr	r2, [pc, #20]	; (8002574 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002560:	88fb      	ldrh	r3, [r7, #6]
 8002562:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002564:	88fb      	ldrh	r3, [r7, #6]
 8002566:	4618      	mov	r0, r3
 8002568:	f7ff f908 	bl	800177c <HAL_GPIO_EXTI_Callback>
  }
}
 800256c:	bf00      	nop
 800256e:	3708      	adds	r7, #8
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}
 8002574:	40010400 	.word	0x40010400

08002578 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b084      	sub	sp, #16
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d101      	bne.n	800258a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	e12b      	b.n	80027e2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002590:	b2db      	uxtb	r3, r3
 8002592:	2b00      	cmp	r3, #0
 8002594:	d106      	bne.n	80025a4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2200      	movs	r2, #0
 800259a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800259e:	6878      	ldr	r0, [r7, #4]
 80025a0:	f7ff fad6 	bl	8001b50 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2224      	movs	r2, #36	; 0x24
 80025a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	681a      	ldr	r2, [r3, #0]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f022 0201 	bic.w	r2, r2, #1
 80025ba:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	681a      	ldr	r2, [r3, #0]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80025ca:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80025da:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80025dc:	f002 fce2 	bl	8004fa4 <HAL_RCC_GetPCLK1Freq>
 80025e0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	4a81      	ldr	r2, [pc, #516]	; (80027ec <HAL_I2C_Init+0x274>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d807      	bhi.n	80025fc <HAL_I2C_Init+0x84>
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	4a80      	ldr	r2, [pc, #512]	; (80027f0 <HAL_I2C_Init+0x278>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	bf94      	ite	ls
 80025f4:	2301      	movls	r3, #1
 80025f6:	2300      	movhi	r3, #0
 80025f8:	b2db      	uxtb	r3, r3
 80025fa:	e006      	b.n	800260a <HAL_I2C_Init+0x92>
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	4a7d      	ldr	r2, [pc, #500]	; (80027f4 <HAL_I2C_Init+0x27c>)
 8002600:	4293      	cmp	r3, r2
 8002602:	bf94      	ite	ls
 8002604:	2301      	movls	r3, #1
 8002606:	2300      	movhi	r3, #0
 8002608:	b2db      	uxtb	r3, r3
 800260a:	2b00      	cmp	r3, #0
 800260c:	d001      	beq.n	8002612 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	e0e7      	b.n	80027e2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	4a78      	ldr	r2, [pc, #480]	; (80027f8 <HAL_I2C_Init+0x280>)
 8002616:	fba2 2303 	umull	r2, r3, r2, r3
 800261a:	0c9b      	lsrs	r3, r3, #18
 800261c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	68ba      	ldr	r2, [r7, #8]
 800262e:	430a      	orrs	r2, r1
 8002630:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	6a1b      	ldr	r3, [r3, #32]
 8002638:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	4a6a      	ldr	r2, [pc, #424]	; (80027ec <HAL_I2C_Init+0x274>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d802      	bhi.n	800264c <HAL_I2C_Init+0xd4>
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	3301      	adds	r3, #1
 800264a:	e009      	b.n	8002660 <HAL_I2C_Init+0xe8>
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002652:	fb02 f303 	mul.w	r3, r2, r3
 8002656:	4a69      	ldr	r2, [pc, #420]	; (80027fc <HAL_I2C_Init+0x284>)
 8002658:	fba2 2303 	umull	r2, r3, r2, r3
 800265c:	099b      	lsrs	r3, r3, #6
 800265e:	3301      	adds	r3, #1
 8002660:	687a      	ldr	r2, [r7, #4]
 8002662:	6812      	ldr	r2, [r2, #0]
 8002664:	430b      	orrs	r3, r1
 8002666:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	69db      	ldr	r3, [r3, #28]
 800266e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002672:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	495c      	ldr	r1, [pc, #368]	; (80027ec <HAL_I2C_Init+0x274>)
 800267c:	428b      	cmp	r3, r1
 800267e:	d819      	bhi.n	80026b4 <HAL_I2C_Init+0x13c>
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	1e59      	subs	r1, r3, #1
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	005b      	lsls	r3, r3, #1
 800268a:	fbb1 f3f3 	udiv	r3, r1, r3
 800268e:	1c59      	adds	r1, r3, #1
 8002690:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002694:	400b      	ands	r3, r1
 8002696:	2b00      	cmp	r3, #0
 8002698:	d00a      	beq.n	80026b0 <HAL_I2C_Init+0x138>
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	1e59      	subs	r1, r3, #1
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	005b      	lsls	r3, r3, #1
 80026a4:	fbb1 f3f3 	udiv	r3, r1, r3
 80026a8:	3301      	adds	r3, #1
 80026aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026ae:	e051      	b.n	8002754 <HAL_I2C_Init+0x1dc>
 80026b0:	2304      	movs	r3, #4
 80026b2:	e04f      	b.n	8002754 <HAL_I2C_Init+0x1dc>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	689b      	ldr	r3, [r3, #8]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d111      	bne.n	80026e0 <HAL_I2C_Init+0x168>
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	1e58      	subs	r0, r3, #1
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6859      	ldr	r1, [r3, #4]
 80026c4:	460b      	mov	r3, r1
 80026c6:	005b      	lsls	r3, r3, #1
 80026c8:	440b      	add	r3, r1
 80026ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80026ce:	3301      	adds	r3, #1
 80026d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	bf0c      	ite	eq
 80026d8:	2301      	moveq	r3, #1
 80026da:	2300      	movne	r3, #0
 80026dc:	b2db      	uxtb	r3, r3
 80026de:	e012      	b.n	8002706 <HAL_I2C_Init+0x18e>
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	1e58      	subs	r0, r3, #1
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6859      	ldr	r1, [r3, #4]
 80026e8:	460b      	mov	r3, r1
 80026ea:	009b      	lsls	r3, r3, #2
 80026ec:	440b      	add	r3, r1
 80026ee:	0099      	lsls	r1, r3, #2
 80026f0:	440b      	add	r3, r1
 80026f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80026f6:	3301      	adds	r3, #1
 80026f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	bf0c      	ite	eq
 8002700:	2301      	moveq	r3, #1
 8002702:	2300      	movne	r3, #0
 8002704:	b2db      	uxtb	r3, r3
 8002706:	2b00      	cmp	r3, #0
 8002708:	d001      	beq.n	800270e <HAL_I2C_Init+0x196>
 800270a:	2301      	movs	r3, #1
 800270c:	e022      	b.n	8002754 <HAL_I2C_Init+0x1dc>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d10e      	bne.n	8002734 <HAL_I2C_Init+0x1bc>
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	1e58      	subs	r0, r3, #1
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6859      	ldr	r1, [r3, #4]
 800271e:	460b      	mov	r3, r1
 8002720:	005b      	lsls	r3, r3, #1
 8002722:	440b      	add	r3, r1
 8002724:	fbb0 f3f3 	udiv	r3, r0, r3
 8002728:	3301      	adds	r3, #1
 800272a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800272e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002732:	e00f      	b.n	8002754 <HAL_I2C_Init+0x1dc>
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	1e58      	subs	r0, r3, #1
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6859      	ldr	r1, [r3, #4]
 800273c:	460b      	mov	r3, r1
 800273e:	009b      	lsls	r3, r3, #2
 8002740:	440b      	add	r3, r1
 8002742:	0099      	lsls	r1, r3, #2
 8002744:	440b      	add	r3, r1
 8002746:	fbb0 f3f3 	udiv	r3, r0, r3
 800274a:	3301      	adds	r3, #1
 800274c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002750:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002754:	6879      	ldr	r1, [r7, #4]
 8002756:	6809      	ldr	r1, [r1, #0]
 8002758:	4313      	orrs	r3, r2
 800275a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	69da      	ldr	r2, [r3, #28]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6a1b      	ldr	r3, [r3, #32]
 800276e:	431a      	orrs	r2, r3
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	430a      	orrs	r2, r1
 8002776:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002782:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002786:	687a      	ldr	r2, [r7, #4]
 8002788:	6911      	ldr	r1, [r2, #16]
 800278a:	687a      	ldr	r2, [r7, #4]
 800278c:	68d2      	ldr	r2, [r2, #12]
 800278e:	4311      	orrs	r1, r2
 8002790:	687a      	ldr	r2, [r7, #4]
 8002792:	6812      	ldr	r2, [r2, #0]
 8002794:	430b      	orrs	r3, r1
 8002796:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	68db      	ldr	r3, [r3, #12]
 800279e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	695a      	ldr	r2, [r3, #20]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	699b      	ldr	r3, [r3, #24]
 80027aa:	431a      	orrs	r2, r3
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	430a      	orrs	r2, r1
 80027b2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	681a      	ldr	r2, [r3, #0]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f042 0201 	orr.w	r2, r2, #1
 80027c2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2200      	movs	r2, #0
 80027c8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2220      	movs	r2, #32
 80027ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2200      	movs	r2, #0
 80027d6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2200      	movs	r2, #0
 80027dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80027e0:	2300      	movs	r3, #0
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	3710      	adds	r7, #16
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	bf00      	nop
 80027ec:	000186a0 	.word	0x000186a0
 80027f0:	001e847f 	.word	0x001e847f
 80027f4:	003d08ff 	.word	0x003d08ff
 80027f8:	431bde83 	.word	0x431bde83
 80027fc:	10624dd3 	.word	0x10624dd3

08002800 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b088      	sub	sp, #32
 8002804:	af02      	add	r7, sp, #8
 8002806:	60f8      	str	r0, [r7, #12]
 8002808:	607a      	str	r2, [r7, #4]
 800280a:	461a      	mov	r2, r3
 800280c:	460b      	mov	r3, r1
 800280e:	817b      	strh	r3, [r7, #10]
 8002810:	4613      	mov	r3, r2
 8002812:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002814:	f7ff fb4a 	bl	8001eac <HAL_GetTick>
 8002818:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002820:	b2db      	uxtb	r3, r3
 8002822:	2b20      	cmp	r3, #32
 8002824:	f040 80e0 	bne.w	80029e8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	9300      	str	r3, [sp, #0]
 800282c:	2319      	movs	r3, #25
 800282e:	2201      	movs	r2, #1
 8002830:	4970      	ldr	r1, [pc, #448]	; (80029f4 <HAL_I2C_Master_Transmit+0x1f4>)
 8002832:	68f8      	ldr	r0, [r7, #12]
 8002834:	f001 fdb4 	bl	80043a0 <I2C_WaitOnFlagUntilTimeout>
 8002838:	4603      	mov	r3, r0
 800283a:	2b00      	cmp	r3, #0
 800283c:	d001      	beq.n	8002842 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800283e:	2302      	movs	r3, #2
 8002840:	e0d3      	b.n	80029ea <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002848:	2b01      	cmp	r3, #1
 800284a:	d101      	bne.n	8002850 <HAL_I2C_Master_Transmit+0x50>
 800284c:	2302      	movs	r3, #2
 800284e:	e0cc      	b.n	80029ea <HAL_I2C_Master_Transmit+0x1ea>
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	2201      	movs	r2, #1
 8002854:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f003 0301 	and.w	r3, r3, #1
 8002862:	2b01      	cmp	r3, #1
 8002864:	d007      	beq.n	8002876 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	681a      	ldr	r2, [r3, #0]
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f042 0201 	orr.w	r2, r2, #1
 8002874:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	681a      	ldr	r2, [r3, #0]
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002884:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	2221      	movs	r2, #33	; 0x21
 800288a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	2210      	movs	r2, #16
 8002892:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	2200      	movs	r2, #0
 800289a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	687a      	ldr	r2, [r7, #4]
 80028a0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	893a      	ldrh	r2, [r7, #8]
 80028a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028ac:	b29a      	uxth	r2, r3
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	4a50      	ldr	r2, [pc, #320]	; (80029f8 <HAL_I2C_Master_Transmit+0x1f8>)
 80028b6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80028b8:	8979      	ldrh	r1, [r7, #10]
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	6a3a      	ldr	r2, [r7, #32]
 80028be:	68f8      	ldr	r0, [r7, #12]
 80028c0:	f001 f9f8 	bl	8003cb4 <I2C_MasterRequestWrite>
 80028c4:	4603      	mov	r3, r0
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d001      	beq.n	80028ce <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	e08d      	b.n	80029ea <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028ce:	2300      	movs	r3, #0
 80028d0:	613b      	str	r3, [r7, #16]
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	695b      	ldr	r3, [r3, #20]
 80028d8:	613b      	str	r3, [r7, #16]
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	699b      	ldr	r3, [r3, #24]
 80028e0:	613b      	str	r3, [r7, #16]
 80028e2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80028e4:	e066      	b.n	80029b4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028e6:	697a      	ldr	r2, [r7, #20]
 80028e8:	6a39      	ldr	r1, [r7, #32]
 80028ea:	68f8      	ldr	r0, [r7, #12]
 80028ec:	f001 fe2e 	bl	800454c <I2C_WaitOnTXEFlagUntilTimeout>
 80028f0:	4603      	mov	r3, r0
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d00d      	beq.n	8002912 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028fa:	2b04      	cmp	r3, #4
 80028fc:	d107      	bne.n	800290e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	681a      	ldr	r2, [r3, #0]
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800290c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	e06b      	b.n	80029ea <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002916:	781a      	ldrb	r2, [r3, #0]
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002922:	1c5a      	adds	r2, r3, #1
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800292c:	b29b      	uxth	r3, r3
 800292e:	3b01      	subs	r3, #1
 8002930:	b29a      	uxth	r2, r3
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800293a:	3b01      	subs	r3, #1
 800293c:	b29a      	uxth	r2, r3
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	695b      	ldr	r3, [r3, #20]
 8002948:	f003 0304 	and.w	r3, r3, #4
 800294c:	2b04      	cmp	r3, #4
 800294e:	d11b      	bne.n	8002988 <HAL_I2C_Master_Transmit+0x188>
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002954:	2b00      	cmp	r3, #0
 8002956:	d017      	beq.n	8002988 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800295c:	781a      	ldrb	r2, [r3, #0]
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002968:	1c5a      	adds	r2, r3, #1
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002972:	b29b      	uxth	r3, r3
 8002974:	3b01      	subs	r3, #1
 8002976:	b29a      	uxth	r2, r3
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002980:	3b01      	subs	r3, #1
 8002982:	b29a      	uxth	r2, r3
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002988:	697a      	ldr	r2, [r7, #20]
 800298a:	6a39      	ldr	r1, [r7, #32]
 800298c:	68f8      	ldr	r0, [r7, #12]
 800298e:	f001 fe1e 	bl	80045ce <I2C_WaitOnBTFFlagUntilTimeout>
 8002992:	4603      	mov	r3, r0
 8002994:	2b00      	cmp	r3, #0
 8002996:	d00d      	beq.n	80029b4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299c:	2b04      	cmp	r3, #4
 800299e:	d107      	bne.n	80029b0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	681a      	ldr	r2, [r3, #0]
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029ae:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80029b0:	2301      	movs	r3, #1
 80029b2:	e01a      	b.n	80029ea <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d194      	bne.n	80028e6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	2220      	movs	r2, #32
 80029d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	2200      	movs	r2, #0
 80029d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	2200      	movs	r2, #0
 80029e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80029e4:	2300      	movs	r3, #0
 80029e6:	e000      	b.n	80029ea <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80029e8:	2302      	movs	r3, #2
  }
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	3718      	adds	r7, #24
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}
 80029f2:	bf00      	nop
 80029f4:	00100002 	.word	0x00100002
 80029f8:	ffff0000 	.word	0xffff0000

080029fc <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b08c      	sub	sp, #48	; 0x30
 8002a00:	af02      	add	r7, sp, #8
 8002a02:	60f8      	str	r0, [r7, #12]
 8002a04:	607a      	str	r2, [r7, #4]
 8002a06:	461a      	mov	r2, r3
 8002a08:	460b      	mov	r3, r1
 8002a0a:	817b      	strh	r3, [r7, #10]
 8002a0c:	4613      	mov	r3, r2
 8002a0e:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8002a10:	2300      	movs	r3, #0
 8002a12:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002a14:	f7ff fa4a 	bl	8001eac <HAL_GetTick>
 8002a18:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a20:	b2db      	uxtb	r3, r3
 8002a22:	2b20      	cmp	r3, #32
 8002a24:	f040 823f 	bne.w	8002ea6 <HAL_I2C_Master_Receive+0x4aa>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a2a:	9300      	str	r3, [sp, #0]
 8002a2c:	2319      	movs	r3, #25
 8002a2e:	2201      	movs	r2, #1
 8002a30:	497f      	ldr	r1, [pc, #508]	; (8002c30 <HAL_I2C_Master_Receive+0x234>)
 8002a32:	68f8      	ldr	r0, [r7, #12]
 8002a34:	f001 fcb4 	bl	80043a0 <I2C_WaitOnFlagUntilTimeout>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d001      	beq.n	8002a42 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8002a3e:	2302      	movs	r3, #2
 8002a40:	e232      	b.n	8002ea8 <HAL_I2C_Master_Receive+0x4ac>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a48:	2b01      	cmp	r3, #1
 8002a4a:	d101      	bne.n	8002a50 <HAL_I2C_Master_Receive+0x54>
 8002a4c:	2302      	movs	r3, #2
 8002a4e:	e22b      	b.n	8002ea8 <HAL_I2C_Master_Receive+0x4ac>
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	2201      	movs	r2, #1
 8002a54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f003 0301 	and.w	r3, r3, #1
 8002a62:	2b01      	cmp	r3, #1
 8002a64:	d007      	beq.n	8002a76 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	681a      	ldr	r2, [r3, #0]
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f042 0201 	orr.w	r2, r2, #1
 8002a74:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	681a      	ldr	r2, [r3, #0]
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a84:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	2222      	movs	r2, #34	; 0x22
 8002a8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	2210      	movs	r2, #16
 8002a92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	687a      	ldr	r2, [r7, #4]
 8002aa0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	893a      	ldrh	r2, [r7, #8]
 8002aa6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aac:	b29a      	uxth	r2, r3
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	4a5f      	ldr	r2, [pc, #380]	; (8002c34 <HAL_I2C_Master_Receive+0x238>)
 8002ab6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002ab8:	8979      	ldrh	r1, [r7, #10]
 8002aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002abc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002abe:	68f8      	ldr	r0, [r7, #12]
 8002ac0:	f001 f97a 	bl	8003db8 <I2C_MasterRequestRead>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d001      	beq.n	8002ace <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	e1ec      	b.n	8002ea8 <HAL_I2C_Master_Receive+0x4ac>
    }

    if (hi2c->XferSize == 0U)
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d113      	bne.n	8002afe <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	61fb      	str	r3, [r7, #28]
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	695b      	ldr	r3, [r3, #20]
 8002ae0:	61fb      	str	r3, [r7, #28]
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	699b      	ldr	r3, [r3, #24]
 8002ae8:	61fb      	str	r3, [r7, #28]
 8002aea:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002afa:	601a      	str	r2, [r3, #0]
 8002afc:	e1c0      	b.n	8002e80 <HAL_I2C_Master_Receive+0x484>
    }
    else if (hi2c->XferSize == 1U)
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b02:	2b01      	cmp	r3, #1
 8002b04:	d11e      	bne.n	8002b44 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	681a      	ldr	r2, [r3, #0]
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b14:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002b16:	b672      	cpsid	i
}
 8002b18:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	61bb      	str	r3, [r7, #24]
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	695b      	ldr	r3, [r3, #20]
 8002b24:	61bb      	str	r3, [r7, #24]
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	699b      	ldr	r3, [r3, #24]
 8002b2c:	61bb      	str	r3, [r7, #24]
 8002b2e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b3e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002b40:	b662      	cpsie	i
}
 8002b42:	e035      	b.n	8002bb0 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b48:	2b02      	cmp	r3, #2
 8002b4a:	d11e      	bne.n	8002b8a <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	681a      	ldr	r2, [r3, #0]
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b5a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002b5c:	b672      	cpsid	i
}
 8002b5e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b60:	2300      	movs	r3, #0
 8002b62:	617b      	str	r3, [r7, #20]
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	695b      	ldr	r3, [r3, #20]
 8002b6a:	617b      	str	r3, [r7, #20]
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	699b      	ldr	r3, [r3, #24]
 8002b72:	617b      	str	r3, [r7, #20]
 8002b74:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	681a      	ldr	r2, [r3, #0]
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b84:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002b86:	b662      	cpsie	i
}
 8002b88:	e012      	b.n	8002bb0 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	681a      	ldr	r2, [r3, #0]
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002b98:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	613b      	str	r3, [r7, #16]
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	695b      	ldr	r3, [r3, #20]
 8002ba4:	613b      	str	r3, [r7, #16]
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	699b      	ldr	r3, [r3, #24]
 8002bac:	613b      	str	r3, [r7, #16]
 8002bae:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002bb0:	e166      	b.n	8002e80 <HAL_I2C_Master_Receive+0x484>
    {
      if (hi2c->XferSize <= 3U)
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bb6:	2b03      	cmp	r3, #3
 8002bb8:	f200 811f 	bhi.w	8002dfa <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bc0:	2b01      	cmp	r3, #1
 8002bc2:	d123      	bne.n	8002c0c <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bc6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002bc8:	68f8      	ldr	r0, [r7, #12]
 8002bca:	f001 fd41 	bl	8004650 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d001      	beq.n	8002bd8 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	e167      	b.n	8002ea8 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	691a      	ldr	r2, [r3, #16]
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be2:	b2d2      	uxtb	r2, r2
 8002be4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bea:	1c5a      	adds	r2, r3, #1
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bf4:	3b01      	subs	r3, #1
 8002bf6:	b29a      	uxth	r2, r3
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c00:	b29b      	uxth	r3, r3
 8002c02:	3b01      	subs	r3, #1
 8002c04:	b29a      	uxth	r2, r3
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002c0a:	e139      	b.n	8002e80 <HAL_I2C_Master_Receive+0x484>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c10:	2b02      	cmp	r3, #2
 8002c12:	d152      	bne.n	8002cba <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c16:	9300      	str	r3, [sp, #0]
 8002c18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	4906      	ldr	r1, [pc, #24]	; (8002c38 <HAL_I2C_Master_Receive+0x23c>)
 8002c1e:	68f8      	ldr	r0, [r7, #12]
 8002c20:	f001 fbbe 	bl	80043a0 <I2C_WaitOnFlagUntilTimeout>
 8002c24:	4603      	mov	r3, r0
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d008      	beq.n	8002c3c <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e13c      	b.n	8002ea8 <HAL_I2C_Master_Receive+0x4ac>
 8002c2e:	bf00      	nop
 8002c30:	00100002 	.word	0x00100002
 8002c34:	ffff0000 	.word	0xffff0000
 8002c38:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002c3c:	b672      	cpsid	i
}
 8002c3e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c4e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	691a      	ldr	r2, [r3, #16]
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c5a:	b2d2      	uxtb	r2, r2
 8002c5c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c62:	1c5a      	adds	r2, r3, #1
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c6c:	3b01      	subs	r3, #1
 8002c6e:	b29a      	uxth	r2, r3
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c78:	b29b      	uxth	r3, r3
 8002c7a:	3b01      	subs	r3, #1
 8002c7c:	b29a      	uxth	r2, r3
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002c82:	b662      	cpsie	i
}
 8002c84:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	691a      	ldr	r2, [r3, #16]
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c90:	b2d2      	uxtb	r2, r2
 8002c92:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c98:	1c5a      	adds	r2, r3, #1
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ca2:	3b01      	subs	r3, #1
 8002ca4:	b29a      	uxth	r2, r3
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cae:	b29b      	uxth	r3, r3
 8002cb0:	3b01      	subs	r3, #1
 8002cb2:	b29a      	uxth	r2, r3
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002cb8:	e0e2      	b.n	8002e80 <HAL_I2C_Master_Receive+0x484>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cbc:	9300      	str	r3, [sp, #0]
 8002cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	497b      	ldr	r1, [pc, #492]	; (8002eb0 <HAL_I2C_Master_Receive+0x4b4>)
 8002cc4:	68f8      	ldr	r0, [r7, #12]
 8002cc6:	f001 fb6b 	bl	80043a0 <I2C_WaitOnFlagUntilTimeout>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d001      	beq.n	8002cd4 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	e0e9      	b.n	8002ea8 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	681a      	ldr	r2, [r3, #0]
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ce2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002ce4:	b672      	cpsid	i
}
 8002ce6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	691a      	ldr	r2, [r3, #16]
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf2:	b2d2      	uxtb	r2, r2
 8002cf4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cfa:	1c5a      	adds	r2, r3, #1
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d04:	3b01      	subs	r3, #1
 8002d06:	b29a      	uxth	r2, r3
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d10:	b29b      	uxth	r3, r3
 8002d12:	3b01      	subs	r3, #1
 8002d14:	b29a      	uxth	r2, r3
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002d1a:	4b66      	ldr	r3, [pc, #408]	; (8002eb4 <HAL_I2C_Master_Receive+0x4b8>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	08db      	lsrs	r3, r3, #3
 8002d20:	4a65      	ldr	r2, [pc, #404]	; (8002eb8 <HAL_I2C_Master_Receive+0x4bc>)
 8002d22:	fba2 2303 	umull	r2, r3, r2, r3
 8002d26:	0a1a      	lsrs	r2, r3, #8
 8002d28:	4613      	mov	r3, r2
 8002d2a:	009b      	lsls	r3, r3, #2
 8002d2c:	4413      	add	r3, r2
 8002d2e:	00da      	lsls	r2, r3, #3
 8002d30:	1ad3      	subs	r3, r2, r3
 8002d32:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002d34:	6a3b      	ldr	r3, [r7, #32]
 8002d36:	3b01      	subs	r3, #1
 8002d38:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002d3a:	6a3b      	ldr	r3, [r7, #32]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d118      	bne.n	8002d72 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	2200      	movs	r2, #0
 8002d44:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	2220      	movs	r2, #32
 8002d4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	2200      	movs	r2, #0
 8002d52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d5a:	f043 0220 	orr.w	r2, r3, #32
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002d62:	b662      	cpsie	i
}
 8002d64:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e09a      	b.n	8002ea8 <HAL_I2C_Master_Receive+0x4ac>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	695b      	ldr	r3, [r3, #20]
 8002d78:	f003 0304 	and.w	r3, r3, #4
 8002d7c:	2b04      	cmp	r3, #4
 8002d7e:	d1d9      	bne.n	8002d34 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	681a      	ldr	r2, [r3, #0]
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d8e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	691a      	ldr	r2, [r3, #16]
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d9a:	b2d2      	uxtb	r2, r2
 8002d9c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da2:	1c5a      	adds	r2, r3, #1
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dac:	3b01      	subs	r3, #1
 8002dae:	b29a      	uxth	r2, r3
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002db8:	b29b      	uxth	r3, r3
 8002dba:	3b01      	subs	r3, #1
 8002dbc:	b29a      	uxth	r2, r3
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002dc2:	b662      	cpsie	i
}
 8002dc4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	691a      	ldr	r2, [r3, #16]
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd0:	b2d2      	uxtb	r2, r2
 8002dd2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd8:	1c5a      	adds	r2, r3, #1
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002de2:	3b01      	subs	r3, #1
 8002de4:	b29a      	uxth	r2, r3
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dee:	b29b      	uxth	r3, r3
 8002df0:	3b01      	subs	r3, #1
 8002df2:	b29a      	uxth	r2, r3
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002df8:	e042      	b.n	8002e80 <HAL_I2C_Master_Receive+0x484>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002dfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dfc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002dfe:	68f8      	ldr	r0, [r7, #12]
 8002e00:	f001 fc26 	bl	8004650 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002e04:	4603      	mov	r3, r0
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d001      	beq.n	8002e0e <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e04c      	b.n	8002ea8 <HAL_I2C_Master_Receive+0x4ac>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	691a      	ldr	r2, [r3, #16]
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e18:	b2d2      	uxtb	r2, r2
 8002e1a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e20:	1c5a      	adds	r2, r3, #1
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e2a:	3b01      	subs	r3, #1
 8002e2c:	b29a      	uxth	r2, r3
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e36:	b29b      	uxth	r3, r3
 8002e38:	3b01      	subs	r3, #1
 8002e3a:	b29a      	uxth	r2, r3
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	695b      	ldr	r3, [r3, #20]
 8002e46:	f003 0304 	and.w	r3, r3, #4
 8002e4a:	2b04      	cmp	r3, #4
 8002e4c:	d118      	bne.n	8002e80 <HAL_I2C_Master_Receive+0x484>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	691a      	ldr	r2, [r3, #16]
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e58:	b2d2      	uxtb	r2, r2
 8002e5a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e60:	1c5a      	adds	r2, r3, #1
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e6a:	3b01      	subs	r3, #1
 8002e6c:	b29a      	uxth	r2, r3
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e76:	b29b      	uxth	r3, r3
 8002e78:	3b01      	subs	r3, #1
 8002e7a:	b29a      	uxth	r2, r3
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	f47f ae94 	bne.w	8002bb2 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	2220      	movs	r2, #32
 8002e8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	2200      	movs	r2, #0
 8002e96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	e000      	b.n	8002ea8 <HAL_I2C_Master_Receive+0x4ac>
  }
  else
  {
    return HAL_BUSY;
 8002ea6:	2302      	movs	r3, #2
  }
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	3728      	adds	r7, #40	; 0x28
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}
 8002eb0:	00010004 	.word	0x00010004
 8002eb4:	20000000 	.word	0x20000000
 8002eb8:	14f8b589 	.word	0x14f8b589

08002ebc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b088      	sub	sp, #32
 8002ec0:	af02      	add	r7, sp, #8
 8002ec2:	60f8      	str	r0, [r7, #12]
 8002ec4:	4608      	mov	r0, r1
 8002ec6:	4611      	mov	r1, r2
 8002ec8:	461a      	mov	r2, r3
 8002eca:	4603      	mov	r3, r0
 8002ecc:	817b      	strh	r3, [r7, #10]
 8002ece:	460b      	mov	r3, r1
 8002ed0:	813b      	strh	r3, [r7, #8]
 8002ed2:	4613      	mov	r3, r2
 8002ed4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002ed6:	f7fe ffe9 	bl	8001eac <HAL_GetTick>
 8002eda:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ee2:	b2db      	uxtb	r3, r3
 8002ee4:	2b20      	cmp	r3, #32
 8002ee6:	f040 80d9 	bne.w	800309c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	9300      	str	r3, [sp, #0]
 8002eee:	2319      	movs	r3, #25
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	496d      	ldr	r1, [pc, #436]	; (80030a8 <HAL_I2C_Mem_Write+0x1ec>)
 8002ef4:	68f8      	ldr	r0, [r7, #12]
 8002ef6:	f001 fa53 	bl	80043a0 <I2C_WaitOnFlagUntilTimeout>
 8002efa:	4603      	mov	r3, r0
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d001      	beq.n	8002f04 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002f00:	2302      	movs	r3, #2
 8002f02:	e0cc      	b.n	800309e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	d101      	bne.n	8002f12 <HAL_I2C_Mem_Write+0x56>
 8002f0e:	2302      	movs	r3, #2
 8002f10:	e0c5      	b.n	800309e <HAL_I2C_Mem_Write+0x1e2>
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	2201      	movs	r2, #1
 8002f16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f003 0301 	and.w	r3, r3, #1
 8002f24:	2b01      	cmp	r3, #1
 8002f26:	d007      	beq.n	8002f38 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	681a      	ldr	r2, [r3, #0]
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f042 0201 	orr.w	r2, r2, #1
 8002f36:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	681a      	ldr	r2, [r3, #0]
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f46:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	2221      	movs	r2, #33	; 0x21
 8002f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	2240      	movs	r2, #64	; 0x40
 8002f54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	6a3a      	ldr	r2, [r7, #32]
 8002f62:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002f68:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f6e:	b29a      	uxth	r2, r3
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	4a4d      	ldr	r2, [pc, #308]	; (80030ac <HAL_I2C_Mem_Write+0x1f0>)
 8002f78:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002f7a:	88f8      	ldrh	r0, [r7, #6]
 8002f7c:	893a      	ldrh	r2, [r7, #8]
 8002f7e:	8979      	ldrh	r1, [r7, #10]
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	9301      	str	r3, [sp, #4]
 8002f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f86:	9300      	str	r3, [sp, #0]
 8002f88:	4603      	mov	r3, r0
 8002f8a:	68f8      	ldr	r0, [r7, #12]
 8002f8c:	f000 ffe2 	bl	8003f54 <I2C_RequestMemoryWrite>
 8002f90:	4603      	mov	r3, r0
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d052      	beq.n	800303c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	e081      	b.n	800309e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f9a:	697a      	ldr	r2, [r7, #20]
 8002f9c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002f9e:	68f8      	ldr	r0, [r7, #12]
 8002fa0:	f001 fad4 	bl	800454c <I2C_WaitOnTXEFlagUntilTimeout>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d00d      	beq.n	8002fc6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fae:	2b04      	cmp	r3, #4
 8002fb0:	d107      	bne.n	8002fc2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	681a      	ldr	r2, [r3, #0]
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fc0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e06b      	b.n	800309e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fca:	781a      	ldrb	r2, [r3, #0]
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd6:	1c5a      	adds	r2, r3, #1
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fe0:	3b01      	subs	r3, #1
 8002fe2:	b29a      	uxth	r2, r3
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fec:	b29b      	uxth	r3, r3
 8002fee:	3b01      	subs	r3, #1
 8002ff0:	b29a      	uxth	r2, r3
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	695b      	ldr	r3, [r3, #20]
 8002ffc:	f003 0304 	and.w	r3, r3, #4
 8003000:	2b04      	cmp	r3, #4
 8003002:	d11b      	bne.n	800303c <HAL_I2C_Mem_Write+0x180>
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003008:	2b00      	cmp	r3, #0
 800300a:	d017      	beq.n	800303c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003010:	781a      	ldrb	r2, [r3, #0]
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800301c:	1c5a      	adds	r2, r3, #1
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003026:	3b01      	subs	r3, #1
 8003028:	b29a      	uxth	r2, r3
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003032:	b29b      	uxth	r3, r3
 8003034:	3b01      	subs	r3, #1
 8003036:	b29a      	uxth	r2, r3
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003040:	2b00      	cmp	r3, #0
 8003042:	d1aa      	bne.n	8002f9a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003044:	697a      	ldr	r2, [r7, #20]
 8003046:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003048:	68f8      	ldr	r0, [r7, #12]
 800304a:	f001 fac0 	bl	80045ce <I2C_WaitOnBTFFlagUntilTimeout>
 800304e:	4603      	mov	r3, r0
 8003050:	2b00      	cmp	r3, #0
 8003052:	d00d      	beq.n	8003070 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003058:	2b04      	cmp	r3, #4
 800305a:	d107      	bne.n	800306c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	681a      	ldr	r2, [r3, #0]
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800306a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800306c:	2301      	movs	r3, #1
 800306e:	e016      	b.n	800309e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	681a      	ldr	r2, [r3, #0]
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800307e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	2220      	movs	r2, #32
 8003084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	2200      	movs	r2, #0
 800308c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	2200      	movs	r2, #0
 8003094:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003098:	2300      	movs	r3, #0
 800309a:	e000      	b.n	800309e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800309c:	2302      	movs	r3, #2
  }
}
 800309e:	4618      	mov	r0, r3
 80030a0:	3718      	adds	r7, #24
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}
 80030a6:	bf00      	nop
 80030a8:	00100002 	.word	0x00100002
 80030ac:	ffff0000 	.word	0xffff0000

080030b0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b08c      	sub	sp, #48	; 0x30
 80030b4:	af02      	add	r7, sp, #8
 80030b6:	60f8      	str	r0, [r7, #12]
 80030b8:	4608      	mov	r0, r1
 80030ba:	4611      	mov	r1, r2
 80030bc:	461a      	mov	r2, r3
 80030be:	4603      	mov	r3, r0
 80030c0:	817b      	strh	r3, [r7, #10]
 80030c2:	460b      	mov	r3, r1
 80030c4:	813b      	strh	r3, [r7, #8]
 80030c6:	4613      	mov	r3, r2
 80030c8:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80030ca:	2300      	movs	r3, #0
 80030cc:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80030ce:	f7fe feed 	bl	8001eac <HAL_GetTick>
 80030d2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030da:	b2db      	uxtb	r3, r3
 80030dc:	2b20      	cmp	r3, #32
 80030de:	f040 8244 	bne.w	800356a <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80030e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e4:	9300      	str	r3, [sp, #0]
 80030e6:	2319      	movs	r3, #25
 80030e8:	2201      	movs	r2, #1
 80030ea:	4982      	ldr	r1, [pc, #520]	; (80032f4 <HAL_I2C_Mem_Read+0x244>)
 80030ec:	68f8      	ldr	r0, [r7, #12]
 80030ee:	f001 f957 	bl	80043a0 <I2C_WaitOnFlagUntilTimeout>
 80030f2:	4603      	mov	r3, r0
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d001      	beq.n	80030fc <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80030f8:	2302      	movs	r3, #2
 80030fa:	e237      	b.n	800356c <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003102:	2b01      	cmp	r3, #1
 8003104:	d101      	bne.n	800310a <HAL_I2C_Mem_Read+0x5a>
 8003106:	2302      	movs	r3, #2
 8003108:	e230      	b.n	800356c <HAL_I2C_Mem_Read+0x4bc>
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	2201      	movs	r2, #1
 800310e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f003 0301 	and.w	r3, r3, #1
 800311c:	2b01      	cmp	r3, #1
 800311e:	d007      	beq.n	8003130 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	681a      	ldr	r2, [r3, #0]
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f042 0201 	orr.w	r2, r2, #1
 800312e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	681a      	ldr	r2, [r3, #0]
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800313e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	2222      	movs	r2, #34	; 0x22
 8003144:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	2240      	movs	r2, #64	; 0x40
 800314c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2200      	movs	r2, #0
 8003154:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800315a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003160:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003166:	b29a      	uxth	r2, r3
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	4a62      	ldr	r2, [pc, #392]	; (80032f8 <HAL_I2C_Mem_Read+0x248>)
 8003170:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003172:	88f8      	ldrh	r0, [r7, #6]
 8003174:	893a      	ldrh	r2, [r7, #8]
 8003176:	8979      	ldrh	r1, [r7, #10]
 8003178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800317a:	9301      	str	r3, [sp, #4]
 800317c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800317e:	9300      	str	r3, [sp, #0]
 8003180:	4603      	mov	r3, r0
 8003182:	68f8      	ldr	r0, [r7, #12]
 8003184:	f000 ff7c 	bl	8004080 <I2C_RequestMemoryRead>
 8003188:	4603      	mov	r3, r0
 800318a:	2b00      	cmp	r3, #0
 800318c:	d001      	beq.n	8003192 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	e1ec      	b.n	800356c <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003196:	2b00      	cmp	r3, #0
 8003198:	d113      	bne.n	80031c2 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800319a:	2300      	movs	r3, #0
 800319c:	61fb      	str	r3, [r7, #28]
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	695b      	ldr	r3, [r3, #20]
 80031a4:	61fb      	str	r3, [r7, #28]
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	699b      	ldr	r3, [r3, #24]
 80031ac:	61fb      	str	r3, [r7, #28]
 80031ae:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	681a      	ldr	r2, [r3, #0]
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031be:	601a      	str	r2, [r3, #0]
 80031c0:	e1c0      	b.n	8003544 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031c6:	2b01      	cmp	r3, #1
 80031c8:	d11e      	bne.n	8003208 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	681a      	ldr	r2, [r3, #0]
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031d8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80031da:	b672      	cpsid	i
}
 80031dc:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031de:	2300      	movs	r3, #0
 80031e0:	61bb      	str	r3, [r7, #24]
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	695b      	ldr	r3, [r3, #20]
 80031e8:	61bb      	str	r3, [r7, #24]
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	699b      	ldr	r3, [r3, #24]
 80031f0:	61bb      	str	r3, [r7, #24]
 80031f2:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	681a      	ldr	r2, [r3, #0]
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003202:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003204:	b662      	cpsie	i
}
 8003206:	e035      	b.n	8003274 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800320c:	2b02      	cmp	r3, #2
 800320e:	d11e      	bne.n	800324e <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	681a      	ldr	r2, [r3, #0]
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800321e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003220:	b672      	cpsid	i
}
 8003222:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003224:	2300      	movs	r3, #0
 8003226:	617b      	str	r3, [r7, #20]
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	695b      	ldr	r3, [r3, #20]
 800322e:	617b      	str	r3, [r7, #20]
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	699b      	ldr	r3, [r3, #24]
 8003236:	617b      	str	r3, [r7, #20]
 8003238:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	681a      	ldr	r2, [r3, #0]
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003248:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800324a:	b662      	cpsie	i
}
 800324c:	e012      	b.n	8003274 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800325c:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800325e:	2300      	movs	r3, #0
 8003260:	613b      	str	r3, [r7, #16]
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	695b      	ldr	r3, [r3, #20]
 8003268:	613b      	str	r3, [r7, #16]
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	699b      	ldr	r3, [r3, #24]
 8003270:	613b      	str	r3, [r7, #16]
 8003272:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003274:	e166      	b.n	8003544 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800327a:	2b03      	cmp	r3, #3
 800327c:	f200 811f 	bhi.w	80034be <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003284:	2b01      	cmp	r3, #1
 8003286:	d123      	bne.n	80032d0 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003288:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800328a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800328c:	68f8      	ldr	r0, [r7, #12]
 800328e:	f001 f9df 	bl	8004650 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003292:	4603      	mov	r3, r0
 8003294:	2b00      	cmp	r3, #0
 8003296:	d001      	beq.n	800329c <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8003298:	2301      	movs	r3, #1
 800329a:	e167      	b.n	800356c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	691a      	ldr	r2, [r3, #16]
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a6:	b2d2      	uxtb	r2, r2
 80032a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ae:	1c5a      	adds	r2, r3, #1
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032b8:	3b01      	subs	r3, #1
 80032ba:	b29a      	uxth	r2, r3
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032c4:	b29b      	uxth	r3, r3
 80032c6:	3b01      	subs	r3, #1
 80032c8:	b29a      	uxth	r2, r3
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80032ce:	e139      	b.n	8003544 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032d4:	2b02      	cmp	r3, #2
 80032d6:	d152      	bne.n	800337e <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80032d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032da:	9300      	str	r3, [sp, #0]
 80032dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032de:	2200      	movs	r2, #0
 80032e0:	4906      	ldr	r1, [pc, #24]	; (80032fc <HAL_I2C_Mem_Read+0x24c>)
 80032e2:	68f8      	ldr	r0, [r7, #12]
 80032e4:	f001 f85c 	bl	80043a0 <I2C_WaitOnFlagUntilTimeout>
 80032e8:	4603      	mov	r3, r0
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d008      	beq.n	8003300 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	e13c      	b.n	800356c <HAL_I2C_Mem_Read+0x4bc>
 80032f2:	bf00      	nop
 80032f4:	00100002 	.word	0x00100002
 80032f8:	ffff0000 	.word	0xffff0000
 80032fc:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003300:	b672      	cpsid	i
}
 8003302:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	681a      	ldr	r2, [r3, #0]
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003312:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	691a      	ldr	r2, [r3, #16]
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800331e:	b2d2      	uxtb	r2, r2
 8003320:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003326:	1c5a      	adds	r2, r3, #1
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003330:	3b01      	subs	r3, #1
 8003332:	b29a      	uxth	r2, r3
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800333c:	b29b      	uxth	r3, r3
 800333e:	3b01      	subs	r3, #1
 8003340:	b29a      	uxth	r2, r3
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003346:	b662      	cpsie	i
}
 8003348:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	691a      	ldr	r2, [r3, #16]
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003354:	b2d2      	uxtb	r2, r2
 8003356:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800335c:	1c5a      	adds	r2, r3, #1
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003366:	3b01      	subs	r3, #1
 8003368:	b29a      	uxth	r2, r3
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003372:	b29b      	uxth	r3, r3
 8003374:	3b01      	subs	r3, #1
 8003376:	b29a      	uxth	r2, r3
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800337c:	e0e2      	b.n	8003544 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800337e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003380:	9300      	str	r3, [sp, #0]
 8003382:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003384:	2200      	movs	r2, #0
 8003386:	497b      	ldr	r1, [pc, #492]	; (8003574 <HAL_I2C_Mem_Read+0x4c4>)
 8003388:	68f8      	ldr	r0, [r7, #12]
 800338a:	f001 f809 	bl	80043a0 <I2C_WaitOnFlagUntilTimeout>
 800338e:	4603      	mov	r3, r0
 8003390:	2b00      	cmp	r3, #0
 8003392:	d001      	beq.n	8003398 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	e0e9      	b.n	800356c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033a6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80033a8:	b672      	cpsid	i
}
 80033aa:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	691a      	ldr	r2, [r3, #16]
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b6:	b2d2      	uxtb	r2, r2
 80033b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033be:	1c5a      	adds	r2, r3, #1
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033c8:	3b01      	subs	r3, #1
 80033ca:	b29a      	uxth	r2, r3
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033d4:	b29b      	uxth	r3, r3
 80033d6:	3b01      	subs	r3, #1
 80033d8:	b29a      	uxth	r2, r3
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80033de:	4b66      	ldr	r3, [pc, #408]	; (8003578 <HAL_I2C_Mem_Read+0x4c8>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	08db      	lsrs	r3, r3, #3
 80033e4:	4a65      	ldr	r2, [pc, #404]	; (800357c <HAL_I2C_Mem_Read+0x4cc>)
 80033e6:	fba2 2303 	umull	r2, r3, r2, r3
 80033ea:	0a1a      	lsrs	r2, r3, #8
 80033ec:	4613      	mov	r3, r2
 80033ee:	009b      	lsls	r3, r3, #2
 80033f0:	4413      	add	r3, r2
 80033f2:	00da      	lsls	r2, r3, #3
 80033f4:	1ad3      	subs	r3, r2, r3
 80033f6:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80033f8:	6a3b      	ldr	r3, [r7, #32]
 80033fa:	3b01      	subs	r3, #1
 80033fc:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80033fe:	6a3b      	ldr	r3, [r7, #32]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d118      	bne.n	8003436 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	2200      	movs	r2, #0
 8003408:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	2220      	movs	r2, #32
 800340e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	2200      	movs	r2, #0
 8003416:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800341e:	f043 0220 	orr.w	r2, r3, #32
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003426:	b662      	cpsie	i
}
 8003428:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	2200      	movs	r2, #0
 800342e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	e09a      	b.n	800356c <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	695b      	ldr	r3, [r3, #20]
 800343c:	f003 0304 	and.w	r3, r3, #4
 8003440:	2b04      	cmp	r3, #4
 8003442:	d1d9      	bne.n	80033f8 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	681a      	ldr	r2, [r3, #0]
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003452:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	691a      	ldr	r2, [r3, #16]
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800345e:	b2d2      	uxtb	r2, r2
 8003460:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003466:	1c5a      	adds	r2, r3, #1
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003470:	3b01      	subs	r3, #1
 8003472:	b29a      	uxth	r2, r3
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800347c:	b29b      	uxth	r3, r3
 800347e:	3b01      	subs	r3, #1
 8003480:	b29a      	uxth	r2, r3
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003486:	b662      	cpsie	i
}
 8003488:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	691a      	ldr	r2, [r3, #16]
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003494:	b2d2      	uxtb	r2, r2
 8003496:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800349c:	1c5a      	adds	r2, r3, #1
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034a6:	3b01      	subs	r3, #1
 80034a8:	b29a      	uxth	r2, r3
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034b2:	b29b      	uxth	r3, r3
 80034b4:	3b01      	subs	r3, #1
 80034b6:	b29a      	uxth	r2, r3
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	855a      	strh	r2, [r3, #42]	; 0x2a
 80034bc:	e042      	b.n	8003544 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034c0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80034c2:	68f8      	ldr	r0, [r7, #12]
 80034c4:	f001 f8c4 	bl	8004650 <I2C_WaitOnRXNEFlagUntilTimeout>
 80034c8:	4603      	mov	r3, r0
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d001      	beq.n	80034d2 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	e04c      	b.n	800356c <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	691a      	ldr	r2, [r3, #16]
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034dc:	b2d2      	uxtb	r2, r2
 80034de:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e4:	1c5a      	adds	r2, r3, #1
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034ee:	3b01      	subs	r3, #1
 80034f0:	b29a      	uxth	r2, r3
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034fa:	b29b      	uxth	r3, r3
 80034fc:	3b01      	subs	r3, #1
 80034fe:	b29a      	uxth	r2, r3
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	695b      	ldr	r3, [r3, #20]
 800350a:	f003 0304 	and.w	r3, r3, #4
 800350e:	2b04      	cmp	r3, #4
 8003510:	d118      	bne.n	8003544 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	691a      	ldr	r2, [r3, #16]
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800351c:	b2d2      	uxtb	r2, r2
 800351e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003524:	1c5a      	adds	r2, r3, #1
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800352e:	3b01      	subs	r3, #1
 8003530:	b29a      	uxth	r2, r3
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800353a:	b29b      	uxth	r3, r3
 800353c:	3b01      	subs	r3, #1
 800353e:	b29a      	uxth	r2, r3
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003548:	2b00      	cmp	r3, #0
 800354a:	f47f ae94 	bne.w	8003276 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	2220      	movs	r2, #32
 8003552:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	2200      	movs	r2, #0
 800355a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2200      	movs	r2, #0
 8003562:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003566:	2300      	movs	r3, #0
 8003568:	e000      	b.n	800356c <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 800356a:	2302      	movs	r3, #2
  }
}
 800356c:	4618      	mov	r0, r3
 800356e:	3728      	adds	r7, #40	; 0x28
 8003570:	46bd      	mov	sp, r7
 8003572:	bd80      	pop	{r7, pc}
 8003574:	00010004 	.word	0x00010004
 8003578:	20000000 	.word	0x20000000
 800357c:	14f8b589 	.word	0x14f8b589

08003580 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b08a      	sub	sp, #40	; 0x28
 8003584:	af02      	add	r7, sp, #8
 8003586:	60f8      	str	r0, [r7, #12]
 8003588:	607a      	str	r2, [r7, #4]
 800358a:	603b      	str	r3, [r7, #0]
 800358c:	460b      	mov	r3, r1
 800358e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003590:	f7fe fc8c 	bl	8001eac <HAL_GetTick>
 8003594:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8003596:	2301      	movs	r3, #1
 8003598:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035a0:	b2db      	uxtb	r3, r3
 80035a2:	2b20      	cmp	r3, #32
 80035a4:	f040 8111 	bne.w	80037ca <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80035a8:	69fb      	ldr	r3, [r7, #28]
 80035aa:	9300      	str	r3, [sp, #0]
 80035ac:	2319      	movs	r3, #25
 80035ae:	2201      	movs	r2, #1
 80035b0:	4988      	ldr	r1, [pc, #544]	; (80037d4 <HAL_I2C_IsDeviceReady+0x254>)
 80035b2:	68f8      	ldr	r0, [r7, #12]
 80035b4:	f000 fef4 	bl	80043a0 <I2C_WaitOnFlagUntilTimeout>
 80035b8:	4603      	mov	r3, r0
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d001      	beq.n	80035c2 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80035be:	2302      	movs	r3, #2
 80035c0:	e104      	b.n	80037cc <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	d101      	bne.n	80035d0 <HAL_I2C_IsDeviceReady+0x50>
 80035cc:	2302      	movs	r3, #2
 80035ce:	e0fd      	b.n	80037cc <HAL_I2C_IsDeviceReady+0x24c>
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	2201      	movs	r2, #1
 80035d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f003 0301 	and.w	r3, r3, #1
 80035e2:	2b01      	cmp	r3, #1
 80035e4:	d007      	beq.n	80035f6 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	681a      	ldr	r2, [r3, #0]
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f042 0201 	orr.w	r2, r2, #1
 80035f4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	681a      	ldr	r2, [r3, #0]
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003604:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	2224      	movs	r2, #36	; 0x24
 800360a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	2200      	movs	r2, #0
 8003612:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	4a70      	ldr	r2, [pc, #448]	; (80037d8 <HAL_I2C_IsDeviceReady+0x258>)
 8003618:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	681a      	ldr	r2, [r3, #0]
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003628:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800362a:	69fb      	ldr	r3, [r7, #28]
 800362c:	9300      	str	r3, [sp, #0]
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	2200      	movs	r2, #0
 8003632:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003636:	68f8      	ldr	r0, [r7, #12]
 8003638:	f000 feb2 	bl	80043a0 <I2C_WaitOnFlagUntilTimeout>
 800363c:	4603      	mov	r3, r0
 800363e:	2b00      	cmp	r3, #0
 8003640:	d00d      	beq.n	800365e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800364c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003650:	d103      	bne.n	800365a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003658:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800365a:	2303      	movs	r3, #3
 800365c:	e0b6      	b.n	80037cc <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800365e:	897b      	ldrh	r3, [r7, #10]
 8003660:	b2db      	uxtb	r3, r3
 8003662:	461a      	mov	r2, r3
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800366c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800366e:	f7fe fc1d 	bl	8001eac <HAL_GetTick>
 8003672:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	695b      	ldr	r3, [r3, #20]
 800367a:	f003 0302 	and.w	r3, r3, #2
 800367e:	2b02      	cmp	r3, #2
 8003680:	bf0c      	ite	eq
 8003682:	2301      	moveq	r3, #1
 8003684:	2300      	movne	r3, #0
 8003686:	b2db      	uxtb	r3, r3
 8003688:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	695b      	ldr	r3, [r3, #20]
 8003690:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003694:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003698:	bf0c      	ite	eq
 800369a:	2301      	moveq	r3, #1
 800369c:	2300      	movne	r3, #0
 800369e:	b2db      	uxtb	r3, r3
 80036a0:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80036a2:	e025      	b.n	80036f0 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80036a4:	f7fe fc02 	bl	8001eac <HAL_GetTick>
 80036a8:	4602      	mov	r2, r0
 80036aa:	69fb      	ldr	r3, [r7, #28]
 80036ac:	1ad3      	subs	r3, r2, r3
 80036ae:	683a      	ldr	r2, [r7, #0]
 80036b0:	429a      	cmp	r2, r3
 80036b2:	d302      	bcc.n	80036ba <HAL_I2C_IsDeviceReady+0x13a>
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d103      	bne.n	80036c2 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	22a0      	movs	r2, #160	; 0xa0
 80036be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	695b      	ldr	r3, [r3, #20]
 80036c8:	f003 0302 	and.w	r3, r3, #2
 80036cc:	2b02      	cmp	r3, #2
 80036ce:	bf0c      	ite	eq
 80036d0:	2301      	moveq	r3, #1
 80036d2:	2300      	movne	r3, #0
 80036d4:	b2db      	uxtb	r3, r3
 80036d6:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	695b      	ldr	r3, [r3, #20]
 80036de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036e6:	bf0c      	ite	eq
 80036e8:	2301      	moveq	r3, #1
 80036ea:	2300      	movne	r3, #0
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036f6:	b2db      	uxtb	r3, r3
 80036f8:	2ba0      	cmp	r3, #160	; 0xa0
 80036fa:	d005      	beq.n	8003708 <HAL_I2C_IsDeviceReady+0x188>
 80036fc:	7dfb      	ldrb	r3, [r7, #23]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d102      	bne.n	8003708 <HAL_I2C_IsDeviceReady+0x188>
 8003702:	7dbb      	ldrb	r3, [r7, #22]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d0cd      	beq.n	80036a4 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	2220      	movs	r2, #32
 800370c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	695b      	ldr	r3, [r3, #20]
 8003716:	f003 0302 	and.w	r3, r3, #2
 800371a:	2b02      	cmp	r3, #2
 800371c:	d129      	bne.n	8003772 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	681a      	ldr	r2, [r3, #0]
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800372c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800372e:	2300      	movs	r3, #0
 8003730:	613b      	str	r3, [r7, #16]
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	695b      	ldr	r3, [r3, #20]
 8003738:	613b      	str	r3, [r7, #16]
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	699b      	ldr	r3, [r3, #24]
 8003740:	613b      	str	r3, [r7, #16]
 8003742:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003744:	69fb      	ldr	r3, [r7, #28]
 8003746:	9300      	str	r3, [sp, #0]
 8003748:	2319      	movs	r3, #25
 800374a:	2201      	movs	r2, #1
 800374c:	4921      	ldr	r1, [pc, #132]	; (80037d4 <HAL_I2C_IsDeviceReady+0x254>)
 800374e:	68f8      	ldr	r0, [r7, #12]
 8003750:	f000 fe26 	bl	80043a0 <I2C_WaitOnFlagUntilTimeout>
 8003754:	4603      	mov	r3, r0
 8003756:	2b00      	cmp	r3, #0
 8003758:	d001      	beq.n	800375e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	e036      	b.n	80037cc <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	2220      	movs	r2, #32
 8003762:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	2200      	movs	r2, #0
 800376a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800376e:	2300      	movs	r3, #0
 8003770:	e02c      	b.n	80037cc <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	681a      	ldr	r2, [r3, #0]
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003780:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800378a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800378c:	69fb      	ldr	r3, [r7, #28]
 800378e:	9300      	str	r3, [sp, #0]
 8003790:	2319      	movs	r3, #25
 8003792:	2201      	movs	r2, #1
 8003794:	490f      	ldr	r1, [pc, #60]	; (80037d4 <HAL_I2C_IsDeviceReady+0x254>)
 8003796:	68f8      	ldr	r0, [r7, #12]
 8003798:	f000 fe02 	bl	80043a0 <I2C_WaitOnFlagUntilTimeout>
 800379c:	4603      	mov	r3, r0
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d001      	beq.n	80037a6 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
 80037a4:	e012      	b.n	80037cc <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80037a6:	69bb      	ldr	r3, [r7, #24]
 80037a8:	3301      	adds	r3, #1
 80037aa:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80037ac:	69ba      	ldr	r2, [r7, #24]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	429a      	cmp	r2, r3
 80037b2:	f4ff af32 	bcc.w	800361a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	2220      	movs	r2, #32
 80037ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	2200      	movs	r2, #0
 80037c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	e000      	b.n	80037cc <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80037ca:	2302      	movs	r3, #2
  }
}
 80037cc:	4618      	mov	r0, r3
 80037ce:	3720      	adds	r7, #32
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bd80      	pop	{r7, pc}
 80037d4:	00100002 	.word	0x00100002
 80037d8:	ffff0000 	.word	0xffff0000

080037dc <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b08a      	sub	sp, #40	; 0x28
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	695b      	ldr	r3, [r3, #20]
 80037ea:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80037f4:	2300      	movs	r3, #0
 80037f6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80037fe:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003800:	6a3b      	ldr	r3, [r7, #32]
 8003802:	0a1b      	lsrs	r3, r3, #8
 8003804:	f003 0301 	and.w	r3, r3, #1
 8003808:	2b00      	cmp	r3, #0
 800380a:	d016      	beq.n	800383a <HAL_I2C_ER_IRQHandler+0x5e>
 800380c:	69fb      	ldr	r3, [r7, #28]
 800380e:	0a1b      	lsrs	r3, r3, #8
 8003810:	f003 0301 	and.w	r3, r3, #1
 8003814:	2b00      	cmp	r3, #0
 8003816:	d010      	beq.n	800383a <HAL_I2C_ER_IRQHandler+0x5e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8003818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800381a:	f043 0301 	orr.w	r3, r3, #1
 800381e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003828:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	681a      	ldr	r2, [r3, #0]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003838:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800383a:	6a3b      	ldr	r3, [r7, #32]
 800383c:	0a5b      	lsrs	r3, r3, #9
 800383e:	f003 0301 	and.w	r3, r3, #1
 8003842:	2b00      	cmp	r3, #0
 8003844:	d00e      	beq.n	8003864 <HAL_I2C_ER_IRQHandler+0x88>
 8003846:	69fb      	ldr	r3, [r7, #28]
 8003848:	0a1b      	lsrs	r3, r3, #8
 800384a:	f003 0301 	and.w	r3, r3, #1
 800384e:	2b00      	cmp	r3, #0
 8003850:	d008      	beq.n	8003864 <HAL_I2C_ER_IRQHandler+0x88>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8003852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003854:	f043 0302 	orr.w	r3, r3, #2
 8003858:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8003862:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003864:	6a3b      	ldr	r3, [r7, #32]
 8003866:	0a9b      	lsrs	r3, r3, #10
 8003868:	f003 0301 	and.w	r3, r3, #1
 800386c:	2b00      	cmp	r3, #0
 800386e:	d03f      	beq.n	80038f0 <HAL_I2C_ER_IRQHandler+0x114>
 8003870:	69fb      	ldr	r3, [r7, #28]
 8003872:	0a1b      	lsrs	r3, r3, #8
 8003874:	f003 0301 	and.w	r3, r3, #1
 8003878:	2b00      	cmp	r3, #0
 800387a:	d039      	beq.n	80038f0 <HAL_I2C_ER_IRQHandler+0x114>
  {
    tmp1 = CurrentMode;
 800387c:	7efb      	ldrb	r3, [r7, #27]
 800387e:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003884:	b29b      	uxth	r3, r3
 8003886:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800388e:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003894:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8003896:	7ebb      	ldrb	r3, [r7, #26]
 8003898:	2b20      	cmp	r3, #32
 800389a:	d112      	bne.n	80038c2 <HAL_I2C_ER_IRQHandler+0xe6>
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d10f      	bne.n	80038c2 <HAL_I2C_ER_IRQHandler+0xe6>
 80038a2:	7cfb      	ldrb	r3, [r7, #19]
 80038a4:	2b21      	cmp	r3, #33	; 0x21
 80038a6:	d008      	beq.n	80038ba <HAL_I2C_ER_IRQHandler+0xde>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80038a8:	7cfb      	ldrb	r3, [r7, #19]
 80038aa:	2b29      	cmp	r3, #41	; 0x29
 80038ac:	d005      	beq.n	80038ba <HAL_I2C_ER_IRQHandler+0xde>
 80038ae:	7cfb      	ldrb	r3, [r7, #19]
 80038b0:	2b28      	cmp	r3, #40	; 0x28
 80038b2:	d106      	bne.n	80038c2 <HAL_I2C_ER_IRQHandler+0xe6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	2b21      	cmp	r3, #33	; 0x21
 80038b8:	d103      	bne.n	80038c2 <HAL_I2C_ER_IRQHandler+0xe6>
    {
      I2C_Slave_AF(hi2c);
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	f000 f858 	bl	8003970 <I2C_Slave_AF>
 80038c0:	e016      	b.n	80038f0 <HAL_I2C_ER_IRQHandler+0x114>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80038ca:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80038cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ce:	f043 0304 	orr.w	r3, r3, #4
 80038d2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80038d4:	7efb      	ldrb	r3, [r7, #27]
 80038d6:	2b10      	cmp	r3, #16
 80038d8:	d002      	beq.n	80038e0 <HAL_I2C_ER_IRQHandler+0x104>
 80038da:	7efb      	ldrb	r3, [r7, #27]
 80038dc:	2b40      	cmp	r3, #64	; 0x40
 80038de:	d107      	bne.n	80038f0 <HAL_I2C_ER_IRQHandler+0x114>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	681a      	ldr	r2, [r3, #0]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038ee:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80038f0:	6a3b      	ldr	r3, [r7, #32]
 80038f2:	0adb      	lsrs	r3, r3, #11
 80038f4:	f003 0301 	and.w	r3, r3, #1
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d00e      	beq.n	800391a <HAL_I2C_ER_IRQHandler+0x13e>
 80038fc:	69fb      	ldr	r3, [r7, #28]
 80038fe:	0a1b      	lsrs	r3, r3, #8
 8003900:	f003 0301 	and.w	r3, r3, #1
 8003904:	2b00      	cmp	r3, #0
 8003906:	d008      	beq.n	800391a <HAL_I2C_ER_IRQHandler+0x13e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8003908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800390a:	f043 0308 	orr.w	r3, r3, #8
 800390e:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8003918:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 800391a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800391c:	2b00      	cmp	r3, #0
 800391e:	d008      	beq.n	8003932 <HAL_I2C_ER_IRQHandler+0x156>
  {
    hi2c->ErrorCode |= error;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003926:	431a      	orrs	r2, r3
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 800392c:	6878      	ldr	r0, [r7, #4]
 800392e:	f000 f88f 	bl	8003a50 <I2C_ITError>
  }
}
 8003932:	bf00      	nop
 8003934:	3728      	adds	r7, #40	; 0x28
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}

0800393a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800393a:	b480      	push	{r7}
 800393c:	b083      	sub	sp, #12
 800393e:	af00      	add	r7, sp, #0
 8003940:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003942:	bf00      	nop
 8003944:	370c      	adds	r7, #12
 8003946:	46bd      	mov	sp, r7
 8003948:	bc80      	pop	{r7}
 800394a:	4770      	bx	lr

0800394c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800394c:	b480      	push	{r7}
 800394e:	b083      	sub	sp, #12
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8003954:	bf00      	nop
 8003956:	370c      	adds	r7, #12
 8003958:	46bd      	mov	sp, r7
 800395a:	bc80      	pop	{r7}
 800395c:	4770      	bx	lr

0800395e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800395e:	b480      	push	{r7}
 8003960:	b083      	sub	sp, #12
 8003962:	af00      	add	r7, sp, #0
 8003964:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003966:	bf00      	nop
 8003968:	370c      	adds	r7, #12
 800396a:	46bd      	mov	sp, r7
 800396c:	bc80      	pop	{r7}
 800396e:	4770      	bx	lr

08003970 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b084      	sub	sp, #16
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800397e:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003984:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8003986:	68bb      	ldr	r3, [r7, #8]
 8003988:	2b08      	cmp	r3, #8
 800398a:	d002      	beq.n	8003992 <I2C_Slave_AF+0x22>
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	2b20      	cmp	r3, #32
 8003990:	d129      	bne.n	80039e6 <I2C_Slave_AF+0x76>
 8003992:	7bfb      	ldrb	r3, [r7, #15]
 8003994:	2b28      	cmp	r3, #40	; 0x28
 8003996:	d126      	bne.n	80039e6 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	4a2c      	ldr	r2, [pc, #176]	; (8003a4c <I2C_Slave_AF+0xdc>)
 800399c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	685a      	ldr	r2, [r3, #4]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80039ac:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80039b6:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	681a      	ldr	r2, [r3, #0]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039c6:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2200      	movs	r2, #0
 80039cc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2220      	movs	r2, #32
 80039d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2200      	movs	r2, #0
 80039da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80039de:	6878      	ldr	r0, [r7, #4]
 80039e0:	f7ff ffb4 	bl	800394c <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80039e4:	e02e      	b.n	8003a44 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80039e6:	7bfb      	ldrb	r3, [r7, #15]
 80039e8:	2b21      	cmp	r3, #33	; 0x21
 80039ea:	d126      	bne.n	8003a3a <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	4a17      	ldr	r2, [pc, #92]	; (8003a4c <I2C_Slave_AF+0xdc>)
 80039f0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2221      	movs	r2, #33	; 0x21
 80039f6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2220      	movs	r2, #32
 80039fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2200      	movs	r2, #0
 8003a04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	685a      	ldr	r2, [r3, #4]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003a16:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003a20:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	681a      	ldr	r2, [r3, #0]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a30:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003a32:	6878      	ldr	r0, [r7, #4]
 8003a34:	f7ff ff81 	bl	800393a <HAL_I2C_SlaveTxCpltCallback>
}
 8003a38:	e004      	b.n	8003a44 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003a42:	615a      	str	r2, [r3, #20]
}
 8003a44:	bf00      	nop
 8003a46:	3710      	adds	r7, #16
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bd80      	pop	{r7, pc}
 8003a4c:	ffff0000 	.word	0xffff0000

08003a50 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b084      	sub	sp, #16
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a5e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a66:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003a68:	7bbb      	ldrb	r3, [r7, #14]
 8003a6a:	2b10      	cmp	r3, #16
 8003a6c:	d002      	beq.n	8003a74 <I2C_ITError+0x24>
 8003a6e:	7bbb      	ldrb	r3, [r7, #14]
 8003a70:	2b40      	cmp	r3, #64	; 0x40
 8003a72:	d10a      	bne.n	8003a8a <I2C_ITError+0x3a>
 8003a74:	7bfb      	ldrb	r3, [r7, #15]
 8003a76:	2b22      	cmp	r3, #34	; 0x22
 8003a78:	d107      	bne.n	8003a8a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	681a      	ldr	r2, [r3, #0]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a88:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003a8a:	7bfb      	ldrb	r3, [r7, #15]
 8003a8c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003a90:	2b28      	cmp	r3, #40	; 0x28
 8003a92:	d107      	bne.n	8003aa4 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2200      	movs	r2, #0
 8003a98:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2228      	movs	r2, #40	; 0x28
 8003a9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003aa2:	e015      	b.n	8003ad0 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003aae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ab2:	d00a      	beq.n	8003aca <I2C_ITError+0x7a>
 8003ab4:	7bfb      	ldrb	r3, [r7, #15]
 8003ab6:	2b60      	cmp	r3, #96	; 0x60
 8003ab8:	d007      	beq.n	8003aca <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2220      	movs	r2, #32
 8003abe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2200      	movs	r2, #0
 8003ace:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ada:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ade:	d161      	bne.n	8003ba4 <I2C_ITError+0x154>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	685a      	ldr	r2, [r3, #4]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003aee:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003af4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003af8:	2b01      	cmp	r3, #1
 8003afa:	d020      	beq.n	8003b3e <I2C_ITError+0xee>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b00:	4a6a      	ldr	r2, [pc, #424]	; (8003cac <I2C_ITError+0x25c>)
 8003b02:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b08:	4618      	mov	r0, r3
 8003b0a:	f7fe fb0b 	bl	8002124 <HAL_DMA_Abort_IT>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	f000 8089 	beq.w	8003c28 <I2C_ITError+0x1d8>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	681a      	ldr	r2, [r3, #0]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f022 0201 	bic.w	r2, r2, #1
 8003b24:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2220      	movs	r2, #32
 8003b2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b34:	687a      	ldr	r2, [r7, #4]
 8003b36:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003b38:	4610      	mov	r0, r2
 8003b3a:	4798      	blx	r3
 8003b3c:	e074      	b.n	8003c28 <I2C_ITError+0x1d8>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b42:	4a5a      	ldr	r2, [pc, #360]	; (8003cac <I2C_ITError+0x25c>)
 8003b44:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	f7fe faea 	bl	8002124 <HAL_DMA_Abort_IT>
 8003b50:	4603      	mov	r3, r0
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d068      	beq.n	8003c28 <I2C_ITError+0x1d8>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	695b      	ldr	r3, [r3, #20]
 8003b5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b60:	2b40      	cmp	r3, #64	; 0x40
 8003b62:	d10b      	bne.n	8003b7c <I2C_ITError+0x12c>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	691a      	ldr	r2, [r3, #16]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b6e:	b2d2      	uxtb	r2, r2
 8003b70:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b76:	1c5a      	adds	r2, r3, #1
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	681a      	ldr	r2, [r3, #0]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f022 0201 	bic.w	r2, r2, #1
 8003b8a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2220      	movs	r2, #32
 8003b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b9a:	687a      	ldr	r2, [r7, #4]
 8003b9c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003b9e:	4610      	mov	r0, r2
 8003ba0:	4798      	blx	r3
 8003ba2:	e041      	b.n	8003c28 <I2C_ITError+0x1d8>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003baa:	b2db      	uxtb	r3, r3
 8003bac:	2b60      	cmp	r3, #96	; 0x60
 8003bae:	d125      	bne.n	8003bfc <I2C_ITError+0x1ac>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2220      	movs	r2, #32
 8003bb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	695b      	ldr	r3, [r3, #20]
 8003bc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bc8:	2b40      	cmp	r3, #64	; 0x40
 8003bca:	d10b      	bne.n	8003be4 <I2C_ITError+0x194>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	691a      	ldr	r2, [r3, #16]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd6:	b2d2      	uxtb	r2, r2
 8003bd8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bde:	1c5a      	adds	r2, r3, #1
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	681a      	ldr	r2, [r3, #0]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f022 0201 	bic.w	r2, r2, #1
 8003bf2:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003bf4:	6878      	ldr	r0, [r7, #4]
 8003bf6:	f7ff feb2 	bl	800395e <HAL_I2C_AbortCpltCallback>
 8003bfa:	e015      	b.n	8003c28 <I2C_ITError+0x1d8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	695b      	ldr	r3, [r3, #20]
 8003c02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c06:	2b40      	cmp	r3, #64	; 0x40
 8003c08:	d10b      	bne.n	8003c22 <I2C_ITError+0x1d2>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	691a      	ldr	r2, [r3, #16]
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c14:	b2d2      	uxtb	r2, r2
 8003c16:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c1c:	1c5a      	adds	r2, r3, #1
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8003c22:	6878      	ldr	r0, [r7, #4]
 8003c24:	f7fd fdc2 	bl	80017ac <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c2c:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	f003 0301 	and.w	r3, r3, #1
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d10e      	bne.n	8003c56 <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d109      	bne.n	8003c56 <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003c42:	68bb      	ldr	r3, [r7, #8]
 8003c44:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d104      	bne.n	8003c56 <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d007      	beq.n	8003c66 <I2C_ITError+0x216>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	685a      	ldr	r2, [r3, #4]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003c64:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c6c:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c72:	f003 0304 	and.w	r3, r3, #4
 8003c76:	2b04      	cmp	r3, #4
 8003c78:	d113      	bne.n	8003ca2 <I2C_ITError+0x252>
 8003c7a:	7bfb      	ldrb	r3, [r7, #15]
 8003c7c:	2b28      	cmp	r3, #40	; 0x28
 8003c7e:	d110      	bne.n	8003ca2 <I2C_ITError+0x252>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	4a0b      	ldr	r2, [pc, #44]	; (8003cb0 <I2C_ITError+0x260>)
 8003c84:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2220      	movs	r2, #32
 8003c90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2200      	movs	r2, #0
 8003c98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003c9c:	6878      	ldr	r0, [r7, #4]
 8003c9e:	f7ff fe55 	bl	800394c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003ca2:	bf00      	nop
 8003ca4:	3710      	adds	r7, #16
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}
 8003caa:	bf00      	nop
 8003cac:	08004251 	.word	0x08004251
 8003cb0:	ffff0000 	.word	0xffff0000

08003cb4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b088      	sub	sp, #32
 8003cb8:	af02      	add	r7, sp, #8
 8003cba:	60f8      	str	r0, [r7, #12]
 8003cbc:	607a      	str	r2, [r7, #4]
 8003cbe:	603b      	str	r3, [r7, #0]
 8003cc0:	460b      	mov	r3, r1
 8003cc2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cc8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	2b08      	cmp	r3, #8
 8003cce:	d006      	beq.n	8003cde <I2C_MasterRequestWrite+0x2a>
 8003cd0:	697b      	ldr	r3, [r7, #20]
 8003cd2:	2b01      	cmp	r3, #1
 8003cd4:	d003      	beq.n	8003cde <I2C_MasterRequestWrite+0x2a>
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003cdc:	d108      	bne.n	8003cf0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	681a      	ldr	r2, [r3, #0]
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003cec:	601a      	str	r2, [r3, #0]
 8003cee:	e00b      	b.n	8003d08 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cf4:	2b12      	cmp	r3, #18
 8003cf6:	d107      	bne.n	8003d08 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	681a      	ldr	r2, [r3, #0]
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d06:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	9300      	str	r3, [sp, #0]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003d14:	68f8      	ldr	r0, [r7, #12]
 8003d16:	f000 fb43 	bl	80043a0 <I2C_WaitOnFlagUntilTimeout>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d00d      	beq.n	8003d3c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d2e:	d103      	bne.n	8003d38 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d36:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003d38:	2303      	movs	r3, #3
 8003d3a:	e035      	b.n	8003da8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	691b      	ldr	r3, [r3, #16]
 8003d40:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003d44:	d108      	bne.n	8003d58 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003d46:	897b      	ldrh	r3, [r7, #10]
 8003d48:	b2db      	uxtb	r3, r3
 8003d4a:	461a      	mov	r2, r3
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003d54:	611a      	str	r2, [r3, #16]
 8003d56:	e01b      	b.n	8003d90 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003d58:	897b      	ldrh	r3, [r7, #10]
 8003d5a:	11db      	asrs	r3, r3, #7
 8003d5c:	b2db      	uxtb	r3, r3
 8003d5e:	f003 0306 	and.w	r3, r3, #6
 8003d62:	b2db      	uxtb	r3, r3
 8003d64:	f063 030f 	orn	r3, r3, #15
 8003d68:	b2da      	uxtb	r2, r3
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	687a      	ldr	r2, [r7, #4]
 8003d74:	490e      	ldr	r1, [pc, #56]	; (8003db0 <I2C_MasterRequestWrite+0xfc>)
 8003d76:	68f8      	ldr	r0, [r7, #12]
 8003d78:	f000 fb69 	bl	800444e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d001      	beq.n	8003d86 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003d82:	2301      	movs	r3, #1
 8003d84:	e010      	b.n	8003da8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003d86:	897b      	ldrh	r3, [r7, #10]
 8003d88:	b2da      	uxtb	r2, r3
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	687a      	ldr	r2, [r7, #4]
 8003d94:	4907      	ldr	r1, [pc, #28]	; (8003db4 <I2C_MasterRequestWrite+0x100>)
 8003d96:	68f8      	ldr	r0, [r7, #12]
 8003d98:	f000 fb59 	bl	800444e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d001      	beq.n	8003da6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003da2:	2301      	movs	r3, #1
 8003da4:	e000      	b.n	8003da8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003da6:	2300      	movs	r3, #0
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	3718      	adds	r7, #24
 8003dac:	46bd      	mov	sp, r7
 8003dae:	bd80      	pop	{r7, pc}
 8003db0:	00010008 	.word	0x00010008
 8003db4:	00010002 	.word	0x00010002

08003db8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b088      	sub	sp, #32
 8003dbc:	af02      	add	r7, sp, #8
 8003dbe:	60f8      	str	r0, [r7, #12]
 8003dc0:	607a      	str	r2, [r7, #4]
 8003dc2:	603b      	str	r3, [r7, #0]
 8003dc4:	460b      	mov	r3, r1
 8003dc6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dcc:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	681a      	ldr	r2, [r3, #0]
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003ddc:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003dde:	697b      	ldr	r3, [r7, #20]
 8003de0:	2b08      	cmp	r3, #8
 8003de2:	d006      	beq.n	8003df2 <I2C_MasterRequestRead+0x3a>
 8003de4:	697b      	ldr	r3, [r7, #20]
 8003de6:	2b01      	cmp	r3, #1
 8003de8:	d003      	beq.n	8003df2 <I2C_MasterRequestRead+0x3a>
 8003dea:	697b      	ldr	r3, [r7, #20]
 8003dec:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003df0:	d108      	bne.n	8003e04 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	681a      	ldr	r2, [r3, #0]
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e00:	601a      	str	r2, [r3, #0]
 8003e02:	e00b      	b.n	8003e1c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e08:	2b11      	cmp	r3, #17
 8003e0a:	d107      	bne.n	8003e1c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	681a      	ldr	r2, [r3, #0]
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e1a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	9300      	str	r3, [sp, #0]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2200      	movs	r2, #0
 8003e24:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003e28:	68f8      	ldr	r0, [r7, #12]
 8003e2a:	f000 fab9 	bl	80043a0 <I2C_WaitOnFlagUntilTimeout>
 8003e2e:	4603      	mov	r3, r0
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d00d      	beq.n	8003e50 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e42:	d103      	bne.n	8003e4c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e4a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003e4c:	2303      	movs	r3, #3
 8003e4e:	e079      	b.n	8003f44 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	691b      	ldr	r3, [r3, #16]
 8003e54:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e58:	d108      	bne.n	8003e6c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003e5a:	897b      	ldrh	r3, [r7, #10]
 8003e5c:	b2db      	uxtb	r3, r3
 8003e5e:	f043 0301 	orr.w	r3, r3, #1
 8003e62:	b2da      	uxtb	r2, r3
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	611a      	str	r2, [r3, #16]
 8003e6a:	e05f      	b.n	8003f2c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003e6c:	897b      	ldrh	r3, [r7, #10]
 8003e6e:	11db      	asrs	r3, r3, #7
 8003e70:	b2db      	uxtb	r3, r3
 8003e72:	f003 0306 	and.w	r3, r3, #6
 8003e76:	b2db      	uxtb	r3, r3
 8003e78:	f063 030f 	orn	r3, r3, #15
 8003e7c:	b2da      	uxtb	r2, r3
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	687a      	ldr	r2, [r7, #4]
 8003e88:	4930      	ldr	r1, [pc, #192]	; (8003f4c <I2C_MasterRequestRead+0x194>)
 8003e8a:	68f8      	ldr	r0, [r7, #12]
 8003e8c:	f000 fadf 	bl	800444e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e90:	4603      	mov	r3, r0
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d001      	beq.n	8003e9a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003e96:	2301      	movs	r3, #1
 8003e98:	e054      	b.n	8003f44 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003e9a:	897b      	ldrh	r3, [r7, #10]
 8003e9c:	b2da      	uxtb	r2, r3
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	687a      	ldr	r2, [r7, #4]
 8003ea8:	4929      	ldr	r1, [pc, #164]	; (8003f50 <I2C_MasterRequestRead+0x198>)
 8003eaa:	68f8      	ldr	r0, [r7, #12]
 8003eac:	f000 facf 	bl	800444e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d001      	beq.n	8003eba <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	e044      	b.n	8003f44 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003eba:	2300      	movs	r3, #0
 8003ebc:	613b      	str	r3, [r7, #16]
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	695b      	ldr	r3, [r3, #20]
 8003ec4:	613b      	str	r3, [r7, #16]
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	699b      	ldr	r3, [r3, #24]
 8003ecc:	613b      	str	r3, [r7, #16]
 8003ece:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	681a      	ldr	r2, [r3, #0]
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ede:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	9300      	str	r3, [sp, #0]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003eec:	68f8      	ldr	r0, [r7, #12]
 8003eee:	f000 fa57 	bl	80043a0 <I2C_WaitOnFlagUntilTimeout>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d00d      	beq.n	8003f14 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f06:	d103      	bne.n	8003f10 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f0e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8003f10:	2303      	movs	r3, #3
 8003f12:	e017      	b.n	8003f44 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003f14:	897b      	ldrh	r3, [r7, #10]
 8003f16:	11db      	asrs	r3, r3, #7
 8003f18:	b2db      	uxtb	r3, r3
 8003f1a:	f003 0306 	and.w	r3, r3, #6
 8003f1e:	b2db      	uxtb	r3, r3
 8003f20:	f063 030e 	orn	r3, r3, #14
 8003f24:	b2da      	uxtb	r2, r3
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	687a      	ldr	r2, [r7, #4]
 8003f30:	4907      	ldr	r1, [pc, #28]	; (8003f50 <I2C_MasterRequestRead+0x198>)
 8003f32:	68f8      	ldr	r0, [r7, #12]
 8003f34:	f000 fa8b 	bl	800444e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d001      	beq.n	8003f42 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	e000      	b.n	8003f44 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003f42:	2300      	movs	r3, #0
}
 8003f44:	4618      	mov	r0, r3
 8003f46:	3718      	adds	r7, #24
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bd80      	pop	{r7, pc}
 8003f4c:	00010008 	.word	0x00010008
 8003f50:	00010002 	.word	0x00010002

08003f54 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b088      	sub	sp, #32
 8003f58:	af02      	add	r7, sp, #8
 8003f5a:	60f8      	str	r0, [r7, #12]
 8003f5c:	4608      	mov	r0, r1
 8003f5e:	4611      	mov	r1, r2
 8003f60:	461a      	mov	r2, r3
 8003f62:	4603      	mov	r3, r0
 8003f64:	817b      	strh	r3, [r7, #10]
 8003f66:	460b      	mov	r3, r1
 8003f68:	813b      	strh	r3, [r7, #8]
 8003f6a:	4613      	mov	r3, r2
 8003f6c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	681a      	ldr	r2, [r3, #0]
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f7c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f80:	9300      	str	r3, [sp, #0]
 8003f82:	6a3b      	ldr	r3, [r7, #32]
 8003f84:	2200      	movs	r2, #0
 8003f86:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003f8a:	68f8      	ldr	r0, [r7, #12]
 8003f8c:	f000 fa08 	bl	80043a0 <I2C_WaitOnFlagUntilTimeout>
 8003f90:	4603      	mov	r3, r0
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d00d      	beq.n	8003fb2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fa0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003fa4:	d103      	bne.n	8003fae <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003fac:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003fae:	2303      	movs	r3, #3
 8003fb0:	e05f      	b.n	8004072 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003fb2:	897b      	ldrh	r3, [r7, #10]
 8003fb4:	b2db      	uxtb	r3, r3
 8003fb6:	461a      	mov	r2, r3
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003fc0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc4:	6a3a      	ldr	r2, [r7, #32]
 8003fc6:	492d      	ldr	r1, [pc, #180]	; (800407c <I2C_RequestMemoryWrite+0x128>)
 8003fc8:	68f8      	ldr	r0, [r7, #12]
 8003fca:	f000 fa40 	bl	800444e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d001      	beq.n	8003fd8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	e04c      	b.n	8004072 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fd8:	2300      	movs	r3, #0
 8003fda:	617b      	str	r3, [r7, #20]
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	695b      	ldr	r3, [r3, #20]
 8003fe2:	617b      	str	r3, [r7, #20]
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	699b      	ldr	r3, [r3, #24]
 8003fea:	617b      	str	r3, [r7, #20]
 8003fec:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003fee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ff0:	6a39      	ldr	r1, [r7, #32]
 8003ff2:	68f8      	ldr	r0, [r7, #12]
 8003ff4:	f000 faaa 	bl	800454c <I2C_WaitOnTXEFlagUntilTimeout>
 8003ff8:	4603      	mov	r3, r0
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d00d      	beq.n	800401a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004002:	2b04      	cmp	r3, #4
 8004004:	d107      	bne.n	8004016 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	681a      	ldr	r2, [r3, #0]
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004014:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004016:	2301      	movs	r3, #1
 8004018:	e02b      	b.n	8004072 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800401a:	88fb      	ldrh	r3, [r7, #6]
 800401c:	2b01      	cmp	r3, #1
 800401e:	d105      	bne.n	800402c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004020:	893b      	ldrh	r3, [r7, #8]
 8004022:	b2da      	uxtb	r2, r3
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	611a      	str	r2, [r3, #16]
 800402a:	e021      	b.n	8004070 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800402c:	893b      	ldrh	r3, [r7, #8]
 800402e:	0a1b      	lsrs	r3, r3, #8
 8004030:	b29b      	uxth	r3, r3
 8004032:	b2da      	uxtb	r2, r3
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800403a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800403c:	6a39      	ldr	r1, [r7, #32]
 800403e:	68f8      	ldr	r0, [r7, #12]
 8004040:	f000 fa84 	bl	800454c <I2C_WaitOnTXEFlagUntilTimeout>
 8004044:	4603      	mov	r3, r0
 8004046:	2b00      	cmp	r3, #0
 8004048:	d00d      	beq.n	8004066 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800404e:	2b04      	cmp	r3, #4
 8004050:	d107      	bne.n	8004062 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	681a      	ldr	r2, [r3, #0]
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004060:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004062:	2301      	movs	r3, #1
 8004064:	e005      	b.n	8004072 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004066:	893b      	ldrh	r3, [r7, #8]
 8004068:	b2da      	uxtb	r2, r3
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004070:	2300      	movs	r3, #0
}
 8004072:	4618      	mov	r0, r3
 8004074:	3718      	adds	r7, #24
 8004076:	46bd      	mov	sp, r7
 8004078:	bd80      	pop	{r7, pc}
 800407a:	bf00      	nop
 800407c:	00010002 	.word	0x00010002

08004080 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b088      	sub	sp, #32
 8004084:	af02      	add	r7, sp, #8
 8004086:	60f8      	str	r0, [r7, #12]
 8004088:	4608      	mov	r0, r1
 800408a:	4611      	mov	r1, r2
 800408c:	461a      	mov	r2, r3
 800408e:	4603      	mov	r3, r0
 8004090:	817b      	strh	r3, [r7, #10]
 8004092:	460b      	mov	r3, r1
 8004094:	813b      	strh	r3, [r7, #8]
 8004096:	4613      	mov	r3, r2
 8004098:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	681a      	ldr	r2, [r3, #0]
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80040a8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	681a      	ldr	r2, [r3, #0]
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80040b8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80040ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040bc:	9300      	str	r3, [sp, #0]
 80040be:	6a3b      	ldr	r3, [r7, #32]
 80040c0:	2200      	movs	r2, #0
 80040c2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80040c6:	68f8      	ldr	r0, [r7, #12]
 80040c8:	f000 f96a 	bl	80043a0 <I2C_WaitOnFlagUntilTimeout>
 80040cc:	4603      	mov	r3, r0
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d00d      	beq.n	80040ee <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040e0:	d103      	bne.n	80040ea <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80040e8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80040ea:	2303      	movs	r3, #3
 80040ec:	e0aa      	b.n	8004244 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80040ee:	897b      	ldrh	r3, [r7, #10]
 80040f0:	b2db      	uxtb	r3, r3
 80040f2:	461a      	mov	r2, r3
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80040fc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80040fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004100:	6a3a      	ldr	r2, [r7, #32]
 8004102:	4952      	ldr	r1, [pc, #328]	; (800424c <I2C_RequestMemoryRead+0x1cc>)
 8004104:	68f8      	ldr	r0, [r7, #12]
 8004106:	f000 f9a2 	bl	800444e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800410a:	4603      	mov	r3, r0
 800410c:	2b00      	cmp	r3, #0
 800410e:	d001      	beq.n	8004114 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004110:	2301      	movs	r3, #1
 8004112:	e097      	b.n	8004244 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004114:	2300      	movs	r3, #0
 8004116:	617b      	str	r3, [r7, #20]
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	695b      	ldr	r3, [r3, #20]
 800411e:	617b      	str	r3, [r7, #20]
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	699b      	ldr	r3, [r3, #24]
 8004126:	617b      	str	r3, [r7, #20]
 8004128:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800412a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800412c:	6a39      	ldr	r1, [r7, #32]
 800412e:	68f8      	ldr	r0, [r7, #12]
 8004130:	f000 fa0c 	bl	800454c <I2C_WaitOnTXEFlagUntilTimeout>
 8004134:	4603      	mov	r3, r0
 8004136:	2b00      	cmp	r3, #0
 8004138:	d00d      	beq.n	8004156 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800413e:	2b04      	cmp	r3, #4
 8004140:	d107      	bne.n	8004152 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	681a      	ldr	r2, [r3, #0]
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004150:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004152:	2301      	movs	r3, #1
 8004154:	e076      	b.n	8004244 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004156:	88fb      	ldrh	r3, [r7, #6]
 8004158:	2b01      	cmp	r3, #1
 800415a:	d105      	bne.n	8004168 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800415c:	893b      	ldrh	r3, [r7, #8]
 800415e:	b2da      	uxtb	r2, r3
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	611a      	str	r2, [r3, #16]
 8004166:	e021      	b.n	80041ac <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004168:	893b      	ldrh	r3, [r7, #8]
 800416a:	0a1b      	lsrs	r3, r3, #8
 800416c:	b29b      	uxth	r3, r3
 800416e:	b2da      	uxtb	r2, r3
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004176:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004178:	6a39      	ldr	r1, [r7, #32]
 800417a:	68f8      	ldr	r0, [r7, #12]
 800417c:	f000 f9e6 	bl	800454c <I2C_WaitOnTXEFlagUntilTimeout>
 8004180:	4603      	mov	r3, r0
 8004182:	2b00      	cmp	r3, #0
 8004184:	d00d      	beq.n	80041a2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800418a:	2b04      	cmp	r3, #4
 800418c:	d107      	bne.n	800419e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	681a      	ldr	r2, [r3, #0]
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800419c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800419e:	2301      	movs	r3, #1
 80041a0:	e050      	b.n	8004244 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80041a2:	893b      	ldrh	r3, [r7, #8]
 80041a4:	b2da      	uxtb	r2, r3
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80041ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041ae:	6a39      	ldr	r1, [r7, #32]
 80041b0:	68f8      	ldr	r0, [r7, #12]
 80041b2:	f000 f9cb 	bl	800454c <I2C_WaitOnTXEFlagUntilTimeout>
 80041b6:	4603      	mov	r3, r0
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d00d      	beq.n	80041d8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041c0:	2b04      	cmp	r3, #4
 80041c2:	d107      	bne.n	80041d4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	681a      	ldr	r2, [r3, #0]
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041d2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80041d4:	2301      	movs	r3, #1
 80041d6:	e035      	b.n	8004244 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	681a      	ldr	r2, [r3, #0]
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041e6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80041e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ea:	9300      	str	r3, [sp, #0]
 80041ec:	6a3b      	ldr	r3, [r7, #32]
 80041ee:	2200      	movs	r2, #0
 80041f0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80041f4:	68f8      	ldr	r0, [r7, #12]
 80041f6:	f000 f8d3 	bl	80043a0 <I2C_WaitOnFlagUntilTimeout>
 80041fa:	4603      	mov	r3, r0
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d00d      	beq.n	800421c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800420a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800420e:	d103      	bne.n	8004218 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004216:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004218:	2303      	movs	r3, #3
 800421a:	e013      	b.n	8004244 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800421c:	897b      	ldrh	r3, [r7, #10]
 800421e:	b2db      	uxtb	r3, r3
 8004220:	f043 0301 	orr.w	r3, r3, #1
 8004224:	b2da      	uxtb	r2, r3
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800422c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800422e:	6a3a      	ldr	r2, [r7, #32]
 8004230:	4906      	ldr	r1, [pc, #24]	; (800424c <I2C_RequestMemoryRead+0x1cc>)
 8004232:	68f8      	ldr	r0, [r7, #12]
 8004234:	f000 f90b 	bl	800444e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004238:	4603      	mov	r3, r0
 800423a:	2b00      	cmp	r3, #0
 800423c:	d001      	beq.n	8004242 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800423e:	2301      	movs	r3, #1
 8004240:	e000      	b.n	8004244 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004242:	2300      	movs	r3, #0
}
 8004244:	4618      	mov	r0, r3
 8004246:	3718      	adds	r7, #24
 8004248:	46bd      	mov	sp, r7
 800424a:	bd80      	pop	{r7, pc}
 800424c:	00010002 	.word	0x00010002

08004250 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b086      	sub	sp, #24
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004258:	2300      	movs	r3, #0
 800425a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004260:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004262:	697b      	ldr	r3, [r7, #20]
 8004264:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004268:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800426a:	4b4b      	ldr	r3, [pc, #300]	; (8004398 <I2C_DMAAbort+0x148>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	08db      	lsrs	r3, r3, #3
 8004270:	4a4a      	ldr	r2, [pc, #296]	; (800439c <I2C_DMAAbort+0x14c>)
 8004272:	fba2 2303 	umull	r2, r3, r2, r3
 8004276:	0a1a      	lsrs	r2, r3, #8
 8004278:	4613      	mov	r3, r2
 800427a:	009b      	lsls	r3, r3, #2
 800427c:	4413      	add	r3, r2
 800427e:	00da      	lsls	r2, r3, #3
 8004280:	1ad3      	subs	r3, r2, r3
 8004282:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d106      	bne.n	8004298 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800428e:	f043 0220 	orr.w	r2, r3, #32
 8004292:	697b      	ldr	r3, [r7, #20]
 8004294:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8004296:	e00a      	b.n	80042ae <I2C_DMAAbort+0x5e>
    }
    count--;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	3b01      	subs	r3, #1
 800429c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800429e:	697b      	ldr	r3, [r7, #20]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80042a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042ac:	d0ea      	beq.n	8004284 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80042ae:	697b      	ldr	r3, [r7, #20]
 80042b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d003      	beq.n	80042be <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042ba:	2200      	movs	r2, #0
 80042bc:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 80042be:	697b      	ldr	r3, [r7, #20]
 80042c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d003      	beq.n	80042ce <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042ca:	2200      	movs	r2, #0
 80042cc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042ce:	697b      	ldr	r3, [r7, #20]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	681a      	ldr	r2, [r3, #0]
 80042d4:	697b      	ldr	r3, [r7, #20]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042dc:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80042de:	697b      	ldr	r3, [r7, #20]
 80042e0:	2200      	movs	r2, #0
 80042e2:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80042e4:	697b      	ldr	r3, [r7, #20]
 80042e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d003      	beq.n	80042f4 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80042ec:	697b      	ldr	r3, [r7, #20]
 80042ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042f0:	2200      	movs	r2, #0
 80042f2:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 80042f4:	697b      	ldr	r3, [r7, #20]
 80042f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d003      	beq.n	8004304 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80042fc:	697b      	ldr	r3, [r7, #20]
 80042fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004300:	2200      	movs	r2, #0
 8004302:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004304:	697b      	ldr	r3, [r7, #20]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	681a      	ldr	r2, [r3, #0]
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f022 0201 	bic.w	r2, r2, #1
 8004312:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004314:	697b      	ldr	r3, [r7, #20]
 8004316:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800431a:	b2db      	uxtb	r3, r3
 800431c:	2b60      	cmp	r3, #96	; 0x60
 800431e:	d10e      	bne.n	800433e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004320:	697b      	ldr	r3, [r7, #20]
 8004322:	2220      	movs	r2, #32
 8004324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004328:	697b      	ldr	r3, [r7, #20]
 800432a:	2200      	movs	r2, #0
 800432c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004330:	697b      	ldr	r3, [r7, #20]
 8004332:	2200      	movs	r2, #0
 8004334:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004336:	6978      	ldr	r0, [r7, #20]
 8004338:	f7ff fb11 	bl	800395e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800433c:	e027      	b.n	800438e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800433e:	7cfb      	ldrb	r3, [r7, #19]
 8004340:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004344:	2b28      	cmp	r3, #40	; 0x28
 8004346:	d117      	bne.n	8004378 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004348:	697b      	ldr	r3, [r7, #20]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	681a      	ldr	r2, [r3, #0]
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f042 0201 	orr.w	r2, r2, #1
 8004356:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	681a      	ldr	r2, [r3, #0]
 800435e:	697b      	ldr	r3, [r7, #20]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004366:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004368:	697b      	ldr	r3, [r7, #20]
 800436a:	2200      	movs	r2, #0
 800436c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800436e:	697b      	ldr	r3, [r7, #20]
 8004370:	2228      	movs	r2, #40	; 0x28
 8004372:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004376:	e007      	b.n	8004388 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	2220      	movs	r2, #32
 800437c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004380:	697b      	ldr	r3, [r7, #20]
 8004382:	2200      	movs	r2, #0
 8004384:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004388:	6978      	ldr	r0, [r7, #20]
 800438a:	f7fd fa0f 	bl	80017ac <HAL_I2C_ErrorCallback>
}
 800438e:	bf00      	nop
 8004390:	3718      	adds	r7, #24
 8004392:	46bd      	mov	sp, r7
 8004394:	bd80      	pop	{r7, pc}
 8004396:	bf00      	nop
 8004398:	20000000 	.word	0x20000000
 800439c:	14f8b589 	.word	0x14f8b589

080043a0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b084      	sub	sp, #16
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	60f8      	str	r0, [r7, #12]
 80043a8:	60b9      	str	r1, [r7, #8]
 80043aa:	603b      	str	r3, [r7, #0]
 80043ac:	4613      	mov	r3, r2
 80043ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80043b0:	e025      	b.n	80043fe <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80043b8:	d021      	beq.n	80043fe <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043ba:	f7fd fd77 	bl	8001eac <HAL_GetTick>
 80043be:	4602      	mov	r2, r0
 80043c0:	69bb      	ldr	r3, [r7, #24]
 80043c2:	1ad3      	subs	r3, r2, r3
 80043c4:	683a      	ldr	r2, [r7, #0]
 80043c6:	429a      	cmp	r2, r3
 80043c8:	d302      	bcc.n	80043d0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d116      	bne.n	80043fe <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	2200      	movs	r2, #0
 80043d4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	2220      	movs	r2, #32
 80043da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	2200      	movs	r2, #0
 80043e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ea:	f043 0220 	orr.w	r2, r3, #32
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	2200      	movs	r2, #0
 80043f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	e023      	b.n	8004446 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80043fe:	68bb      	ldr	r3, [r7, #8]
 8004400:	0c1b      	lsrs	r3, r3, #16
 8004402:	b2db      	uxtb	r3, r3
 8004404:	2b01      	cmp	r3, #1
 8004406:	d10d      	bne.n	8004424 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	695b      	ldr	r3, [r3, #20]
 800440e:	43da      	mvns	r2, r3
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	4013      	ands	r3, r2
 8004414:	b29b      	uxth	r3, r3
 8004416:	2b00      	cmp	r3, #0
 8004418:	bf0c      	ite	eq
 800441a:	2301      	moveq	r3, #1
 800441c:	2300      	movne	r3, #0
 800441e:	b2db      	uxtb	r3, r3
 8004420:	461a      	mov	r2, r3
 8004422:	e00c      	b.n	800443e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	699b      	ldr	r3, [r3, #24]
 800442a:	43da      	mvns	r2, r3
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	4013      	ands	r3, r2
 8004430:	b29b      	uxth	r3, r3
 8004432:	2b00      	cmp	r3, #0
 8004434:	bf0c      	ite	eq
 8004436:	2301      	moveq	r3, #1
 8004438:	2300      	movne	r3, #0
 800443a:	b2db      	uxtb	r3, r3
 800443c:	461a      	mov	r2, r3
 800443e:	79fb      	ldrb	r3, [r7, #7]
 8004440:	429a      	cmp	r2, r3
 8004442:	d0b6      	beq.n	80043b2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004444:	2300      	movs	r3, #0
}
 8004446:	4618      	mov	r0, r3
 8004448:	3710      	adds	r7, #16
 800444a:	46bd      	mov	sp, r7
 800444c:	bd80      	pop	{r7, pc}

0800444e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800444e:	b580      	push	{r7, lr}
 8004450:	b084      	sub	sp, #16
 8004452:	af00      	add	r7, sp, #0
 8004454:	60f8      	str	r0, [r7, #12]
 8004456:	60b9      	str	r1, [r7, #8]
 8004458:	607a      	str	r2, [r7, #4]
 800445a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800445c:	e051      	b.n	8004502 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	695b      	ldr	r3, [r3, #20]
 8004464:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004468:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800446c:	d123      	bne.n	80044b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	681a      	ldr	r2, [r3, #0]
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800447c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004486:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	2200      	movs	r2, #0
 800448c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	2220      	movs	r2, #32
 8004492:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	2200      	movs	r2, #0
 800449a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044a2:	f043 0204 	orr.w	r2, r3, #4
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	2200      	movs	r2, #0
 80044ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80044b2:	2301      	movs	r3, #1
 80044b4:	e046      	b.n	8004544 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80044bc:	d021      	beq.n	8004502 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044be:	f7fd fcf5 	bl	8001eac <HAL_GetTick>
 80044c2:	4602      	mov	r2, r0
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	1ad3      	subs	r3, r2, r3
 80044c8:	687a      	ldr	r2, [r7, #4]
 80044ca:	429a      	cmp	r2, r3
 80044cc:	d302      	bcc.n	80044d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d116      	bne.n	8004502 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	2200      	movs	r2, #0
 80044d8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	2220      	movs	r2, #32
 80044de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	2200      	movs	r2, #0
 80044e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ee:	f043 0220 	orr.w	r2, r3, #32
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	2200      	movs	r2, #0
 80044fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80044fe:	2301      	movs	r3, #1
 8004500:	e020      	b.n	8004544 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004502:	68bb      	ldr	r3, [r7, #8]
 8004504:	0c1b      	lsrs	r3, r3, #16
 8004506:	b2db      	uxtb	r3, r3
 8004508:	2b01      	cmp	r3, #1
 800450a:	d10c      	bne.n	8004526 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	695b      	ldr	r3, [r3, #20]
 8004512:	43da      	mvns	r2, r3
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	4013      	ands	r3, r2
 8004518:	b29b      	uxth	r3, r3
 800451a:	2b00      	cmp	r3, #0
 800451c:	bf14      	ite	ne
 800451e:	2301      	movne	r3, #1
 8004520:	2300      	moveq	r3, #0
 8004522:	b2db      	uxtb	r3, r3
 8004524:	e00b      	b.n	800453e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	699b      	ldr	r3, [r3, #24]
 800452c:	43da      	mvns	r2, r3
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	4013      	ands	r3, r2
 8004532:	b29b      	uxth	r3, r3
 8004534:	2b00      	cmp	r3, #0
 8004536:	bf14      	ite	ne
 8004538:	2301      	movne	r3, #1
 800453a:	2300      	moveq	r3, #0
 800453c:	b2db      	uxtb	r3, r3
 800453e:	2b00      	cmp	r3, #0
 8004540:	d18d      	bne.n	800445e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004542:	2300      	movs	r3, #0
}
 8004544:	4618      	mov	r0, r3
 8004546:	3710      	adds	r7, #16
 8004548:	46bd      	mov	sp, r7
 800454a:	bd80      	pop	{r7, pc}

0800454c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b084      	sub	sp, #16
 8004550:	af00      	add	r7, sp, #0
 8004552:	60f8      	str	r0, [r7, #12]
 8004554:	60b9      	str	r1, [r7, #8]
 8004556:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004558:	e02d      	b.n	80045b6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800455a:	68f8      	ldr	r0, [r7, #12]
 800455c:	f000 f8ce 	bl	80046fc <I2C_IsAcknowledgeFailed>
 8004560:	4603      	mov	r3, r0
 8004562:	2b00      	cmp	r3, #0
 8004564:	d001      	beq.n	800456a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004566:	2301      	movs	r3, #1
 8004568:	e02d      	b.n	80045c6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800456a:	68bb      	ldr	r3, [r7, #8]
 800456c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004570:	d021      	beq.n	80045b6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004572:	f7fd fc9b 	bl	8001eac <HAL_GetTick>
 8004576:	4602      	mov	r2, r0
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	1ad3      	subs	r3, r2, r3
 800457c:	68ba      	ldr	r2, [r7, #8]
 800457e:	429a      	cmp	r2, r3
 8004580:	d302      	bcc.n	8004588 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004582:	68bb      	ldr	r3, [r7, #8]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d116      	bne.n	80045b6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	2200      	movs	r2, #0
 800458c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	2220      	movs	r2, #32
 8004592:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	2200      	movs	r2, #0
 800459a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045a2:	f043 0220 	orr.w	r2, r3, #32
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	2200      	movs	r2, #0
 80045ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80045b2:	2301      	movs	r3, #1
 80045b4:	e007      	b.n	80045c6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	695b      	ldr	r3, [r3, #20]
 80045bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045c0:	2b80      	cmp	r3, #128	; 0x80
 80045c2:	d1ca      	bne.n	800455a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80045c4:	2300      	movs	r3, #0
}
 80045c6:	4618      	mov	r0, r3
 80045c8:	3710      	adds	r7, #16
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bd80      	pop	{r7, pc}

080045ce <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80045ce:	b580      	push	{r7, lr}
 80045d0:	b084      	sub	sp, #16
 80045d2:	af00      	add	r7, sp, #0
 80045d4:	60f8      	str	r0, [r7, #12]
 80045d6:	60b9      	str	r1, [r7, #8]
 80045d8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80045da:	e02d      	b.n	8004638 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80045dc:	68f8      	ldr	r0, [r7, #12]
 80045de:	f000 f88d 	bl	80046fc <I2C_IsAcknowledgeFailed>
 80045e2:	4603      	mov	r3, r0
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d001      	beq.n	80045ec <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80045e8:	2301      	movs	r3, #1
 80045ea:	e02d      	b.n	8004648 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80045f2:	d021      	beq.n	8004638 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045f4:	f7fd fc5a 	bl	8001eac <HAL_GetTick>
 80045f8:	4602      	mov	r2, r0
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	1ad3      	subs	r3, r2, r3
 80045fe:	68ba      	ldr	r2, [r7, #8]
 8004600:	429a      	cmp	r2, r3
 8004602:	d302      	bcc.n	800460a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d116      	bne.n	8004638 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	2200      	movs	r2, #0
 800460e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	2220      	movs	r2, #32
 8004614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	2200      	movs	r2, #0
 800461c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004624:	f043 0220 	orr.w	r2, r3, #32
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	2200      	movs	r2, #0
 8004630:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004634:	2301      	movs	r3, #1
 8004636:	e007      	b.n	8004648 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	695b      	ldr	r3, [r3, #20]
 800463e:	f003 0304 	and.w	r3, r3, #4
 8004642:	2b04      	cmp	r3, #4
 8004644:	d1ca      	bne.n	80045dc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004646:	2300      	movs	r3, #0
}
 8004648:	4618      	mov	r0, r3
 800464a:	3710      	adds	r7, #16
 800464c:	46bd      	mov	sp, r7
 800464e:	bd80      	pop	{r7, pc}

08004650 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b084      	sub	sp, #16
 8004654:	af00      	add	r7, sp, #0
 8004656:	60f8      	str	r0, [r7, #12]
 8004658:	60b9      	str	r1, [r7, #8]
 800465a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800465c:	e042      	b.n	80046e4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	695b      	ldr	r3, [r3, #20]
 8004664:	f003 0310 	and.w	r3, r3, #16
 8004668:	2b10      	cmp	r3, #16
 800466a:	d119      	bne.n	80046a0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f06f 0210 	mvn.w	r2, #16
 8004674:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	2200      	movs	r2, #0
 800467a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	2220      	movs	r2, #32
 8004680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	2200      	movs	r2, #0
 8004688:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	2200      	movs	r2, #0
 8004698:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800469c:	2301      	movs	r3, #1
 800469e:	e029      	b.n	80046f4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046a0:	f7fd fc04 	bl	8001eac <HAL_GetTick>
 80046a4:	4602      	mov	r2, r0
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	1ad3      	subs	r3, r2, r3
 80046aa:	68ba      	ldr	r2, [r7, #8]
 80046ac:	429a      	cmp	r2, r3
 80046ae:	d302      	bcc.n	80046b6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d116      	bne.n	80046e4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	2200      	movs	r2, #0
 80046ba:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	2220      	movs	r2, #32
 80046c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	2200      	movs	r2, #0
 80046c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046d0:	f043 0220 	orr.w	r2, r3, #32
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	2200      	movs	r2, #0
 80046dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80046e0:	2301      	movs	r3, #1
 80046e2:	e007      	b.n	80046f4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	695b      	ldr	r3, [r3, #20]
 80046ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046ee:	2b40      	cmp	r3, #64	; 0x40
 80046f0:	d1b5      	bne.n	800465e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80046f2:	2300      	movs	r3, #0
}
 80046f4:	4618      	mov	r0, r3
 80046f6:	3710      	adds	r7, #16
 80046f8:	46bd      	mov	sp, r7
 80046fa:	bd80      	pop	{r7, pc}

080046fc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80046fc:	b480      	push	{r7}
 80046fe:	b083      	sub	sp, #12
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	695b      	ldr	r3, [r3, #20]
 800470a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800470e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004712:	d11b      	bne.n	800474c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800471c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2200      	movs	r2, #0
 8004722:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2220      	movs	r2, #32
 8004728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2200      	movs	r2, #0
 8004730:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004738:	f043 0204 	orr.w	r2, r3, #4
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2200      	movs	r2, #0
 8004744:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004748:	2301      	movs	r3, #1
 800474a:	e000      	b.n	800474e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800474c:	2300      	movs	r3, #0
}
 800474e:	4618      	mov	r0, r3
 8004750:	370c      	adds	r7, #12
 8004752:	46bd      	mov	sp, r7
 8004754:	bc80      	pop	{r7}
 8004756:	4770      	bx	lr

08004758 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b084      	sub	sp, #16
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d101      	bne.n	800476a <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8004766:	2301      	movs	r3, #1
 8004768:	e034      	b.n	80047d4 <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8004772:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f245 5255 	movw	r2, #21845	; 0x5555
 800477c:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	687a      	ldr	r2, [r7, #4]
 8004784:	6852      	ldr	r2, [r2, #4]
 8004786:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	687a      	ldr	r2, [r7, #4]
 800478e:	6892      	ldr	r2, [r2, #8]
 8004790:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8004792:	f7fd fb8b 	bl	8001eac <HAL_GetTick>
 8004796:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8004798:	e00f      	b.n	80047ba <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 800479a:	f7fd fb87 	bl	8001eac <HAL_GetTick>
 800479e:	4602      	mov	r2, r0
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	1ad3      	subs	r3, r2, r3
 80047a4:	2b27      	cmp	r3, #39	; 0x27
 80047a6:	d908      	bls.n	80047ba <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	68db      	ldr	r3, [r3, #12]
 80047ae:	f003 0303 	and.w	r3, r3, #3
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d001      	beq.n	80047ba <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 80047b6:	2303      	movs	r3, #3
 80047b8:	e00c      	b.n	80047d4 <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	68db      	ldr	r3, [r3, #12]
 80047c0:	f003 0303 	and.w	r3, r3, #3
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d1e8      	bne.n	800479a <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80047d0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80047d2:	2300      	movs	r3, #0
}
 80047d4:	4618      	mov	r0, r3
 80047d6:	3710      	adds	r7, #16
 80047d8:	46bd      	mov	sp, r7
 80047da:	bd80      	pop	{r7, pc}

080047dc <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 80047dc:	b480      	push	{r7}
 80047de:	b083      	sub	sp, #12
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80047ec:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80047ee:	2300      	movs	r3, #0
}
 80047f0:	4618      	mov	r0, r3
 80047f2:	370c      	adds	r7, #12
 80047f4:	46bd      	mov	sp, r7
 80047f6:	bc80      	pop	{r7}
 80047f8:	4770      	bx	lr
	...

080047fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b086      	sub	sp, #24
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d101      	bne.n	800480e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800480a:	2301      	movs	r3, #1
 800480c:	e272      	b.n	8004cf4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f003 0301 	and.w	r3, r3, #1
 8004816:	2b00      	cmp	r3, #0
 8004818:	f000 8087 	beq.w	800492a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800481c:	4b92      	ldr	r3, [pc, #584]	; (8004a68 <HAL_RCC_OscConfig+0x26c>)
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	f003 030c 	and.w	r3, r3, #12
 8004824:	2b04      	cmp	r3, #4
 8004826:	d00c      	beq.n	8004842 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004828:	4b8f      	ldr	r3, [pc, #572]	; (8004a68 <HAL_RCC_OscConfig+0x26c>)
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	f003 030c 	and.w	r3, r3, #12
 8004830:	2b08      	cmp	r3, #8
 8004832:	d112      	bne.n	800485a <HAL_RCC_OscConfig+0x5e>
 8004834:	4b8c      	ldr	r3, [pc, #560]	; (8004a68 <HAL_RCC_OscConfig+0x26c>)
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800483c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004840:	d10b      	bne.n	800485a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004842:	4b89      	ldr	r3, [pc, #548]	; (8004a68 <HAL_RCC_OscConfig+0x26c>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800484a:	2b00      	cmp	r3, #0
 800484c:	d06c      	beq.n	8004928 <HAL_RCC_OscConfig+0x12c>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	685b      	ldr	r3, [r3, #4]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d168      	bne.n	8004928 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004856:	2301      	movs	r3, #1
 8004858:	e24c      	b.n	8004cf4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004862:	d106      	bne.n	8004872 <HAL_RCC_OscConfig+0x76>
 8004864:	4b80      	ldr	r3, [pc, #512]	; (8004a68 <HAL_RCC_OscConfig+0x26c>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a7f      	ldr	r2, [pc, #508]	; (8004a68 <HAL_RCC_OscConfig+0x26c>)
 800486a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800486e:	6013      	str	r3, [r2, #0]
 8004870:	e02e      	b.n	80048d0 <HAL_RCC_OscConfig+0xd4>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d10c      	bne.n	8004894 <HAL_RCC_OscConfig+0x98>
 800487a:	4b7b      	ldr	r3, [pc, #492]	; (8004a68 <HAL_RCC_OscConfig+0x26c>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4a7a      	ldr	r2, [pc, #488]	; (8004a68 <HAL_RCC_OscConfig+0x26c>)
 8004880:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004884:	6013      	str	r3, [r2, #0]
 8004886:	4b78      	ldr	r3, [pc, #480]	; (8004a68 <HAL_RCC_OscConfig+0x26c>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4a77      	ldr	r2, [pc, #476]	; (8004a68 <HAL_RCC_OscConfig+0x26c>)
 800488c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004890:	6013      	str	r3, [r2, #0]
 8004892:	e01d      	b.n	80048d0 <HAL_RCC_OscConfig+0xd4>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800489c:	d10c      	bne.n	80048b8 <HAL_RCC_OscConfig+0xbc>
 800489e:	4b72      	ldr	r3, [pc, #456]	; (8004a68 <HAL_RCC_OscConfig+0x26c>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4a71      	ldr	r2, [pc, #452]	; (8004a68 <HAL_RCC_OscConfig+0x26c>)
 80048a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80048a8:	6013      	str	r3, [r2, #0]
 80048aa:	4b6f      	ldr	r3, [pc, #444]	; (8004a68 <HAL_RCC_OscConfig+0x26c>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4a6e      	ldr	r2, [pc, #440]	; (8004a68 <HAL_RCC_OscConfig+0x26c>)
 80048b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048b4:	6013      	str	r3, [r2, #0]
 80048b6:	e00b      	b.n	80048d0 <HAL_RCC_OscConfig+0xd4>
 80048b8:	4b6b      	ldr	r3, [pc, #428]	; (8004a68 <HAL_RCC_OscConfig+0x26c>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4a6a      	ldr	r2, [pc, #424]	; (8004a68 <HAL_RCC_OscConfig+0x26c>)
 80048be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048c2:	6013      	str	r3, [r2, #0]
 80048c4:	4b68      	ldr	r3, [pc, #416]	; (8004a68 <HAL_RCC_OscConfig+0x26c>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a67      	ldr	r2, [pc, #412]	; (8004a68 <HAL_RCC_OscConfig+0x26c>)
 80048ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80048ce:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d013      	beq.n	8004900 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048d8:	f7fd fae8 	bl	8001eac <HAL_GetTick>
 80048dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048de:	e008      	b.n	80048f2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80048e0:	f7fd fae4 	bl	8001eac <HAL_GetTick>
 80048e4:	4602      	mov	r2, r0
 80048e6:	693b      	ldr	r3, [r7, #16]
 80048e8:	1ad3      	subs	r3, r2, r3
 80048ea:	2b64      	cmp	r3, #100	; 0x64
 80048ec:	d901      	bls.n	80048f2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80048ee:	2303      	movs	r3, #3
 80048f0:	e200      	b.n	8004cf4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048f2:	4b5d      	ldr	r3, [pc, #372]	; (8004a68 <HAL_RCC_OscConfig+0x26c>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d0f0      	beq.n	80048e0 <HAL_RCC_OscConfig+0xe4>
 80048fe:	e014      	b.n	800492a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004900:	f7fd fad4 	bl	8001eac <HAL_GetTick>
 8004904:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004906:	e008      	b.n	800491a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004908:	f7fd fad0 	bl	8001eac <HAL_GetTick>
 800490c:	4602      	mov	r2, r0
 800490e:	693b      	ldr	r3, [r7, #16]
 8004910:	1ad3      	subs	r3, r2, r3
 8004912:	2b64      	cmp	r3, #100	; 0x64
 8004914:	d901      	bls.n	800491a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004916:	2303      	movs	r3, #3
 8004918:	e1ec      	b.n	8004cf4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800491a:	4b53      	ldr	r3, [pc, #332]	; (8004a68 <HAL_RCC_OscConfig+0x26c>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004922:	2b00      	cmp	r3, #0
 8004924:	d1f0      	bne.n	8004908 <HAL_RCC_OscConfig+0x10c>
 8004926:	e000      	b.n	800492a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004928:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f003 0302 	and.w	r3, r3, #2
 8004932:	2b00      	cmp	r3, #0
 8004934:	d063      	beq.n	80049fe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004936:	4b4c      	ldr	r3, [pc, #304]	; (8004a68 <HAL_RCC_OscConfig+0x26c>)
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	f003 030c 	and.w	r3, r3, #12
 800493e:	2b00      	cmp	r3, #0
 8004940:	d00b      	beq.n	800495a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004942:	4b49      	ldr	r3, [pc, #292]	; (8004a68 <HAL_RCC_OscConfig+0x26c>)
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	f003 030c 	and.w	r3, r3, #12
 800494a:	2b08      	cmp	r3, #8
 800494c:	d11c      	bne.n	8004988 <HAL_RCC_OscConfig+0x18c>
 800494e:	4b46      	ldr	r3, [pc, #280]	; (8004a68 <HAL_RCC_OscConfig+0x26c>)
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004956:	2b00      	cmp	r3, #0
 8004958:	d116      	bne.n	8004988 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800495a:	4b43      	ldr	r3, [pc, #268]	; (8004a68 <HAL_RCC_OscConfig+0x26c>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f003 0302 	and.w	r3, r3, #2
 8004962:	2b00      	cmp	r3, #0
 8004964:	d005      	beq.n	8004972 <HAL_RCC_OscConfig+0x176>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	691b      	ldr	r3, [r3, #16]
 800496a:	2b01      	cmp	r3, #1
 800496c:	d001      	beq.n	8004972 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800496e:	2301      	movs	r3, #1
 8004970:	e1c0      	b.n	8004cf4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004972:	4b3d      	ldr	r3, [pc, #244]	; (8004a68 <HAL_RCC_OscConfig+0x26c>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	695b      	ldr	r3, [r3, #20]
 800497e:	00db      	lsls	r3, r3, #3
 8004980:	4939      	ldr	r1, [pc, #228]	; (8004a68 <HAL_RCC_OscConfig+0x26c>)
 8004982:	4313      	orrs	r3, r2
 8004984:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004986:	e03a      	b.n	80049fe <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	691b      	ldr	r3, [r3, #16]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d020      	beq.n	80049d2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004990:	4b36      	ldr	r3, [pc, #216]	; (8004a6c <HAL_RCC_OscConfig+0x270>)
 8004992:	2201      	movs	r2, #1
 8004994:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004996:	f7fd fa89 	bl	8001eac <HAL_GetTick>
 800499a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800499c:	e008      	b.n	80049b0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800499e:	f7fd fa85 	bl	8001eac <HAL_GetTick>
 80049a2:	4602      	mov	r2, r0
 80049a4:	693b      	ldr	r3, [r7, #16]
 80049a6:	1ad3      	subs	r3, r2, r3
 80049a8:	2b02      	cmp	r3, #2
 80049aa:	d901      	bls.n	80049b0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80049ac:	2303      	movs	r3, #3
 80049ae:	e1a1      	b.n	8004cf4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049b0:	4b2d      	ldr	r3, [pc, #180]	; (8004a68 <HAL_RCC_OscConfig+0x26c>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f003 0302 	and.w	r3, r3, #2
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d0f0      	beq.n	800499e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049bc:	4b2a      	ldr	r3, [pc, #168]	; (8004a68 <HAL_RCC_OscConfig+0x26c>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	695b      	ldr	r3, [r3, #20]
 80049c8:	00db      	lsls	r3, r3, #3
 80049ca:	4927      	ldr	r1, [pc, #156]	; (8004a68 <HAL_RCC_OscConfig+0x26c>)
 80049cc:	4313      	orrs	r3, r2
 80049ce:	600b      	str	r3, [r1, #0]
 80049d0:	e015      	b.n	80049fe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80049d2:	4b26      	ldr	r3, [pc, #152]	; (8004a6c <HAL_RCC_OscConfig+0x270>)
 80049d4:	2200      	movs	r2, #0
 80049d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049d8:	f7fd fa68 	bl	8001eac <HAL_GetTick>
 80049dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80049de:	e008      	b.n	80049f2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80049e0:	f7fd fa64 	bl	8001eac <HAL_GetTick>
 80049e4:	4602      	mov	r2, r0
 80049e6:	693b      	ldr	r3, [r7, #16]
 80049e8:	1ad3      	subs	r3, r2, r3
 80049ea:	2b02      	cmp	r3, #2
 80049ec:	d901      	bls.n	80049f2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80049ee:	2303      	movs	r3, #3
 80049f0:	e180      	b.n	8004cf4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80049f2:	4b1d      	ldr	r3, [pc, #116]	; (8004a68 <HAL_RCC_OscConfig+0x26c>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f003 0302 	and.w	r3, r3, #2
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d1f0      	bne.n	80049e0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f003 0308 	and.w	r3, r3, #8
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d03a      	beq.n	8004a80 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	699b      	ldr	r3, [r3, #24]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d019      	beq.n	8004a46 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a12:	4b17      	ldr	r3, [pc, #92]	; (8004a70 <HAL_RCC_OscConfig+0x274>)
 8004a14:	2201      	movs	r2, #1
 8004a16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a18:	f7fd fa48 	bl	8001eac <HAL_GetTick>
 8004a1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a1e:	e008      	b.n	8004a32 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a20:	f7fd fa44 	bl	8001eac <HAL_GetTick>
 8004a24:	4602      	mov	r2, r0
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	1ad3      	subs	r3, r2, r3
 8004a2a:	2b02      	cmp	r3, #2
 8004a2c:	d901      	bls.n	8004a32 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004a2e:	2303      	movs	r3, #3
 8004a30:	e160      	b.n	8004cf4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a32:	4b0d      	ldr	r3, [pc, #52]	; (8004a68 <HAL_RCC_OscConfig+0x26c>)
 8004a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a36:	f003 0302 	and.w	r3, r3, #2
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d0f0      	beq.n	8004a20 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004a3e:	2001      	movs	r0, #1
 8004a40:	f000 fac4 	bl	8004fcc <RCC_Delay>
 8004a44:	e01c      	b.n	8004a80 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a46:	4b0a      	ldr	r3, [pc, #40]	; (8004a70 <HAL_RCC_OscConfig+0x274>)
 8004a48:	2200      	movs	r2, #0
 8004a4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a4c:	f7fd fa2e 	bl	8001eac <HAL_GetTick>
 8004a50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a52:	e00f      	b.n	8004a74 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a54:	f7fd fa2a 	bl	8001eac <HAL_GetTick>
 8004a58:	4602      	mov	r2, r0
 8004a5a:	693b      	ldr	r3, [r7, #16]
 8004a5c:	1ad3      	subs	r3, r2, r3
 8004a5e:	2b02      	cmp	r3, #2
 8004a60:	d908      	bls.n	8004a74 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004a62:	2303      	movs	r3, #3
 8004a64:	e146      	b.n	8004cf4 <HAL_RCC_OscConfig+0x4f8>
 8004a66:	bf00      	nop
 8004a68:	40021000 	.word	0x40021000
 8004a6c:	42420000 	.word	0x42420000
 8004a70:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a74:	4b92      	ldr	r3, [pc, #584]	; (8004cc0 <HAL_RCC_OscConfig+0x4c4>)
 8004a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a78:	f003 0302 	and.w	r3, r3, #2
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d1e9      	bne.n	8004a54 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f003 0304 	and.w	r3, r3, #4
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	f000 80a6 	beq.w	8004bda <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a8e:	2300      	movs	r3, #0
 8004a90:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a92:	4b8b      	ldr	r3, [pc, #556]	; (8004cc0 <HAL_RCC_OscConfig+0x4c4>)
 8004a94:	69db      	ldr	r3, [r3, #28]
 8004a96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d10d      	bne.n	8004aba <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a9e:	4b88      	ldr	r3, [pc, #544]	; (8004cc0 <HAL_RCC_OscConfig+0x4c4>)
 8004aa0:	69db      	ldr	r3, [r3, #28]
 8004aa2:	4a87      	ldr	r2, [pc, #540]	; (8004cc0 <HAL_RCC_OscConfig+0x4c4>)
 8004aa4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004aa8:	61d3      	str	r3, [r2, #28]
 8004aaa:	4b85      	ldr	r3, [pc, #532]	; (8004cc0 <HAL_RCC_OscConfig+0x4c4>)
 8004aac:	69db      	ldr	r3, [r3, #28]
 8004aae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ab2:	60bb      	str	r3, [r7, #8]
 8004ab4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004aba:	4b82      	ldr	r3, [pc, #520]	; (8004cc4 <HAL_RCC_OscConfig+0x4c8>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d118      	bne.n	8004af8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004ac6:	4b7f      	ldr	r3, [pc, #508]	; (8004cc4 <HAL_RCC_OscConfig+0x4c8>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4a7e      	ldr	r2, [pc, #504]	; (8004cc4 <HAL_RCC_OscConfig+0x4c8>)
 8004acc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ad0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ad2:	f7fd f9eb 	bl	8001eac <HAL_GetTick>
 8004ad6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ad8:	e008      	b.n	8004aec <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ada:	f7fd f9e7 	bl	8001eac <HAL_GetTick>
 8004ade:	4602      	mov	r2, r0
 8004ae0:	693b      	ldr	r3, [r7, #16]
 8004ae2:	1ad3      	subs	r3, r2, r3
 8004ae4:	2b64      	cmp	r3, #100	; 0x64
 8004ae6:	d901      	bls.n	8004aec <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004ae8:	2303      	movs	r3, #3
 8004aea:	e103      	b.n	8004cf4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004aec:	4b75      	ldr	r3, [pc, #468]	; (8004cc4 <HAL_RCC_OscConfig+0x4c8>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d0f0      	beq.n	8004ada <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	68db      	ldr	r3, [r3, #12]
 8004afc:	2b01      	cmp	r3, #1
 8004afe:	d106      	bne.n	8004b0e <HAL_RCC_OscConfig+0x312>
 8004b00:	4b6f      	ldr	r3, [pc, #444]	; (8004cc0 <HAL_RCC_OscConfig+0x4c4>)
 8004b02:	6a1b      	ldr	r3, [r3, #32]
 8004b04:	4a6e      	ldr	r2, [pc, #440]	; (8004cc0 <HAL_RCC_OscConfig+0x4c4>)
 8004b06:	f043 0301 	orr.w	r3, r3, #1
 8004b0a:	6213      	str	r3, [r2, #32]
 8004b0c:	e02d      	b.n	8004b6a <HAL_RCC_OscConfig+0x36e>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	68db      	ldr	r3, [r3, #12]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d10c      	bne.n	8004b30 <HAL_RCC_OscConfig+0x334>
 8004b16:	4b6a      	ldr	r3, [pc, #424]	; (8004cc0 <HAL_RCC_OscConfig+0x4c4>)
 8004b18:	6a1b      	ldr	r3, [r3, #32]
 8004b1a:	4a69      	ldr	r2, [pc, #420]	; (8004cc0 <HAL_RCC_OscConfig+0x4c4>)
 8004b1c:	f023 0301 	bic.w	r3, r3, #1
 8004b20:	6213      	str	r3, [r2, #32]
 8004b22:	4b67      	ldr	r3, [pc, #412]	; (8004cc0 <HAL_RCC_OscConfig+0x4c4>)
 8004b24:	6a1b      	ldr	r3, [r3, #32]
 8004b26:	4a66      	ldr	r2, [pc, #408]	; (8004cc0 <HAL_RCC_OscConfig+0x4c4>)
 8004b28:	f023 0304 	bic.w	r3, r3, #4
 8004b2c:	6213      	str	r3, [r2, #32]
 8004b2e:	e01c      	b.n	8004b6a <HAL_RCC_OscConfig+0x36e>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	68db      	ldr	r3, [r3, #12]
 8004b34:	2b05      	cmp	r3, #5
 8004b36:	d10c      	bne.n	8004b52 <HAL_RCC_OscConfig+0x356>
 8004b38:	4b61      	ldr	r3, [pc, #388]	; (8004cc0 <HAL_RCC_OscConfig+0x4c4>)
 8004b3a:	6a1b      	ldr	r3, [r3, #32]
 8004b3c:	4a60      	ldr	r2, [pc, #384]	; (8004cc0 <HAL_RCC_OscConfig+0x4c4>)
 8004b3e:	f043 0304 	orr.w	r3, r3, #4
 8004b42:	6213      	str	r3, [r2, #32]
 8004b44:	4b5e      	ldr	r3, [pc, #376]	; (8004cc0 <HAL_RCC_OscConfig+0x4c4>)
 8004b46:	6a1b      	ldr	r3, [r3, #32]
 8004b48:	4a5d      	ldr	r2, [pc, #372]	; (8004cc0 <HAL_RCC_OscConfig+0x4c4>)
 8004b4a:	f043 0301 	orr.w	r3, r3, #1
 8004b4e:	6213      	str	r3, [r2, #32]
 8004b50:	e00b      	b.n	8004b6a <HAL_RCC_OscConfig+0x36e>
 8004b52:	4b5b      	ldr	r3, [pc, #364]	; (8004cc0 <HAL_RCC_OscConfig+0x4c4>)
 8004b54:	6a1b      	ldr	r3, [r3, #32]
 8004b56:	4a5a      	ldr	r2, [pc, #360]	; (8004cc0 <HAL_RCC_OscConfig+0x4c4>)
 8004b58:	f023 0301 	bic.w	r3, r3, #1
 8004b5c:	6213      	str	r3, [r2, #32]
 8004b5e:	4b58      	ldr	r3, [pc, #352]	; (8004cc0 <HAL_RCC_OscConfig+0x4c4>)
 8004b60:	6a1b      	ldr	r3, [r3, #32]
 8004b62:	4a57      	ldr	r2, [pc, #348]	; (8004cc0 <HAL_RCC_OscConfig+0x4c4>)
 8004b64:	f023 0304 	bic.w	r3, r3, #4
 8004b68:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	68db      	ldr	r3, [r3, #12]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d015      	beq.n	8004b9e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b72:	f7fd f99b 	bl	8001eac <HAL_GetTick>
 8004b76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b78:	e00a      	b.n	8004b90 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b7a:	f7fd f997 	bl	8001eac <HAL_GetTick>
 8004b7e:	4602      	mov	r2, r0
 8004b80:	693b      	ldr	r3, [r7, #16]
 8004b82:	1ad3      	subs	r3, r2, r3
 8004b84:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d901      	bls.n	8004b90 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004b8c:	2303      	movs	r3, #3
 8004b8e:	e0b1      	b.n	8004cf4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b90:	4b4b      	ldr	r3, [pc, #300]	; (8004cc0 <HAL_RCC_OscConfig+0x4c4>)
 8004b92:	6a1b      	ldr	r3, [r3, #32]
 8004b94:	f003 0302 	and.w	r3, r3, #2
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d0ee      	beq.n	8004b7a <HAL_RCC_OscConfig+0x37e>
 8004b9c:	e014      	b.n	8004bc8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b9e:	f7fd f985 	bl	8001eac <HAL_GetTick>
 8004ba2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ba4:	e00a      	b.n	8004bbc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ba6:	f7fd f981 	bl	8001eac <HAL_GetTick>
 8004baa:	4602      	mov	r2, r0
 8004bac:	693b      	ldr	r3, [r7, #16]
 8004bae:	1ad3      	subs	r3, r2, r3
 8004bb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d901      	bls.n	8004bbc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004bb8:	2303      	movs	r3, #3
 8004bba:	e09b      	b.n	8004cf4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004bbc:	4b40      	ldr	r3, [pc, #256]	; (8004cc0 <HAL_RCC_OscConfig+0x4c4>)
 8004bbe:	6a1b      	ldr	r3, [r3, #32]
 8004bc0:	f003 0302 	and.w	r3, r3, #2
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d1ee      	bne.n	8004ba6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004bc8:	7dfb      	ldrb	r3, [r7, #23]
 8004bca:	2b01      	cmp	r3, #1
 8004bcc:	d105      	bne.n	8004bda <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004bce:	4b3c      	ldr	r3, [pc, #240]	; (8004cc0 <HAL_RCC_OscConfig+0x4c4>)
 8004bd0:	69db      	ldr	r3, [r3, #28]
 8004bd2:	4a3b      	ldr	r2, [pc, #236]	; (8004cc0 <HAL_RCC_OscConfig+0x4c4>)
 8004bd4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004bd8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	69db      	ldr	r3, [r3, #28]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	f000 8087 	beq.w	8004cf2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004be4:	4b36      	ldr	r3, [pc, #216]	; (8004cc0 <HAL_RCC_OscConfig+0x4c4>)
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	f003 030c 	and.w	r3, r3, #12
 8004bec:	2b08      	cmp	r3, #8
 8004bee:	d061      	beq.n	8004cb4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	69db      	ldr	r3, [r3, #28]
 8004bf4:	2b02      	cmp	r3, #2
 8004bf6:	d146      	bne.n	8004c86 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bf8:	4b33      	ldr	r3, [pc, #204]	; (8004cc8 <HAL_RCC_OscConfig+0x4cc>)
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bfe:	f7fd f955 	bl	8001eac <HAL_GetTick>
 8004c02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004c04:	e008      	b.n	8004c18 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c06:	f7fd f951 	bl	8001eac <HAL_GetTick>
 8004c0a:	4602      	mov	r2, r0
 8004c0c:	693b      	ldr	r3, [r7, #16]
 8004c0e:	1ad3      	subs	r3, r2, r3
 8004c10:	2b02      	cmp	r3, #2
 8004c12:	d901      	bls.n	8004c18 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004c14:	2303      	movs	r3, #3
 8004c16:	e06d      	b.n	8004cf4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004c18:	4b29      	ldr	r3, [pc, #164]	; (8004cc0 <HAL_RCC_OscConfig+0x4c4>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d1f0      	bne.n	8004c06 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6a1b      	ldr	r3, [r3, #32]
 8004c28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c2c:	d108      	bne.n	8004c40 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004c2e:	4b24      	ldr	r3, [pc, #144]	; (8004cc0 <HAL_RCC_OscConfig+0x4c4>)
 8004c30:	685b      	ldr	r3, [r3, #4]
 8004c32:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	689b      	ldr	r3, [r3, #8]
 8004c3a:	4921      	ldr	r1, [pc, #132]	; (8004cc0 <HAL_RCC_OscConfig+0x4c4>)
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004c40:	4b1f      	ldr	r3, [pc, #124]	; (8004cc0 <HAL_RCC_OscConfig+0x4c4>)
 8004c42:	685b      	ldr	r3, [r3, #4]
 8004c44:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6a19      	ldr	r1, [r3, #32]
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c50:	430b      	orrs	r3, r1
 8004c52:	491b      	ldr	r1, [pc, #108]	; (8004cc0 <HAL_RCC_OscConfig+0x4c4>)
 8004c54:	4313      	orrs	r3, r2
 8004c56:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c58:	4b1b      	ldr	r3, [pc, #108]	; (8004cc8 <HAL_RCC_OscConfig+0x4cc>)
 8004c5a:	2201      	movs	r2, #1
 8004c5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c5e:	f7fd f925 	bl	8001eac <HAL_GetTick>
 8004c62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004c64:	e008      	b.n	8004c78 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c66:	f7fd f921 	bl	8001eac <HAL_GetTick>
 8004c6a:	4602      	mov	r2, r0
 8004c6c:	693b      	ldr	r3, [r7, #16]
 8004c6e:	1ad3      	subs	r3, r2, r3
 8004c70:	2b02      	cmp	r3, #2
 8004c72:	d901      	bls.n	8004c78 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004c74:	2303      	movs	r3, #3
 8004c76:	e03d      	b.n	8004cf4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004c78:	4b11      	ldr	r3, [pc, #68]	; (8004cc0 <HAL_RCC_OscConfig+0x4c4>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d0f0      	beq.n	8004c66 <HAL_RCC_OscConfig+0x46a>
 8004c84:	e035      	b.n	8004cf2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c86:	4b10      	ldr	r3, [pc, #64]	; (8004cc8 <HAL_RCC_OscConfig+0x4cc>)
 8004c88:	2200      	movs	r2, #0
 8004c8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c8c:	f7fd f90e 	bl	8001eac <HAL_GetTick>
 8004c90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004c92:	e008      	b.n	8004ca6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c94:	f7fd f90a 	bl	8001eac <HAL_GetTick>
 8004c98:	4602      	mov	r2, r0
 8004c9a:	693b      	ldr	r3, [r7, #16]
 8004c9c:	1ad3      	subs	r3, r2, r3
 8004c9e:	2b02      	cmp	r3, #2
 8004ca0:	d901      	bls.n	8004ca6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004ca2:	2303      	movs	r3, #3
 8004ca4:	e026      	b.n	8004cf4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004ca6:	4b06      	ldr	r3, [pc, #24]	; (8004cc0 <HAL_RCC_OscConfig+0x4c4>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d1f0      	bne.n	8004c94 <HAL_RCC_OscConfig+0x498>
 8004cb2:	e01e      	b.n	8004cf2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	69db      	ldr	r3, [r3, #28]
 8004cb8:	2b01      	cmp	r3, #1
 8004cba:	d107      	bne.n	8004ccc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	e019      	b.n	8004cf4 <HAL_RCC_OscConfig+0x4f8>
 8004cc0:	40021000 	.word	0x40021000
 8004cc4:	40007000 	.word	0x40007000
 8004cc8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004ccc:	4b0b      	ldr	r3, [pc, #44]	; (8004cfc <HAL_RCC_OscConfig+0x500>)
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6a1b      	ldr	r3, [r3, #32]
 8004cdc:	429a      	cmp	r2, r3
 8004cde:	d106      	bne.n	8004cee <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004cea:	429a      	cmp	r2, r3
 8004cec:	d001      	beq.n	8004cf2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004cee:	2301      	movs	r3, #1
 8004cf0:	e000      	b.n	8004cf4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004cf2:	2300      	movs	r3, #0
}
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	3718      	adds	r7, #24
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	bd80      	pop	{r7, pc}
 8004cfc:	40021000 	.word	0x40021000

08004d00 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b084      	sub	sp, #16
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
 8004d08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d101      	bne.n	8004d14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004d10:	2301      	movs	r3, #1
 8004d12:	e0d0      	b.n	8004eb6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004d14:	4b6a      	ldr	r3, [pc, #424]	; (8004ec0 <HAL_RCC_ClockConfig+0x1c0>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f003 0307 	and.w	r3, r3, #7
 8004d1c:	683a      	ldr	r2, [r7, #0]
 8004d1e:	429a      	cmp	r2, r3
 8004d20:	d910      	bls.n	8004d44 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d22:	4b67      	ldr	r3, [pc, #412]	; (8004ec0 <HAL_RCC_ClockConfig+0x1c0>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f023 0207 	bic.w	r2, r3, #7
 8004d2a:	4965      	ldr	r1, [pc, #404]	; (8004ec0 <HAL_RCC_ClockConfig+0x1c0>)
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	4313      	orrs	r3, r2
 8004d30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d32:	4b63      	ldr	r3, [pc, #396]	; (8004ec0 <HAL_RCC_ClockConfig+0x1c0>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f003 0307 	and.w	r3, r3, #7
 8004d3a:	683a      	ldr	r2, [r7, #0]
 8004d3c:	429a      	cmp	r2, r3
 8004d3e:	d001      	beq.n	8004d44 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004d40:	2301      	movs	r3, #1
 8004d42:	e0b8      	b.n	8004eb6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f003 0302 	and.w	r3, r3, #2
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d020      	beq.n	8004d92 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f003 0304 	and.w	r3, r3, #4
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d005      	beq.n	8004d68 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004d5c:	4b59      	ldr	r3, [pc, #356]	; (8004ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	4a58      	ldr	r2, [pc, #352]	; (8004ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8004d62:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004d66:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f003 0308 	and.w	r3, r3, #8
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d005      	beq.n	8004d80 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004d74:	4b53      	ldr	r3, [pc, #332]	; (8004ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8004d76:	685b      	ldr	r3, [r3, #4]
 8004d78:	4a52      	ldr	r2, [pc, #328]	; (8004ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8004d7a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004d7e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d80:	4b50      	ldr	r3, [pc, #320]	; (8004ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8004d82:	685b      	ldr	r3, [r3, #4]
 8004d84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	689b      	ldr	r3, [r3, #8]
 8004d8c:	494d      	ldr	r1, [pc, #308]	; (8004ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f003 0301 	and.w	r3, r3, #1
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d040      	beq.n	8004e20 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	2b01      	cmp	r3, #1
 8004da4:	d107      	bne.n	8004db6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004da6:	4b47      	ldr	r3, [pc, #284]	; (8004ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d115      	bne.n	8004dde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004db2:	2301      	movs	r3, #1
 8004db4:	e07f      	b.n	8004eb6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	2b02      	cmp	r3, #2
 8004dbc:	d107      	bne.n	8004dce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004dbe:	4b41      	ldr	r3, [pc, #260]	; (8004ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d109      	bne.n	8004dde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004dca:	2301      	movs	r3, #1
 8004dcc:	e073      	b.n	8004eb6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004dce:	4b3d      	ldr	r3, [pc, #244]	; (8004ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f003 0302 	and.w	r3, r3, #2
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d101      	bne.n	8004dde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004dda:	2301      	movs	r3, #1
 8004ddc:	e06b      	b.n	8004eb6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004dde:	4b39      	ldr	r3, [pc, #228]	; (8004ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8004de0:	685b      	ldr	r3, [r3, #4]
 8004de2:	f023 0203 	bic.w	r2, r3, #3
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	685b      	ldr	r3, [r3, #4]
 8004dea:	4936      	ldr	r1, [pc, #216]	; (8004ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8004dec:	4313      	orrs	r3, r2
 8004dee:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004df0:	f7fd f85c 	bl	8001eac <HAL_GetTick>
 8004df4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004df6:	e00a      	b.n	8004e0e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004df8:	f7fd f858 	bl	8001eac <HAL_GetTick>
 8004dfc:	4602      	mov	r2, r0
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	1ad3      	subs	r3, r2, r3
 8004e02:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d901      	bls.n	8004e0e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004e0a:	2303      	movs	r3, #3
 8004e0c:	e053      	b.n	8004eb6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e0e:	4b2d      	ldr	r3, [pc, #180]	; (8004ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8004e10:	685b      	ldr	r3, [r3, #4]
 8004e12:	f003 020c 	and.w	r2, r3, #12
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	685b      	ldr	r3, [r3, #4]
 8004e1a:	009b      	lsls	r3, r3, #2
 8004e1c:	429a      	cmp	r2, r3
 8004e1e:	d1eb      	bne.n	8004df8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004e20:	4b27      	ldr	r3, [pc, #156]	; (8004ec0 <HAL_RCC_ClockConfig+0x1c0>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f003 0307 	and.w	r3, r3, #7
 8004e28:	683a      	ldr	r2, [r7, #0]
 8004e2a:	429a      	cmp	r2, r3
 8004e2c:	d210      	bcs.n	8004e50 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e2e:	4b24      	ldr	r3, [pc, #144]	; (8004ec0 <HAL_RCC_ClockConfig+0x1c0>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f023 0207 	bic.w	r2, r3, #7
 8004e36:	4922      	ldr	r1, [pc, #136]	; (8004ec0 <HAL_RCC_ClockConfig+0x1c0>)
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e3e:	4b20      	ldr	r3, [pc, #128]	; (8004ec0 <HAL_RCC_ClockConfig+0x1c0>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f003 0307 	and.w	r3, r3, #7
 8004e46:	683a      	ldr	r2, [r7, #0]
 8004e48:	429a      	cmp	r2, r3
 8004e4a:	d001      	beq.n	8004e50 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	e032      	b.n	8004eb6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f003 0304 	and.w	r3, r3, #4
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d008      	beq.n	8004e6e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e5c:	4b19      	ldr	r3, [pc, #100]	; (8004ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	68db      	ldr	r3, [r3, #12]
 8004e68:	4916      	ldr	r1, [pc, #88]	; (8004ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f003 0308 	and.w	r3, r3, #8
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d009      	beq.n	8004e8e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004e7a:	4b12      	ldr	r3, [pc, #72]	; (8004ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8004e7c:	685b      	ldr	r3, [r3, #4]
 8004e7e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	691b      	ldr	r3, [r3, #16]
 8004e86:	00db      	lsls	r3, r3, #3
 8004e88:	490e      	ldr	r1, [pc, #56]	; (8004ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004e8e:	f000 f821 	bl	8004ed4 <HAL_RCC_GetSysClockFreq>
 8004e92:	4602      	mov	r2, r0
 8004e94:	4b0b      	ldr	r3, [pc, #44]	; (8004ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8004e96:	685b      	ldr	r3, [r3, #4]
 8004e98:	091b      	lsrs	r3, r3, #4
 8004e9a:	f003 030f 	and.w	r3, r3, #15
 8004e9e:	490a      	ldr	r1, [pc, #40]	; (8004ec8 <HAL_RCC_ClockConfig+0x1c8>)
 8004ea0:	5ccb      	ldrb	r3, [r1, r3]
 8004ea2:	fa22 f303 	lsr.w	r3, r2, r3
 8004ea6:	4a09      	ldr	r2, [pc, #36]	; (8004ecc <HAL_RCC_ClockConfig+0x1cc>)
 8004ea8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004eaa:	4b09      	ldr	r3, [pc, #36]	; (8004ed0 <HAL_RCC_ClockConfig+0x1d0>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4618      	mov	r0, r3
 8004eb0:	f7fc ffba 	bl	8001e28 <HAL_InitTick>

  return HAL_OK;
 8004eb4:	2300      	movs	r3, #0
}
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	3710      	adds	r7, #16
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bd80      	pop	{r7, pc}
 8004ebe:	bf00      	nop
 8004ec0:	40022000 	.word	0x40022000
 8004ec4:	40021000 	.word	0x40021000
 8004ec8:	08006860 	.word	0x08006860
 8004ecc:	20000000 	.word	0x20000000
 8004ed0:	20000004 	.word	0x20000004

08004ed4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ed4:	b490      	push	{r4, r7}
 8004ed6:	b08a      	sub	sp, #40	; 0x28
 8004ed8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004eda:	4b29      	ldr	r3, [pc, #164]	; (8004f80 <HAL_RCC_GetSysClockFreq+0xac>)
 8004edc:	1d3c      	adds	r4, r7, #4
 8004ede:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004ee0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004ee4:	f240 2301 	movw	r3, #513	; 0x201
 8004ee8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004eea:	2300      	movs	r3, #0
 8004eec:	61fb      	str	r3, [r7, #28]
 8004eee:	2300      	movs	r3, #0
 8004ef0:	61bb      	str	r3, [r7, #24]
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	627b      	str	r3, [r7, #36]	; 0x24
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004efa:	2300      	movs	r3, #0
 8004efc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004efe:	4b21      	ldr	r3, [pc, #132]	; (8004f84 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004f00:	685b      	ldr	r3, [r3, #4]
 8004f02:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004f04:	69fb      	ldr	r3, [r7, #28]
 8004f06:	f003 030c 	and.w	r3, r3, #12
 8004f0a:	2b04      	cmp	r3, #4
 8004f0c:	d002      	beq.n	8004f14 <HAL_RCC_GetSysClockFreq+0x40>
 8004f0e:	2b08      	cmp	r3, #8
 8004f10:	d003      	beq.n	8004f1a <HAL_RCC_GetSysClockFreq+0x46>
 8004f12:	e02b      	b.n	8004f6c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004f14:	4b1c      	ldr	r3, [pc, #112]	; (8004f88 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004f16:	623b      	str	r3, [r7, #32]
      break;
 8004f18:	e02b      	b.n	8004f72 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004f1a:	69fb      	ldr	r3, [r7, #28]
 8004f1c:	0c9b      	lsrs	r3, r3, #18
 8004f1e:	f003 030f 	and.w	r3, r3, #15
 8004f22:	3328      	adds	r3, #40	; 0x28
 8004f24:	443b      	add	r3, r7
 8004f26:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004f2a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004f2c:	69fb      	ldr	r3, [r7, #28]
 8004f2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d012      	beq.n	8004f5c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004f36:	4b13      	ldr	r3, [pc, #76]	; (8004f84 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004f38:	685b      	ldr	r3, [r3, #4]
 8004f3a:	0c5b      	lsrs	r3, r3, #17
 8004f3c:	f003 0301 	and.w	r3, r3, #1
 8004f40:	3328      	adds	r3, #40	; 0x28
 8004f42:	443b      	add	r3, r7
 8004f44:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004f48:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	4a0e      	ldr	r2, [pc, #56]	; (8004f88 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004f4e:	fb03 f202 	mul.w	r2, r3, r2
 8004f52:	69bb      	ldr	r3, [r7, #24]
 8004f54:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f58:	627b      	str	r3, [r7, #36]	; 0x24
 8004f5a:	e004      	b.n	8004f66 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004f5c:	697b      	ldr	r3, [r7, #20]
 8004f5e:	4a0b      	ldr	r2, [pc, #44]	; (8004f8c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004f60:	fb02 f303 	mul.w	r3, r2, r3
 8004f64:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f68:	623b      	str	r3, [r7, #32]
      break;
 8004f6a:	e002      	b.n	8004f72 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004f6c:	4b06      	ldr	r3, [pc, #24]	; (8004f88 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004f6e:	623b      	str	r3, [r7, #32]
      break;
 8004f70:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004f72:	6a3b      	ldr	r3, [r7, #32]
}
 8004f74:	4618      	mov	r0, r3
 8004f76:	3728      	adds	r7, #40	; 0x28
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	bc90      	pop	{r4, r7}
 8004f7c:	4770      	bx	lr
 8004f7e:	bf00      	nop
 8004f80:	08006850 	.word	0x08006850
 8004f84:	40021000 	.word	0x40021000
 8004f88:	007a1200 	.word	0x007a1200
 8004f8c:	003d0900 	.word	0x003d0900

08004f90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f90:	b480      	push	{r7}
 8004f92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f94:	4b02      	ldr	r3, [pc, #8]	; (8004fa0 <HAL_RCC_GetHCLKFreq+0x10>)
 8004f96:	681b      	ldr	r3, [r3, #0]
}
 8004f98:	4618      	mov	r0, r3
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	bc80      	pop	{r7}
 8004f9e:	4770      	bx	lr
 8004fa0:	20000000 	.word	0x20000000

08004fa4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004fa8:	f7ff fff2 	bl	8004f90 <HAL_RCC_GetHCLKFreq>
 8004fac:	4602      	mov	r2, r0
 8004fae:	4b05      	ldr	r3, [pc, #20]	; (8004fc4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	0a1b      	lsrs	r3, r3, #8
 8004fb4:	f003 0307 	and.w	r3, r3, #7
 8004fb8:	4903      	ldr	r1, [pc, #12]	; (8004fc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004fba:	5ccb      	ldrb	r3, [r1, r3]
 8004fbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	bd80      	pop	{r7, pc}
 8004fc4:	40021000 	.word	0x40021000
 8004fc8:	08006870 	.word	0x08006870

08004fcc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	b085      	sub	sp, #20
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004fd4:	4b0a      	ldr	r3, [pc, #40]	; (8005000 <RCC_Delay+0x34>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4a0a      	ldr	r2, [pc, #40]	; (8005004 <RCC_Delay+0x38>)
 8004fda:	fba2 2303 	umull	r2, r3, r2, r3
 8004fde:	0a5b      	lsrs	r3, r3, #9
 8004fe0:	687a      	ldr	r2, [r7, #4]
 8004fe2:	fb02 f303 	mul.w	r3, r2, r3
 8004fe6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004fe8:	bf00      	nop
  }
  while (Delay --);
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	1e5a      	subs	r2, r3, #1
 8004fee:	60fa      	str	r2, [r7, #12]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d1f9      	bne.n	8004fe8 <RCC_Delay+0x1c>
}
 8004ff4:	bf00      	nop
 8004ff6:	bf00      	nop
 8004ff8:	3714      	adds	r7, #20
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bc80      	pop	{r7}
 8004ffe:	4770      	bx	lr
 8005000:	20000000 	.word	0x20000000
 8005004:	10624dd3 	.word	0x10624dd3

08005008 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b082      	sub	sp, #8
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d101      	bne.n	800501a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005016:	2301      	movs	r3, #1
 8005018:	e041      	b.n	800509e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005020:	b2db      	uxtb	r3, r3
 8005022:	2b00      	cmp	r3, #0
 8005024:	d106      	bne.n	8005034 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2200      	movs	r2, #0
 800502a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800502e:	6878      	ldr	r0, [r7, #4]
 8005030:	f7fc fe1a 	bl	8001c68 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2202      	movs	r2, #2
 8005038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681a      	ldr	r2, [r3, #0]
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	3304      	adds	r3, #4
 8005044:	4619      	mov	r1, r3
 8005046:	4610      	mov	r0, r2
 8005048:	f000 f93c 	bl	80052c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2201      	movs	r2, #1
 8005050:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2201      	movs	r2, #1
 8005058:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2201      	movs	r2, #1
 8005060:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2201      	movs	r2, #1
 8005068:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2201      	movs	r2, #1
 8005070:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2201      	movs	r2, #1
 8005078:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2201      	movs	r2, #1
 8005080:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2201      	movs	r2, #1
 8005088:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2201      	movs	r2, #1
 8005090:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2201      	movs	r2, #1
 8005098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800509c:	2300      	movs	r3, #0
}
 800509e:	4618      	mov	r0, r3
 80050a0:	3708      	adds	r7, #8
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bd80      	pop	{r7, pc}
	...

080050a8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80050a8:	b480      	push	{r7}
 80050aa:	b085      	sub	sp, #20
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050b6:	b2db      	uxtb	r3, r3
 80050b8:	2b01      	cmp	r3, #1
 80050ba:	d001      	beq.n	80050c0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80050bc:	2301      	movs	r3, #1
 80050be:	e032      	b.n	8005126 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2202      	movs	r2, #2
 80050c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a18      	ldr	r2, [pc, #96]	; (8005130 <HAL_TIM_Base_Start+0x88>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d00e      	beq.n	80050f0 <HAL_TIM_Base_Start+0x48>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050da:	d009      	beq.n	80050f0 <HAL_TIM_Base_Start+0x48>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a14      	ldr	r2, [pc, #80]	; (8005134 <HAL_TIM_Base_Start+0x8c>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d004      	beq.n	80050f0 <HAL_TIM_Base_Start+0x48>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4a13      	ldr	r2, [pc, #76]	; (8005138 <HAL_TIM_Base_Start+0x90>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d111      	bne.n	8005114 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	689b      	ldr	r3, [r3, #8]
 80050f6:	f003 0307 	and.w	r3, r3, #7
 80050fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	2b06      	cmp	r3, #6
 8005100:	d010      	beq.n	8005124 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	681a      	ldr	r2, [r3, #0]
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f042 0201 	orr.w	r2, r2, #1
 8005110:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005112:	e007      	b.n	8005124 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	681a      	ldr	r2, [r3, #0]
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f042 0201 	orr.w	r2, r2, #1
 8005122:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005124:	2300      	movs	r3, #0
}
 8005126:	4618      	mov	r0, r3
 8005128:	3714      	adds	r7, #20
 800512a:	46bd      	mov	sp, r7
 800512c:	bc80      	pop	{r7}
 800512e:	4770      	bx	lr
 8005130:	40012c00 	.word	0x40012c00
 8005134:	40000400 	.word	0x40000400
 8005138:	40000800 	.word	0x40000800

0800513c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b084      	sub	sp, #16
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
 8005144:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800514c:	2b01      	cmp	r3, #1
 800514e:	d101      	bne.n	8005154 <HAL_TIM_ConfigClockSource+0x18>
 8005150:	2302      	movs	r3, #2
 8005152:	e0b3      	b.n	80052bc <HAL_TIM_ConfigClockSource+0x180>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2201      	movs	r2, #1
 8005158:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2202      	movs	r2, #2
 8005160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	689b      	ldr	r3, [r3, #8]
 800516a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005172:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800517a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	68fa      	ldr	r2, [r7, #12]
 8005182:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800518c:	d03e      	beq.n	800520c <HAL_TIM_ConfigClockSource+0xd0>
 800518e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005192:	f200 8087 	bhi.w	80052a4 <HAL_TIM_ConfigClockSource+0x168>
 8005196:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800519a:	f000 8085 	beq.w	80052a8 <HAL_TIM_ConfigClockSource+0x16c>
 800519e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051a2:	d87f      	bhi.n	80052a4 <HAL_TIM_ConfigClockSource+0x168>
 80051a4:	2b70      	cmp	r3, #112	; 0x70
 80051a6:	d01a      	beq.n	80051de <HAL_TIM_ConfigClockSource+0xa2>
 80051a8:	2b70      	cmp	r3, #112	; 0x70
 80051aa:	d87b      	bhi.n	80052a4 <HAL_TIM_ConfigClockSource+0x168>
 80051ac:	2b60      	cmp	r3, #96	; 0x60
 80051ae:	d050      	beq.n	8005252 <HAL_TIM_ConfigClockSource+0x116>
 80051b0:	2b60      	cmp	r3, #96	; 0x60
 80051b2:	d877      	bhi.n	80052a4 <HAL_TIM_ConfigClockSource+0x168>
 80051b4:	2b50      	cmp	r3, #80	; 0x50
 80051b6:	d03c      	beq.n	8005232 <HAL_TIM_ConfigClockSource+0xf6>
 80051b8:	2b50      	cmp	r3, #80	; 0x50
 80051ba:	d873      	bhi.n	80052a4 <HAL_TIM_ConfigClockSource+0x168>
 80051bc:	2b40      	cmp	r3, #64	; 0x40
 80051be:	d058      	beq.n	8005272 <HAL_TIM_ConfigClockSource+0x136>
 80051c0:	2b40      	cmp	r3, #64	; 0x40
 80051c2:	d86f      	bhi.n	80052a4 <HAL_TIM_ConfigClockSource+0x168>
 80051c4:	2b30      	cmp	r3, #48	; 0x30
 80051c6:	d064      	beq.n	8005292 <HAL_TIM_ConfigClockSource+0x156>
 80051c8:	2b30      	cmp	r3, #48	; 0x30
 80051ca:	d86b      	bhi.n	80052a4 <HAL_TIM_ConfigClockSource+0x168>
 80051cc:	2b20      	cmp	r3, #32
 80051ce:	d060      	beq.n	8005292 <HAL_TIM_ConfigClockSource+0x156>
 80051d0:	2b20      	cmp	r3, #32
 80051d2:	d867      	bhi.n	80052a4 <HAL_TIM_ConfigClockSource+0x168>
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d05c      	beq.n	8005292 <HAL_TIM_ConfigClockSource+0x156>
 80051d8:	2b10      	cmp	r3, #16
 80051da:	d05a      	beq.n	8005292 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80051dc:	e062      	b.n	80052a4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6818      	ldr	r0, [r3, #0]
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	6899      	ldr	r1, [r3, #8]
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	685a      	ldr	r2, [r3, #4]
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	68db      	ldr	r3, [r3, #12]
 80051ee:	f000 f942 	bl	8005476 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	689b      	ldr	r3, [r3, #8]
 80051f8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005200:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	68fa      	ldr	r2, [r7, #12]
 8005208:	609a      	str	r2, [r3, #8]
      break;
 800520a:	e04e      	b.n	80052aa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6818      	ldr	r0, [r3, #0]
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	6899      	ldr	r1, [r3, #8]
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	685a      	ldr	r2, [r3, #4]
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	68db      	ldr	r3, [r3, #12]
 800521c:	f000 f92b 	bl	8005476 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	689a      	ldr	r2, [r3, #8]
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800522e:	609a      	str	r2, [r3, #8]
      break;
 8005230:	e03b      	b.n	80052aa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6818      	ldr	r0, [r3, #0]
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	6859      	ldr	r1, [r3, #4]
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	68db      	ldr	r3, [r3, #12]
 800523e:	461a      	mov	r2, r3
 8005240:	f000 f8a2 	bl	8005388 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	2150      	movs	r1, #80	; 0x50
 800524a:	4618      	mov	r0, r3
 800524c:	f000 f8f9 	bl	8005442 <TIM_ITRx_SetConfig>
      break;
 8005250:	e02b      	b.n	80052aa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6818      	ldr	r0, [r3, #0]
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	6859      	ldr	r1, [r3, #4]
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	68db      	ldr	r3, [r3, #12]
 800525e:	461a      	mov	r2, r3
 8005260:	f000 f8c0 	bl	80053e4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	2160      	movs	r1, #96	; 0x60
 800526a:	4618      	mov	r0, r3
 800526c:	f000 f8e9 	bl	8005442 <TIM_ITRx_SetConfig>
      break;
 8005270:	e01b      	b.n	80052aa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6818      	ldr	r0, [r3, #0]
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	6859      	ldr	r1, [r3, #4]
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	68db      	ldr	r3, [r3, #12]
 800527e:	461a      	mov	r2, r3
 8005280:	f000 f882 	bl	8005388 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	2140      	movs	r1, #64	; 0x40
 800528a:	4618      	mov	r0, r3
 800528c:	f000 f8d9 	bl	8005442 <TIM_ITRx_SetConfig>
      break;
 8005290:	e00b      	b.n	80052aa <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681a      	ldr	r2, [r3, #0]
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4619      	mov	r1, r3
 800529c:	4610      	mov	r0, r2
 800529e:	f000 f8d0 	bl	8005442 <TIM_ITRx_SetConfig>
        break;
 80052a2:	e002      	b.n	80052aa <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80052a4:	bf00      	nop
 80052a6:	e000      	b.n	80052aa <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80052a8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2201      	movs	r2, #1
 80052ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2200      	movs	r2, #0
 80052b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80052ba:	2300      	movs	r3, #0
}
 80052bc:	4618      	mov	r0, r3
 80052be:	3710      	adds	r7, #16
 80052c0:	46bd      	mov	sp, r7
 80052c2:	bd80      	pop	{r7, pc}

080052c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80052c4:	b480      	push	{r7}
 80052c6:	b085      	sub	sp, #20
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
 80052cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	4a29      	ldr	r2, [pc, #164]	; (800537c <TIM_Base_SetConfig+0xb8>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d00b      	beq.n	80052f4 <TIM_Base_SetConfig+0x30>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052e2:	d007      	beq.n	80052f4 <TIM_Base_SetConfig+0x30>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	4a26      	ldr	r2, [pc, #152]	; (8005380 <TIM_Base_SetConfig+0xbc>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d003      	beq.n	80052f4 <TIM_Base_SetConfig+0x30>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	4a25      	ldr	r2, [pc, #148]	; (8005384 <TIM_Base_SetConfig+0xc0>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d108      	bne.n	8005306 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	685b      	ldr	r3, [r3, #4]
 8005300:	68fa      	ldr	r2, [r7, #12]
 8005302:	4313      	orrs	r3, r2
 8005304:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	4a1c      	ldr	r2, [pc, #112]	; (800537c <TIM_Base_SetConfig+0xb8>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d00b      	beq.n	8005326 <TIM_Base_SetConfig+0x62>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005314:	d007      	beq.n	8005326 <TIM_Base_SetConfig+0x62>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	4a19      	ldr	r2, [pc, #100]	; (8005380 <TIM_Base_SetConfig+0xbc>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d003      	beq.n	8005326 <TIM_Base_SetConfig+0x62>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	4a18      	ldr	r2, [pc, #96]	; (8005384 <TIM_Base_SetConfig+0xc0>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d108      	bne.n	8005338 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800532c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	68db      	ldr	r3, [r3, #12]
 8005332:	68fa      	ldr	r2, [r7, #12]
 8005334:	4313      	orrs	r3, r2
 8005336:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	695b      	ldr	r3, [r3, #20]
 8005342:	4313      	orrs	r3, r2
 8005344:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	68fa      	ldr	r2, [r7, #12]
 800534a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	689a      	ldr	r2, [r3, #8]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	681a      	ldr	r2, [r3, #0]
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	4a07      	ldr	r2, [pc, #28]	; (800537c <TIM_Base_SetConfig+0xb8>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d103      	bne.n	800536c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	691a      	ldr	r2, [r3, #16]
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2201      	movs	r2, #1
 8005370:	615a      	str	r2, [r3, #20]
}
 8005372:	bf00      	nop
 8005374:	3714      	adds	r7, #20
 8005376:	46bd      	mov	sp, r7
 8005378:	bc80      	pop	{r7}
 800537a:	4770      	bx	lr
 800537c:	40012c00 	.word	0x40012c00
 8005380:	40000400 	.word	0x40000400
 8005384:	40000800 	.word	0x40000800

08005388 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005388:	b480      	push	{r7}
 800538a:	b087      	sub	sp, #28
 800538c:	af00      	add	r7, sp, #0
 800538e:	60f8      	str	r0, [r7, #12]
 8005390:	60b9      	str	r1, [r7, #8]
 8005392:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	6a1b      	ldr	r3, [r3, #32]
 8005398:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	6a1b      	ldr	r3, [r3, #32]
 800539e:	f023 0201 	bic.w	r2, r3, #1
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	699b      	ldr	r3, [r3, #24]
 80053aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80053ac:	693b      	ldr	r3, [r7, #16]
 80053ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80053b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	011b      	lsls	r3, r3, #4
 80053b8:	693a      	ldr	r2, [r7, #16]
 80053ba:	4313      	orrs	r3, r2
 80053bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80053be:	697b      	ldr	r3, [r7, #20]
 80053c0:	f023 030a 	bic.w	r3, r3, #10
 80053c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80053c6:	697a      	ldr	r2, [r7, #20]
 80053c8:	68bb      	ldr	r3, [r7, #8]
 80053ca:	4313      	orrs	r3, r2
 80053cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	693a      	ldr	r2, [r7, #16]
 80053d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	697a      	ldr	r2, [r7, #20]
 80053d8:	621a      	str	r2, [r3, #32]
}
 80053da:	bf00      	nop
 80053dc:	371c      	adds	r7, #28
 80053de:	46bd      	mov	sp, r7
 80053e0:	bc80      	pop	{r7}
 80053e2:	4770      	bx	lr

080053e4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80053e4:	b480      	push	{r7}
 80053e6:	b087      	sub	sp, #28
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	60f8      	str	r0, [r7, #12]
 80053ec:	60b9      	str	r1, [r7, #8]
 80053ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	6a1b      	ldr	r3, [r3, #32]
 80053f4:	f023 0210 	bic.w	r2, r3, #16
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	699b      	ldr	r3, [r3, #24]
 8005400:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	6a1b      	ldr	r3, [r3, #32]
 8005406:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005408:	697b      	ldr	r3, [r7, #20]
 800540a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800540e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	031b      	lsls	r3, r3, #12
 8005414:	697a      	ldr	r2, [r7, #20]
 8005416:	4313      	orrs	r3, r2
 8005418:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800541a:	693b      	ldr	r3, [r7, #16]
 800541c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005420:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005422:	68bb      	ldr	r3, [r7, #8]
 8005424:	011b      	lsls	r3, r3, #4
 8005426:	693a      	ldr	r2, [r7, #16]
 8005428:	4313      	orrs	r3, r2
 800542a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	697a      	ldr	r2, [r7, #20]
 8005430:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	693a      	ldr	r2, [r7, #16]
 8005436:	621a      	str	r2, [r3, #32]
}
 8005438:	bf00      	nop
 800543a:	371c      	adds	r7, #28
 800543c:	46bd      	mov	sp, r7
 800543e:	bc80      	pop	{r7}
 8005440:	4770      	bx	lr

08005442 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005442:	b480      	push	{r7}
 8005444:	b085      	sub	sp, #20
 8005446:	af00      	add	r7, sp, #0
 8005448:	6078      	str	r0, [r7, #4]
 800544a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	689b      	ldr	r3, [r3, #8]
 8005450:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005458:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800545a:	683a      	ldr	r2, [r7, #0]
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	4313      	orrs	r3, r2
 8005460:	f043 0307 	orr.w	r3, r3, #7
 8005464:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	68fa      	ldr	r2, [r7, #12]
 800546a:	609a      	str	r2, [r3, #8]
}
 800546c:	bf00      	nop
 800546e:	3714      	adds	r7, #20
 8005470:	46bd      	mov	sp, r7
 8005472:	bc80      	pop	{r7}
 8005474:	4770      	bx	lr

08005476 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005476:	b480      	push	{r7}
 8005478:	b087      	sub	sp, #28
 800547a:	af00      	add	r7, sp, #0
 800547c:	60f8      	str	r0, [r7, #12]
 800547e:	60b9      	str	r1, [r7, #8]
 8005480:	607a      	str	r2, [r7, #4]
 8005482:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	689b      	ldr	r3, [r3, #8]
 8005488:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800548a:	697b      	ldr	r3, [r7, #20]
 800548c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005490:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	021a      	lsls	r2, r3, #8
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	431a      	orrs	r2, r3
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	4313      	orrs	r3, r2
 800549e:	697a      	ldr	r2, [r7, #20]
 80054a0:	4313      	orrs	r3, r2
 80054a2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	697a      	ldr	r2, [r7, #20]
 80054a8:	609a      	str	r2, [r3, #8]
}
 80054aa:	bf00      	nop
 80054ac:	371c      	adds	r7, #28
 80054ae:	46bd      	mov	sp, r7
 80054b0:	bc80      	pop	{r7}
 80054b2:	4770      	bx	lr

080054b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80054b4:	b480      	push	{r7}
 80054b6:	b085      	sub	sp, #20
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
 80054bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054c4:	2b01      	cmp	r3, #1
 80054c6:	d101      	bne.n	80054cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80054c8:	2302      	movs	r3, #2
 80054ca:	e046      	b.n	800555a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2201      	movs	r2, #1
 80054d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2202      	movs	r2, #2
 80054d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	685b      	ldr	r3, [r3, #4]
 80054e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	689b      	ldr	r3, [r3, #8]
 80054ea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054f2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	68fa      	ldr	r2, [r7, #12]
 80054fa:	4313      	orrs	r3, r2
 80054fc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	68fa      	ldr	r2, [r7, #12]
 8005504:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4a16      	ldr	r2, [pc, #88]	; (8005564 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d00e      	beq.n	800552e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005518:	d009      	beq.n	800552e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a12      	ldr	r2, [pc, #72]	; (8005568 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d004      	beq.n	800552e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a10      	ldr	r2, [pc, #64]	; (800556c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d10c      	bne.n	8005548 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800552e:	68bb      	ldr	r3, [r7, #8]
 8005530:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005534:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	685b      	ldr	r3, [r3, #4]
 800553a:	68ba      	ldr	r2, [r7, #8]
 800553c:	4313      	orrs	r3, r2
 800553e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	68ba      	ldr	r2, [r7, #8]
 8005546:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2201      	movs	r2, #1
 800554c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2200      	movs	r2, #0
 8005554:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005558:	2300      	movs	r3, #0
}
 800555a:	4618      	mov	r0, r3
 800555c:	3714      	adds	r7, #20
 800555e:	46bd      	mov	sp, r7
 8005560:	bc80      	pop	{r7}
 8005562:	4770      	bx	lr
 8005564:	40012c00 	.word	0x40012c00
 8005568:	40000400 	.word	0x40000400
 800556c:	40000800 	.word	0x40000800

08005570 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8005570:	b580      	push	{r7, lr}
 8005572:	b082      	sub	sp, #8
 8005574:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8005576:	f000 fa27 	bl	80059c8 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 800557a:	f644 6320 	movw	r3, #20000	; 0x4e20
 800557e:	2201      	movs	r2, #1
 8005580:	2178      	movs	r1, #120	; 0x78
 8005582:	485b      	ldr	r0, [pc, #364]	; (80056f0 <SSD1306_Init+0x180>)
 8005584:	f7fd fffc 	bl	8003580 <HAL_I2C_IsDeviceReady>
 8005588:	4603      	mov	r3, r0
 800558a:	2b00      	cmp	r3, #0
 800558c:	d001      	beq.n	8005592 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 800558e:	2300      	movs	r3, #0
 8005590:	e0a9      	b.n	80056e6 <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8005592:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8005596:	607b      	str	r3, [r7, #4]
	while(p>0)
 8005598:	e002      	b.n	80055a0 <SSD1306_Init+0x30>
		p--;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	3b01      	subs	r3, #1
 800559e:	607b      	str	r3, [r7, #4]
	while(p>0)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d1f9      	bne.n	800559a <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 80055a6:	22ae      	movs	r2, #174	; 0xae
 80055a8:	2100      	movs	r1, #0
 80055aa:	2078      	movs	r0, #120	; 0x78
 80055ac:	f000 fa86 	bl	8005abc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 80055b0:	2220      	movs	r2, #32
 80055b2:	2100      	movs	r1, #0
 80055b4:	2078      	movs	r0, #120	; 0x78
 80055b6:	f000 fa81 	bl	8005abc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80055ba:	2210      	movs	r2, #16
 80055bc:	2100      	movs	r1, #0
 80055be:	2078      	movs	r0, #120	; 0x78
 80055c0:	f000 fa7c 	bl	8005abc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80055c4:	22b0      	movs	r2, #176	; 0xb0
 80055c6:	2100      	movs	r1, #0
 80055c8:	2078      	movs	r0, #120	; 0x78
 80055ca:	f000 fa77 	bl	8005abc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 80055ce:	22c8      	movs	r2, #200	; 0xc8
 80055d0:	2100      	movs	r1, #0
 80055d2:	2078      	movs	r0, #120	; 0x78
 80055d4:	f000 fa72 	bl	8005abc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 80055d8:	2200      	movs	r2, #0
 80055da:	2100      	movs	r1, #0
 80055dc:	2078      	movs	r0, #120	; 0x78
 80055de:	f000 fa6d 	bl	8005abc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 80055e2:	2210      	movs	r2, #16
 80055e4:	2100      	movs	r1, #0
 80055e6:	2078      	movs	r0, #120	; 0x78
 80055e8:	f000 fa68 	bl	8005abc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 80055ec:	2240      	movs	r2, #64	; 0x40
 80055ee:	2100      	movs	r1, #0
 80055f0:	2078      	movs	r0, #120	; 0x78
 80055f2:	f000 fa63 	bl	8005abc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 80055f6:	2281      	movs	r2, #129	; 0x81
 80055f8:	2100      	movs	r1, #0
 80055fa:	2078      	movs	r0, #120	; 0x78
 80055fc:	f000 fa5e 	bl	8005abc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8005600:	22ff      	movs	r2, #255	; 0xff
 8005602:	2100      	movs	r1, #0
 8005604:	2078      	movs	r0, #120	; 0x78
 8005606:	f000 fa59 	bl	8005abc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 800560a:	22a1      	movs	r2, #161	; 0xa1
 800560c:	2100      	movs	r1, #0
 800560e:	2078      	movs	r0, #120	; 0x78
 8005610:	f000 fa54 	bl	8005abc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8005614:	22a6      	movs	r2, #166	; 0xa6
 8005616:	2100      	movs	r1, #0
 8005618:	2078      	movs	r0, #120	; 0x78
 800561a:	f000 fa4f 	bl	8005abc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 800561e:	22a8      	movs	r2, #168	; 0xa8
 8005620:	2100      	movs	r1, #0
 8005622:	2078      	movs	r0, #120	; 0x78
 8005624:	f000 fa4a 	bl	8005abc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8005628:	223f      	movs	r2, #63	; 0x3f
 800562a:	2100      	movs	r1, #0
 800562c:	2078      	movs	r0, #120	; 0x78
 800562e:	f000 fa45 	bl	8005abc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8005632:	22a4      	movs	r2, #164	; 0xa4
 8005634:	2100      	movs	r1, #0
 8005636:	2078      	movs	r0, #120	; 0x78
 8005638:	f000 fa40 	bl	8005abc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 800563c:	22d3      	movs	r2, #211	; 0xd3
 800563e:	2100      	movs	r1, #0
 8005640:	2078      	movs	r0, #120	; 0x78
 8005642:	f000 fa3b 	bl	8005abc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8005646:	2200      	movs	r2, #0
 8005648:	2100      	movs	r1, #0
 800564a:	2078      	movs	r0, #120	; 0x78
 800564c:	f000 fa36 	bl	8005abc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8005650:	22d5      	movs	r2, #213	; 0xd5
 8005652:	2100      	movs	r1, #0
 8005654:	2078      	movs	r0, #120	; 0x78
 8005656:	f000 fa31 	bl	8005abc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 800565a:	22f0      	movs	r2, #240	; 0xf0
 800565c:	2100      	movs	r1, #0
 800565e:	2078      	movs	r0, #120	; 0x78
 8005660:	f000 fa2c 	bl	8005abc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8005664:	22d9      	movs	r2, #217	; 0xd9
 8005666:	2100      	movs	r1, #0
 8005668:	2078      	movs	r0, #120	; 0x78
 800566a:	f000 fa27 	bl	8005abc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 800566e:	2222      	movs	r2, #34	; 0x22
 8005670:	2100      	movs	r1, #0
 8005672:	2078      	movs	r0, #120	; 0x78
 8005674:	f000 fa22 	bl	8005abc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8005678:	22da      	movs	r2, #218	; 0xda
 800567a:	2100      	movs	r1, #0
 800567c:	2078      	movs	r0, #120	; 0x78
 800567e:	f000 fa1d 	bl	8005abc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8005682:	2212      	movs	r2, #18
 8005684:	2100      	movs	r1, #0
 8005686:	2078      	movs	r0, #120	; 0x78
 8005688:	f000 fa18 	bl	8005abc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 800568c:	22db      	movs	r2, #219	; 0xdb
 800568e:	2100      	movs	r1, #0
 8005690:	2078      	movs	r0, #120	; 0x78
 8005692:	f000 fa13 	bl	8005abc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8005696:	2220      	movs	r2, #32
 8005698:	2100      	movs	r1, #0
 800569a:	2078      	movs	r0, #120	; 0x78
 800569c:	f000 fa0e 	bl	8005abc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 80056a0:	228d      	movs	r2, #141	; 0x8d
 80056a2:	2100      	movs	r1, #0
 80056a4:	2078      	movs	r0, #120	; 0x78
 80056a6:	f000 fa09 	bl	8005abc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 80056aa:	2214      	movs	r2, #20
 80056ac:	2100      	movs	r1, #0
 80056ae:	2078      	movs	r0, #120	; 0x78
 80056b0:	f000 fa04 	bl	8005abc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 80056b4:	22af      	movs	r2, #175	; 0xaf
 80056b6:	2100      	movs	r1, #0
 80056b8:	2078      	movs	r0, #120	; 0x78
 80056ba:	f000 f9ff 	bl	8005abc <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 80056be:	222e      	movs	r2, #46	; 0x2e
 80056c0:	2100      	movs	r1, #0
 80056c2:	2078      	movs	r0, #120	; 0x78
 80056c4:	f000 f9fa 	bl	8005abc <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80056c8:	2000      	movs	r0, #0
 80056ca:	f000 f843 	bl	8005754 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 80056ce:	f000 f813 	bl	80056f8 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 80056d2:	4b08      	ldr	r3, [pc, #32]	; (80056f4 <SSD1306_Init+0x184>)
 80056d4:	2200      	movs	r2, #0
 80056d6:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80056d8:	4b06      	ldr	r3, [pc, #24]	; (80056f4 <SSD1306_Init+0x184>)
 80056da:	2200      	movs	r2, #0
 80056dc:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 80056de:	4b05      	ldr	r3, [pc, #20]	; (80056f4 <SSD1306_Init+0x184>)
 80056e0:	2201      	movs	r2, #1
 80056e2:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 80056e4:	2301      	movs	r3, #1
}
 80056e6:	4618      	mov	r0, r3
 80056e8:	3708      	adds	r7, #8
 80056ea:	46bd      	mov	sp, r7
 80056ec:	bd80      	pop	{r7, pc}
 80056ee:	bf00      	nop
 80056f0:	200000a4 	.word	0x200000a4
 80056f4:	200005cc 	.word	0x200005cc

080056f8 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b082      	sub	sp, #8
 80056fc:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 80056fe:	2300      	movs	r3, #0
 8005700:	71fb      	strb	r3, [r7, #7]
 8005702:	e01d      	b.n	8005740 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8005704:	79fb      	ldrb	r3, [r7, #7]
 8005706:	3b50      	subs	r3, #80	; 0x50
 8005708:	b2db      	uxtb	r3, r3
 800570a:	461a      	mov	r2, r3
 800570c:	2100      	movs	r1, #0
 800570e:	2078      	movs	r0, #120	; 0x78
 8005710:	f000 f9d4 	bl	8005abc <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8005714:	2200      	movs	r2, #0
 8005716:	2100      	movs	r1, #0
 8005718:	2078      	movs	r0, #120	; 0x78
 800571a:	f000 f9cf 	bl	8005abc <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 800571e:	2210      	movs	r2, #16
 8005720:	2100      	movs	r1, #0
 8005722:	2078      	movs	r0, #120	; 0x78
 8005724:	f000 f9ca 	bl	8005abc <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8005728:	79fb      	ldrb	r3, [r7, #7]
 800572a:	01db      	lsls	r3, r3, #7
 800572c:	4a08      	ldr	r2, [pc, #32]	; (8005750 <SSD1306_UpdateScreen+0x58>)
 800572e:	441a      	add	r2, r3
 8005730:	2380      	movs	r3, #128	; 0x80
 8005732:	2140      	movs	r1, #64	; 0x40
 8005734:	2078      	movs	r0, #120	; 0x78
 8005736:	f000 f95b 	bl	80059f0 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 800573a:	79fb      	ldrb	r3, [r7, #7]
 800573c:	3301      	adds	r3, #1
 800573e:	71fb      	strb	r3, [r7, #7]
 8005740:	79fb      	ldrb	r3, [r7, #7]
 8005742:	2b07      	cmp	r3, #7
 8005744:	d9de      	bls.n	8005704 <SSD1306_UpdateScreen+0xc>
	}
}
 8005746:	bf00      	nop
 8005748:	bf00      	nop
 800574a:	3708      	adds	r7, #8
 800574c:	46bd      	mov	sp, r7
 800574e:	bd80      	pop	{r7, pc}
 8005750:	200001cc 	.word	0x200001cc

08005754 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8005754:	b580      	push	{r7, lr}
 8005756:	b082      	sub	sp, #8
 8005758:	af00      	add	r7, sp, #0
 800575a:	4603      	mov	r3, r0
 800575c:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800575e:	79fb      	ldrb	r3, [r7, #7]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d101      	bne.n	8005768 <SSD1306_Fill+0x14>
 8005764:	2300      	movs	r3, #0
 8005766:	e000      	b.n	800576a <SSD1306_Fill+0x16>
 8005768:	23ff      	movs	r3, #255	; 0xff
 800576a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800576e:	4619      	mov	r1, r3
 8005770:	4803      	ldr	r0, [pc, #12]	; (8005780 <SSD1306_Fill+0x2c>)
 8005772:	f000 fb3f 	bl	8005df4 <memset>
}
 8005776:	bf00      	nop
 8005778:	3708      	adds	r7, #8
 800577a:	46bd      	mov	sp, r7
 800577c:	bd80      	pop	{r7, pc}
 800577e:	bf00      	nop
 8005780:	200001cc 	.word	0x200001cc

08005784 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8005784:	b480      	push	{r7}
 8005786:	b083      	sub	sp, #12
 8005788:	af00      	add	r7, sp, #0
 800578a:	4603      	mov	r3, r0
 800578c:	80fb      	strh	r3, [r7, #6]
 800578e:	460b      	mov	r3, r1
 8005790:	80bb      	strh	r3, [r7, #4]
 8005792:	4613      	mov	r3, r2
 8005794:	70fb      	strb	r3, [r7, #3]
	if (
 8005796:	88fb      	ldrh	r3, [r7, #6]
 8005798:	2b7f      	cmp	r3, #127	; 0x7f
 800579a:	d848      	bhi.n	800582e <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 800579c:	88bb      	ldrh	r3, [r7, #4]
 800579e:	2b3f      	cmp	r3, #63	; 0x3f
 80057a0:	d845      	bhi.n	800582e <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 80057a2:	4b25      	ldr	r3, [pc, #148]	; (8005838 <SSD1306_DrawPixel+0xb4>)
 80057a4:	791b      	ldrb	r3, [r3, #4]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d006      	beq.n	80057b8 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 80057aa:	78fb      	ldrb	r3, [r7, #3]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	bf0c      	ite	eq
 80057b0:	2301      	moveq	r3, #1
 80057b2:	2300      	movne	r3, #0
 80057b4:	b2db      	uxtb	r3, r3
 80057b6:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 80057b8:	78fb      	ldrb	r3, [r7, #3]
 80057ba:	2b01      	cmp	r3, #1
 80057bc:	d11a      	bne.n	80057f4 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80057be:	88fa      	ldrh	r2, [r7, #6]
 80057c0:	88bb      	ldrh	r3, [r7, #4]
 80057c2:	08db      	lsrs	r3, r3, #3
 80057c4:	b298      	uxth	r0, r3
 80057c6:	4603      	mov	r3, r0
 80057c8:	01db      	lsls	r3, r3, #7
 80057ca:	4413      	add	r3, r2
 80057cc:	4a1b      	ldr	r2, [pc, #108]	; (800583c <SSD1306_DrawPixel+0xb8>)
 80057ce:	5cd3      	ldrb	r3, [r2, r3]
 80057d0:	b25a      	sxtb	r2, r3
 80057d2:	88bb      	ldrh	r3, [r7, #4]
 80057d4:	f003 0307 	and.w	r3, r3, #7
 80057d8:	2101      	movs	r1, #1
 80057da:	fa01 f303 	lsl.w	r3, r1, r3
 80057de:	b25b      	sxtb	r3, r3
 80057e0:	4313      	orrs	r3, r2
 80057e2:	b259      	sxtb	r1, r3
 80057e4:	88fa      	ldrh	r2, [r7, #6]
 80057e6:	4603      	mov	r3, r0
 80057e8:	01db      	lsls	r3, r3, #7
 80057ea:	4413      	add	r3, r2
 80057ec:	b2c9      	uxtb	r1, r1
 80057ee:	4a13      	ldr	r2, [pc, #76]	; (800583c <SSD1306_DrawPixel+0xb8>)
 80057f0:	54d1      	strb	r1, [r2, r3]
 80057f2:	e01d      	b.n	8005830 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80057f4:	88fa      	ldrh	r2, [r7, #6]
 80057f6:	88bb      	ldrh	r3, [r7, #4]
 80057f8:	08db      	lsrs	r3, r3, #3
 80057fa:	b298      	uxth	r0, r3
 80057fc:	4603      	mov	r3, r0
 80057fe:	01db      	lsls	r3, r3, #7
 8005800:	4413      	add	r3, r2
 8005802:	4a0e      	ldr	r2, [pc, #56]	; (800583c <SSD1306_DrawPixel+0xb8>)
 8005804:	5cd3      	ldrb	r3, [r2, r3]
 8005806:	b25a      	sxtb	r2, r3
 8005808:	88bb      	ldrh	r3, [r7, #4]
 800580a:	f003 0307 	and.w	r3, r3, #7
 800580e:	2101      	movs	r1, #1
 8005810:	fa01 f303 	lsl.w	r3, r1, r3
 8005814:	b25b      	sxtb	r3, r3
 8005816:	43db      	mvns	r3, r3
 8005818:	b25b      	sxtb	r3, r3
 800581a:	4013      	ands	r3, r2
 800581c:	b259      	sxtb	r1, r3
 800581e:	88fa      	ldrh	r2, [r7, #6]
 8005820:	4603      	mov	r3, r0
 8005822:	01db      	lsls	r3, r3, #7
 8005824:	4413      	add	r3, r2
 8005826:	b2c9      	uxtb	r1, r1
 8005828:	4a04      	ldr	r2, [pc, #16]	; (800583c <SSD1306_DrawPixel+0xb8>)
 800582a:	54d1      	strb	r1, [r2, r3]
 800582c:	e000      	b.n	8005830 <SSD1306_DrawPixel+0xac>
		return;
 800582e:	bf00      	nop
	}
}
 8005830:	370c      	adds	r7, #12
 8005832:	46bd      	mov	sp, r7
 8005834:	bc80      	pop	{r7}
 8005836:	4770      	bx	lr
 8005838:	200005cc 	.word	0x200005cc
 800583c:	200001cc 	.word	0x200001cc

08005840 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8005840:	b480      	push	{r7}
 8005842:	b083      	sub	sp, #12
 8005844:	af00      	add	r7, sp, #0
 8005846:	4603      	mov	r3, r0
 8005848:	460a      	mov	r2, r1
 800584a:	80fb      	strh	r3, [r7, #6]
 800584c:	4613      	mov	r3, r2
 800584e:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8005850:	4a05      	ldr	r2, [pc, #20]	; (8005868 <SSD1306_GotoXY+0x28>)
 8005852:	88fb      	ldrh	r3, [r7, #6]
 8005854:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8005856:	4a04      	ldr	r2, [pc, #16]	; (8005868 <SSD1306_GotoXY+0x28>)
 8005858:	88bb      	ldrh	r3, [r7, #4]
 800585a:	8053      	strh	r3, [r2, #2]
}
 800585c:	bf00      	nop
 800585e:	370c      	adds	r7, #12
 8005860:	46bd      	mov	sp, r7
 8005862:	bc80      	pop	{r7}
 8005864:	4770      	bx	lr
 8005866:	bf00      	nop
 8005868:	200005cc 	.word	0x200005cc

0800586c <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 800586c:	b580      	push	{r7, lr}
 800586e:	b086      	sub	sp, #24
 8005870:	af00      	add	r7, sp, #0
 8005872:	4603      	mov	r3, r0
 8005874:	6039      	str	r1, [r7, #0]
 8005876:	71fb      	strb	r3, [r7, #7]
 8005878:	4613      	mov	r3, r2
 800587a:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 800587c:	4b3a      	ldr	r3, [pc, #232]	; (8005968 <SSD1306_Putc+0xfc>)
 800587e:	881b      	ldrh	r3, [r3, #0]
 8005880:	461a      	mov	r2, r3
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	781b      	ldrb	r3, [r3, #0]
 8005886:	4413      	add	r3, r2
	if (
 8005888:	2b7f      	cmp	r3, #127	; 0x7f
 800588a:	dc07      	bgt.n	800589c <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 800588c:	4b36      	ldr	r3, [pc, #216]	; (8005968 <SSD1306_Putc+0xfc>)
 800588e:	885b      	ldrh	r3, [r3, #2]
 8005890:	461a      	mov	r2, r3
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	785b      	ldrb	r3, [r3, #1]
 8005896:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8005898:	2b3f      	cmp	r3, #63	; 0x3f
 800589a:	dd01      	ble.n	80058a0 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 800589c:	2300      	movs	r3, #0
 800589e:	e05e      	b.n	800595e <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 80058a0:	2300      	movs	r3, #0
 80058a2:	617b      	str	r3, [r7, #20]
 80058a4:	e04b      	b.n	800593e <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	685a      	ldr	r2, [r3, #4]
 80058aa:	79fb      	ldrb	r3, [r7, #7]
 80058ac:	3b20      	subs	r3, #32
 80058ae:	6839      	ldr	r1, [r7, #0]
 80058b0:	7849      	ldrb	r1, [r1, #1]
 80058b2:	fb01 f303 	mul.w	r3, r1, r3
 80058b6:	4619      	mov	r1, r3
 80058b8:	697b      	ldr	r3, [r7, #20]
 80058ba:	440b      	add	r3, r1
 80058bc:	005b      	lsls	r3, r3, #1
 80058be:	4413      	add	r3, r2
 80058c0:	881b      	ldrh	r3, [r3, #0]
 80058c2:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 80058c4:	2300      	movs	r3, #0
 80058c6:	613b      	str	r3, [r7, #16]
 80058c8:	e030      	b.n	800592c <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 80058ca:	68fa      	ldr	r2, [r7, #12]
 80058cc:	693b      	ldr	r3, [r7, #16]
 80058ce:	fa02 f303 	lsl.w	r3, r2, r3
 80058d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d010      	beq.n	80058fc <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 80058da:	4b23      	ldr	r3, [pc, #140]	; (8005968 <SSD1306_Putc+0xfc>)
 80058dc:	881a      	ldrh	r2, [r3, #0]
 80058de:	693b      	ldr	r3, [r7, #16]
 80058e0:	b29b      	uxth	r3, r3
 80058e2:	4413      	add	r3, r2
 80058e4:	b298      	uxth	r0, r3
 80058e6:	4b20      	ldr	r3, [pc, #128]	; (8005968 <SSD1306_Putc+0xfc>)
 80058e8:	885a      	ldrh	r2, [r3, #2]
 80058ea:	697b      	ldr	r3, [r7, #20]
 80058ec:	b29b      	uxth	r3, r3
 80058ee:	4413      	add	r3, r2
 80058f0:	b29b      	uxth	r3, r3
 80058f2:	79ba      	ldrb	r2, [r7, #6]
 80058f4:	4619      	mov	r1, r3
 80058f6:	f7ff ff45 	bl	8005784 <SSD1306_DrawPixel>
 80058fa:	e014      	b.n	8005926 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 80058fc:	4b1a      	ldr	r3, [pc, #104]	; (8005968 <SSD1306_Putc+0xfc>)
 80058fe:	881a      	ldrh	r2, [r3, #0]
 8005900:	693b      	ldr	r3, [r7, #16]
 8005902:	b29b      	uxth	r3, r3
 8005904:	4413      	add	r3, r2
 8005906:	b298      	uxth	r0, r3
 8005908:	4b17      	ldr	r3, [pc, #92]	; (8005968 <SSD1306_Putc+0xfc>)
 800590a:	885a      	ldrh	r2, [r3, #2]
 800590c:	697b      	ldr	r3, [r7, #20]
 800590e:	b29b      	uxth	r3, r3
 8005910:	4413      	add	r3, r2
 8005912:	b299      	uxth	r1, r3
 8005914:	79bb      	ldrb	r3, [r7, #6]
 8005916:	2b00      	cmp	r3, #0
 8005918:	bf0c      	ite	eq
 800591a:	2301      	moveq	r3, #1
 800591c:	2300      	movne	r3, #0
 800591e:	b2db      	uxtb	r3, r3
 8005920:	461a      	mov	r2, r3
 8005922:	f7ff ff2f 	bl	8005784 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8005926:	693b      	ldr	r3, [r7, #16]
 8005928:	3301      	adds	r3, #1
 800592a:	613b      	str	r3, [r7, #16]
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	781b      	ldrb	r3, [r3, #0]
 8005930:	461a      	mov	r2, r3
 8005932:	693b      	ldr	r3, [r7, #16]
 8005934:	4293      	cmp	r3, r2
 8005936:	d3c8      	bcc.n	80058ca <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8005938:	697b      	ldr	r3, [r7, #20]
 800593a:	3301      	adds	r3, #1
 800593c:	617b      	str	r3, [r7, #20]
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	785b      	ldrb	r3, [r3, #1]
 8005942:	461a      	mov	r2, r3
 8005944:	697b      	ldr	r3, [r7, #20]
 8005946:	4293      	cmp	r3, r2
 8005948:	d3ad      	bcc.n	80058a6 <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 800594a:	4b07      	ldr	r3, [pc, #28]	; (8005968 <SSD1306_Putc+0xfc>)
 800594c:	881a      	ldrh	r2, [r3, #0]
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	781b      	ldrb	r3, [r3, #0]
 8005952:	b29b      	uxth	r3, r3
 8005954:	4413      	add	r3, r2
 8005956:	b29a      	uxth	r2, r3
 8005958:	4b03      	ldr	r3, [pc, #12]	; (8005968 <SSD1306_Putc+0xfc>)
 800595a:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 800595c:	79fb      	ldrb	r3, [r7, #7]
}
 800595e:	4618      	mov	r0, r3
 8005960:	3718      	adds	r7, #24
 8005962:	46bd      	mov	sp, r7
 8005964:	bd80      	pop	{r7, pc}
 8005966:	bf00      	nop
 8005968:	200005cc 	.word	0x200005cc

0800596c <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 800596c:	b580      	push	{r7, lr}
 800596e:	b084      	sub	sp, #16
 8005970:	af00      	add	r7, sp, #0
 8005972:	60f8      	str	r0, [r7, #12]
 8005974:	60b9      	str	r1, [r7, #8]
 8005976:	4613      	mov	r3, r2
 8005978:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 800597a:	e012      	b.n	80059a2 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	781b      	ldrb	r3, [r3, #0]
 8005980:	79fa      	ldrb	r2, [r7, #7]
 8005982:	68b9      	ldr	r1, [r7, #8]
 8005984:	4618      	mov	r0, r3
 8005986:	f7ff ff71 	bl	800586c <SSD1306_Putc>
 800598a:	4603      	mov	r3, r0
 800598c:	461a      	mov	r2, r3
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	781b      	ldrb	r3, [r3, #0]
 8005992:	429a      	cmp	r2, r3
 8005994:	d002      	beq.n	800599c <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	781b      	ldrb	r3, [r3, #0]
 800599a:	e008      	b.n	80059ae <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	3301      	adds	r3, #1
 80059a0:	60fb      	str	r3, [r7, #12]
	while (*str) {
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	781b      	ldrb	r3, [r3, #0]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d1e8      	bne.n	800597c <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	781b      	ldrb	r3, [r3, #0]
}
 80059ae:	4618      	mov	r0, r3
 80059b0:	3710      	adds	r7, #16
 80059b2:	46bd      	mov	sp, r7
 80059b4:	bd80      	pop	{r7, pc}

080059b6 <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 80059b6:	b580      	push	{r7, lr}
 80059b8:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 80059ba:	2000      	movs	r0, #0
 80059bc:	f7ff feca 	bl	8005754 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 80059c0:	f7ff fe9a 	bl	80056f8 <SSD1306_UpdateScreen>
}
 80059c4:	bf00      	nop
 80059c6:	bd80      	pop	{r7, pc}

080059c8 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 80059c8:	b480      	push	{r7}
 80059ca:	b083      	sub	sp, #12
 80059cc:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 80059ce:	4b07      	ldr	r3, [pc, #28]	; (80059ec <ssd1306_I2C_Init+0x24>)
 80059d0:	607b      	str	r3, [r7, #4]
	while(p>0)
 80059d2:	e002      	b.n	80059da <ssd1306_I2C_Init+0x12>
		p--;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	3b01      	subs	r3, #1
 80059d8:	607b      	str	r3, [r7, #4]
	while(p>0)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d1f9      	bne.n	80059d4 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 80059e0:	bf00      	nop
 80059e2:	bf00      	nop
 80059e4:	370c      	adds	r7, #12
 80059e6:	46bd      	mov	sp, r7
 80059e8:	bc80      	pop	{r7}
 80059ea:	4770      	bx	lr
 80059ec:	0003d090 	.word	0x0003d090

080059f0 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 80059f0:	b590      	push	{r4, r7, lr}
 80059f2:	b0c7      	sub	sp, #284	; 0x11c
 80059f4:	af02      	add	r7, sp, #8
 80059f6:	4604      	mov	r4, r0
 80059f8:	4608      	mov	r0, r1
 80059fa:	f507 7188 	add.w	r1, r7, #272	; 0x110
 80059fe:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 8005a02:	600a      	str	r2, [r1, #0]
 8005a04:	4619      	mov	r1, r3
 8005a06:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005a0a:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8005a0e:	4622      	mov	r2, r4
 8005a10:	701a      	strb	r2, [r3, #0]
 8005a12:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005a16:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8005a1a:	4602      	mov	r2, r0
 8005a1c:	701a      	strb	r2, [r3, #0]
 8005a1e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005a22:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005a26:	460a      	mov	r2, r1
 8005a28:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8005a2a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005a2e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005a32:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8005a36:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 8005a3a:	7812      	ldrb	r2, [r2, #0]
 8005a3c:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8005a3e:	2300      	movs	r3, #0
 8005a40:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8005a44:	e015      	b.n	8005a72 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8005a46:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8005a4a:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8005a4e:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8005a52:	6812      	ldr	r2, [r2, #0]
 8005a54:	441a      	add	r2, r3
 8005a56:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8005a5a:	3301      	adds	r3, #1
 8005a5c:	7811      	ldrb	r1, [r2, #0]
 8005a5e:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8005a62:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8005a66:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8005a68:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8005a6c:	3301      	adds	r3, #1
 8005a6e:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8005a72:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8005a76:	b29b      	uxth	r3, r3
 8005a78:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8005a7c:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8005a80:	8812      	ldrh	r2, [r2, #0]
 8005a82:	429a      	cmp	r2, r3
 8005a84:	d8df      	bhi.n	8005a46 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8005a86:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005a8a:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8005a8e:	781b      	ldrb	r3, [r3, #0]
 8005a90:	b299      	uxth	r1, r3
 8005a92:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005a96:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005a9a:	881b      	ldrh	r3, [r3, #0]
 8005a9c:	3301      	adds	r3, #1
 8005a9e:	b29b      	uxth	r3, r3
 8005aa0:	f107 020c 	add.w	r2, r7, #12
 8005aa4:	200a      	movs	r0, #10
 8005aa6:	9000      	str	r0, [sp, #0]
 8005aa8:	4803      	ldr	r0, [pc, #12]	; (8005ab8 <ssd1306_I2C_WriteMulti+0xc8>)
 8005aaa:	f7fc fea9 	bl	8002800 <HAL_I2C_Master_Transmit>
}
 8005aae:	bf00      	nop
 8005ab0:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	bd90      	pop	{r4, r7, pc}
 8005ab8:	200000a4 	.word	0x200000a4

08005abc <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b086      	sub	sp, #24
 8005ac0:	af02      	add	r7, sp, #8
 8005ac2:	4603      	mov	r3, r0
 8005ac4:	71fb      	strb	r3, [r7, #7]
 8005ac6:	460b      	mov	r3, r1
 8005ac8:	71bb      	strb	r3, [r7, #6]
 8005aca:	4613      	mov	r3, r2
 8005acc:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8005ace:	79bb      	ldrb	r3, [r7, #6]
 8005ad0:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8005ad2:	797b      	ldrb	r3, [r7, #5]
 8005ad4:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8005ad6:	79fb      	ldrb	r3, [r7, #7]
 8005ad8:	b299      	uxth	r1, r3
 8005ada:	f107 020c 	add.w	r2, r7, #12
 8005ade:	230a      	movs	r3, #10
 8005ae0:	9300      	str	r3, [sp, #0]
 8005ae2:	2302      	movs	r3, #2
 8005ae4:	4803      	ldr	r0, [pc, #12]	; (8005af4 <ssd1306_I2C_Write+0x38>)
 8005ae6:	f7fc fe8b 	bl	8002800 <HAL_I2C_Master_Transmit>
}
 8005aea:	bf00      	nop
 8005aec:	3710      	adds	r7, #16
 8005aee:	46bd      	mov	sp, r7
 8005af0:	bd80      	pop	{r7, pc}
 8005af2:	bf00      	nop
 8005af4:	200000a4 	.word	0x200000a4

08005af8 <ResetCommand>:
 * 
 * @param Rojo_BH1750: Structture that handles the sensor
 * @return Rojo_Status 
 */
static Rojo_Status ResetCommand(Rojo_BH1750 *Rojo_BH1750)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b084      	sub	sp, #16
 8005afc:	af02      	add	r7, sp, #8
 8005afe:	6078      	str	r0, [r7, #4]
	Buffer = Reset;
 8005b00:	4b0b      	ldr	r3, [pc, #44]	; (8005b30 <ResetCommand+0x38>)
 8005b02:	2207      	movs	r2, #7
 8005b04:	701a      	strb	r2, [r3, #0]
	if(HAL_I2C_Master_Transmit(Rojo_BH1750 -> I2C, Rojo_BH1750 -> Address, &Buffer, 1, 100) != HAL_OK)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6818      	ldr	r0, [r3, #0]
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	791b      	ldrb	r3, [r3, #4]
 8005b0e:	b299      	uxth	r1, r3
 8005b10:	2364      	movs	r3, #100	; 0x64
 8005b12:	9300      	str	r3, [sp, #0]
 8005b14:	2301      	movs	r3, #1
 8005b16:	4a06      	ldr	r2, [pc, #24]	; (8005b30 <ResetCommand+0x38>)
 8005b18:	f7fc fe72 	bl	8002800 <HAL_I2C_Master_Transmit>
 8005b1c:	4603      	mov	r3, r0
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d001      	beq.n	8005b26 <ResetCommand+0x2e>
		return Rojo_Error;
 8005b22:	2308      	movs	r3, #8
 8005b24:	e000      	b.n	8005b28 <ResetCommand+0x30>
	else
		return Rojo_OK;
 8005b26:	2300      	movs	r3, #0
}
 8005b28:	4618      	mov	r0, r3
 8005b2a:	3708      	adds	r7, #8
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	bd80      	pop	{r7, pc}
 8005b30:	200005d2 	.word	0x200005d2

08005b34 <PowerOnCommand>:
 * 
 * @param Rojo_BH1750: Structture that handles the sensor
 * @return Rojo_Status 
 */
static Rojo_Status PowerOnCommand(Rojo_BH1750 *Rojo_BH1750)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b084      	sub	sp, #16
 8005b38:	af02      	add	r7, sp, #8
 8005b3a:	6078      	str	r0, [r7, #4]
	Buffer = PowerOn;
 8005b3c:	4b0b      	ldr	r3, [pc, #44]	; (8005b6c <PowerOnCommand+0x38>)
 8005b3e:	2201      	movs	r2, #1
 8005b40:	701a      	strb	r2, [r3, #0]
	if(HAL_I2C_Master_Transmit(Rojo_BH1750 -> I2C, Rojo_BH1750 -> Address, &Buffer, 1, 100) != HAL_OK)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6818      	ldr	r0, [r3, #0]
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	791b      	ldrb	r3, [r3, #4]
 8005b4a:	b299      	uxth	r1, r3
 8005b4c:	2364      	movs	r3, #100	; 0x64
 8005b4e:	9300      	str	r3, [sp, #0]
 8005b50:	2301      	movs	r3, #1
 8005b52:	4a06      	ldr	r2, [pc, #24]	; (8005b6c <PowerOnCommand+0x38>)
 8005b54:	f7fc fe54 	bl	8002800 <HAL_I2C_Master_Transmit>
 8005b58:	4603      	mov	r3, r0
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d001      	beq.n	8005b62 <PowerOnCommand+0x2e>
		return Rojo_Error;
 8005b5e:	2308      	movs	r3, #8
 8005b60:	e000      	b.n	8005b64 <PowerOnCommand+0x30>
	else
		return Rojo_OK;
 8005b62:	2300      	movs	r3, #0
}
 8005b64:	4618      	mov	r0, r3
 8005b66:	3708      	adds	r7, #8
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	bd80      	pop	{r7, pc}
 8005b6c:	200005d2 	.word	0x200005d2

08005b70 <PowerDownCommand>:
 * 
 * @param Rojo_BH1750: Structture that handles the sensor
 * @return Rojo_Status 
 */
static Rojo_Status PowerDownCommand(Rojo_BH1750 *Rojo_BH1750)
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b084      	sub	sp, #16
 8005b74:	af02      	add	r7, sp, #8
 8005b76:	6078      	str	r0, [r7, #4]
	Buffer = PowerDown;
 8005b78:	4b0b      	ldr	r3, [pc, #44]	; (8005ba8 <PowerDownCommand+0x38>)
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	701a      	strb	r2, [r3, #0]
	if(HAL_I2C_Master_Transmit(Rojo_BH1750 -> I2C, Rojo_BH1750 -> Address, &Buffer, 1, 100) != HAL_OK)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6818      	ldr	r0, [r3, #0]
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	791b      	ldrb	r3, [r3, #4]
 8005b86:	b299      	uxth	r1, r3
 8005b88:	2364      	movs	r3, #100	; 0x64
 8005b8a:	9300      	str	r3, [sp, #0]
 8005b8c:	2301      	movs	r3, #1
 8005b8e:	4a06      	ldr	r2, [pc, #24]	; (8005ba8 <PowerDownCommand+0x38>)
 8005b90:	f7fc fe36 	bl	8002800 <HAL_I2C_Master_Transmit>
 8005b94:	4603      	mov	r3, r0
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d001      	beq.n	8005b9e <PowerDownCommand+0x2e>
		return Rojo_Error;
 8005b9a:	2308      	movs	r3, #8
 8005b9c:	e000      	b.n	8005ba0 <PowerDownCommand+0x30>
	else
		return Rojo_OK;
 8005b9e:	2300      	movs	r3, #0
}
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	3708      	adds	r7, #8
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	bd80      	pop	{r7, pc}
 8005ba8:	200005d2 	.word	0x200005d2

08005bac <Measure_Subrutine>:
 * 
 * @param Rojo_BH1750: Structture that handles the sensor
 * @return uint16_t: Value of the meausure in 16 bit code (Not luxes)
 */
static uint16_t Measure_Subrutine(Rojo_BH1750 *Rojo_BH1750)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b086      	sub	sp, #24
 8005bb0:	af02      	add	r7, sp, #8
 8005bb2:	6078      	str	r0, [r7, #4]
	uint8_t Data[2];
	switch(Rojo_BH1750 -> Resolution)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	795b      	ldrb	r3, [r3, #5]
 8005bb8:	2b02      	cmp	r3, #2
 8005bba:	d00e      	beq.n	8005bda <Measure_Subrutine+0x2e>
 8005bbc:	2b02      	cmp	r3, #2
 8005bbe:	dc10      	bgt.n	8005be2 <Measure_Subrutine+0x36>
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d002      	beq.n	8005bca <Measure_Subrutine+0x1e>
 8005bc4:	2b01      	cmp	r3, #1
 8005bc6:	d004      	beq.n	8005bd2 <Measure_Subrutine+0x26>
 8005bc8:	e00b      	b.n	8005be2 <Measure_Subrutine+0x36>
	{
		case High_Res:
			Buffer = Continuously_H_ResolutionMode2;
 8005bca:	4b22      	ldr	r3, [pc, #136]	; (8005c54 <Measure_Subrutine+0xa8>)
 8005bcc:	2211      	movs	r2, #17
 8005bce:	701a      	strb	r2, [r3, #0]
		break;
 8005bd0:	e009      	b.n	8005be6 <Measure_Subrutine+0x3a>
		case Medium_Res:
			Buffer = Continuously_H_ResolutionMode;
 8005bd2:	4b20      	ldr	r3, [pc, #128]	; (8005c54 <Measure_Subrutine+0xa8>)
 8005bd4:	2210      	movs	r2, #16
 8005bd6:	701a      	strb	r2, [r3, #0]
		break;
 8005bd8:	e005      	b.n	8005be6 <Measure_Subrutine+0x3a>
		case Low_Res:
			Buffer = Continuously_L_ResolutionMode;
 8005bda:	4b1e      	ldr	r3, [pc, #120]	; (8005c54 <Measure_Subrutine+0xa8>)
 8005bdc:	2213      	movs	r2, #19
 8005bde:	701a      	strb	r2, [r3, #0]
		break;
 8005be0:	e001      	b.n	8005be6 <Measure_Subrutine+0x3a>
		default:
			return 0;
 8005be2:	2300      	movs	r3, #0
 8005be4:	e031      	b.n	8005c4a <Measure_Subrutine+0x9e>
		break;
	}
	Rojo_BH1750 -> Status = Busy;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2201      	movs	r2, #1
 8005bea:	719a      	strb	r2, [r3, #6]
	if(HAL_I2C_Master_Transmit(Rojo_BH1750 -> I2C, Rojo_BH1750 -> Address, &Buffer, 1, 100) != HAL_OK)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6818      	ldr	r0, [r3, #0]
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	791b      	ldrb	r3, [r3, #4]
 8005bf4:	b299      	uxth	r1, r3
 8005bf6:	2364      	movs	r3, #100	; 0x64
 8005bf8:	9300      	str	r3, [sp, #0]
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	4a15      	ldr	r2, [pc, #84]	; (8005c54 <Measure_Subrutine+0xa8>)
 8005bfe:	f7fc fdff 	bl	8002800 <HAL_I2C_Master_Transmit>
 8005c02:	4603      	mov	r3, r0
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d001      	beq.n	8005c0c <Measure_Subrutine+0x60>
		return 0;
 8005c08:	2300      	movs	r3, #0
 8005c0a:	e01e      	b.n	8005c4a <Measure_Subrutine+0x9e>
	HAL_Delay(120);
 8005c0c:	2078      	movs	r0, #120	; 0x78
 8005c0e:	f7fc f957 	bl	8001ec0 <HAL_Delay>
	if(HAL_I2C_Master_Receive(Rojo_BH1750 -> I2C, Rojo_BH1750 -> Address, Data, 2, 100) != HAL_OK)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6818      	ldr	r0, [r3, #0]
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	791b      	ldrb	r3, [r3, #4]
 8005c1a:	b299      	uxth	r1, r3
 8005c1c:	f107 020c 	add.w	r2, r7, #12
 8005c20:	2364      	movs	r3, #100	; 0x64
 8005c22:	9300      	str	r3, [sp, #0]
 8005c24:	2302      	movs	r3, #2
 8005c26:	f7fc fee9 	bl	80029fc <HAL_I2C_Master_Receive>
 8005c2a:	4603      	mov	r3, r0
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d001      	beq.n	8005c34 <Measure_Subrutine+0x88>
		return 0;
 8005c30:	2300      	movs	r3, #0
 8005c32:	e00a      	b.n	8005c4a <Measure_Subrutine+0x9e>
	Rojo_BH1750 -> Status = Standby;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2200      	movs	r2, #0
 8005c38:	719a      	strb	r2, [r3, #6]
	return (uint16_t) (Data[0] << 8 | Data[1]);
 8005c3a:	7b3b      	ldrb	r3, [r7, #12]
 8005c3c:	021b      	lsls	r3, r3, #8
 8005c3e:	b21a      	sxth	r2, r3
 8005c40:	7b7b      	ldrb	r3, [r7, #13]
 8005c42:	b21b      	sxth	r3, r3
 8005c44:	4313      	orrs	r3, r2
 8005c46:	b21b      	sxth	r3, r3
 8005c48:	b29b      	uxth	r3, r3
}
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	3710      	adds	r7, #16
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	bd80      	pop	{r7, pc}
 8005c52:	bf00      	nop
 8005c54:	200005d2 	.word	0x200005d2

08005c58 <BH1750_Init>:

/*END OF STATIC ZONE*/

Rojo_Status BH1750_Init(Rojo_BH1750 *Rojo_BH1750, I2C_HandleTypeDef *hi2c, uint8_t Address)
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b084      	sub	sp, #16
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	60f8      	str	r0, [r7, #12]
 8005c60:	60b9      	str	r1, [r7, #8]
 8005c62:	4613      	mov	r3, r2
 8005c64:	71fb      	strb	r3, [r7, #7]

	Rojo_BH1750 -> I2C = hi2c;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	68ba      	ldr	r2, [r7, #8]
 8005c6a:	601a      	str	r2, [r3, #0]
	Rojo_BH1750 -> Address = Address;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	79fa      	ldrb	r2, [r7, #7]
 8005c70:	711a      	strb	r2, [r3, #4]
	Rojo_BH1750 -> Resolution = Medium_Res;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	2201      	movs	r2, #1
 8005c76:	715a      	strb	r2, [r3, #5]
	Rojo_BH1750 -> Status = Standby;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	719a      	strb	r2, [r3, #6]
	Rojo_BH1750 -> Value = 0;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	2200      	movs	r2, #0
 8005c82:	811a      	strh	r2, [r3, #8]
	if(PowerOnCommand(Rojo_BH1750) != Rojo_OK) //Waking the sensor logic
 8005c84:	68f8      	ldr	r0, [r7, #12]
 8005c86:	f7ff ff55 	bl	8005b34 <PowerOnCommand>
 8005c8a:	4603      	mov	r3, r0
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d001      	beq.n	8005c94 <BH1750_Init+0x3c>
		return Rojo_Error;
 8005c90:	2308      	movs	r3, #8
 8005c92:	e00b      	b.n	8005cac <BH1750_Init+0x54>
	HAL_Delay(10);
 8005c94:	200a      	movs	r0, #10
 8005c96:	f7fc f913 	bl	8001ec0 <HAL_Delay>
	if(ResetCommand(Rojo_BH1750) != Rojo_OK) //Clearing all the register of the sensor
 8005c9a:	68f8      	ldr	r0, [r7, #12]
 8005c9c:	f7ff ff2c 	bl	8005af8 <ResetCommand>
 8005ca0:	4603      	mov	r3, r0
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d001      	beq.n	8005caa <BH1750_Init+0x52>
		return Rojo_Error;
 8005ca6:	2308      	movs	r3, #8
 8005ca8:	e000      	b.n	8005cac <BH1750_Init+0x54>
	return Rojo_OK;
 8005caa:	2300      	movs	r3, #0
}
 8005cac:	4618      	mov	r0, r3
 8005cae:	3710      	adds	r7, #16
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	bd80      	pop	{r7, pc}

08005cb4 <BH1750_Read>:

Rojo_Status BH1750_Read(Rojo_BH1750 *Rojo_BH1750, float *Measure)
{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b084      	sub	sp, #16
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
 8005cbc:	6039      	str	r1, [r7, #0]
	uint16_t RegisterValue;
	switch(Rojo_BH1750 -> Status)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	799b      	ldrb	r3, [r3, #6]
 8005cc2:	2b02      	cmp	r3, #2
 8005cc4:	d012      	beq.n	8005cec <BH1750_Read+0x38>
 8005cc6:	2b02      	cmp	r3, #2
 8005cc8:	dc21      	bgt.n	8005d0e <BH1750_Read+0x5a>
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d008      	beq.n	8005ce0 <BH1750_Read+0x2c>
 8005cce:	2b01      	cmp	r3, #1
 8005cd0:	d11d      	bne.n	8005d0e <BH1750_Read+0x5a>
	{
		case Busy:
			RegisterValue = Rojo_BH1750 -> Value;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	891b      	ldrh	r3, [r3, #8]
 8005cd6:	81fb      	strh	r3, [r7, #14]
			Rojo_BH1750 -> Status = Standby;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2200      	movs	r2, #0
 8005cdc:	719a      	strb	r2, [r3, #6]
		break;
 8005cde:	e018      	b.n	8005d12 <BH1750_Read+0x5e>
		case Standby:
			RegisterValue = Measure_Subrutine(Rojo_BH1750);
 8005ce0:	6878      	ldr	r0, [r7, #4]
 8005ce2:	f7ff ff63 	bl	8005bac <Measure_Subrutine>
 8005ce6:	4603      	mov	r3, r0
 8005ce8:	81fb      	strh	r3, [r7, #14]
		break;
 8005cea:	e012      	b.n	8005d12 <BH1750_Read+0x5e>
		case Sleep:
			if(PowerDownCommand(Rojo_BH1750) != Rojo_OK)
 8005cec:	6878      	ldr	r0, [r7, #4]
 8005cee:	f7ff ff3f 	bl	8005b70 <PowerDownCommand>
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d001      	beq.n	8005cfc <BH1750_Read+0x48>
				return Rojo_Error;
 8005cf8:	2308      	movs	r3, #8
 8005cfa:	e01d      	b.n	8005d38 <BH1750_Read+0x84>
			HAL_Delay(10);
 8005cfc:	200a      	movs	r0, #10
 8005cfe:	f7fc f8df 	bl	8001ec0 <HAL_Delay>
			RegisterValue = Measure_Subrutine(Rojo_BH1750);
 8005d02:	6878      	ldr	r0, [r7, #4]
 8005d04:	f7ff ff52 	bl	8005bac <Measure_Subrutine>
 8005d08:	4603      	mov	r3, r0
 8005d0a:	81fb      	strh	r3, [r7, #14]
		break;
 8005d0c:	e001      	b.n	8005d12 <BH1750_Read+0x5e>
		default:
			return Rojo_Error;
 8005d0e:	2308      	movs	r3, #8
 8005d10:	e012      	b.n	8005d38 <BH1750_Read+0x84>
		break;
	}
	*Measure = RegisterValue / 1.2;
 8005d12:	89fb      	ldrh	r3, [r7, #14]
 8005d14:	4618      	mov	r0, r3
 8005d16:	f7fa fc1f 	bl	8000558 <__aeabi_i2d>
 8005d1a:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8005d1e:	4b08      	ldr	r3, [pc, #32]	; (8005d40 <BH1750_Read+0x8c>)
 8005d20:	f7fa fdae 	bl	8000880 <__aeabi_ddiv>
 8005d24:	4602      	mov	r2, r0
 8005d26:	460b      	mov	r3, r1
 8005d28:	4610      	mov	r0, r2
 8005d2a:	4619      	mov	r1, r3
 8005d2c:	f7fa fe90 	bl	8000a50 <__aeabi_d2f>
 8005d30:	4602      	mov	r2, r0
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	601a      	str	r2, [r3, #0]
	return Rojo_OK;
 8005d36:	2300      	movs	r3, #0
}
 8005d38:	4618      	mov	r0, r3
 8005d3a:	3710      	adds	r7, #16
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	bd80      	pop	{r7, pc}
 8005d40:	3ff33333 	.word	0x3ff33333

08005d44 <BH1750_ReCalibrate>:

Rojo_Status BH1750_ReCalibrate(Rojo_BH1750 *Rojo_BH1750)
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b082      	sub	sp, #8
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
	switch(Rojo_BH1750 -> Status)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	799b      	ldrb	r3, [r3, #6]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d002      	beq.n	8005d5a <BH1750_ReCalibrate+0x16>
 8005d54:	2b02      	cmp	r3, #2
 8005d56:	d008      	beq.n	8005d6a <BH1750_ReCalibrate+0x26>
 8005d58:	e017      	b.n	8005d8a <BH1750_ReCalibrate+0x46>
	{
		case Standby:
			if(ResetCommand(Rojo_BH1750) != Rojo_OK) //Just making the reset
 8005d5a:	6878      	ldr	r0, [r7, #4]
 8005d5c:	f7ff fecc 	bl	8005af8 <ResetCommand>
 8005d60:	4603      	mov	r3, r0
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d013      	beq.n	8005d8e <BH1750_ReCalibrate+0x4a>
				return Rojo_Error;
 8005d66:	2308      	movs	r3, #8
 8005d68:	e015      	b.n	8005d96 <BH1750_ReCalibrate+0x52>
		break;
		case Sleep:
			if(PowerOnCommand(Rojo_BH1750) != Rojo_OK) //Waking up the sensor logic
 8005d6a:	6878      	ldr	r0, [r7, #4]
 8005d6c:	f7ff fee2 	bl	8005b34 <PowerOnCommand>
 8005d70:	4603      	mov	r3, r0
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d001      	beq.n	8005d7a <BH1750_ReCalibrate+0x36>
				return Rojo_Error;
 8005d76:	2308      	movs	r3, #8
 8005d78:	e00d      	b.n	8005d96 <BH1750_ReCalibrate+0x52>
			if(ResetCommand(Rojo_BH1750) != Rojo_OK) //Making the reset
 8005d7a:	6878      	ldr	r0, [r7, #4]
 8005d7c:	f7ff febc 	bl	8005af8 <ResetCommand>
 8005d80:	4603      	mov	r3, r0
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d005      	beq.n	8005d92 <BH1750_ReCalibrate+0x4e>
				return Rojo_Error;
 8005d86:	2308      	movs	r3, #8
 8005d88:	e005      	b.n	8005d96 <BH1750_ReCalibrate+0x52>
		break;
		default:
			return Rojo_Error;
 8005d8a:	2308      	movs	r3, #8
 8005d8c:	e003      	b.n	8005d96 <BH1750_ReCalibrate+0x52>
		break;
 8005d8e:	bf00      	nop
 8005d90:	e000      	b.n	8005d94 <BH1750_ReCalibrate+0x50>
		break;
 8005d92:	bf00      	nop
		break;
	}
	return Rojo_OK;
 8005d94:	2300      	movs	r3, #0
}
 8005d96:	4618      	mov	r0, r3
 8005d98:	3708      	adds	r7, #8
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	bd80      	pop	{r7, pc}
	...

08005da0 <__errno>:
 8005da0:	4b01      	ldr	r3, [pc, #4]	; (8005da8 <__errno+0x8>)
 8005da2:	6818      	ldr	r0, [r3, #0]
 8005da4:	4770      	bx	lr
 8005da6:	bf00      	nop
 8005da8:	20000024 	.word	0x20000024

08005dac <__libc_init_array>:
 8005dac:	b570      	push	{r4, r5, r6, lr}
 8005dae:	2600      	movs	r6, #0
 8005db0:	4d0c      	ldr	r5, [pc, #48]	; (8005de4 <__libc_init_array+0x38>)
 8005db2:	4c0d      	ldr	r4, [pc, #52]	; (8005de8 <__libc_init_array+0x3c>)
 8005db4:	1b64      	subs	r4, r4, r5
 8005db6:	10a4      	asrs	r4, r4, #2
 8005db8:	42a6      	cmp	r6, r4
 8005dba:	d109      	bne.n	8005dd0 <__libc_init_array+0x24>
 8005dbc:	f000 fc9c 	bl	80066f8 <_init>
 8005dc0:	2600      	movs	r6, #0
 8005dc2:	4d0a      	ldr	r5, [pc, #40]	; (8005dec <__libc_init_array+0x40>)
 8005dc4:	4c0a      	ldr	r4, [pc, #40]	; (8005df0 <__libc_init_array+0x44>)
 8005dc6:	1b64      	subs	r4, r4, r5
 8005dc8:	10a4      	asrs	r4, r4, #2
 8005dca:	42a6      	cmp	r6, r4
 8005dcc:	d105      	bne.n	8005dda <__libc_init_array+0x2e>
 8005dce:	bd70      	pop	{r4, r5, r6, pc}
 8005dd0:	f855 3b04 	ldr.w	r3, [r5], #4
 8005dd4:	4798      	blx	r3
 8005dd6:	3601      	adds	r6, #1
 8005dd8:	e7ee      	b.n	8005db8 <__libc_init_array+0xc>
 8005dda:	f855 3b04 	ldr.w	r3, [r5], #4
 8005dde:	4798      	blx	r3
 8005de0:	3601      	adds	r6, #1
 8005de2:	e7f2      	b.n	8005dca <__libc_init_array+0x1e>
 8005de4:	080090c0 	.word	0x080090c0
 8005de8:	080090c0 	.word	0x080090c0
 8005dec:	080090c0 	.word	0x080090c0
 8005df0:	080090c4 	.word	0x080090c4

08005df4 <memset>:
 8005df4:	4603      	mov	r3, r0
 8005df6:	4402      	add	r2, r0
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d100      	bne.n	8005dfe <memset+0xa>
 8005dfc:	4770      	bx	lr
 8005dfe:	f803 1b01 	strb.w	r1, [r3], #1
 8005e02:	e7f9      	b.n	8005df8 <memset+0x4>

08005e04 <siprintf>:
 8005e04:	b40e      	push	{r1, r2, r3}
 8005e06:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005e0a:	b500      	push	{lr}
 8005e0c:	b09c      	sub	sp, #112	; 0x70
 8005e0e:	ab1d      	add	r3, sp, #116	; 0x74
 8005e10:	9002      	str	r0, [sp, #8]
 8005e12:	9006      	str	r0, [sp, #24]
 8005e14:	9107      	str	r1, [sp, #28]
 8005e16:	9104      	str	r1, [sp, #16]
 8005e18:	4808      	ldr	r0, [pc, #32]	; (8005e3c <siprintf+0x38>)
 8005e1a:	4909      	ldr	r1, [pc, #36]	; (8005e40 <siprintf+0x3c>)
 8005e1c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005e20:	9105      	str	r1, [sp, #20]
 8005e22:	6800      	ldr	r0, [r0, #0]
 8005e24:	a902      	add	r1, sp, #8
 8005e26:	9301      	str	r3, [sp, #4]
 8005e28:	f000 f868 	bl	8005efc <_svfiprintf_r>
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	9b02      	ldr	r3, [sp, #8]
 8005e30:	701a      	strb	r2, [r3, #0]
 8005e32:	b01c      	add	sp, #112	; 0x70
 8005e34:	f85d eb04 	ldr.w	lr, [sp], #4
 8005e38:	b003      	add	sp, #12
 8005e3a:	4770      	bx	lr
 8005e3c:	20000024 	.word	0x20000024
 8005e40:	ffff0208 	.word	0xffff0208

08005e44 <__ssputs_r>:
 8005e44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e48:	688e      	ldr	r6, [r1, #8]
 8005e4a:	4682      	mov	sl, r0
 8005e4c:	429e      	cmp	r6, r3
 8005e4e:	460c      	mov	r4, r1
 8005e50:	4690      	mov	r8, r2
 8005e52:	461f      	mov	r7, r3
 8005e54:	d838      	bhi.n	8005ec8 <__ssputs_r+0x84>
 8005e56:	898a      	ldrh	r2, [r1, #12]
 8005e58:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005e5c:	d032      	beq.n	8005ec4 <__ssputs_r+0x80>
 8005e5e:	6825      	ldr	r5, [r4, #0]
 8005e60:	6909      	ldr	r1, [r1, #16]
 8005e62:	3301      	adds	r3, #1
 8005e64:	eba5 0901 	sub.w	r9, r5, r1
 8005e68:	6965      	ldr	r5, [r4, #20]
 8005e6a:	444b      	add	r3, r9
 8005e6c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005e70:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005e74:	106d      	asrs	r5, r5, #1
 8005e76:	429d      	cmp	r5, r3
 8005e78:	bf38      	it	cc
 8005e7a:	461d      	movcc	r5, r3
 8005e7c:	0553      	lsls	r3, r2, #21
 8005e7e:	d531      	bpl.n	8005ee4 <__ssputs_r+0xa0>
 8005e80:	4629      	mov	r1, r5
 8005e82:	f000 fb6f 	bl	8006564 <_malloc_r>
 8005e86:	4606      	mov	r6, r0
 8005e88:	b950      	cbnz	r0, 8005ea0 <__ssputs_r+0x5c>
 8005e8a:	230c      	movs	r3, #12
 8005e8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005e90:	f8ca 3000 	str.w	r3, [sl]
 8005e94:	89a3      	ldrh	r3, [r4, #12]
 8005e96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e9a:	81a3      	strh	r3, [r4, #12]
 8005e9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ea0:	464a      	mov	r2, r9
 8005ea2:	6921      	ldr	r1, [r4, #16]
 8005ea4:	f000 face 	bl	8006444 <memcpy>
 8005ea8:	89a3      	ldrh	r3, [r4, #12]
 8005eaa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005eae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005eb2:	81a3      	strh	r3, [r4, #12]
 8005eb4:	6126      	str	r6, [r4, #16]
 8005eb6:	444e      	add	r6, r9
 8005eb8:	6026      	str	r6, [r4, #0]
 8005eba:	463e      	mov	r6, r7
 8005ebc:	6165      	str	r5, [r4, #20]
 8005ebe:	eba5 0509 	sub.w	r5, r5, r9
 8005ec2:	60a5      	str	r5, [r4, #8]
 8005ec4:	42be      	cmp	r6, r7
 8005ec6:	d900      	bls.n	8005eca <__ssputs_r+0x86>
 8005ec8:	463e      	mov	r6, r7
 8005eca:	4632      	mov	r2, r6
 8005ecc:	4641      	mov	r1, r8
 8005ece:	6820      	ldr	r0, [r4, #0]
 8005ed0:	f000 fac6 	bl	8006460 <memmove>
 8005ed4:	68a3      	ldr	r3, [r4, #8]
 8005ed6:	2000      	movs	r0, #0
 8005ed8:	1b9b      	subs	r3, r3, r6
 8005eda:	60a3      	str	r3, [r4, #8]
 8005edc:	6823      	ldr	r3, [r4, #0]
 8005ede:	4433      	add	r3, r6
 8005ee0:	6023      	str	r3, [r4, #0]
 8005ee2:	e7db      	b.n	8005e9c <__ssputs_r+0x58>
 8005ee4:	462a      	mov	r2, r5
 8005ee6:	f000 fbb1 	bl	800664c <_realloc_r>
 8005eea:	4606      	mov	r6, r0
 8005eec:	2800      	cmp	r0, #0
 8005eee:	d1e1      	bne.n	8005eb4 <__ssputs_r+0x70>
 8005ef0:	4650      	mov	r0, sl
 8005ef2:	6921      	ldr	r1, [r4, #16]
 8005ef4:	f000 face 	bl	8006494 <_free_r>
 8005ef8:	e7c7      	b.n	8005e8a <__ssputs_r+0x46>
	...

08005efc <_svfiprintf_r>:
 8005efc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f00:	4698      	mov	r8, r3
 8005f02:	898b      	ldrh	r3, [r1, #12]
 8005f04:	4607      	mov	r7, r0
 8005f06:	061b      	lsls	r3, r3, #24
 8005f08:	460d      	mov	r5, r1
 8005f0a:	4614      	mov	r4, r2
 8005f0c:	b09d      	sub	sp, #116	; 0x74
 8005f0e:	d50e      	bpl.n	8005f2e <_svfiprintf_r+0x32>
 8005f10:	690b      	ldr	r3, [r1, #16]
 8005f12:	b963      	cbnz	r3, 8005f2e <_svfiprintf_r+0x32>
 8005f14:	2140      	movs	r1, #64	; 0x40
 8005f16:	f000 fb25 	bl	8006564 <_malloc_r>
 8005f1a:	6028      	str	r0, [r5, #0]
 8005f1c:	6128      	str	r0, [r5, #16]
 8005f1e:	b920      	cbnz	r0, 8005f2a <_svfiprintf_r+0x2e>
 8005f20:	230c      	movs	r3, #12
 8005f22:	603b      	str	r3, [r7, #0]
 8005f24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005f28:	e0d1      	b.n	80060ce <_svfiprintf_r+0x1d2>
 8005f2a:	2340      	movs	r3, #64	; 0x40
 8005f2c:	616b      	str	r3, [r5, #20]
 8005f2e:	2300      	movs	r3, #0
 8005f30:	9309      	str	r3, [sp, #36]	; 0x24
 8005f32:	2320      	movs	r3, #32
 8005f34:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005f38:	2330      	movs	r3, #48	; 0x30
 8005f3a:	f04f 0901 	mov.w	r9, #1
 8005f3e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005f42:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80060e8 <_svfiprintf_r+0x1ec>
 8005f46:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005f4a:	4623      	mov	r3, r4
 8005f4c:	469a      	mov	sl, r3
 8005f4e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005f52:	b10a      	cbz	r2, 8005f58 <_svfiprintf_r+0x5c>
 8005f54:	2a25      	cmp	r2, #37	; 0x25
 8005f56:	d1f9      	bne.n	8005f4c <_svfiprintf_r+0x50>
 8005f58:	ebba 0b04 	subs.w	fp, sl, r4
 8005f5c:	d00b      	beq.n	8005f76 <_svfiprintf_r+0x7a>
 8005f5e:	465b      	mov	r3, fp
 8005f60:	4622      	mov	r2, r4
 8005f62:	4629      	mov	r1, r5
 8005f64:	4638      	mov	r0, r7
 8005f66:	f7ff ff6d 	bl	8005e44 <__ssputs_r>
 8005f6a:	3001      	adds	r0, #1
 8005f6c:	f000 80aa 	beq.w	80060c4 <_svfiprintf_r+0x1c8>
 8005f70:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005f72:	445a      	add	r2, fp
 8005f74:	9209      	str	r2, [sp, #36]	; 0x24
 8005f76:	f89a 3000 	ldrb.w	r3, [sl]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	f000 80a2 	beq.w	80060c4 <_svfiprintf_r+0x1c8>
 8005f80:	2300      	movs	r3, #0
 8005f82:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005f86:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005f8a:	f10a 0a01 	add.w	sl, sl, #1
 8005f8e:	9304      	str	r3, [sp, #16]
 8005f90:	9307      	str	r3, [sp, #28]
 8005f92:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005f96:	931a      	str	r3, [sp, #104]	; 0x68
 8005f98:	4654      	mov	r4, sl
 8005f9a:	2205      	movs	r2, #5
 8005f9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005fa0:	4851      	ldr	r0, [pc, #324]	; (80060e8 <_svfiprintf_r+0x1ec>)
 8005fa2:	f000 fa41 	bl	8006428 <memchr>
 8005fa6:	9a04      	ldr	r2, [sp, #16]
 8005fa8:	b9d8      	cbnz	r0, 8005fe2 <_svfiprintf_r+0xe6>
 8005faa:	06d0      	lsls	r0, r2, #27
 8005fac:	bf44      	itt	mi
 8005fae:	2320      	movmi	r3, #32
 8005fb0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005fb4:	0711      	lsls	r1, r2, #28
 8005fb6:	bf44      	itt	mi
 8005fb8:	232b      	movmi	r3, #43	; 0x2b
 8005fba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005fbe:	f89a 3000 	ldrb.w	r3, [sl]
 8005fc2:	2b2a      	cmp	r3, #42	; 0x2a
 8005fc4:	d015      	beq.n	8005ff2 <_svfiprintf_r+0xf6>
 8005fc6:	4654      	mov	r4, sl
 8005fc8:	2000      	movs	r0, #0
 8005fca:	f04f 0c0a 	mov.w	ip, #10
 8005fce:	9a07      	ldr	r2, [sp, #28]
 8005fd0:	4621      	mov	r1, r4
 8005fd2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005fd6:	3b30      	subs	r3, #48	; 0x30
 8005fd8:	2b09      	cmp	r3, #9
 8005fda:	d94e      	bls.n	800607a <_svfiprintf_r+0x17e>
 8005fdc:	b1b0      	cbz	r0, 800600c <_svfiprintf_r+0x110>
 8005fde:	9207      	str	r2, [sp, #28]
 8005fe0:	e014      	b.n	800600c <_svfiprintf_r+0x110>
 8005fe2:	eba0 0308 	sub.w	r3, r0, r8
 8005fe6:	fa09 f303 	lsl.w	r3, r9, r3
 8005fea:	4313      	orrs	r3, r2
 8005fec:	46a2      	mov	sl, r4
 8005fee:	9304      	str	r3, [sp, #16]
 8005ff0:	e7d2      	b.n	8005f98 <_svfiprintf_r+0x9c>
 8005ff2:	9b03      	ldr	r3, [sp, #12]
 8005ff4:	1d19      	adds	r1, r3, #4
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	9103      	str	r1, [sp, #12]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	bfbb      	ittet	lt
 8005ffe:	425b      	neglt	r3, r3
 8006000:	f042 0202 	orrlt.w	r2, r2, #2
 8006004:	9307      	strge	r3, [sp, #28]
 8006006:	9307      	strlt	r3, [sp, #28]
 8006008:	bfb8      	it	lt
 800600a:	9204      	strlt	r2, [sp, #16]
 800600c:	7823      	ldrb	r3, [r4, #0]
 800600e:	2b2e      	cmp	r3, #46	; 0x2e
 8006010:	d10c      	bne.n	800602c <_svfiprintf_r+0x130>
 8006012:	7863      	ldrb	r3, [r4, #1]
 8006014:	2b2a      	cmp	r3, #42	; 0x2a
 8006016:	d135      	bne.n	8006084 <_svfiprintf_r+0x188>
 8006018:	9b03      	ldr	r3, [sp, #12]
 800601a:	3402      	adds	r4, #2
 800601c:	1d1a      	adds	r2, r3, #4
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	9203      	str	r2, [sp, #12]
 8006022:	2b00      	cmp	r3, #0
 8006024:	bfb8      	it	lt
 8006026:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800602a:	9305      	str	r3, [sp, #20]
 800602c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80060ec <_svfiprintf_r+0x1f0>
 8006030:	2203      	movs	r2, #3
 8006032:	4650      	mov	r0, sl
 8006034:	7821      	ldrb	r1, [r4, #0]
 8006036:	f000 f9f7 	bl	8006428 <memchr>
 800603a:	b140      	cbz	r0, 800604e <_svfiprintf_r+0x152>
 800603c:	2340      	movs	r3, #64	; 0x40
 800603e:	eba0 000a 	sub.w	r0, r0, sl
 8006042:	fa03 f000 	lsl.w	r0, r3, r0
 8006046:	9b04      	ldr	r3, [sp, #16]
 8006048:	3401      	adds	r4, #1
 800604a:	4303      	orrs	r3, r0
 800604c:	9304      	str	r3, [sp, #16]
 800604e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006052:	2206      	movs	r2, #6
 8006054:	4826      	ldr	r0, [pc, #152]	; (80060f0 <_svfiprintf_r+0x1f4>)
 8006056:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800605a:	f000 f9e5 	bl	8006428 <memchr>
 800605e:	2800      	cmp	r0, #0
 8006060:	d038      	beq.n	80060d4 <_svfiprintf_r+0x1d8>
 8006062:	4b24      	ldr	r3, [pc, #144]	; (80060f4 <_svfiprintf_r+0x1f8>)
 8006064:	bb1b      	cbnz	r3, 80060ae <_svfiprintf_r+0x1b2>
 8006066:	9b03      	ldr	r3, [sp, #12]
 8006068:	3307      	adds	r3, #7
 800606a:	f023 0307 	bic.w	r3, r3, #7
 800606e:	3308      	adds	r3, #8
 8006070:	9303      	str	r3, [sp, #12]
 8006072:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006074:	4433      	add	r3, r6
 8006076:	9309      	str	r3, [sp, #36]	; 0x24
 8006078:	e767      	b.n	8005f4a <_svfiprintf_r+0x4e>
 800607a:	460c      	mov	r4, r1
 800607c:	2001      	movs	r0, #1
 800607e:	fb0c 3202 	mla	r2, ip, r2, r3
 8006082:	e7a5      	b.n	8005fd0 <_svfiprintf_r+0xd4>
 8006084:	2300      	movs	r3, #0
 8006086:	f04f 0c0a 	mov.w	ip, #10
 800608a:	4619      	mov	r1, r3
 800608c:	3401      	adds	r4, #1
 800608e:	9305      	str	r3, [sp, #20]
 8006090:	4620      	mov	r0, r4
 8006092:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006096:	3a30      	subs	r2, #48	; 0x30
 8006098:	2a09      	cmp	r2, #9
 800609a:	d903      	bls.n	80060a4 <_svfiprintf_r+0x1a8>
 800609c:	2b00      	cmp	r3, #0
 800609e:	d0c5      	beq.n	800602c <_svfiprintf_r+0x130>
 80060a0:	9105      	str	r1, [sp, #20]
 80060a2:	e7c3      	b.n	800602c <_svfiprintf_r+0x130>
 80060a4:	4604      	mov	r4, r0
 80060a6:	2301      	movs	r3, #1
 80060a8:	fb0c 2101 	mla	r1, ip, r1, r2
 80060ac:	e7f0      	b.n	8006090 <_svfiprintf_r+0x194>
 80060ae:	ab03      	add	r3, sp, #12
 80060b0:	9300      	str	r3, [sp, #0]
 80060b2:	462a      	mov	r2, r5
 80060b4:	4638      	mov	r0, r7
 80060b6:	4b10      	ldr	r3, [pc, #64]	; (80060f8 <_svfiprintf_r+0x1fc>)
 80060b8:	a904      	add	r1, sp, #16
 80060ba:	f3af 8000 	nop.w
 80060be:	1c42      	adds	r2, r0, #1
 80060c0:	4606      	mov	r6, r0
 80060c2:	d1d6      	bne.n	8006072 <_svfiprintf_r+0x176>
 80060c4:	89ab      	ldrh	r3, [r5, #12]
 80060c6:	065b      	lsls	r3, r3, #25
 80060c8:	f53f af2c 	bmi.w	8005f24 <_svfiprintf_r+0x28>
 80060cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80060ce:	b01d      	add	sp, #116	; 0x74
 80060d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060d4:	ab03      	add	r3, sp, #12
 80060d6:	9300      	str	r3, [sp, #0]
 80060d8:	462a      	mov	r2, r5
 80060da:	4638      	mov	r0, r7
 80060dc:	4b06      	ldr	r3, [pc, #24]	; (80060f8 <_svfiprintf_r+0x1fc>)
 80060de:	a904      	add	r1, sp, #16
 80060e0:	f000 f87c 	bl	80061dc <_printf_i>
 80060e4:	e7eb      	b.n	80060be <_svfiprintf_r+0x1c2>
 80060e6:	bf00      	nop
 80060e8:	0800908c 	.word	0x0800908c
 80060ec:	08009092 	.word	0x08009092
 80060f0:	08009096 	.word	0x08009096
 80060f4:	00000000 	.word	0x00000000
 80060f8:	08005e45 	.word	0x08005e45

080060fc <_printf_common>:
 80060fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006100:	4616      	mov	r6, r2
 8006102:	4699      	mov	r9, r3
 8006104:	688a      	ldr	r2, [r1, #8]
 8006106:	690b      	ldr	r3, [r1, #16]
 8006108:	4607      	mov	r7, r0
 800610a:	4293      	cmp	r3, r2
 800610c:	bfb8      	it	lt
 800610e:	4613      	movlt	r3, r2
 8006110:	6033      	str	r3, [r6, #0]
 8006112:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006116:	460c      	mov	r4, r1
 8006118:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800611c:	b10a      	cbz	r2, 8006122 <_printf_common+0x26>
 800611e:	3301      	adds	r3, #1
 8006120:	6033      	str	r3, [r6, #0]
 8006122:	6823      	ldr	r3, [r4, #0]
 8006124:	0699      	lsls	r1, r3, #26
 8006126:	bf42      	ittt	mi
 8006128:	6833      	ldrmi	r3, [r6, #0]
 800612a:	3302      	addmi	r3, #2
 800612c:	6033      	strmi	r3, [r6, #0]
 800612e:	6825      	ldr	r5, [r4, #0]
 8006130:	f015 0506 	ands.w	r5, r5, #6
 8006134:	d106      	bne.n	8006144 <_printf_common+0x48>
 8006136:	f104 0a19 	add.w	sl, r4, #25
 800613a:	68e3      	ldr	r3, [r4, #12]
 800613c:	6832      	ldr	r2, [r6, #0]
 800613e:	1a9b      	subs	r3, r3, r2
 8006140:	42ab      	cmp	r3, r5
 8006142:	dc28      	bgt.n	8006196 <_printf_common+0x9a>
 8006144:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006148:	1e13      	subs	r3, r2, #0
 800614a:	6822      	ldr	r2, [r4, #0]
 800614c:	bf18      	it	ne
 800614e:	2301      	movne	r3, #1
 8006150:	0692      	lsls	r2, r2, #26
 8006152:	d42d      	bmi.n	80061b0 <_printf_common+0xb4>
 8006154:	4649      	mov	r1, r9
 8006156:	4638      	mov	r0, r7
 8006158:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800615c:	47c0      	blx	r8
 800615e:	3001      	adds	r0, #1
 8006160:	d020      	beq.n	80061a4 <_printf_common+0xa8>
 8006162:	6823      	ldr	r3, [r4, #0]
 8006164:	68e5      	ldr	r5, [r4, #12]
 8006166:	f003 0306 	and.w	r3, r3, #6
 800616a:	2b04      	cmp	r3, #4
 800616c:	bf18      	it	ne
 800616e:	2500      	movne	r5, #0
 8006170:	6832      	ldr	r2, [r6, #0]
 8006172:	f04f 0600 	mov.w	r6, #0
 8006176:	68a3      	ldr	r3, [r4, #8]
 8006178:	bf08      	it	eq
 800617a:	1aad      	subeq	r5, r5, r2
 800617c:	6922      	ldr	r2, [r4, #16]
 800617e:	bf08      	it	eq
 8006180:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006184:	4293      	cmp	r3, r2
 8006186:	bfc4      	itt	gt
 8006188:	1a9b      	subgt	r3, r3, r2
 800618a:	18ed      	addgt	r5, r5, r3
 800618c:	341a      	adds	r4, #26
 800618e:	42b5      	cmp	r5, r6
 8006190:	d11a      	bne.n	80061c8 <_printf_common+0xcc>
 8006192:	2000      	movs	r0, #0
 8006194:	e008      	b.n	80061a8 <_printf_common+0xac>
 8006196:	2301      	movs	r3, #1
 8006198:	4652      	mov	r2, sl
 800619a:	4649      	mov	r1, r9
 800619c:	4638      	mov	r0, r7
 800619e:	47c0      	blx	r8
 80061a0:	3001      	adds	r0, #1
 80061a2:	d103      	bne.n	80061ac <_printf_common+0xb0>
 80061a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80061a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061ac:	3501      	adds	r5, #1
 80061ae:	e7c4      	b.n	800613a <_printf_common+0x3e>
 80061b0:	2030      	movs	r0, #48	; 0x30
 80061b2:	18e1      	adds	r1, r4, r3
 80061b4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80061b8:	1c5a      	adds	r2, r3, #1
 80061ba:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80061be:	4422      	add	r2, r4
 80061c0:	3302      	adds	r3, #2
 80061c2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80061c6:	e7c5      	b.n	8006154 <_printf_common+0x58>
 80061c8:	2301      	movs	r3, #1
 80061ca:	4622      	mov	r2, r4
 80061cc:	4649      	mov	r1, r9
 80061ce:	4638      	mov	r0, r7
 80061d0:	47c0      	blx	r8
 80061d2:	3001      	adds	r0, #1
 80061d4:	d0e6      	beq.n	80061a4 <_printf_common+0xa8>
 80061d6:	3601      	adds	r6, #1
 80061d8:	e7d9      	b.n	800618e <_printf_common+0x92>
	...

080061dc <_printf_i>:
 80061dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80061e0:	7e0f      	ldrb	r7, [r1, #24]
 80061e2:	4691      	mov	r9, r2
 80061e4:	2f78      	cmp	r7, #120	; 0x78
 80061e6:	4680      	mov	r8, r0
 80061e8:	460c      	mov	r4, r1
 80061ea:	469a      	mov	sl, r3
 80061ec:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80061ee:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80061f2:	d807      	bhi.n	8006204 <_printf_i+0x28>
 80061f4:	2f62      	cmp	r7, #98	; 0x62
 80061f6:	d80a      	bhi.n	800620e <_printf_i+0x32>
 80061f8:	2f00      	cmp	r7, #0
 80061fa:	f000 80d9 	beq.w	80063b0 <_printf_i+0x1d4>
 80061fe:	2f58      	cmp	r7, #88	; 0x58
 8006200:	f000 80a4 	beq.w	800634c <_printf_i+0x170>
 8006204:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006208:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800620c:	e03a      	b.n	8006284 <_printf_i+0xa8>
 800620e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006212:	2b15      	cmp	r3, #21
 8006214:	d8f6      	bhi.n	8006204 <_printf_i+0x28>
 8006216:	a101      	add	r1, pc, #4	; (adr r1, 800621c <_printf_i+0x40>)
 8006218:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800621c:	08006275 	.word	0x08006275
 8006220:	08006289 	.word	0x08006289
 8006224:	08006205 	.word	0x08006205
 8006228:	08006205 	.word	0x08006205
 800622c:	08006205 	.word	0x08006205
 8006230:	08006205 	.word	0x08006205
 8006234:	08006289 	.word	0x08006289
 8006238:	08006205 	.word	0x08006205
 800623c:	08006205 	.word	0x08006205
 8006240:	08006205 	.word	0x08006205
 8006244:	08006205 	.word	0x08006205
 8006248:	08006397 	.word	0x08006397
 800624c:	080062b9 	.word	0x080062b9
 8006250:	08006379 	.word	0x08006379
 8006254:	08006205 	.word	0x08006205
 8006258:	08006205 	.word	0x08006205
 800625c:	080063b9 	.word	0x080063b9
 8006260:	08006205 	.word	0x08006205
 8006264:	080062b9 	.word	0x080062b9
 8006268:	08006205 	.word	0x08006205
 800626c:	08006205 	.word	0x08006205
 8006270:	08006381 	.word	0x08006381
 8006274:	682b      	ldr	r3, [r5, #0]
 8006276:	1d1a      	adds	r2, r3, #4
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	602a      	str	r2, [r5, #0]
 800627c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006280:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006284:	2301      	movs	r3, #1
 8006286:	e0a4      	b.n	80063d2 <_printf_i+0x1f6>
 8006288:	6820      	ldr	r0, [r4, #0]
 800628a:	6829      	ldr	r1, [r5, #0]
 800628c:	0606      	lsls	r6, r0, #24
 800628e:	f101 0304 	add.w	r3, r1, #4
 8006292:	d50a      	bpl.n	80062aa <_printf_i+0xce>
 8006294:	680e      	ldr	r6, [r1, #0]
 8006296:	602b      	str	r3, [r5, #0]
 8006298:	2e00      	cmp	r6, #0
 800629a:	da03      	bge.n	80062a4 <_printf_i+0xc8>
 800629c:	232d      	movs	r3, #45	; 0x2d
 800629e:	4276      	negs	r6, r6
 80062a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80062a4:	230a      	movs	r3, #10
 80062a6:	485e      	ldr	r0, [pc, #376]	; (8006420 <_printf_i+0x244>)
 80062a8:	e019      	b.n	80062de <_printf_i+0x102>
 80062aa:	680e      	ldr	r6, [r1, #0]
 80062ac:	f010 0f40 	tst.w	r0, #64	; 0x40
 80062b0:	602b      	str	r3, [r5, #0]
 80062b2:	bf18      	it	ne
 80062b4:	b236      	sxthne	r6, r6
 80062b6:	e7ef      	b.n	8006298 <_printf_i+0xbc>
 80062b8:	682b      	ldr	r3, [r5, #0]
 80062ba:	6820      	ldr	r0, [r4, #0]
 80062bc:	1d19      	adds	r1, r3, #4
 80062be:	6029      	str	r1, [r5, #0]
 80062c0:	0601      	lsls	r1, r0, #24
 80062c2:	d501      	bpl.n	80062c8 <_printf_i+0xec>
 80062c4:	681e      	ldr	r6, [r3, #0]
 80062c6:	e002      	b.n	80062ce <_printf_i+0xf2>
 80062c8:	0646      	lsls	r6, r0, #25
 80062ca:	d5fb      	bpl.n	80062c4 <_printf_i+0xe8>
 80062cc:	881e      	ldrh	r6, [r3, #0]
 80062ce:	2f6f      	cmp	r7, #111	; 0x6f
 80062d0:	bf0c      	ite	eq
 80062d2:	2308      	moveq	r3, #8
 80062d4:	230a      	movne	r3, #10
 80062d6:	4852      	ldr	r0, [pc, #328]	; (8006420 <_printf_i+0x244>)
 80062d8:	2100      	movs	r1, #0
 80062da:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80062de:	6865      	ldr	r5, [r4, #4]
 80062e0:	2d00      	cmp	r5, #0
 80062e2:	bfa8      	it	ge
 80062e4:	6821      	ldrge	r1, [r4, #0]
 80062e6:	60a5      	str	r5, [r4, #8]
 80062e8:	bfa4      	itt	ge
 80062ea:	f021 0104 	bicge.w	r1, r1, #4
 80062ee:	6021      	strge	r1, [r4, #0]
 80062f0:	b90e      	cbnz	r6, 80062f6 <_printf_i+0x11a>
 80062f2:	2d00      	cmp	r5, #0
 80062f4:	d04d      	beq.n	8006392 <_printf_i+0x1b6>
 80062f6:	4615      	mov	r5, r2
 80062f8:	fbb6 f1f3 	udiv	r1, r6, r3
 80062fc:	fb03 6711 	mls	r7, r3, r1, r6
 8006300:	5dc7      	ldrb	r7, [r0, r7]
 8006302:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006306:	4637      	mov	r7, r6
 8006308:	42bb      	cmp	r3, r7
 800630a:	460e      	mov	r6, r1
 800630c:	d9f4      	bls.n	80062f8 <_printf_i+0x11c>
 800630e:	2b08      	cmp	r3, #8
 8006310:	d10b      	bne.n	800632a <_printf_i+0x14e>
 8006312:	6823      	ldr	r3, [r4, #0]
 8006314:	07de      	lsls	r6, r3, #31
 8006316:	d508      	bpl.n	800632a <_printf_i+0x14e>
 8006318:	6923      	ldr	r3, [r4, #16]
 800631a:	6861      	ldr	r1, [r4, #4]
 800631c:	4299      	cmp	r1, r3
 800631e:	bfde      	ittt	le
 8006320:	2330      	movle	r3, #48	; 0x30
 8006322:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006326:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800632a:	1b52      	subs	r2, r2, r5
 800632c:	6122      	str	r2, [r4, #16]
 800632e:	464b      	mov	r3, r9
 8006330:	4621      	mov	r1, r4
 8006332:	4640      	mov	r0, r8
 8006334:	f8cd a000 	str.w	sl, [sp]
 8006338:	aa03      	add	r2, sp, #12
 800633a:	f7ff fedf 	bl	80060fc <_printf_common>
 800633e:	3001      	adds	r0, #1
 8006340:	d14c      	bne.n	80063dc <_printf_i+0x200>
 8006342:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006346:	b004      	add	sp, #16
 8006348:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800634c:	4834      	ldr	r0, [pc, #208]	; (8006420 <_printf_i+0x244>)
 800634e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006352:	6829      	ldr	r1, [r5, #0]
 8006354:	6823      	ldr	r3, [r4, #0]
 8006356:	f851 6b04 	ldr.w	r6, [r1], #4
 800635a:	6029      	str	r1, [r5, #0]
 800635c:	061d      	lsls	r5, r3, #24
 800635e:	d514      	bpl.n	800638a <_printf_i+0x1ae>
 8006360:	07df      	lsls	r7, r3, #31
 8006362:	bf44      	itt	mi
 8006364:	f043 0320 	orrmi.w	r3, r3, #32
 8006368:	6023      	strmi	r3, [r4, #0]
 800636a:	b91e      	cbnz	r6, 8006374 <_printf_i+0x198>
 800636c:	6823      	ldr	r3, [r4, #0]
 800636e:	f023 0320 	bic.w	r3, r3, #32
 8006372:	6023      	str	r3, [r4, #0]
 8006374:	2310      	movs	r3, #16
 8006376:	e7af      	b.n	80062d8 <_printf_i+0xfc>
 8006378:	6823      	ldr	r3, [r4, #0]
 800637a:	f043 0320 	orr.w	r3, r3, #32
 800637e:	6023      	str	r3, [r4, #0]
 8006380:	2378      	movs	r3, #120	; 0x78
 8006382:	4828      	ldr	r0, [pc, #160]	; (8006424 <_printf_i+0x248>)
 8006384:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006388:	e7e3      	b.n	8006352 <_printf_i+0x176>
 800638a:	0659      	lsls	r1, r3, #25
 800638c:	bf48      	it	mi
 800638e:	b2b6      	uxthmi	r6, r6
 8006390:	e7e6      	b.n	8006360 <_printf_i+0x184>
 8006392:	4615      	mov	r5, r2
 8006394:	e7bb      	b.n	800630e <_printf_i+0x132>
 8006396:	682b      	ldr	r3, [r5, #0]
 8006398:	6826      	ldr	r6, [r4, #0]
 800639a:	1d18      	adds	r0, r3, #4
 800639c:	6961      	ldr	r1, [r4, #20]
 800639e:	6028      	str	r0, [r5, #0]
 80063a0:	0635      	lsls	r5, r6, #24
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	d501      	bpl.n	80063aa <_printf_i+0x1ce>
 80063a6:	6019      	str	r1, [r3, #0]
 80063a8:	e002      	b.n	80063b0 <_printf_i+0x1d4>
 80063aa:	0670      	lsls	r0, r6, #25
 80063ac:	d5fb      	bpl.n	80063a6 <_printf_i+0x1ca>
 80063ae:	8019      	strh	r1, [r3, #0]
 80063b0:	2300      	movs	r3, #0
 80063b2:	4615      	mov	r5, r2
 80063b4:	6123      	str	r3, [r4, #16]
 80063b6:	e7ba      	b.n	800632e <_printf_i+0x152>
 80063b8:	682b      	ldr	r3, [r5, #0]
 80063ba:	2100      	movs	r1, #0
 80063bc:	1d1a      	adds	r2, r3, #4
 80063be:	602a      	str	r2, [r5, #0]
 80063c0:	681d      	ldr	r5, [r3, #0]
 80063c2:	6862      	ldr	r2, [r4, #4]
 80063c4:	4628      	mov	r0, r5
 80063c6:	f000 f82f 	bl	8006428 <memchr>
 80063ca:	b108      	cbz	r0, 80063d0 <_printf_i+0x1f4>
 80063cc:	1b40      	subs	r0, r0, r5
 80063ce:	6060      	str	r0, [r4, #4]
 80063d0:	6863      	ldr	r3, [r4, #4]
 80063d2:	6123      	str	r3, [r4, #16]
 80063d4:	2300      	movs	r3, #0
 80063d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80063da:	e7a8      	b.n	800632e <_printf_i+0x152>
 80063dc:	462a      	mov	r2, r5
 80063de:	4649      	mov	r1, r9
 80063e0:	4640      	mov	r0, r8
 80063e2:	6923      	ldr	r3, [r4, #16]
 80063e4:	47d0      	blx	sl
 80063e6:	3001      	adds	r0, #1
 80063e8:	d0ab      	beq.n	8006342 <_printf_i+0x166>
 80063ea:	6823      	ldr	r3, [r4, #0]
 80063ec:	079b      	lsls	r3, r3, #30
 80063ee:	d413      	bmi.n	8006418 <_printf_i+0x23c>
 80063f0:	68e0      	ldr	r0, [r4, #12]
 80063f2:	9b03      	ldr	r3, [sp, #12]
 80063f4:	4298      	cmp	r0, r3
 80063f6:	bfb8      	it	lt
 80063f8:	4618      	movlt	r0, r3
 80063fa:	e7a4      	b.n	8006346 <_printf_i+0x16a>
 80063fc:	2301      	movs	r3, #1
 80063fe:	4632      	mov	r2, r6
 8006400:	4649      	mov	r1, r9
 8006402:	4640      	mov	r0, r8
 8006404:	47d0      	blx	sl
 8006406:	3001      	adds	r0, #1
 8006408:	d09b      	beq.n	8006342 <_printf_i+0x166>
 800640a:	3501      	adds	r5, #1
 800640c:	68e3      	ldr	r3, [r4, #12]
 800640e:	9903      	ldr	r1, [sp, #12]
 8006410:	1a5b      	subs	r3, r3, r1
 8006412:	42ab      	cmp	r3, r5
 8006414:	dcf2      	bgt.n	80063fc <_printf_i+0x220>
 8006416:	e7eb      	b.n	80063f0 <_printf_i+0x214>
 8006418:	2500      	movs	r5, #0
 800641a:	f104 0619 	add.w	r6, r4, #25
 800641e:	e7f5      	b.n	800640c <_printf_i+0x230>
 8006420:	0800909d 	.word	0x0800909d
 8006424:	080090ae 	.word	0x080090ae

08006428 <memchr>:
 8006428:	4603      	mov	r3, r0
 800642a:	b510      	push	{r4, lr}
 800642c:	b2c9      	uxtb	r1, r1
 800642e:	4402      	add	r2, r0
 8006430:	4293      	cmp	r3, r2
 8006432:	4618      	mov	r0, r3
 8006434:	d101      	bne.n	800643a <memchr+0x12>
 8006436:	2000      	movs	r0, #0
 8006438:	e003      	b.n	8006442 <memchr+0x1a>
 800643a:	7804      	ldrb	r4, [r0, #0]
 800643c:	3301      	adds	r3, #1
 800643e:	428c      	cmp	r4, r1
 8006440:	d1f6      	bne.n	8006430 <memchr+0x8>
 8006442:	bd10      	pop	{r4, pc}

08006444 <memcpy>:
 8006444:	440a      	add	r2, r1
 8006446:	4291      	cmp	r1, r2
 8006448:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800644c:	d100      	bne.n	8006450 <memcpy+0xc>
 800644e:	4770      	bx	lr
 8006450:	b510      	push	{r4, lr}
 8006452:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006456:	4291      	cmp	r1, r2
 8006458:	f803 4f01 	strb.w	r4, [r3, #1]!
 800645c:	d1f9      	bne.n	8006452 <memcpy+0xe>
 800645e:	bd10      	pop	{r4, pc}

08006460 <memmove>:
 8006460:	4288      	cmp	r0, r1
 8006462:	b510      	push	{r4, lr}
 8006464:	eb01 0402 	add.w	r4, r1, r2
 8006468:	d902      	bls.n	8006470 <memmove+0x10>
 800646a:	4284      	cmp	r4, r0
 800646c:	4623      	mov	r3, r4
 800646e:	d807      	bhi.n	8006480 <memmove+0x20>
 8006470:	1e43      	subs	r3, r0, #1
 8006472:	42a1      	cmp	r1, r4
 8006474:	d008      	beq.n	8006488 <memmove+0x28>
 8006476:	f811 2b01 	ldrb.w	r2, [r1], #1
 800647a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800647e:	e7f8      	b.n	8006472 <memmove+0x12>
 8006480:	4601      	mov	r1, r0
 8006482:	4402      	add	r2, r0
 8006484:	428a      	cmp	r2, r1
 8006486:	d100      	bne.n	800648a <memmove+0x2a>
 8006488:	bd10      	pop	{r4, pc}
 800648a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800648e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006492:	e7f7      	b.n	8006484 <memmove+0x24>

08006494 <_free_r>:
 8006494:	b538      	push	{r3, r4, r5, lr}
 8006496:	4605      	mov	r5, r0
 8006498:	2900      	cmp	r1, #0
 800649a:	d040      	beq.n	800651e <_free_r+0x8a>
 800649c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80064a0:	1f0c      	subs	r4, r1, #4
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	bfb8      	it	lt
 80064a6:	18e4      	addlt	r4, r4, r3
 80064a8:	f000 f910 	bl	80066cc <__malloc_lock>
 80064ac:	4a1c      	ldr	r2, [pc, #112]	; (8006520 <_free_r+0x8c>)
 80064ae:	6813      	ldr	r3, [r2, #0]
 80064b0:	b933      	cbnz	r3, 80064c0 <_free_r+0x2c>
 80064b2:	6063      	str	r3, [r4, #4]
 80064b4:	6014      	str	r4, [r2, #0]
 80064b6:	4628      	mov	r0, r5
 80064b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80064bc:	f000 b90c 	b.w	80066d8 <__malloc_unlock>
 80064c0:	42a3      	cmp	r3, r4
 80064c2:	d908      	bls.n	80064d6 <_free_r+0x42>
 80064c4:	6820      	ldr	r0, [r4, #0]
 80064c6:	1821      	adds	r1, r4, r0
 80064c8:	428b      	cmp	r3, r1
 80064ca:	bf01      	itttt	eq
 80064cc:	6819      	ldreq	r1, [r3, #0]
 80064ce:	685b      	ldreq	r3, [r3, #4]
 80064d0:	1809      	addeq	r1, r1, r0
 80064d2:	6021      	streq	r1, [r4, #0]
 80064d4:	e7ed      	b.n	80064b2 <_free_r+0x1e>
 80064d6:	461a      	mov	r2, r3
 80064d8:	685b      	ldr	r3, [r3, #4]
 80064da:	b10b      	cbz	r3, 80064e0 <_free_r+0x4c>
 80064dc:	42a3      	cmp	r3, r4
 80064de:	d9fa      	bls.n	80064d6 <_free_r+0x42>
 80064e0:	6811      	ldr	r1, [r2, #0]
 80064e2:	1850      	adds	r0, r2, r1
 80064e4:	42a0      	cmp	r0, r4
 80064e6:	d10b      	bne.n	8006500 <_free_r+0x6c>
 80064e8:	6820      	ldr	r0, [r4, #0]
 80064ea:	4401      	add	r1, r0
 80064ec:	1850      	adds	r0, r2, r1
 80064ee:	4283      	cmp	r3, r0
 80064f0:	6011      	str	r1, [r2, #0]
 80064f2:	d1e0      	bne.n	80064b6 <_free_r+0x22>
 80064f4:	6818      	ldr	r0, [r3, #0]
 80064f6:	685b      	ldr	r3, [r3, #4]
 80064f8:	4401      	add	r1, r0
 80064fa:	6011      	str	r1, [r2, #0]
 80064fc:	6053      	str	r3, [r2, #4]
 80064fe:	e7da      	b.n	80064b6 <_free_r+0x22>
 8006500:	d902      	bls.n	8006508 <_free_r+0x74>
 8006502:	230c      	movs	r3, #12
 8006504:	602b      	str	r3, [r5, #0]
 8006506:	e7d6      	b.n	80064b6 <_free_r+0x22>
 8006508:	6820      	ldr	r0, [r4, #0]
 800650a:	1821      	adds	r1, r4, r0
 800650c:	428b      	cmp	r3, r1
 800650e:	bf01      	itttt	eq
 8006510:	6819      	ldreq	r1, [r3, #0]
 8006512:	685b      	ldreq	r3, [r3, #4]
 8006514:	1809      	addeq	r1, r1, r0
 8006516:	6021      	streq	r1, [r4, #0]
 8006518:	6063      	str	r3, [r4, #4]
 800651a:	6054      	str	r4, [r2, #4]
 800651c:	e7cb      	b.n	80064b6 <_free_r+0x22>
 800651e:	bd38      	pop	{r3, r4, r5, pc}
 8006520:	200005d4 	.word	0x200005d4

08006524 <sbrk_aligned>:
 8006524:	b570      	push	{r4, r5, r6, lr}
 8006526:	4e0e      	ldr	r6, [pc, #56]	; (8006560 <sbrk_aligned+0x3c>)
 8006528:	460c      	mov	r4, r1
 800652a:	6831      	ldr	r1, [r6, #0]
 800652c:	4605      	mov	r5, r0
 800652e:	b911      	cbnz	r1, 8006536 <sbrk_aligned+0x12>
 8006530:	f000 f8bc 	bl	80066ac <_sbrk_r>
 8006534:	6030      	str	r0, [r6, #0]
 8006536:	4621      	mov	r1, r4
 8006538:	4628      	mov	r0, r5
 800653a:	f000 f8b7 	bl	80066ac <_sbrk_r>
 800653e:	1c43      	adds	r3, r0, #1
 8006540:	d00a      	beq.n	8006558 <sbrk_aligned+0x34>
 8006542:	1cc4      	adds	r4, r0, #3
 8006544:	f024 0403 	bic.w	r4, r4, #3
 8006548:	42a0      	cmp	r0, r4
 800654a:	d007      	beq.n	800655c <sbrk_aligned+0x38>
 800654c:	1a21      	subs	r1, r4, r0
 800654e:	4628      	mov	r0, r5
 8006550:	f000 f8ac 	bl	80066ac <_sbrk_r>
 8006554:	3001      	adds	r0, #1
 8006556:	d101      	bne.n	800655c <sbrk_aligned+0x38>
 8006558:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800655c:	4620      	mov	r0, r4
 800655e:	bd70      	pop	{r4, r5, r6, pc}
 8006560:	200005d8 	.word	0x200005d8

08006564 <_malloc_r>:
 8006564:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006568:	1ccd      	adds	r5, r1, #3
 800656a:	f025 0503 	bic.w	r5, r5, #3
 800656e:	3508      	adds	r5, #8
 8006570:	2d0c      	cmp	r5, #12
 8006572:	bf38      	it	cc
 8006574:	250c      	movcc	r5, #12
 8006576:	2d00      	cmp	r5, #0
 8006578:	4607      	mov	r7, r0
 800657a:	db01      	blt.n	8006580 <_malloc_r+0x1c>
 800657c:	42a9      	cmp	r1, r5
 800657e:	d905      	bls.n	800658c <_malloc_r+0x28>
 8006580:	230c      	movs	r3, #12
 8006582:	2600      	movs	r6, #0
 8006584:	603b      	str	r3, [r7, #0]
 8006586:	4630      	mov	r0, r6
 8006588:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800658c:	4e2e      	ldr	r6, [pc, #184]	; (8006648 <_malloc_r+0xe4>)
 800658e:	f000 f89d 	bl	80066cc <__malloc_lock>
 8006592:	6833      	ldr	r3, [r6, #0]
 8006594:	461c      	mov	r4, r3
 8006596:	bb34      	cbnz	r4, 80065e6 <_malloc_r+0x82>
 8006598:	4629      	mov	r1, r5
 800659a:	4638      	mov	r0, r7
 800659c:	f7ff ffc2 	bl	8006524 <sbrk_aligned>
 80065a0:	1c43      	adds	r3, r0, #1
 80065a2:	4604      	mov	r4, r0
 80065a4:	d14d      	bne.n	8006642 <_malloc_r+0xde>
 80065a6:	6834      	ldr	r4, [r6, #0]
 80065a8:	4626      	mov	r6, r4
 80065aa:	2e00      	cmp	r6, #0
 80065ac:	d140      	bne.n	8006630 <_malloc_r+0xcc>
 80065ae:	6823      	ldr	r3, [r4, #0]
 80065b0:	4631      	mov	r1, r6
 80065b2:	4638      	mov	r0, r7
 80065b4:	eb04 0803 	add.w	r8, r4, r3
 80065b8:	f000 f878 	bl	80066ac <_sbrk_r>
 80065bc:	4580      	cmp	r8, r0
 80065be:	d13a      	bne.n	8006636 <_malloc_r+0xd2>
 80065c0:	6821      	ldr	r1, [r4, #0]
 80065c2:	3503      	adds	r5, #3
 80065c4:	1a6d      	subs	r5, r5, r1
 80065c6:	f025 0503 	bic.w	r5, r5, #3
 80065ca:	3508      	adds	r5, #8
 80065cc:	2d0c      	cmp	r5, #12
 80065ce:	bf38      	it	cc
 80065d0:	250c      	movcc	r5, #12
 80065d2:	4638      	mov	r0, r7
 80065d4:	4629      	mov	r1, r5
 80065d6:	f7ff ffa5 	bl	8006524 <sbrk_aligned>
 80065da:	3001      	adds	r0, #1
 80065dc:	d02b      	beq.n	8006636 <_malloc_r+0xd2>
 80065de:	6823      	ldr	r3, [r4, #0]
 80065e0:	442b      	add	r3, r5
 80065e2:	6023      	str	r3, [r4, #0]
 80065e4:	e00e      	b.n	8006604 <_malloc_r+0xa0>
 80065e6:	6822      	ldr	r2, [r4, #0]
 80065e8:	1b52      	subs	r2, r2, r5
 80065ea:	d41e      	bmi.n	800662a <_malloc_r+0xc6>
 80065ec:	2a0b      	cmp	r2, #11
 80065ee:	d916      	bls.n	800661e <_malloc_r+0xba>
 80065f0:	1961      	adds	r1, r4, r5
 80065f2:	42a3      	cmp	r3, r4
 80065f4:	6025      	str	r5, [r4, #0]
 80065f6:	bf18      	it	ne
 80065f8:	6059      	strne	r1, [r3, #4]
 80065fa:	6863      	ldr	r3, [r4, #4]
 80065fc:	bf08      	it	eq
 80065fe:	6031      	streq	r1, [r6, #0]
 8006600:	5162      	str	r2, [r4, r5]
 8006602:	604b      	str	r3, [r1, #4]
 8006604:	4638      	mov	r0, r7
 8006606:	f104 060b 	add.w	r6, r4, #11
 800660a:	f000 f865 	bl	80066d8 <__malloc_unlock>
 800660e:	f026 0607 	bic.w	r6, r6, #7
 8006612:	1d23      	adds	r3, r4, #4
 8006614:	1af2      	subs	r2, r6, r3
 8006616:	d0b6      	beq.n	8006586 <_malloc_r+0x22>
 8006618:	1b9b      	subs	r3, r3, r6
 800661a:	50a3      	str	r3, [r4, r2]
 800661c:	e7b3      	b.n	8006586 <_malloc_r+0x22>
 800661e:	6862      	ldr	r2, [r4, #4]
 8006620:	42a3      	cmp	r3, r4
 8006622:	bf0c      	ite	eq
 8006624:	6032      	streq	r2, [r6, #0]
 8006626:	605a      	strne	r2, [r3, #4]
 8006628:	e7ec      	b.n	8006604 <_malloc_r+0xa0>
 800662a:	4623      	mov	r3, r4
 800662c:	6864      	ldr	r4, [r4, #4]
 800662e:	e7b2      	b.n	8006596 <_malloc_r+0x32>
 8006630:	4634      	mov	r4, r6
 8006632:	6876      	ldr	r6, [r6, #4]
 8006634:	e7b9      	b.n	80065aa <_malloc_r+0x46>
 8006636:	230c      	movs	r3, #12
 8006638:	4638      	mov	r0, r7
 800663a:	603b      	str	r3, [r7, #0]
 800663c:	f000 f84c 	bl	80066d8 <__malloc_unlock>
 8006640:	e7a1      	b.n	8006586 <_malloc_r+0x22>
 8006642:	6025      	str	r5, [r4, #0]
 8006644:	e7de      	b.n	8006604 <_malloc_r+0xa0>
 8006646:	bf00      	nop
 8006648:	200005d4 	.word	0x200005d4

0800664c <_realloc_r>:
 800664c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006650:	4680      	mov	r8, r0
 8006652:	4614      	mov	r4, r2
 8006654:	460e      	mov	r6, r1
 8006656:	b921      	cbnz	r1, 8006662 <_realloc_r+0x16>
 8006658:	4611      	mov	r1, r2
 800665a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800665e:	f7ff bf81 	b.w	8006564 <_malloc_r>
 8006662:	b92a      	cbnz	r2, 8006670 <_realloc_r+0x24>
 8006664:	f7ff ff16 	bl	8006494 <_free_r>
 8006668:	4625      	mov	r5, r4
 800666a:	4628      	mov	r0, r5
 800666c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006670:	f000 f838 	bl	80066e4 <_malloc_usable_size_r>
 8006674:	4284      	cmp	r4, r0
 8006676:	4607      	mov	r7, r0
 8006678:	d802      	bhi.n	8006680 <_realloc_r+0x34>
 800667a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800667e:	d812      	bhi.n	80066a6 <_realloc_r+0x5a>
 8006680:	4621      	mov	r1, r4
 8006682:	4640      	mov	r0, r8
 8006684:	f7ff ff6e 	bl	8006564 <_malloc_r>
 8006688:	4605      	mov	r5, r0
 800668a:	2800      	cmp	r0, #0
 800668c:	d0ed      	beq.n	800666a <_realloc_r+0x1e>
 800668e:	42bc      	cmp	r4, r7
 8006690:	4622      	mov	r2, r4
 8006692:	4631      	mov	r1, r6
 8006694:	bf28      	it	cs
 8006696:	463a      	movcs	r2, r7
 8006698:	f7ff fed4 	bl	8006444 <memcpy>
 800669c:	4631      	mov	r1, r6
 800669e:	4640      	mov	r0, r8
 80066a0:	f7ff fef8 	bl	8006494 <_free_r>
 80066a4:	e7e1      	b.n	800666a <_realloc_r+0x1e>
 80066a6:	4635      	mov	r5, r6
 80066a8:	e7df      	b.n	800666a <_realloc_r+0x1e>
	...

080066ac <_sbrk_r>:
 80066ac:	b538      	push	{r3, r4, r5, lr}
 80066ae:	2300      	movs	r3, #0
 80066b0:	4d05      	ldr	r5, [pc, #20]	; (80066c8 <_sbrk_r+0x1c>)
 80066b2:	4604      	mov	r4, r0
 80066b4:	4608      	mov	r0, r1
 80066b6:	602b      	str	r3, [r5, #0]
 80066b8:	f7fb fb3e 	bl	8001d38 <_sbrk>
 80066bc:	1c43      	adds	r3, r0, #1
 80066be:	d102      	bne.n	80066c6 <_sbrk_r+0x1a>
 80066c0:	682b      	ldr	r3, [r5, #0]
 80066c2:	b103      	cbz	r3, 80066c6 <_sbrk_r+0x1a>
 80066c4:	6023      	str	r3, [r4, #0]
 80066c6:	bd38      	pop	{r3, r4, r5, pc}
 80066c8:	200005dc 	.word	0x200005dc

080066cc <__malloc_lock>:
 80066cc:	4801      	ldr	r0, [pc, #4]	; (80066d4 <__malloc_lock+0x8>)
 80066ce:	f000 b811 	b.w	80066f4 <__retarget_lock_acquire_recursive>
 80066d2:	bf00      	nop
 80066d4:	200005e0 	.word	0x200005e0

080066d8 <__malloc_unlock>:
 80066d8:	4801      	ldr	r0, [pc, #4]	; (80066e0 <__malloc_unlock+0x8>)
 80066da:	f000 b80c 	b.w	80066f6 <__retarget_lock_release_recursive>
 80066de:	bf00      	nop
 80066e0:	200005e0 	.word	0x200005e0

080066e4 <_malloc_usable_size_r>:
 80066e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80066e8:	1f18      	subs	r0, r3, #4
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	bfbc      	itt	lt
 80066ee:	580b      	ldrlt	r3, [r1, r0]
 80066f0:	18c0      	addlt	r0, r0, r3
 80066f2:	4770      	bx	lr

080066f4 <__retarget_lock_acquire_recursive>:
 80066f4:	4770      	bx	lr

080066f6 <__retarget_lock_release_recursive>:
 80066f6:	4770      	bx	lr

080066f8 <_init>:
 80066f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066fa:	bf00      	nop
 80066fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066fe:	bc08      	pop	{r3}
 8006700:	469e      	mov	lr, r3
 8006702:	4770      	bx	lr

08006704 <_fini>:
 8006704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006706:	bf00      	nop
 8006708:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800670a:	bc08      	pop	{r3}
 800670c:	469e      	mov	lr, r3
 800670e:	4770      	bx	lr
