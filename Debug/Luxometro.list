
Luxometro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007d14  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002a50  08007e20  08007e20  00017e20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a870  0800a870  000200c4  2**0
                  CONTENTS
  4 .ARM          00000000  0800a870  0800a870  000200c4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a870  0800a870  000200c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a870  0800a870  0001a870  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a874  0800a874  0001a874  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c4  20000000  0800a878  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005a8  200000c4  0800a93c  000200c4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000066c  0800a93c  0002066c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000eef9  00000000  00000000  000200ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023e7  00000000  00000000  0002efe6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f58  00000000  00000000  000313d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e68  00000000  00000000  00032328  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000189ab  00000000  00000000  00033190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011875  00000000  00000000  0004bb3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c43d  00000000  00000000  0005d3b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e97ed  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004670  00000000  00000000  000e9840  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000c4 	.word	0x200000c4
 8000128:	00000000 	.word	0x00000000
 800012c:	08007e08 	.word	0x08007e08

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000c8 	.word	0x200000c8
 8000148:	08007e08 	.word	0x08007e08

0800014c <__aeabi_fmul>:
 800014c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000150:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000154:	bf1e      	ittt	ne
 8000156:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800015a:	ea92 0f0c 	teqne	r2, ip
 800015e:	ea93 0f0c 	teqne	r3, ip
 8000162:	d06f      	beq.n	8000244 <__aeabi_fmul+0xf8>
 8000164:	441a      	add	r2, r3
 8000166:	ea80 0c01 	eor.w	ip, r0, r1
 800016a:	0240      	lsls	r0, r0, #9
 800016c:	bf18      	it	ne
 800016e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000172:	d01e      	beq.n	80001b2 <__aeabi_fmul+0x66>
 8000174:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000178:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 800017c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000180:	fba0 3101 	umull	r3, r1, r0, r1
 8000184:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000188:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800018c:	bf3e      	ittt	cc
 800018e:	0049      	lslcc	r1, r1, #1
 8000190:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000194:	005b      	lslcc	r3, r3, #1
 8000196:	ea40 0001 	orr.w	r0, r0, r1
 800019a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 800019e:	2afd      	cmp	r2, #253	; 0xfd
 80001a0:	d81d      	bhi.n	80001de <__aeabi_fmul+0x92>
 80001a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001a6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001aa:	bf08      	it	eq
 80001ac:	f020 0001 	biceq.w	r0, r0, #1
 80001b0:	4770      	bx	lr
 80001b2:	f090 0f00 	teq	r0, #0
 80001b6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001ba:	bf08      	it	eq
 80001bc:	0249      	lsleq	r1, r1, #9
 80001be:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001c2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001c6:	3a7f      	subs	r2, #127	; 0x7f
 80001c8:	bfc2      	ittt	gt
 80001ca:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001ce:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001d2:	4770      	bxgt	lr
 80001d4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001d8:	f04f 0300 	mov.w	r3, #0
 80001dc:	3a01      	subs	r2, #1
 80001de:	dc5d      	bgt.n	800029c <__aeabi_fmul+0x150>
 80001e0:	f112 0f19 	cmn.w	r2, #25
 80001e4:	bfdc      	itt	le
 80001e6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80001ea:	4770      	bxle	lr
 80001ec:	f1c2 0200 	rsb	r2, r2, #0
 80001f0:	0041      	lsls	r1, r0, #1
 80001f2:	fa21 f102 	lsr.w	r1, r1, r2
 80001f6:	f1c2 0220 	rsb	r2, r2, #32
 80001fa:	fa00 fc02 	lsl.w	ip, r0, r2
 80001fe:	ea5f 0031 	movs.w	r0, r1, rrx
 8000202:	f140 0000 	adc.w	r0, r0, #0
 8000206:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800020a:	bf08      	it	eq
 800020c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000210:	4770      	bx	lr
 8000212:	f092 0f00 	teq	r2, #0
 8000216:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800021a:	bf02      	ittt	eq
 800021c:	0040      	lsleq	r0, r0, #1
 800021e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000222:	3a01      	subeq	r2, #1
 8000224:	d0f9      	beq.n	800021a <__aeabi_fmul+0xce>
 8000226:	ea40 000c 	orr.w	r0, r0, ip
 800022a:	f093 0f00 	teq	r3, #0
 800022e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000232:	bf02      	ittt	eq
 8000234:	0049      	lsleq	r1, r1, #1
 8000236:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800023a:	3b01      	subeq	r3, #1
 800023c:	d0f9      	beq.n	8000232 <__aeabi_fmul+0xe6>
 800023e:	ea41 010c 	orr.w	r1, r1, ip
 8000242:	e78f      	b.n	8000164 <__aeabi_fmul+0x18>
 8000244:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000248:	ea92 0f0c 	teq	r2, ip
 800024c:	bf18      	it	ne
 800024e:	ea93 0f0c 	teqne	r3, ip
 8000252:	d00a      	beq.n	800026a <__aeabi_fmul+0x11e>
 8000254:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000258:	bf18      	it	ne
 800025a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800025e:	d1d8      	bne.n	8000212 <__aeabi_fmul+0xc6>
 8000260:	ea80 0001 	eor.w	r0, r0, r1
 8000264:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000268:	4770      	bx	lr
 800026a:	f090 0f00 	teq	r0, #0
 800026e:	bf17      	itett	ne
 8000270:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000274:	4608      	moveq	r0, r1
 8000276:	f091 0f00 	teqne	r1, #0
 800027a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800027e:	d014      	beq.n	80002aa <__aeabi_fmul+0x15e>
 8000280:	ea92 0f0c 	teq	r2, ip
 8000284:	d101      	bne.n	800028a <__aeabi_fmul+0x13e>
 8000286:	0242      	lsls	r2, r0, #9
 8000288:	d10f      	bne.n	80002aa <__aeabi_fmul+0x15e>
 800028a:	ea93 0f0c 	teq	r3, ip
 800028e:	d103      	bne.n	8000298 <__aeabi_fmul+0x14c>
 8000290:	024b      	lsls	r3, r1, #9
 8000292:	bf18      	it	ne
 8000294:	4608      	movne	r0, r1
 8000296:	d108      	bne.n	80002aa <__aeabi_fmul+0x15e>
 8000298:	ea80 0001 	eor.w	r0, r0, r1
 800029c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002a0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002a4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002a8:	4770      	bx	lr
 80002aa:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002ae:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002b2:	4770      	bx	lr

080002b4 <__aeabi_drsub>:
 80002b4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b8:	e002      	b.n	80002c0 <__adddf3>
 80002ba:	bf00      	nop

080002bc <__aeabi_dsub>:
 80002bc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002c0 <__adddf3>:
 80002c0:	b530      	push	{r4, r5, lr}
 80002c2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002ca:	ea94 0f05 	teq	r4, r5
 80002ce:	bf08      	it	eq
 80002d0:	ea90 0f02 	teqeq	r0, r2
 80002d4:	bf1f      	itttt	ne
 80002d6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002da:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002de:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002e2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e6:	f000 80e2 	beq.w	80004ae <__adddf3+0x1ee>
 80002ea:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ee:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002f2:	bfb8      	it	lt
 80002f4:	426d      	neglt	r5, r5
 80002f6:	dd0c      	ble.n	8000312 <__adddf3+0x52>
 80002f8:	442c      	add	r4, r5
 80002fa:	ea80 0202 	eor.w	r2, r0, r2
 80002fe:	ea81 0303 	eor.w	r3, r1, r3
 8000302:	ea82 0000 	eor.w	r0, r2, r0
 8000306:	ea83 0101 	eor.w	r1, r3, r1
 800030a:	ea80 0202 	eor.w	r2, r0, r2
 800030e:	ea81 0303 	eor.w	r3, r1, r3
 8000312:	2d36      	cmp	r5, #54	; 0x36
 8000314:	bf88      	it	hi
 8000316:	bd30      	pophi	{r4, r5, pc}
 8000318:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800031c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000320:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000324:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x70>
 800032a:	4240      	negs	r0, r0
 800032c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000330:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000334:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000338:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800033c:	d002      	beq.n	8000344 <__adddf3+0x84>
 800033e:	4252      	negs	r2, r2
 8000340:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000344:	ea94 0f05 	teq	r4, r5
 8000348:	f000 80a7 	beq.w	800049a <__adddf3+0x1da>
 800034c:	f1a4 0401 	sub.w	r4, r4, #1
 8000350:	f1d5 0e20 	rsbs	lr, r5, #32
 8000354:	db0d      	blt.n	8000372 <__adddf3+0xb2>
 8000356:	fa02 fc0e 	lsl.w	ip, r2, lr
 800035a:	fa22 f205 	lsr.w	r2, r2, r5
 800035e:	1880      	adds	r0, r0, r2
 8000360:	f141 0100 	adc.w	r1, r1, #0
 8000364:	fa03 f20e 	lsl.w	r2, r3, lr
 8000368:	1880      	adds	r0, r0, r2
 800036a:	fa43 f305 	asr.w	r3, r3, r5
 800036e:	4159      	adcs	r1, r3
 8000370:	e00e      	b.n	8000390 <__adddf3+0xd0>
 8000372:	f1a5 0520 	sub.w	r5, r5, #32
 8000376:	f10e 0e20 	add.w	lr, lr, #32
 800037a:	2a01      	cmp	r2, #1
 800037c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000380:	bf28      	it	cs
 8000382:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	18c0      	adds	r0, r0, r3
 800038c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000390:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000394:	d507      	bpl.n	80003a6 <__adddf3+0xe6>
 8000396:	f04f 0e00 	mov.w	lr, #0
 800039a:	f1dc 0c00 	rsbs	ip, ip, #0
 800039e:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003a2:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003aa:	d31b      	bcc.n	80003e4 <__adddf3+0x124>
 80003ac:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003b0:	d30c      	bcc.n	80003cc <__adddf3+0x10c>
 80003b2:	0849      	lsrs	r1, r1, #1
 80003b4:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003bc:	f104 0401 	add.w	r4, r4, #1
 80003c0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c8:	f080 809a 	bcs.w	8000500 <__adddf3+0x240>
 80003cc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003d0:	bf08      	it	eq
 80003d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d6:	f150 0000 	adcs.w	r0, r0, #0
 80003da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003de:	ea41 0105 	orr.w	r1, r1, r5
 80003e2:	bd30      	pop	{r4, r5, pc}
 80003e4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e8:	4140      	adcs	r0, r0
 80003ea:	eb41 0101 	adc.w	r1, r1, r1
 80003ee:	3c01      	subs	r4, #1
 80003f0:	bf28      	it	cs
 80003f2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f6:	d2e9      	bcs.n	80003cc <__adddf3+0x10c>
 80003f8:	f091 0f00 	teq	r1, #0
 80003fc:	bf04      	itt	eq
 80003fe:	4601      	moveq	r1, r0
 8000400:	2000      	moveq	r0, #0
 8000402:	fab1 f381 	clz	r3, r1
 8000406:	bf08      	it	eq
 8000408:	3320      	addeq	r3, #32
 800040a:	f1a3 030b 	sub.w	r3, r3, #11
 800040e:	f1b3 0220 	subs.w	r2, r3, #32
 8000412:	da0c      	bge.n	800042e <__adddf3+0x16e>
 8000414:	320c      	adds	r2, #12
 8000416:	dd08      	ble.n	800042a <__adddf3+0x16a>
 8000418:	f102 0c14 	add.w	ip, r2, #20
 800041c:	f1c2 020c 	rsb	r2, r2, #12
 8000420:	fa01 f00c 	lsl.w	r0, r1, ip
 8000424:	fa21 f102 	lsr.w	r1, r1, r2
 8000428:	e00c      	b.n	8000444 <__adddf3+0x184>
 800042a:	f102 0214 	add.w	r2, r2, #20
 800042e:	bfd8      	it	le
 8000430:	f1c2 0c20 	rsble	ip, r2, #32
 8000434:	fa01 f102 	lsl.w	r1, r1, r2
 8000438:	fa20 fc0c 	lsr.w	ip, r0, ip
 800043c:	bfdc      	itt	le
 800043e:	ea41 010c 	orrle.w	r1, r1, ip
 8000442:	4090      	lslle	r0, r2
 8000444:	1ae4      	subs	r4, r4, r3
 8000446:	bfa2      	ittt	ge
 8000448:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800044c:	4329      	orrge	r1, r5
 800044e:	bd30      	popge	{r4, r5, pc}
 8000450:	ea6f 0404 	mvn.w	r4, r4
 8000454:	3c1f      	subs	r4, #31
 8000456:	da1c      	bge.n	8000492 <__adddf3+0x1d2>
 8000458:	340c      	adds	r4, #12
 800045a:	dc0e      	bgt.n	800047a <__adddf3+0x1ba>
 800045c:	f104 0414 	add.w	r4, r4, #20
 8000460:	f1c4 0220 	rsb	r2, r4, #32
 8000464:	fa20 f004 	lsr.w	r0, r0, r4
 8000468:	fa01 f302 	lsl.w	r3, r1, r2
 800046c:	ea40 0003 	orr.w	r0, r0, r3
 8000470:	fa21 f304 	lsr.w	r3, r1, r4
 8000474:	ea45 0103 	orr.w	r1, r5, r3
 8000478:	bd30      	pop	{r4, r5, pc}
 800047a:	f1c4 040c 	rsb	r4, r4, #12
 800047e:	f1c4 0220 	rsb	r2, r4, #32
 8000482:	fa20 f002 	lsr.w	r0, r0, r2
 8000486:	fa01 f304 	lsl.w	r3, r1, r4
 800048a:	ea40 0003 	orr.w	r0, r0, r3
 800048e:	4629      	mov	r1, r5
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	fa21 f004 	lsr.w	r0, r1, r4
 8000496:	4629      	mov	r1, r5
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	f094 0f00 	teq	r4, #0
 800049e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004a2:	bf06      	itte	eq
 80004a4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a8:	3401      	addeq	r4, #1
 80004aa:	3d01      	subne	r5, #1
 80004ac:	e74e      	b.n	800034c <__adddf3+0x8c>
 80004ae:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004b2:	bf18      	it	ne
 80004b4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b8:	d029      	beq.n	800050e <__adddf3+0x24e>
 80004ba:	ea94 0f05 	teq	r4, r5
 80004be:	bf08      	it	eq
 80004c0:	ea90 0f02 	teqeq	r0, r2
 80004c4:	d005      	beq.n	80004d2 <__adddf3+0x212>
 80004c6:	ea54 0c00 	orrs.w	ip, r4, r0
 80004ca:	bf04      	itt	eq
 80004cc:	4619      	moveq	r1, r3
 80004ce:	4610      	moveq	r0, r2
 80004d0:	bd30      	pop	{r4, r5, pc}
 80004d2:	ea91 0f03 	teq	r1, r3
 80004d6:	bf1e      	ittt	ne
 80004d8:	2100      	movne	r1, #0
 80004da:	2000      	movne	r0, #0
 80004dc:	bd30      	popne	{r4, r5, pc}
 80004de:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004e2:	d105      	bne.n	80004f0 <__adddf3+0x230>
 80004e4:	0040      	lsls	r0, r0, #1
 80004e6:	4149      	adcs	r1, r1
 80004e8:	bf28      	it	cs
 80004ea:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ee:	bd30      	pop	{r4, r5, pc}
 80004f0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f4:	bf3c      	itt	cc
 80004f6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004fa:	bd30      	popcc	{r4, r5, pc}
 80004fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000500:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000504:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000508:	f04f 0000 	mov.w	r0, #0
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000512:	bf1a      	itte	ne
 8000514:	4619      	movne	r1, r3
 8000516:	4610      	movne	r0, r2
 8000518:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800051c:	bf1c      	itt	ne
 800051e:	460b      	movne	r3, r1
 8000520:	4602      	movne	r2, r0
 8000522:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000526:	bf06      	itte	eq
 8000528:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800052c:	ea91 0f03 	teqeq	r1, r3
 8000530:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000534:	bd30      	pop	{r4, r5, pc}
 8000536:	bf00      	nop

08000538 <__aeabi_ui2d>:
 8000538:	f090 0f00 	teq	r0, #0
 800053c:	bf04      	itt	eq
 800053e:	2100      	moveq	r1, #0
 8000540:	4770      	bxeq	lr
 8000542:	b530      	push	{r4, r5, lr}
 8000544:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000548:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800054c:	f04f 0500 	mov.w	r5, #0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e750      	b.n	80003f8 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_i2d>:
 8000558:	f090 0f00 	teq	r0, #0
 800055c:	bf04      	itt	eq
 800055e:	2100      	moveq	r1, #0
 8000560:	4770      	bxeq	lr
 8000562:	b530      	push	{r4, r5, lr}
 8000564:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000568:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000570:	bf48      	it	mi
 8000572:	4240      	negmi	r0, r0
 8000574:	f04f 0100 	mov.w	r1, #0
 8000578:	e73e      	b.n	80003f8 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_f2d>:
 800057c:	0042      	lsls	r2, r0, #1
 800057e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000582:	ea4f 0131 	mov.w	r1, r1, rrx
 8000586:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800058a:	bf1f      	itttt	ne
 800058c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000590:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000594:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000598:	4770      	bxne	lr
 800059a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059e:	bf08      	it	eq
 80005a0:	4770      	bxeq	lr
 80005a2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a6:	bf04      	itt	eq
 80005a8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005ac:	4770      	bxeq	lr
 80005ae:	b530      	push	{r4, r5, lr}
 80005b0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005bc:	e71c      	b.n	80003f8 <__adddf3+0x138>
 80005be:	bf00      	nop

080005c0 <__aeabi_ul2d>:
 80005c0:	ea50 0201 	orrs.w	r2, r0, r1
 80005c4:	bf08      	it	eq
 80005c6:	4770      	bxeq	lr
 80005c8:	b530      	push	{r4, r5, lr}
 80005ca:	f04f 0500 	mov.w	r5, #0
 80005ce:	e00a      	b.n	80005e6 <__aeabi_l2d+0x16>

080005d0 <__aeabi_l2d>:
 80005d0:	ea50 0201 	orrs.w	r2, r0, r1
 80005d4:	bf08      	it	eq
 80005d6:	4770      	bxeq	lr
 80005d8:	b530      	push	{r4, r5, lr}
 80005da:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005de:	d502      	bpl.n	80005e6 <__aeabi_l2d+0x16>
 80005e0:	4240      	negs	r0, r0
 80005e2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ea:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ee:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005f2:	f43f aed8 	beq.w	80003a6 <__adddf3+0xe6>
 80005f6:	f04f 0203 	mov.w	r2, #3
 80005fa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fe:	bf18      	it	ne
 8000600:	3203      	addne	r2, #3
 8000602:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000606:	bf18      	it	ne
 8000608:	3203      	addne	r2, #3
 800060a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060e:	f1c2 0320 	rsb	r3, r2, #32
 8000612:	fa00 fc03 	lsl.w	ip, r0, r3
 8000616:	fa20 f002 	lsr.w	r0, r0, r2
 800061a:	fa01 fe03 	lsl.w	lr, r1, r3
 800061e:	ea40 000e 	orr.w	r0, r0, lr
 8000622:	fa21 f102 	lsr.w	r1, r1, r2
 8000626:	4414      	add	r4, r2
 8000628:	e6bd      	b.n	80003a6 <__adddf3+0xe6>
 800062a:	bf00      	nop

0800062c <__aeabi_dmul>:
 800062c:	b570      	push	{r4, r5, r6, lr}
 800062e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000632:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000636:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800063a:	bf1d      	ittte	ne
 800063c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000640:	ea94 0f0c 	teqne	r4, ip
 8000644:	ea95 0f0c 	teqne	r5, ip
 8000648:	f000 f8de 	bleq	8000808 <__aeabi_dmul+0x1dc>
 800064c:	442c      	add	r4, r5
 800064e:	ea81 0603 	eor.w	r6, r1, r3
 8000652:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000656:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800065a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065e:	bf18      	it	ne
 8000660:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800066c:	d038      	beq.n	80006e0 <__aeabi_dmul+0xb4>
 800066e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000672:	f04f 0500 	mov.w	r5, #0
 8000676:	fbe1 e502 	umlal	lr, r5, r1, r2
 800067a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000682:	f04f 0600 	mov.w	r6, #0
 8000686:	fbe1 5603 	umlal	r5, r6, r1, r3
 800068a:	f09c 0f00 	teq	ip, #0
 800068e:	bf18      	it	ne
 8000690:	f04e 0e01 	orrne.w	lr, lr, #1
 8000694:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000698:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800069c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006a0:	d204      	bcs.n	80006ac <__aeabi_dmul+0x80>
 80006a2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a6:	416d      	adcs	r5, r5
 80006a8:	eb46 0606 	adc.w	r6, r6, r6
 80006ac:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006b0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006bc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006c0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c4:	bf88      	it	hi
 80006c6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006ca:	d81e      	bhi.n	800070a <__aeabi_dmul+0xde>
 80006cc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006d0:	bf08      	it	eq
 80006d2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d6:	f150 0000 	adcs.w	r0, r0, #0
 80006da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006de:	bd70      	pop	{r4, r5, r6, pc}
 80006e0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e4:	ea46 0101 	orr.w	r1, r6, r1
 80006e8:	ea40 0002 	orr.w	r0, r0, r2
 80006ec:	ea81 0103 	eor.w	r1, r1, r3
 80006f0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f4:	bfc2      	ittt	gt
 80006f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000700:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000704:	f04f 0e00 	mov.w	lr, #0
 8000708:	3c01      	subs	r4, #1
 800070a:	f300 80ab 	bgt.w	8000864 <__aeabi_dmul+0x238>
 800070e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000712:	bfde      	ittt	le
 8000714:	2000      	movle	r0, #0
 8000716:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800071a:	bd70      	pople	{r4, r5, r6, pc}
 800071c:	f1c4 0400 	rsb	r4, r4, #0
 8000720:	3c20      	subs	r4, #32
 8000722:	da35      	bge.n	8000790 <__aeabi_dmul+0x164>
 8000724:	340c      	adds	r4, #12
 8000726:	dc1b      	bgt.n	8000760 <__aeabi_dmul+0x134>
 8000728:	f104 0414 	add.w	r4, r4, #20
 800072c:	f1c4 0520 	rsb	r5, r4, #32
 8000730:	fa00 f305 	lsl.w	r3, r0, r5
 8000734:	fa20 f004 	lsr.w	r0, r0, r4
 8000738:	fa01 f205 	lsl.w	r2, r1, r5
 800073c:	ea40 0002 	orr.w	r0, r0, r2
 8000740:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000744:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	fa21 f604 	lsr.w	r6, r1, r4
 8000750:	eb42 0106 	adc.w	r1, r2, r6
 8000754:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000758:	bf08      	it	eq
 800075a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075e:	bd70      	pop	{r4, r5, r6, pc}
 8000760:	f1c4 040c 	rsb	r4, r4, #12
 8000764:	f1c4 0520 	rsb	r5, r4, #32
 8000768:	fa00 f304 	lsl.w	r3, r0, r4
 800076c:	fa20 f005 	lsr.w	r0, r0, r5
 8000770:	fa01 f204 	lsl.w	r2, r1, r4
 8000774:	ea40 0002 	orr.w	r0, r0, r2
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000780:	f141 0100 	adc.w	r1, r1, #0
 8000784:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000788:	bf08      	it	eq
 800078a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078e:	bd70      	pop	{r4, r5, r6, pc}
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f205 	lsl.w	r2, r0, r5
 8000798:	ea4e 0e02 	orr.w	lr, lr, r2
 800079c:	fa20 f304 	lsr.w	r3, r0, r4
 80007a0:	fa01 f205 	lsl.w	r2, r1, r5
 80007a4:	ea43 0302 	orr.w	r3, r3, r2
 80007a8:	fa21 f004 	lsr.w	r0, r1, r4
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	fa21 f204 	lsr.w	r2, r1, r4
 80007b4:	ea20 0002 	bic.w	r0, r0, r2
 80007b8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007bc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c0:	bf08      	it	eq
 80007c2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c6:	bd70      	pop	{r4, r5, r6, pc}
 80007c8:	f094 0f00 	teq	r4, #0
 80007cc:	d10f      	bne.n	80007ee <__aeabi_dmul+0x1c2>
 80007ce:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007d2:	0040      	lsls	r0, r0, #1
 80007d4:	eb41 0101 	adc.w	r1, r1, r1
 80007d8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007dc:	bf08      	it	eq
 80007de:	3c01      	subeq	r4, #1
 80007e0:	d0f7      	beq.n	80007d2 <__aeabi_dmul+0x1a6>
 80007e2:	ea41 0106 	orr.w	r1, r1, r6
 80007e6:	f095 0f00 	teq	r5, #0
 80007ea:	bf18      	it	ne
 80007ec:	4770      	bxne	lr
 80007ee:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007f2:	0052      	lsls	r2, r2, #1
 80007f4:	eb43 0303 	adc.w	r3, r3, r3
 80007f8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007fc:	bf08      	it	eq
 80007fe:	3d01      	subeq	r5, #1
 8000800:	d0f7      	beq.n	80007f2 <__aeabi_dmul+0x1c6>
 8000802:	ea43 0306 	orr.w	r3, r3, r6
 8000806:	4770      	bx	lr
 8000808:	ea94 0f0c 	teq	r4, ip
 800080c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000810:	bf18      	it	ne
 8000812:	ea95 0f0c 	teqne	r5, ip
 8000816:	d00c      	beq.n	8000832 <__aeabi_dmul+0x206>
 8000818:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800081c:	bf18      	it	ne
 800081e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000822:	d1d1      	bne.n	80007c8 <__aeabi_dmul+0x19c>
 8000824:	ea81 0103 	eor.w	r1, r1, r3
 8000828:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000836:	bf06      	itte	eq
 8000838:	4610      	moveq	r0, r2
 800083a:	4619      	moveq	r1, r3
 800083c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000840:	d019      	beq.n	8000876 <__aeabi_dmul+0x24a>
 8000842:	ea94 0f0c 	teq	r4, ip
 8000846:	d102      	bne.n	800084e <__aeabi_dmul+0x222>
 8000848:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800084c:	d113      	bne.n	8000876 <__aeabi_dmul+0x24a>
 800084e:	ea95 0f0c 	teq	r5, ip
 8000852:	d105      	bne.n	8000860 <__aeabi_dmul+0x234>
 8000854:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000858:	bf1c      	itt	ne
 800085a:	4610      	movne	r0, r2
 800085c:	4619      	movne	r1, r3
 800085e:	d10a      	bne.n	8000876 <__aeabi_dmul+0x24a>
 8000860:	ea81 0103 	eor.w	r1, r1, r3
 8000864:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000868:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800086c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000870:	f04f 0000 	mov.w	r0, #0
 8000874:	bd70      	pop	{r4, r5, r6, pc}
 8000876:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800087a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087e:	bd70      	pop	{r4, r5, r6, pc}

08000880 <__aeabi_ddiv>:
 8000880:	b570      	push	{r4, r5, r6, lr}
 8000882:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000886:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800088a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088e:	bf1d      	ittte	ne
 8000890:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000894:	ea94 0f0c 	teqne	r4, ip
 8000898:	ea95 0f0c 	teqne	r5, ip
 800089c:	f000 f8a7 	bleq	80009ee <__aeabi_ddiv+0x16e>
 80008a0:	eba4 0405 	sub.w	r4, r4, r5
 80008a4:	ea81 0e03 	eor.w	lr, r1, r3
 80008a8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008ac:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008b0:	f000 8088 	beq.w	80009c4 <__aeabi_ddiv+0x144>
 80008b4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008bc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008c0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008cc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008d0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d8:	429d      	cmp	r5, r3
 80008da:	bf08      	it	eq
 80008dc:	4296      	cmpeq	r6, r2
 80008de:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008e2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e6:	d202      	bcs.n	80008ee <__aeabi_ddiv+0x6e>
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	1ab6      	subs	r6, r6, r2
 80008f0:	eb65 0503 	sbc.w	r5, r5, r3
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fe:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000902:	ebb6 0e02 	subs.w	lr, r6, r2
 8000906:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090a:	bf22      	ittt	cs
 800090c:	1ab6      	subcs	r6, r6, r2
 800090e:	4675      	movcs	r5, lr
 8000910:	ea40 000c 	orrcs.w	r0, r0, ip
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	ebb6 0e02 	subs.w	lr, r6, r2
 800091e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000922:	bf22      	ittt	cs
 8000924:	1ab6      	subcs	r6, r6, r2
 8000926:	4675      	movcs	r5, lr
 8000928:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800092c:	085b      	lsrs	r3, r3, #1
 800092e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000932:	ebb6 0e02 	subs.w	lr, r6, r2
 8000936:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093a:	bf22      	ittt	cs
 800093c:	1ab6      	subcs	r6, r6, r2
 800093e:	4675      	movcs	r5, lr
 8000940:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000944:	085b      	lsrs	r3, r3, #1
 8000946:	ea4f 0232 	mov.w	r2, r2, rrx
 800094a:	ebb6 0e02 	subs.w	lr, r6, r2
 800094e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000952:	bf22      	ittt	cs
 8000954:	1ab6      	subcs	r6, r6, r2
 8000956:	4675      	movcs	r5, lr
 8000958:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800095c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000960:	d018      	beq.n	8000994 <__aeabi_ddiv+0x114>
 8000962:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000966:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800096a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000972:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000976:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800097a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097e:	d1c0      	bne.n	8000902 <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	d10b      	bne.n	800099e <__aeabi_ddiv+0x11e>
 8000986:	ea41 0100 	orr.w	r1, r1, r0
 800098a:	f04f 0000 	mov.w	r0, #0
 800098e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000992:	e7b6      	b.n	8000902 <__aeabi_ddiv+0x82>
 8000994:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000998:	bf04      	itt	eq
 800099a:	4301      	orreq	r1, r0
 800099c:	2000      	moveq	r0, #0
 800099e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009a2:	bf88      	it	hi
 80009a4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a8:	f63f aeaf 	bhi.w	800070a <__aeabi_dmul+0xde>
 80009ac:	ebb5 0c03 	subs.w	ip, r5, r3
 80009b0:	bf04      	itt	eq
 80009b2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ba:	f150 0000 	adcs.w	r0, r0, #0
 80009be:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009c2:	bd70      	pop	{r4, r5, r6, pc}
 80009c4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009cc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009d0:	bfc2      	ittt	gt
 80009d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009da:	bd70      	popgt	{r4, r5, r6, pc}
 80009dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009e0:	f04f 0e00 	mov.w	lr, #0
 80009e4:	3c01      	subs	r4, #1
 80009e6:	e690      	b.n	800070a <__aeabi_dmul+0xde>
 80009e8:	ea45 0e06 	orr.w	lr, r5, r6
 80009ec:	e68d      	b.n	800070a <__aeabi_dmul+0xde>
 80009ee:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009f2:	ea94 0f0c 	teq	r4, ip
 80009f6:	bf08      	it	eq
 80009f8:	ea95 0f0c 	teqeq	r5, ip
 80009fc:	f43f af3b 	beq.w	8000876 <__aeabi_dmul+0x24a>
 8000a00:	ea94 0f0c 	teq	r4, ip
 8000a04:	d10a      	bne.n	8000a1c <__aeabi_ddiv+0x19c>
 8000a06:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a0a:	f47f af34 	bne.w	8000876 <__aeabi_dmul+0x24a>
 8000a0e:	ea95 0f0c 	teq	r5, ip
 8000a12:	f47f af25 	bne.w	8000860 <__aeabi_dmul+0x234>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e72c      	b.n	8000876 <__aeabi_dmul+0x24a>
 8000a1c:	ea95 0f0c 	teq	r5, ip
 8000a20:	d106      	bne.n	8000a30 <__aeabi_ddiv+0x1b0>
 8000a22:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a26:	f43f aefd 	beq.w	8000824 <__aeabi_dmul+0x1f8>
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	e722      	b.n	8000876 <__aeabi_dmul+0x24a>
 8000a30:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a34:	bf18      	it	ne
 8000a36:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a3a:	f47f aec5 	bne.w	80007c8 <__aeabi_dmul+0x19c>
 8000a3e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a42:	f47f af0d 	bne.w	8000860 <__aeabi_dmul+0x234>
 8000a46:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a4a:	f47f aeeb 	bne.w	8000824 <__aeabi_dmul+0x1f8>
 8000a4e:	e712      	b.n	8000876 <__aeabi_dmul+0x24a>

08000a50 <__aeabi_d2uiz>:
 8000a50:	004a      	lsls	r2, r1, #1
 8000a52:	d211      	bcs.n	8000a78 <__aeabi_d2uiz+0x28>
 8000a54:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a58:	d211      	bcs.n	8000a7e <__aeabi_d2uiz+0x2e>
 8000a5a:	d50d      	bpl.n	8000a78 <__aeabi_d2uiz+0x28>
 8000a5c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a60:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a64:	d40e      	bmi.n	8000a84 <__aeabi_d2uiz+0x34>
 8000a66:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a6a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	4770      	bx	lr
 8000a78:	f04f 0000 	mov.w	r0, #0
 8000a7c:	4770      	bx	lr
 8000a7e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a82:	d102      	bne.n	8000a8a <__aeabi_d2uiz+0x3a>
 8000a84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a88:	4770      	bx	lr
 8000a8a:	f04f 0000 	mov.w	r0, #0
 8000a8e:	4770      	bx	lr

08000a90 <__aeabi_d2f>:
 8000a90:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a94:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a98:	bf24      	itt	cs
 8000a9a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a9e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aa2:	d90d      	bls.n	8000ac0 <__aeabi_d2f+0x30>
 8000aa4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aac:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ab0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ab4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab8:	bf08      	it	eq
 8000aba:	f020 0001 	biceq.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ac4:	d121      	bne.n	8000b0a <__aeabi_d2f+0x7a>
 8000ac6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aca:	bfbc      	itt	lt
 8000acc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ad0:	4770      	bxlt	lr
 8000ad2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ad6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ada:	f1c2 0218 	rsb	r2, r2, #24
 8000ade:	f1c2 0c20 	rsb	ip, r2, #32
 8000ae2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ae6:	fa20 f002 	lsr.w	r0, r0, r2
 8000aea:	bf18      	it	ne
 8000aec:	f040 0001 	orrne.w	r0, r0, #1
 8000af0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000af4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000afc:	ea40 000c 	orr.w	r0, r0, ip
 8000b00:	fa23 f302 	lsr.w	r3, r3, r2
 8000b04:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b08:	e7cc      	b.n	8000aa4 <__aeabi_d2f+0x14>
 8000b0a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b0e:	d107      	bne.n	8000b20 <__aeabi_d2f+0x90>
 8000b10:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b14:	bf1e      	ittt	ne
 8000b16:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b1a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b1e:	4770      	bxne	lr
 8000b20:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b24:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b28:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop

08000b30 <__aeabi_frsub>:
 8000b30:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b34:	e002      	b.n	8000b3c <__addsf3>
 8000b36:	bf00      	nop

08000b38 <__aeabi_fsub>:
 8000b38:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b3c <__addsf3>:
 8000b3c:	0042      	lsls	r2, r0, #1
 8000b3e:	bf1f      	itttt	ne
 8000b40:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b44:	ea92 0f03 	teqne	r2, r3
 8000b48:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b4c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b50:	d06a      	beq.n	8000c28 <__addsf3+0xec>
 8000b52:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b56:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b5a:	bfc1      	itttt	gt
 8000b5c:	18d2      	addgt	r2, r2, r3
 8000b5e:	4041      	eorgt	r1, r0
 8000b60:	4048      	eorgt	r0, r1
 8000b62:	4041      	eorgt	r1, r0
 8000b64:	bfb8      	it	lt
 8000b66:	425b      	neglt	r3, r3
 8000b68:	2b19      	cmp	r3, #25
 8000b6a:	bf88      	it	hi
 8000b6c:	4770      	bxhi	lr
 8000b6e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b72:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b76:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b7a:	bf18      	it	ne
 8000b7c:	4240      	negne	r0, r0
 8000b7e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b82:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b86:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b8a:	bf18      	it	ne
 8000b8c:	4249      	negne	r1, r1
 8000b8e:	ea92 0f03 	teq	r2, r3
 8000b92:	d03f      	beq.n	8000c14 <__addsf3+0xd8>
 8000b94:	f1a2 0201 	sub.w	r2, r2, #1
 8000b98:	fa41 fc03 	asr.w	ip, r1, r3
 8000b9c:	eb10 000c 	adds.w	r0, r0, ip
 8000ba0:	f1c3 0320 	rsb	r3, r3, #32
 8000ba4:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bac:	d502      	bpl.n	8000bb4 <__addsf3+0x78>
 8000bae:	4249      	negs	r1, r1
 8000bb0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bb4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb8:	d313      	bcc.n	8000be2 <__addsf3+0xa6>
 8000bba:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bbe:	d306      	bcc.n	8000bce <__addsf3+0x92>
 8000bc0:	0840      	lsrs	r0, r0, #1
 8000bc2:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bc6:	f102 0201 	add.w	r2, r2, #1
 8000bca:	2afe      	cmp	r2, #254	; 0xfe
 8000bcc:	d251      	bcs.n	8000c72 <__addsf3+0x136>
 8000bce:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bd2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bd6:	bf08      	it	eq
 8000bd8:	f020 0001 	biceq.w	r0, r0, #1
 8000bdc:	ea40 0003 	orr.w	r0, r0, r3
 8000be0:	4770      	bx	lr
 8000be2:	0049      	lsls	r1, r1, #1
 8000be4:	eb40 0000 	adc.w	r0, r0, r0
 8000be8:	3a01      	subs	r2, #1
 8000bea:	bf28      	it	cs
 8000bec:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000bf0:	d2ed      	bcs.n	8000bce <__addsf3+0x92>
 8000bf2:	fab0 fc80 	clz	ip, r0
 8000bf6:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bfa:	ebb2 020c 	subs.w	r2, r2, ip
 8000bfe:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c02:	bfaa      	itet	ge
 8000c04:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c08:	4252      	neglt	r2, r2
 8000c0a:	4318      	orrge	r0, r3
 8000c0c:	bfbc      	itt	lt
 8000c0e:	40d0      	lsrlt	r0, r2
 8000c10:	4318      	orrlt	r0, r3
 8000c12:	4770      	bx	lr
 8000c14:	f092 0f00 	teq	r2, #0
 8000c18:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c1c:	bf06      	itte	eq
 8000c1e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c22:	3201      	addeq	r2, #1
 8000c24:	3b01      	subne	r3, #1
 8000c26:	e7b5      	b.n	8000b94 <__addsf3+0x58>
 8000c28:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c2c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c30:	bf18      	it	ne
 8000c32:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c36:	d021      	beq.n	8000c7c <__addsf3+0x140>
 8000c38:	ea92 0f03 	teq	r2, r3
 8000c3c:	d004      	beq.n	8000c48 <__addsf3+0x10c>
 8000c3e:	f092 0f00 	teq	r2, #0
 8000c42:	bf08      	it	eq
 8000c44:	4608      	moveq	r0, r1
 8000c46:	4770      	bx	lr
 8000c48:	ea90 0f01 	teq	r0, r1
 8000c4c:	bf1c      	itt	ne
 8000c4e:	2000      	movne	r0, #0
 8000c50:	4770      	bxne	lr
 8000c52:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c56:	d104      	bne.n	8000c62 <__addsf3+0x126>
 8000c58:	0040      	lsls	r0, r0, #1
 8000c5a:	bf28      	it	cs
 8000c5c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c60:	4770      	bx	lr
 8000c62:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c66:	bf3c      	itt	cc
 8000c68:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c6c:	4770      	bxcc	lr
 8000c6e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c72:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c76:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c7a:	4770      	bx	lr
 8000c7c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c80:	bf16      	itet	ne
 8000c82:	4608      	movne	r0, r1
 8000c84:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c88:	4601      	movne	r1, r0
 8000c8a:	0242      	lsls	r2, r0, #9
 8000c8c:	bf06      	itte	eq
 8000c8e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c92:	ea90 0f01 	teqeq	r0, r1
 8000c96:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c9a:	4770      	bx	lr

08000c9c <__aeabi_ui2f>:
 8000c9c:	f04f 0300 	mov.w	r3, #0
 8000ca0:	e004      	b.n	8000cac <__aeabi_i2f+0x8>
 8000ca2:	bf00      	nop

08000ca4 <__aeabi_i2f>:
 8000ca4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca8:	bf48      	it	mi
 8000caa:	4240      	negmi	r0, r0
 8000cac:	ea5f 0c00 	movs.w	ip, r0
 8000cb0:	bf08      	it	eq
 8000cb2:	4770      	bxeq	lr
 8000cb4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb8:	4601      	mov	r1, r0
 8000cba:	f04f 0000 	mov.w	r0, #0
 8000cbe:	e01c      	b.n	8000cfa <__aeabi_l2f+0x2a>

08000cc0 <__aeabi_ul2f>:
 8000cc0:	ea50 0201 	orrs.w	r2, r0, r1
 8000cc4:	bf08      	it	eq
 8000cc6:	4770      	bxeq	lr
 8000cc8:	f04f 0300 	mov.w	r3, #0
 8000ccc:	e00a      	b.n	8000ce4 <__aeabi_l2f+0x14>
 8000cce:	bf00      	nop

08000cd0 <__aeabi_l2f>:
 8000cd0:	ea50 0201 	orrs.w	r2, r0, r1
 8000cd4:	bf08      	it	eq
 8000cd6:	4770      	bxeq	lr
 8000cd8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cdc:	d502      	bpl.n	8000ce4 <__aeabi_l2f+0x14>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	ea5f 0c01 	movs.w	ip, r1
 8000ce8:	bf02      	ittt	eq
 8000cea:	4684      	moveq	ip, r0
 8000cec:	4601      	moveq	r1, r0
 8000cee:	2000      	moveq	r0, #0
 8000cf0:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cf4:	bf08      	it	eq
 8000cf6:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cfa:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cfe:	fabc f28c 	clz	r2, ip
 8000d02:	3a08      	subs	r2, #8
 8000d04:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d08:	db10      	blt.n	8000d2c <__aeabi_l2f+0x5c>
 8000d0a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d0e:	4463      	add	r3, ip
 8000d10:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d14:	f1c2 0220 	rsb	r2, r2, #32
 8000d18:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d1c:	fa20 f202 	lsr.w	r2, r0, r2
 8000d20:	eb43 0002 	adc.w	r0, r3, r2
 8000d24:	bf08      	it	eq
 8000d26:	f020 0001 	biceq.w	r0, r0, #1
 8000d2a:	4770      	bx	lr
 8000d2c:	f102 0220 	add.w	r2, r2, #32
 8000d30:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d34:	f1c2 0220 	rsb	r2, r2, #32
 8000d38:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d3c:	fa21 f202 	lsr.w	r2, r1, r2
 8000d40:	eb43 0002 	adc.w	r0, r3, r2
 8000d44:	bf08      	it	eq
 8000d46:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d4a:	4770      	bx	lr

08000d4c <__aeabi_f2uiz>:
 8000d4c:	0042      	lsls	r2, r0, #1
 8000d4e:	d20e      	bcs.n	8000d6e <__aeabi_f2uiz+0x22>
 8000d50:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000d54:	d30b      	bcc.n	8000d6e <__aeabi_f2uiz+0x22>
 8000d56:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000d5a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000d5e:	d409      	bmi.n	8000d74 <__aeabi_f2uiz+0x28>
 8000d60:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000d64:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000d68:	fa23 f002 	lsr.w	r0, r3, r2
 8000d6c:	4770      	bx	lr
 8000d6e:	f04f 0000 	mov.w	r0, #0
 8000d72:	4770      	bx	lr
 8000d74:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000d78:	d101      	bne.n	8000d7e <__aeabi_f2uiz+0x32>
 8000d7a:	0242      	lsls	r2, r0, #9
 8000d7c:	d102      	bne.n	8000d84 <__aeabi_f2uiz+0x38>
 8000d7e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d82:	4770      	bx	lr
 8000d84:	f04f 0000 	mov.w	r0, #0
 8000d88:	4770      	bx	lr
 8000d8a:	bf00      	nop

08000d8c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000d90:	f3bf 8f4f 	dsb	sy
}
 8000d94:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000d96:	4b06      	ldr	r3, [pc, #24]	; (8000db0 <__NVIC_SystemReset+0x24>)
 8000d98:	68db      	ldr	r3, [r3, #12]
 8000d9a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000d9e:	4904      	ldr	r1, [pc, #16]	; (8000db0 <__NVIC_SystemReset+0x24>)
 8000da0:	4b04      	ldr	r3, [pc, #16]	; (8000db4 <__NVIC_SystemReset+0x28>)
 8000da2:	4313      	orrs	r3, r2
 8000da4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000da6:	f3bf 8f4f 	dsb	sy
}
 8000daa:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000dac:	bf00      	nop
 8000dae:	e7fd      	b.n	8000dac <__NVIC_SystemReset+0x20>
 8000db0:	e000ed00 	.word	0xe000ed00
 8000db4:	05fa0004 	.word	0x05fa0004

08000db8 <main>:
uint32_t IDR_Read;
uint8_t Config_buffer[2]; /*Solve here*/
bool comeFromMenu = false;

int main(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b084      	sub	sp, #16
 8000dbc:	af04      	add	r7, sp, #16
  HAL_Init();
 8000dbe:	f001 ffc9 	bl	8002d54 <HAL_Init>
  SystemClock_Config();
 8000dc2:	f001 fc34 	bl	800262e <SystemClock_Config>
  MX_GPIO_Init();
 8000dc6:	f001 fd8b 	bl	80028e0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000dca:	f001 fc77 	bl	80026bc <MX_I2C1_Init>
  MX_I2C2_Init();
 8000dce:	f001 fca3 	bl	8002718 <MX_I2C2_Init>
  MX_IWDG_Init();
 8000dd2:	f001 fccf 	bl	8002774 <MX_IWDG_Init>
  MX_TIM3_Init();
 8000dd6:	f001 fce7 	bl	80027a8 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000dda:	f001 fd33 	bl	8002844 <MX_TIM4_Init>
  HAL_IWDG_Init(&hiwdg);
 8000dde:	4867      	ldr	r0, [pc, #412]	; (8000f7c <main+0x1c4>)
 8000de0:	f004 fc66 	bl	80056b0 <HAL_IWDG_Init>
  SSD1306_Init();
 8000de4:	f005 fd00 	bl	80067e8 <SSD1306_Init>
  Configs_init();
 8000de8:	f001 fbd2 	bl	8002590 <Configs_init>
  //Initial Prints
#ifdef SHOW_LOADING
  SSD1306_GotoXY(7, 5);
 8000dec:	2105      	movs	r1, #5
 8000dee:	2007      	movs	r0, #7
 8000df0:	f005 fe62 	bl	8006ab8 <SSD1306_GotoXY>
  SSD1306_Puts("Loading", &Font_16x26, 1);
 8000df4:	2201      	movs	r2, #1
 8000df6:	4962      	ldr	r1, [pc, #392]	; (8000f80 <main+0x1c8>)
 8000df8:	4862      	ldr	r0, [pc, #392]	; (8000f84 <main+0x1cc>)
 8000dfa:	f005 fef3 	bl	8006be4 <SSD1306_Puts>
#endif
#ifdef ONE_SENSOR
  //Temporal asignation
  Sensor = _BH1750;
 8000dfe:	4b62      	ldr	r3, [pc, #392]	; (8000f88 <main+0x1d0>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	701a      	strb	r2, [r3, #0]
  //Temporal asignation
#endif

  ISR = None;
 8000e04:	4b61      	ldr	r3, [pc, #388]	; (8000f8c <main+0x1d4>)
 8000e06:	2202      	movs	r2, #2
 8000e08:	701a      	strb	r2, [r3, #0]
  SSD1306_GotoXY(3, 37);
 8000e0a:	2125      	movs	r1, #37	; 0x25
 8000e0c:	2003      	movs	r0, #3
 8000e0e:	f005 fe53 	bl	8006ab8 <SSD1306_GotoXY>
  SSD1306_Puts("Version 0.3", &Font_11x18, 1);
 8000e12:	2201      	movs	r2, #1
 8000e14:	495e      	ldr	r1, [pc, #376]	; (8000f90 <main+0x1d8>)
 8000e16:	485f      	ldr	r0, [pc, #380]	; (8000f94 <main+0x1dc>)
 8000e18:	f005 fee4 	bl	8006be4 <SSD1306_Puts>
  SSD1306_UpdateScreen();
 8000e1c:	f005 fda8 	bl	8006970 <SSD1306_UpdateScreen>
  HAL_IWDG_Refresh(&hiwdg);
 8000e20:	4856      	ldr	r0, [pc, #344]	; (8000f7c <main+0x1c4>)
 8000e22:	f004 fc87 	bl	8005734 <HAL_IWDG_Refresh>
  switch(Sensor)
 8000e26:	4b58      	ldr	r3, [pc, #352]	; (8000f88 <main+0x1d0>)
 8000e28:	781b      	ldrb	r3, [r3, #0]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <main+0x7a>
 8000e2e:	2b01      	cmp	r3, #1
  	  case _BH1750:
  		  if(BH1750_Init(&BH1750, &hi2c2, Address_Low) != Rojo_OK)
  			  NoConnected_BH1750();
	  break;
	  case _TSL2561:
	  break;
 8000e30:	e00a      	b.n	8000e48 <main+0x90>
  		  if(BH1750_Init(&BH1750, &hi2c2, Address_Low) != Rojo_OK)
 8000e32:	2246      	movs	r2, #70	; 0x46
 8000e34:	4958      	ldr	r1, [pc, #352]	; (8000f98 <main+0x1e0>)
 8000e36:	4859      	ldr	r0, [pc, #356]	; (8000f9c <main+0x1e4>)
 8000e38:	f006 fa72 	bl	8007320 <BH1750_Init>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d001      	beq.n	8000e46 <main+0x8e>
  			  NoConnected_BH1750();
 8000e42:	f001 f9e9 	bl	8002218 <NoConnected_BH1750>
	  break;
 8000e46:	bf00      	nop
  }
  //EEPROM Check & Configurations Read
  if(HAL_I2C_Mem_Read(&hi2c1, EEPROM_ADDR, 0x0, 1, &Configs.Factory_Values, 1, 100) != HAL_OK)
 8000e48:	2364      	movs	r3, #100	; 0x64
 8000e4a:	9302      	str	r3, [sp, #8]
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	9301      	str	r3, [sp, #4]
 8000e50:	4b53      	ldr	r3, [pc, #332]	; (8000fa0 <main+0x1e8>)
 8000e52:	9300      	str	r3, [sp, #0]
 8000e54:	2301      	movs	r3, #1
 8000e56:	2200      	movs	r2, #0
 8000e58:	21a0      	movs	r1, #160	; 0xa0
 8000e5a:	4852      	ldr	r0, [pc, #328]	; (8000fa4 <main+0x1ec>)
 8000e5c:	f003 f8d4 	bl	8004008 <HAL_I2C_Mem_Read>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <main+0xb2>
	  Fatal_Error_EEPROM();
 8000e66:	f001 f96f 	bl	8002148 <Fatal_Error_EEPROM>
  if(Errors.EEPROM_Fatal || Configs.Factory_Values)
 8000e6a:	4b4f      	ldr	r3, [pc, #316]	; (8000fa8 <main+0x1f0>)
 8000e6c:	781b      	ldrb	r3, [r3, #0]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d103      	bne.n	8000e7a <main+0xc2>
 8000e72:	4b4b      	ldr	r3, [pc, #300]	; (8000fa0 <main+0x1e8>)
 8000e74:	781b      	ldrb	r3, [r3, #0]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d002      	beq.n	8000e80 <main+0xc8>
	  Flash_configs(); //Start by the FLASH configurations
 8000e7a:	f001 fb9d 	bl	80025b8 <Flash_configs>
 8000e7e:	e01f      	b.n	8000ec0 <main+0x108>
  //Code here the backup EEPROM settings
  else if(!Configs.Factory_Values)
 8000e80:	4b47      	ldr	r3, [pc, #284]	; (8000fa0 <main+0x1e8>)
 8000e82:	781b      	ldrb	r3, [r3, #0]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d11b      	bne.n	8000ec0 <main+0x108>
  {
	  if(HAL_I2C_Mem_Read(&hi2c1, EEPROM_ADDR, 0x1, 1, Config_buffer, 2/*@TODO Change the neccesary buffer*/, 100) != HAL_OK)
 8000e88:	2364      	movs	r3, #100	; 0x64
 8000e8a:	9302      	str	r3, [sp, #8]
 8000e8c:	2302      	movs	r3, #2
 8000e8e:	9301      	str	r3, [sp, #4]
 8000e90:	4b46      	ldr	r3, [pc, #280]	; (8000fac <main+0x1f4>)
 8000e92:	9300      	str	r3, [sp, #0]
 8000e94:	2301      	movs	r3, #1
 8000e96:	2201      	movs	r2, #1
 8000e98:	21a0      	movs	r1, #160	; 0xa0
 8000e9a:	4842      	ldr	r0, [pc, #264]	; (8000fa4 <main+0x1ec>)
 8000e9c:	f003 f8b4 	bl	8004008 <HAL_I2C_Mem_Read>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d001      	beq.n	8000eaa <main+0xf2>
		  Fatal_Error_EEPROM();
 8000ea6:	f001 f94f 	bl	8002148 <Fatal_Error_EEPROM>
	  HAL_IWDG_Refresh(&hiwdg);
 8000eaa:	4834      	ldr	r0, [pc, #208]	; (8000f7c <main+0x1c4>)
 8000eac:	f004 fc42 	bl	8005734 <HAL_IWDG_Refresh>
	  /*@TODO Check all the configurations*/
	  Config_buffer[0] = Configs.Mode;
 8000eb0:	4b3b      	ldr	r3, [pc, #236]	; (8000fa0 <main+0x1e8>)
 8000eb2:	785a      	ldrb	r2, [r3, #1]
 8000eb4:	4b3d      	ldr	r3, [pc, #244]	; (8000fac <main+0x1f4>)
 8000eb6:	701a      	strb	r2, [r3, #0]
	  Config_buffer[1] = Configs.Resolution;
 8000eb8:	4b39      	ldr	r3, [pc, #228]	; (8000fa0 <main+0x1e8>)
 8000eba:	78da      	ldrb	r2, [r3, #3]
 8000ebc:	4b3b      	ldr	r3, [pc, #236]	; (8000fac <main+0x1f4>)
 8000ebe:	705a      	strb	r2, [r3, #1]
  }
  //Final
  HAL_IWDG_Refresh(&hiwdg);
 8000ec0:	482e      	ldr	r0, [pc, #184]	; (8000f7c <main+0x1c4>)
 8000ec2:	f004 fc37 	bl	8005734 <HAL_IWDG_Refresh>
  HAL_TIM_Base_Start(&htim4);
 8000ec6:	483a      	ldr	r0, [pc, #232]	; (8000fb0 <main+0x1f8>)
 8000ec8:	f005 f89a 	bl	8006000 <HAL_TIM_Base_Start>
#ifndef SHOW_LOADING
  Timer_Delay_250ms(Seconds(1.5f));
#endif
  //Final Clear
  SSD1306_Clear();
 8000ecc:	f006 f8d6 	bl	800707c <SSD1306_Clear>
  SSD1306_UpdateScreen();
 8000ed0:	f005 fd4e 	bl	8006970 <SSD1306_UpdateScreen>
  //Starting the paused cycle handler
  HAL_TIM_Base_Start_IT(&htim3);
 8000ed4:	4837      	ldr	r0, [pc, #220]	; (8000fb4 <main+0x1fc>)
 8000ed6:	f005 f8dd 	bl	8006094 <HAL_TIM_Base_Start_IT>
  while (1)
  {
	  //Check ISR's
	  switch(ISR)
 8000eda:	4b2c      	ldr	r3, [pc, #176]	; (8000f8c <main+0x1d4>)
 8000edc:	781b      	ldrb	r3, [r3, #0]
 8000ede:	b2db      	uxtb	r3, r3
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d00a      	beq.n	8000efa <main+0x142>
 8000ee4:	2b01      	cmp	r3, #1
 8000ee6:	d10e      	bne.n	8000f06 <main+0x14e>
	  {
	  	  case Menu:
	  		  ISR = None;
 8000ee8:	4b28      	ldr	r3, [pc, #160]	; (8000f8c <main+0x1d4>)
 8000eea:	2202      	movs	r2, #2
 8000eec:	701a      	strb	r2, [r3, #0]
	  		  comeFromMenu = true;
 8000eee:	4b32      	ldr	r3, [pc, #200]	; (8000fb8 <main+0x200>)
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	701a      	strb	r2, [r3, #0]
	  		  MenuGUI();
 8000ef4:	f000 ff70 	bl	8001dd8 <MenuGUI>
	  	  break;
 8000ef8:	e006      	b.n	8000f08 <main+0x150>
	  	  case MCU_Reset:
	  		  ISR = None;
 8000efa:	4b24      	ldr	r3, [pc, #144]	; (8000f8c <main+0x1d4>)
 8000efc:	2202      	movs	r2, #2
 8000efe:	701a      	strb	r2, [r3, #0]
	  		  MCU_Reset_Subrutine();
 8000f00:	f001 faaa 	bl	8002458 <MCU_Reset_Subrutine>
	  	  break;
 8000f04:	e000      	b.n	8000f08 <main+0x150>
	  	  default:
	  	  break;
 8000f06:	bf00      	nop
	  }
	  //Check & Run the mode
#ifdef USER_PLOT_DEBUG
	  Configs.Mode = Plot;
#elif defined(USER_CONF_P_DEBUG)
	  Configs.Mode = Config_Plot;
 8000f08:	4b25      	ldr	r3, [pc, #148]	; (8000fa0 <main+0x1e8>)
 8000f0a:	2203      	movs	r2, #3
 8000f0c:	705a      	strb	r2, [r3, #1]
#endif
	  switch(Configs.Mode)
 8000f0e:	4b24      	ldr	r3, [pc, #144]	; (8000fa0 <main+0x1e8>)
 8000f10:	785b      	ldrb	r3, [r3, #1]
 8000f12:	2b07      	cmp	r3, #7
 8000f14:	d821      	bhi.n	8000f5a <main+0x1a2>
 8000f16:	a201      	add	r2, pc, #4	; (adr r2, 8000f1c <main+0x164>)
 8000f18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f1c:	08000f3d 	.word	0x08000f3d
 8000f20:	08000f43 	.word	0x08000f43
 8000f24:	08000f4f 	.word	0x08000f4f
 8000f28:	08000f55 	.word	0x08000f55
 8000f2c:	08000f5b 	.word	0x08000f5b
 8000f30:	08000f49 	.word	0x08000f49
 8000f34:	08000f5b 	.word	0x08000f5b
 8000f38:	08000f5b 	.word	0x08000f5b
	  {
	  	  case Continuous: //Basic Software mode
	  		  Continous_mode();
 8000f3c:	f000 f840 	bl	8000fc0 <Continous_mode>
	  	  break;
 8000f40:	e00b      	b.n	8000f5a <main+0x1a2>
	  	  case Hold: //Basic Software mode
	  		  Hold_mode();
 8000f42:	f000 f885 	bl	8001050 <Hold_mode>
	  	  break;
 8000f46:	e008      	b.n	8000f5a <main+0x1a2>
	  	  case Reset_Sensor: //Basic Software mode
	  		  Reset_sensor_mode();
 8000f48:	f000 feec 	bl	8001d24 <Reset_sensor_mode>
		  break;
 8000f4c:	e005      	b.n	8000f5a <main+0x1a2>
	  	  case Plot: //Basic Software mode
	  		  Plot_mode();
 8000f4e:	f000 f8c1 	bl	80010d4 <Plot_mode>
	  	  break;
 8000f52:	e002      	b.n	8000f5a <main+0x1a2>
	  	  case Config_Plot: //Basic Software mode
	  		  Config_plot_mode();
 8000f54:	f000 fc36 	bl	80017c4 <Config_plot_mode>
	  	  break;
 8000f58:	bf00      	nop
	  	  case Select_Diode: //IR Software mode
	  	  break;
	  	  case Idle:
	  	  break;
	  }
	  HAL_IWDG_Refresh(&hiwdg);
 8000f5a:	4808      	ldr	r0, [pc, #32]	; (8000f7c <main+0x1c4>)
 8000f5c:	f004 fbea 	bl	8005734 <HAL_IWDG_Refresh>
	  //Paused Cycle
#ifdef USER_DEBUG
	  while(PauseFlag)
 8000f60:	e002      	b.n	8000f68 <main+0x1b0>
		  HAL_IWDG_Refresh(&hiwdg);
 8000f62:	4806      	ldr	r0, [pc, #24]	; (8000f7c <main+0x1c4>)
 8000f64:	f004 fbe6 	bl	8005734 <HAL_IWDG_Refresh>
	  while(PauseFlag)
 8000f68:	4b14      	ldr	r3, [pc, #80]	; (8000fbc <main+0x204>)
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	b2db      	uxtb	r3, r3
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d1f7      	bne.n	8000f62 <main+0x1aa>
	  PauseFlag = true;
 8000f72:	4b12      	ldr	r3, [pc, #72]	; (8000fbc <main+0x204>)
 8000f74:	2201      	movs	r2, #1
 8000f76:	701a      	strb	r2, [r3, #0]
	  switch(ISR)
 8000f78:	e7af      	b.n	8000eda <main+0x122>
 8000f7a:	bf00      	nop
 8000f7c:	20000218 	.word	0x20000218
 8000f80:	20000058 	.word	0x20000058
 8000f84:	08007e20 	.word	0x08007e20
 8000f88:	20000224 	.word	0x20000224
 8000f8c:	20000225 	.word	0x20000225
 8000f90:	20000050 	.word	0x20000050
 8000f94:	08007e28 	.word	0x08007e28
 8000f98:	20000134 	.word	0x20000134
 8000f9c:	20000234 	.word	0x20000234
 8000fa0:	2000022c 	.word	0x2000022c
 8000fa4:	200000e0 	.word	0x200000e0
 8000fa8:	20000228 	.word	0x20000228
 8000fac:	20000244 	.word	0x20000244
 8000fb0:	200001d0 	.word	0x200001d0
 8000fb4:	20000188 	.word	0x20000188
 8000fb8:	20000246 	.word	0x20000246
 8000fbc:	20000024 	.word	0x20000024

08000fc0 <Continous_mode>:
  }
}

//Basic software modes
void Continous_mode(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
	HAL_IWDG_Refresh(&hiwdg);
 8000fc4:	481a      	ldr	r0, [pc, #104]	; (8001030 <Continous_mode+0x70>)
 8000fc6:	f004 fbb5 	bl	8005734 <HAL_IWDG_Refresh>
	if(Configs.Last_Mode != Continuous || comeFromMenu)
 8000fca:	4b1a      	ldr	r3, [pc, #104]	; (8001034 <Continous_mode+0x74>)
 8000fcc:	789b      	ldrb	r3, [r3, #2]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d103      	bne.n	8000fda <Continous_mode+0x1a>
 8000fd2:	4b19      	ldr	r3, [pc, #100]	; (8001038 <Continous_mode+0x78>)
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d015      	beq.n	8001006 <Continous_mode+0x46>
	{
		SSD1306_Clear();
 8000fda:	f006 f84f 	bl	800707c <SSD1306_Clear>
		SSD1306_GotoXY(36, 8);
 8000fde:	2108      	movs	r1, #8
 8000fe0:	2024      	movs	r0, #36	; 0x24
 8000fe2:	f005 fd69 	bl	8006ab8 <SSD1306_GotoXY>
		SSD1306_Puts("Valor", &Font_11x18, 1);
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	4914      	ldr	r1, [pc, #80]	; (800103c <Continous_mode+0x7c>)
 8000fea:	4815      	ldr	r0, [pc, #84]	; (8001040 <Continous_mode+0x80>)
 8000fec:	f005 fdfa 	bl	8006be4 <SSD1306_Puts>
		SSD1306_GotoXY(28, 53);
 8000ff0:	2135      	movs	r1, #53	; 0x35
 8000ff2:	201c      	movs	r0, #28
 8000ff4:	f005 fd60 	bl	8006ab8 <SSD1306_GotoXY>
		SSD1306_Puts("Continuous", &Font_7x10, 1);
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	4912      	ldr	r1, [pc, #72]	; (8001044 <Continous_mode+0x84>)
 8000ffc:	4812      	ldr	r0, [pc, #72]	; (8001048 <Continous_mode+0x88>)
 8000ffe:	f005 fdf1 	bl	8006be4 <SSD1306_Puts>
		SSD1306_UpdateScreen();
 8001002:	f005 fcb5 	bl	8006970 <SSD1306_UpdateScreen>
	}
	SensorRead();
 8001006:	f001 fa3f 	bl	8002488 <SensorRead>
	HAL_IWDG_Refresh(&hiwdg);
 800100a:	4809      	ldr	r0, [pc, #36]	; (8001030 <Continous_mode+0x70>)
 800100c:	f004 fb92 	bl	8005734 <HAL_IWDG_Refresh>
	Print_Measure(Measure, 14, 30);
 8001010:	4b0e      	ldr	r3, [pc, #56]	; (800104c <Continous_mode+0x8c>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	221e      	movs	r2, #30
 8001016:	210e      	movs	r1, #14
 8001018:	4618      	mov	r0, r3
 800101a:	f001 f93d 	bl	8002298 <Print_Measure>
	Configs.Last_Mode = Continuous;
 800101e:	4b05      	ldr	r3, [pc, #20]	; (8001034 <Continous_mode+0x74>)
 8001020:	2200      	movs	r2, #0
 8001022:	709a      	strb	r2, [r3, #2]
	comeFromMenu = false;
 8001024:	4b04      	ldr	r3, [pc, #16]	; (8001038 <Continous_mode+0x78>)
 8001026:	2200      	movs	r2, #0
 8001028:	701a      	strb	r2, [r3, #0]
}
 800102a:	bf00      	nop
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	20000218 	.word	0x20000218
 8001034:	2000022c 	.word	0x2000022c
 8001038:	20000246 	.word	0x20000246
 800103c:	20000050 	.word	0x20000050
 8001040:	08007e34 	.word	0x08007e34
 8001044:	20000048 	.word	0x20000048
 8001048:	08007e3c 	.word	0x08007e3c
 800104c:	20000230 	.word	0x20000230

08001050 <Hold_mode>:

void Hold_mode(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
	if(Configs.Last_Mode != Hold || comeFromMenu)
 8001054:	4b18      	ldr	r3, [pc, #96]	; (80010b8 <Hold_mode+0x68>)
 8001056:	789b      	ldrb	r3, [r3, #2]
 8001058:	2b01      	cmp	r3, #1
 800105a:	d103      	bne.n	8001064 <Hold_mode+0x14>
 800105c:	4b17      	ldr	r3, [pc, #92]	; (80010bc <Hold_mode+0x6c>)
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d015      	beq.n	8001090 <Hold_mode+0x40>
	{
		SSD1306_Clear();
 8001064:	f006 f80a 	bl	800707c <SSD1306_Clear>
		SSD1306_GotoXY(36, 8);
 8001068:	2108      	movs	r1, #8
 800106a:	2024      	movs	r0, #36	; 0x24
 800106c:	f005 fd24 	bl	8006ab8 <SSD1306_GotoXY>
		SSD1306_Puts("Valor", &Font_11x18, 1);
 8001070:	2201      	movs	r2, #1
 8001072:	4913      	ldr	r1, [pc, #76]	; (80010c0 <Hold_mode+0x70>)
 8001074:	4813      	ldr	r0, [pc, #76]	; (80010c4 <Hold_mode+0x74>)
 8001076:	f005 fdb5 	bl	8006be4 <SSD1306_Puts>
		SSD1306_GotoXY(43, 53);
 800107a:	2135      	movs	r1, #53	; 0x35
 800107c:	202b      	movs	r0, #43	; 0x2b
 800107e:	f005 fd1b 	bl	8006ab8 <SSD1306_GotoXY>
		SSD1306_Puts("Hold", &Font_7x10, 1);
 8001082:	2201      	movs	r2, #1
 8001084:	4910      	ldr	r1, [pc, #64]	; (80010c8 <Hold_mode+0x78>)
 8001086:	4811      	ldr	r0, [pc, #68]	; (80010cc <Hold_mode+0x7c>)
 8001088:	f005 fdac 	bl	8006be4 <SSD1306_Puts>
		SSD1306_UpdateScreen();
 800108c:	f005 fc70 	bl	8006970 <SSD1306_UpdateScreen>
	}
	SensorRead();
 8001090:	f001 f9fa 	bl	8002488 <SensorRead>
	Print_Measure(Measure, 14, 30);
 8001094:	4b0e      	ldr	r3, [pc, #56]	; (80010d0 <Hold_mode+0x80>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	221e      	movs	r2, #30
 800109a:	210e      	movs	r1, #14
 800109c:	4618      	mov	r0, r3
 800109e:	f001 f8fb 	bl	8002298 <Print_Measure>
	wait_until_press(Ok);
 80010a2:	200f      	movs	r0, #15
 80010a4:	f001 f96c 	bl	8002380 <wait_until_press>
	Configs.Last_Mode = Hold;
 80010a8:	4b03      	ldr	r3, [pc, #12]	; (80010b8 <Hold_mode+0x68>)
 80010aa:	2201      	movs	r2, #1
 80010ac:	709a      	strb	r2, [r3, #2]
	comeFromMenu = false;
 80010ae:	4b03      	ldr	r3, [pc, #12]	; (80010bc <Hold_mode+0x6c>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	701a      	strb	r2, [r3, #0]
}
 80010b4:	bf00      	nop
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	2000022c 	.word	0x2000022c
 80010bc:	20000246 	.word	0x20000246
 80010c0:	20000050 	.word	0x20000050
 80010c4:	08007e34 	.word	0x08007e34
 80010c8:	20000048 	.word	0x20000048
 80010cc:	08007e48 	.word	0x08007e48
 80010d0:	20000230 	.word	0x20000230

080010d4 <Plot_mode>:


//@TODO Initial configurations done, print in sequence time, do first the config menu
void Plot_mode(void)
{
 80010d4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80010d8:	b088      	sub	sp, #32
 80010da:	af04      	add	r7, sp, #16
	static bool ChangedConfigs = false; //Checks if the user has pressed a button
	const uint16_t XAxis_High = 57; //Defines the high of the axis
 80010dc:	2339      	movs	r3, #57	; 0x39
 80010de:	813b      	strh	r3, [r7, #8]
	const uint16_t YScreenRes = 63; //Total screen pixel in y axis
 80010e0:	233f      	movs	r3, #63	; 0x3f
 80010e2:	80fb      	strh	r3, [r7, #6]
	uint16_t YAxis_LimitUP;     //Defines the upper limit
	uint16_t HigherYcoordenate; //The higher coordinate that can be plotted
	uint16_t NumberOfChars;
	uint16_t YLimit;

	HAL_IWDG_Refresh(&hiwdg);
 80010e4:	48c2      	ldr	r0, [pc, #776]	; (80013f0 <Plot_mode+0x31c>)
 80010e6:	f004 fb25 	bl	8005734 <HAL_IWDG_Refresh>
	if(Configs.Last_Mode != Plot || comeFromMenu || ChangedConfigs)
 80010ea:	4bc2      	ldr	r3, [pc, #776]	; (80013f4 <Plot_mode+0x320>)
 80010ec:	789b      	ldrb	r3, [r3, #2]
 80010ee:	2b02      	cmp	r3, #2
 80010f0:	d108      	bne.n	8001104 <Plot_mode+0x30>
 80010f2:	4bc1      	ldr	r3, [pc, #772]	; (80013f8 <Plot_mode+0x324>)
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d104      	bne.n	8001104 <Plot_mode+0x30>
 80010fa:	4bc0      	ldr	r3, [pc, #768]	; (80013fc <Plot_mode+0x328>)
 80010fc:	781b      	ldrb	r3, [r3, #0]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	f000 82ab 	beq.w	800165a <Plot_mode+0x586>
	{
		//Calculate the Y Axis offset
		NumberOfChars = CharsNumberFromInt(YAxisPosition.HigherRes, false);
 8001104:	4bbe      	ldr	r3, [pc, #760]	; (8001400 <Plot_mode+0x32c>)
 8001106:	881b      	ldrh	r3, [r3, #0]
 8001108:	2100      	movs	r1, #0
 800110a:	4618      	mov	r0, r3
 800110c:	f001 f9fc 	bl	8002508 <CharsNumberFromInt>
 8001110:	4603      	mov	r3, r0
 8001112:	80bb      	strh	r3, [r7, #4]
		YAxis_Offset = (NumberOfChars * 7) + 5;
 8001114:	88bb      	ldrh	r3, [r7, #4]
 8001116:	461a      	mov	r2, r3
 8001118:	00d2      	lsls	r2, r2, #3
 800111a:	1ad3      	subs	r3, r2, r3
 800111c:	b29b      	uxth	r3, r3
 800111e:	3305      	adds	r3, #5
 8001120:	807b      	strh	r3, [r7, #2]
		YAxis_LimitUP = 0;
 8001122:	2300      	movs	r3, #0
 8001124:	81bb      	strh	r3, [r7, #12]
		XAxis_Limit = 128;
 8001126:	2380      	movs	r3, #128	; 0x80
 8001128:	81fb      	strh	r3, [r7, #14]
		SSD1306_Clear();
 800112a:	f005 ffa7 	bl	800707c <SSD1306_Clear>
		//X Axis
		if(GlobalConfigs.PlotType == BothAxis)
 800112e:	4bb5      	ldr	r3, [pc, #724]	; (8001404 <Plot_mode+0x330>)
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d12b      	bne.n	800118e <Plot_mode+0xba>
		{
			if(GlobalConfigs.PrintLegends)
 8001136:	4bb3      	ldr	r3, [pc, #716]	; (8001404 <Plot_mode+0x330>)
 8001138:	799b      	ldrb	r3, [r3, #6]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d00a      	beq.n	8001154 <Plot_mode+0x80>
			{
				XAxis_Limit = 119;
 800113e:	2377      	movs	r3, #119	; 0x77
 8001140:	81fb      	strh	r3, [r7, #14]
				SSD1306_GotoXY(120, 53);
 8001142:	2135      	movs	r1, #53	; 0x35
 8001144:	2078      	movs	r0, #120	; 0x78
 8001146:	f005 fcb7 	bl	8006ab8 <SSD1306_GotoXY>
				SSD1306_Puts("t", &Font_7x10, 1);
 800114a:	2201      	movs	r2, #1
 800114c:	49ae      	ldr	r1, [pc, #696]	; (8001408 <Plot_mode+0x334>)
 800114e:	48af      	ldr	r0, [pc, #700]	; (800140c <Plot_mode+0x338>)
 8001150:	f005 fd48 	bl	8006be4 <SSD1306_Puts>
			}
			SSD1306_DrawLine(0, XAxis_High, XAxis_Limit, XAxis_High, 1);
 8001154:	893b      	ldrh	r3, [r7, #8]
 8001156:	89fa      	ldrh	r2, [r7, #14]
 8001158:	8939      	ldrh	r1, [r7, #8]
 800115a:	2001      	movs	r0, #1
 800115c:	9000      	str	r0, [sp, #0]
 800115e:	2000      	movs	r0, #0
 8001160:	f005 fd65 	bl	8006c2e <SSD1306_DrawLine>
			//X Arrow
			SSD1306_DrawFilledTriangle(XAxis_Limit-5, XAxis_High-3, XAxis_Limit-5, XAxis_High+3, XAxis_Limit, XAxis_High, 1);
 8001164:	89fb      	ldrh	r3, [r7, #14]
 8001166:	3b05      	subs	r3, #5
 8001168:	b298      	uxth	r0, r3
 800116a:	893b      	ldrh	r3, [r7, #8]
 800116c:	3b03      	subs	r3, #3
 800116e:	b299      	uxth	r1, r3
 8001170:	89fb      	ldrh	r3, [r7, #14]
 8001172:	3b05      	subs	r3, #5
 8001174:	b29a      	uxth	r2, r3
 8001176:	893b      	ldrh	r3, [r7, #8]
 8001178:	3303      	adds	r3, #3
 800117a:	b29c      	uxth	r4, r3
 800117c:	2301      	movs	r3, #1
 800117e:	9302      	str	r3, [sp, #8]
 8001180:	893b      	ldrh	r3, [r7, #8]
 8001182:	9301      	str	r3, [sp, #4]
 8001184:	89fb      	ldrh	r3, [r7, #14]
 8001186:	9300      	str	r3, [sp, #0]
 8001188:	4623      	mov	r3, r4
 800118a:	f005 feb5 	bl	8006ef8 <SSD1306_DrawFilledTriangle>
		}
		//Y Axis
		if(GlobalConfigs.PrintLegends)
 800118e:	4b9d      	ldr	r3, [pc, #628]	; (8001404 <Plot_mode+0x330>)
 8001190:	799b      	ldrb	r3, [r3, #6]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d00d      	beq.n	80011b2 <Plot_mode+0xde>
		{
			YAxis_LimitUP = 11;
 8001196:	230b      	movs	r3, #11
 8001198:	81bb      	strh	r3, [r7, #12]
			SSD1306_GotoXY(YAxis_Offset - 7, 0);
 800119a:	887b      	ldrh	r3, [r7, #2]
 800119c:	3b07      	subs	r3, #7
 800119e:	b29b      	uxth	r3, r3
 80011a0:	2100      	movs	r1, #0
 80011a2:	4618      	mov	r0, r3
 80011a4:	f005 fc88 	bl	8006ab8 <SSD1306_GotoXY>
			SSD1306_Puts("lx", &Font_7x10, 1);
 80011a8:	2201      	movs	r2, #1
 80011aa:	4997      	ldr	r1, [pc, #604]	; (8001408 <Plot_mode+0x334>)
 80011ac:	4898      	ldr	r0, [pc, #608]	; (8001410 <Plot_mode+0x33c>)
 80011ae:	f005 fd19 	bl	8006be4 <SSD1306_Puts>
		}
		SSD1306_DrawLine(YAxis_Offset, XAxis_High, YAxis_Offset, YAxis_LimitUP, 1);
 80011b2:	89bb      	ldrh	r3, [r7, #12]
 80011b4:	887a      	ldrh	r2, [r7, #2]
 80011b6:	8939      	ldrh	r1, [r7, #8]
 80011b8:	8878      	ldrh	r0, [r7, #2]
 80011ba:	2401      	movs	r4, #1
 80011bc:	9400      	str	r4, [sp, #0]
 80011be:	f005 fd36 	bl	8006c2e <SSD1306_DrawLine>
		HigherYcoordenate = YAxis_LimitUP + 10;
 80011c2:	89bb      	ldrh	r3, [r7, #12]
 80011c4:	330a      	adds	r3, #10
 80011c6:	803b      	strh	r3, [r7, #0]
		//Y Axis numeric legends -- Forced, not touched by the user
		if(!GlobalConfigs.PrintLegends) // Print all values
 80011c8:	4b8e      	ldr	r3, [pc, #568]	; (8001404 <Plot_mode+0x330>)
 80011ca:	799b      	ldrb	r3, [r3, #6]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	f040 81ac 	bne.w	800152a <Plot_mode+0x456>
		{
			//Text prints
			sprintf(YAxisPosition.ThreeQuarterBuffer, "%d", (int) YAxisPosition.ThreeQuartersRes);
 80011d2:	4b8b      	ldr	r3, [pc, #556]	; (8001400 <Plot_mode+0x32c>)
 80011d4:	885b      	ldrh	r3, [r3, #2]
 80011d6:	461a      	mov	r2, r3
 80011d8:	498e      	ldr	r1, [pc, #568]	; (8001414 <Plot_mode+0x340>)
 80011da:	488f      	ldr	r0, [pc, #572]	; (8001418 <Plot_mode+0x344>)
 80011dc:	f006 fa86 	bl	80076ec <siprintf>
			sprintf(YAxisPosition.QuarterBuffer, "%d", (int) YAxisPosition.QuarterRes);
 80011e0:	4b87      	ldr	r3, [pc, #540]	; (8001400 <Plot_mode+0x32c>)
 80011e2:	88db      	ldrh	r3, [r3, #6]
 80011e4:	461a      	mov	r2, r3
 80011e6:	498b      	ldr	r1, [pc, #556]	; (8001414 <Plot_mode+0x340>)
 80011e8:	488c      	ldr	r0, [pc, #560]	; (800141c <Plot_mode+0x348>)
 80011ea:	f006 fa7f 	bl	80076ec <siprintf>
			SSD1306_GotoXY(0, (((YScreenRes - HigherYcoordenate) * 0.25) + HigherYcoordenate) - 5);
 80011ee:	88fa      	ldrh	r2, [r7, #6]
 80011f0:	883b      	ldrh	r3, [r7, #0]
 80011f2:	1ad3      	subs	r3, r2, r3
 80011f4:	4618      	mov	r0, r3
 80011f6:	f7ff f9af 	bl	8000558 <__aeabi_i2d>
 80011fa:	f04f 0200 	mov.w	r2, #0
 80011fe:	4b88      	ldr	r3, [pc, #544]	; (8001420 <Plot_mode+0x34c>)
 8001200:	f7ff fa14 	bl	800062c <__aeabi_dmul>
 8001204:	4602      	mov	r2, r0
 8001206:	460b      	mov	r3, r1
 8001208:	4614      	mov	r4, r2
 800120a:	461d      	mov	r5, r3
 800120c:	883b      	ldrh	r3, [r7, #0]
 800120e:	4618      	mov	r0, r3
 8001210:	f7ff f9a2 	bl	8000558 <__aeabi_i2d>
 8001214:	4602      	mov	r2, r0
 8001216:	460b      	mov	r3, r1
 8001218:	4620      	mov	r0, r4
 800121a:	4629      	mov	r1, r5
 800121c:	f7ff f850 	bl	80002c0 <__adddf3>
 8001220:	4602      	mov	r2, r0
 8001222:	460b      	mov	r3, r1
 8001224:	4610      	mov	r0, r2
 8001226:	4619      	mov	r1, r3
 8001228:	f04f 0200 	mov.w	r2, #0
 800122c:	4b7d      	ldr	r3, [pc, #500]	; (8001424 <Plot_mode+0x350>)
 800122e:	f7ff f845 	bl	80002bc <__aeabi_dsub>
 8001232:	4602      	mov	r2, r0
 8001234:	460b      	mov	r3, r1
 8001236:	4610      	mov	r0, r2
 8001238:	4619      	mov	r1, r3
 800123a:	f7ff fc09 	bl	8000a50 <__aeabi_d2uiz>
 800123e:	4603      	mov	r3, r0
 8001240:	b29b      	uxth	r3, r3
 8001242:	4619      	mov	r1, r3
 8001244:	2000      	movs	r0, #0
 8001246:	f005 fc37 	bl	8006ab8 <SSD1306_GotoXY>
			SSD1306_Puts(YAxisPosition.ThreeQuarterBuffer, &Font_7x10, 1);
 800124a:	2201      	movs	r2, #1
 800124c:	496e      	ldr	r1, [pc, #440]	; (8001408 <Plot_mode+0x334>)
 800124e:	4872      	ldr	r0, [pc, #456]	; (8001418 <Plot_mode+0x344>)
 8001250:	f005 fcc8 	bl	8006be4 <SSD1306_Puts>
			SSD1306_GotoXY(0, (((YScreenRes - HigherYcoordenate) * 0.75) + HigherYcoordenate) - 5);
 8001254:	88fa      	ldrh	r2, [r7, #6]
 8001256:	883b      	ldrh	r3, [r7, #0]
 8001258:	1ad3      	subs	r3, r2, r3
 800125a:	4618      	mov	r0, r3
 800125c:	f7ff f97c 	bl	8000558 <__aeabi_i2d>
 8001260:	f04f 0200 	mov.w	r2, #0
 8001264:	4b70      	ldr	r3, [pc, #448]	; (8001428 <Plot_mode+0x354>)
 8001266:	f7ff f9e1 	bl	800062c <__aeabi_dmul>
 800126a:	4602      	mov	r2, r0
 800126c:	460b      	mov	r3, r1
 800126e:	4614      	mov	r4, r2
 8001270:	461d      	mov	r5, r3
 8001272:	883b      	ldrh	r3, [r7, #0]
 8001274:	4618      	mov	r0, r3
 8001276:	f7ff f96f 	bl	8000558 <__aeabi_i2d>
 800127a:	4602      	mov	r2, r0
 800127c:	460b      	mov	r3, r1
 800127e:	4620      	mov	r0, r4
 8001280:	4629      	mov	r1, r5
 8001282:	f7ff f81d 	bl	80002c0 <__adddf3>
 8001286:	4602      	mov	r2, r0
 8001288:	460b      	mov	r3, r1
 800128a:	4610      	mov	r0, r2
 800128c:	4619      	mov	r1, r3
 800128e:	f04f 0200 	mov.w	r2, #0
 8001292:	4b64      	ldr	r3, [pc, #400]	; (8001424 <Plot_mode+0x350>)
 8001294:	f7ff f812 	bl	80002bc <__aeabi_dsub>
 8001298:	4602      	mov	r2, r0
 800129a:	460b      	mov	r3, r1
 800129c:	4610      	mov	r0, r2
 800129e:	4619      	mov	r1, r3
 80012a0:	f7ff fbd6 	bl	8000a50 <__aeabi_d2uiz>
 80012a4:	4603      	mov	r3, r0
 80012a6:	b29b      	uxth	r3, r3
 80012a8:	4619      	mov	r1, r3
 80012aa:	2000      	movs	r0, #0
 80012ac:	f005 fc04 	bl	8006ab8 <SSD1306_GotoXY>
			SSD1306_Puts(YAxisPosition.QuarterBuffer, &Font_7x10, 1);
 80012b0:	2201      	movs	r2, #1
 80012b2:	4955      	ldr	r1, [pc, #340]	; (8001408 <Plot_mode+0x334>)
 80012b4:	4859      	ldr	r0, [pc, #356]	; (800141c <Plot_mode+0x348>)
 80012b6:	f005 fc95 	bl	8006be4 <SSD1306_Puts>
			//Line prints
			SSD1306_DrawLine(YAxis_Offset, (((YScreenRes - HigherYcoordenate) * 0.25) + HigherYcoordenate), (CharsNumberFromInt(YAxisPosition.ThreeQuartersRes, false) * 7) + 1, (((YScreenRes - HigherYcoordenate) * 0.25) + HigherYcoordenate), 1); //ThreeQuarter Line
 80012ba:	88fa      	ldrh	r2, [r7, #6]
 80012bc:	883b      	ldrh	r3, [r7, #0]
 80012be:	1ad3      	subs	r3, r2, r3
 80012c0:	4618      	mov	r0, r3
 80012c2:	f7ff f949 	bl	8000558 <__aeabi_i2d>
 80012c6:	f04f 0200 	mov.w	r2, #0
 80012ca:	4b55      	ldr	r3, [pc, #340]	; (8001420 <Plot_mode+0x34c>)
 80012cc:	f7ff f9ae 	bl	800062c <__aeabi_dmul>
 80012d0:	4602      	mov	r2, r0
 80012d2:	460b      	mov	r3, r1
 80012d4:	4614      	mov	r4, r2
 80012d6:	461d      	mov	r5, r3
 80012d8:	883b      	ldrh	r3, [r7, #0]
 80012da:	4618      	mov	r0, r3
 80012dc:	f7ff f93c 	bl	8000558 <__aeabi_i2d>
 80012e0:	4602      	mov	r2, r0
 80012e2:	460b      	mov	r3, r1
 80012e4:	4620      	mov	r0, r4
 80012e6:	4629      	mov	r1, r5
 80012e8:	f7fe ffea 	bl	80002c0 <__adddf3>
 80012ec:	4602      	mov	r2, r0
 80012ee:	460b      	mov	r3, r1
 80012f0:	4610      	mov	r0, r2
 80012f2:	4619      	mov	r1, r3
 80012f4:	f7ff fbac 	bl	8000a50 <__aeabi_d2uiz>
 80012f8:	4603      	mov	r3, r0
 80012fa:	b29c      	uxth	r4, r3
 80012fc:	4b40      	ldr	r3, [pc, #256]	; (8001400 <Plot_mode+0x32c>)
 80012fe:	885b      	ldrh	r3, [r3, #2]
 8001300:	2100      	movs	r1, #0
 8001302:	4618      	mov	r0, r3
 8001304:	f001 f900 	bl	8002508 <CharsNumberFromInt>
 8001308:	4603      	mov	r3, r0
 800130a:	461a      	mov	r2, r3
 800130c:	00d2      	lsls	r2, r2, #3
 800130e:	1ad3      	subs	r3, r2, r3
 8001310:	b29b      	uxth	r3, r3
 8001312:	3301      	adds	r3, #1
 8001314:	b29d      	uxth	r5, r3
 8001316:	88fa      	ldrh	r2, [r7, #6]
 8001318:	883b      	ldrh	r3, [r7, #0]
 800131a:	1ad3      	subs	r3, r2, r3
 800131c:	4618      	mov	r0, r3
 800131e:	f7ff f91b 	bl	8000558 <__aeabi_i2d>
 8001322:	f04f 0200 	mov.w	r2, #0
 8001326:	4b3e      	ldr	r3, [pc, #248]	; (8001420 <Plot_mode+0x34c>)
 8001328:	f7ff f980 	bl	800062c <__aeabi_dmul>
 800132c:	4602      	mov	r2, r0
 800132e:	460b      	mov	r3, r1
 8001330:	4690      	mov	r8, r2
 8001332:	4699      	mov	r9, r3
 8001334:	883b      	ldrh	r3, [r7, #0]
 8001336:	4618      	mov	r0, r3
 8001338:	f7ff f90e 	bl	8000558 <__aeabi_i2d>
 800133c:	4602      	mov	r2, r0
 800133e:	460b      	mov	r3, r1
 8001340:	4640      	mov	r0, r8
 8001342:	4649      	mov	r1, r9
 8001344:	f7fe ffbc 	bl	80002c0 <__adddf3>
 8001348:	4602      	mov	r2, r0
 800134a:	460b      	mov	r3, r1
 800134c:	4610      	mov	r0, r2
 800134e:	4619      	mov	r1, r3
 8001350:	f7ff fb7e 	bl	8000a50 <__aeabi_d2uiz>
 8001354:	4603      	mov	r3, r0
 8001356:	b29b      	uxth	r3, r3
 8001358:	8878      	ldrh	r0, [r7, #2]
 800135a:	2201      	movs	r2, #1
 800135c:	9200      	str	r2, [sp, #0]
 800135e:	462a      	mov	r2, r5
 8001360:	4621      	mov	r1, r4
 8001362:	f005 fc64 	bl	8006c2e <SSD1306_DrawLine>
			SSD1306_DrawLine(YAxis_Offset, (((YScreenRes - HigherYcoordenate) * 0.75) + HigherYcoordenate), (CharsNumberFromInt(YAxisPosition.QuarterRes, false) * 7) + 1, (((YScreenRes - HigherYcoordenate) * 0.75) + HigherYcoordenate), 1); //Quarter Line
 8001366:	88fa      	ldrh	r2, [r7, #6]
 8001368:	883b      	ldrh	r3, [r7, #0]
 800136a:	1ad3      	subs	r3, r2, r3
 800136c:	4618      	mov	r0, r3
 800136e:	f7ff f8f3 	bl	8000558 <__aeabi_i2d>
 8001372:	f04f 0200 	mov.w	r2, #0
 8001376:	4b2c      	ldr	r3, [pc, #176]	; (8001428 <Plot_mode+0x354>)
 8001378:	f7ff f958 	bl	800062c <__aeabi_dmul>
 800137c:	4602      	mov	r2, r0
 800137e:	460b      	mov	r3, r1
 8001380:	4614      	mov	r4, r2
 8001382:	461d      	mov	r5, r3
 8001384:	883b      	ldrh	r3, [r7, #0]
 8001386:	4618      	mov	r0, r3
 8001388:	f7ff f8e6 	bl	8000558 <__aeabi_i2d>
 800138c:	4602      	mov	r2, r0
 800138e:	460b      	mov	r3, r1
 8001390:	4620      	mov	r0, r4
 8001392:	4629      	mov	r1, r5
 8001394:	f7fe ff94 	bl	80002c0 <__adddf3>
 8001398:	4602      	mov	r2, r0
 800139a:	460b      	mov	r3, r1
 800139c:	4610      	mov	r0, r2
 800139e:	4619      	mov	r1, r3
 80013a0:	f7ff fb56 	bl	8000a50 <__aeabi_d2uiz>
 80013a4:	4603      	mov	r3, r0
 80013a6:	b29c      	uxth	r4, r3
 80013a8:	4b15      	ldr	r3, [pc, #84]	; (8001400 <Plot_mode+0x32c>)
 80013aa:	88db      	ldrh	r3, [r3, #6]
 80013ac:	2100      	movs	r1, #0
 80013ae:	4618      	mov	r0, r3
 80013b0:	f001 f8aa 	bl	8002508 <CharsNumberFromInt>
 80013b4:	4603      	mov	r3, r0
 80013b6:	461a      	mov	r2, r3
 80013b8:	00d2      	lsls	r2, r2, #3
 80013ba:	1ad3      	subs	r3, r2, r3
 80013bc:	b29b      	uxth	r3, r3
 80013be:	3301      	adds	r3, #1
 80013c0:	b29d      	uxth	r5, r3
 80013c2:	88fa      	ldrh	r2, [r7, #6]
 80013c4:	883b      	ldrh	r3, [r7, #0]
 80013c6:	1ad3      	subs	r3, r2, r3
 80013c8:	4618      	mov	r0, r3
 80013ca:	f7ff f8c5 	bl	8000558 <__aeabi_i2d>
 80013ce:	f04f 0200 	mov.w	r2, #0
 80013d2:	4b15      	ldr	r3, [pc, #84]	; (8001428 <Plot_mode+0x354>)
 80013d4:	f7ff f92a 	bl	800062c <__aeabi_dmul>
 80013d8:	4602      	mov	r2, r0
 80013da:	460b      	mov	r3, r1
 80013dc:	4690      	mov	r8, r2
 80013de:	4699      	mov	r9, r3
 80013e0:	883b      	ldrh	r3, [r7, #0]
 80013e2:	4618      	mov	r0, r3
 80013e4:	f7ff f8b8 	bl	8000558 <__aeabi_i2d>
 80013e8:	4602      	mov	r2, r0
 80013ea:	460b      	mov	r3, r1
 80013ec:	e01e      	b.n	800142c <Plot_mode+0x358>
 80013ee:	bf00      	nop
 80013f0:	20000218 	.word	0x20000218
 80013f4:	2000022c 	.word	0x2000022c
 80013f8:	20000246 	.word	0x20000246
 80013fc:	20000247 	.word	0x20000247
 8001400:	20000000 	.word	0x20000000
 8001404:	20000028 	.word	0x20000028
 8001408:	20000048 	.word	0x20000048
 800140c:	08007e50 	.word	0x08007e50
 8001410:	08007e54 	.word	0x08007e54
 8001414:	08007e58 	.word	0x08007e58
 8001418:	2000000f 	.word	0x2000000f
 800141c:	2000001d 	.word	0x2000001d
 8001420:	3fd00000 	.word	0x3fd00000
 8001424:	40140000 	.word	0x40140000
 8001428:	3fe80000 	.word	0x3fe80000
 800142c:	4640      	mov	r0, r8
 800142e:	4649      	mov	r1, r9
 8001430:	f7fe ff46 	bl	80002c0 <__adddf3>
 8001434:	4602      	mov	r2, r0
 8001436:	460b      	mov	r3, r1
 8001438:	4610      	mov	r0, r2
 800143a:	4619      	mov	r1, r3
 800143c:	f7ff fb08 	bl	8000a50 <__aeabi_d2uiz>
 8001440:	4603      	mov	r3, r0
 8001442:	b29b      	uxth	r3, r3
 8001444:	8878      	ldrh	r0, [r7, #2]
 8001446:	2201      	movs	r2, #1
 8001448:	9200      	str	r2, [sp, #0]
 800144a:	462a      	mov	r2, r5
 800144c:	4621      	mov	r1, r4
 800144e:	f005 fbee 	bl	8006c2e <SSD1306_DrawLine>
			//Text prints
			sprintf(YAxisPosition.HigherBuffer, "%d", (int) YAxisPosition.HigherRes);
 8001452:	4b89      	ldr	r3, [pc, #548]	; (8001678 <Plot_mode+0x5a4>)
 8001454:	881b      	ldrh	r3, [r3, #0]
 8001456:	461a      	mov	r2, r3
 8001458:	4988      	ldr	r1, [pc, #544]	; (800167c <Plot_mode+0x5a8>)
 800145a:	4889      	ldr	r0, [pc, #548]	; (8001680 <Plot_mode+0x5ac>)
 800145c:	f006 f946 	bl	80076ec <siprintf>
			sprintf(YAxisPosition.MiddleBuffer, "%d", (int) YAxisPosition.MiddleRes);
 8001460:	4b85      	ldr	r3, [pc, #532]	; (8001678 <Plot_mode+0x5a4>)
 8001462:	889b      	ldrh	r3, [r3, #4]
 8001464:	461a      	mov	r2, r3
 8001466:	4985      	ldr	r1, [pc, #532]	; (800167c <Plot_mode+0x5a8>)
 8001468:	4886      	ldr	r0, [pc, #536]	; (8001684 <Plot_mode+0x5b0>)
 800146a:	f006 f93f 	bl	80076ec <siprintf>
			SSD1306_GotoXY(0, HigherYcoordenate - 5);
 800146e:	883b      	ldrh	r3, [r7, #0]
 8001470:	3b05      	subs	r3, #5
 8001472:	b29b      	uxth	r3, r3
 8001474:	4619      	mov	r1, r3
 8001476:	2000      	movs	r0, #0
 8001478:	f005 fb1e 	bl	8006ab8 <SSD1306_GotoXY>
			SSD1306_Puts(YAxisPosition.HigherBuffer, &Font_7x10, 1);
 800147c:	2201      	movs	r2, #1
 800147e:	4982      	ldr	r1, [pc, #520]	; (8001688 <Plot_mode+0x5b4>)
 8001480:	487f      	ldr	r0, [pc, #508]	; (8001680 <Plot_mode+0x5ac>)
 8001482:	f005 fbaf 	bl	8006be4 <SSD1306_Puts>
			SSD1306_GotoXY(0, (((YScreenRes - HigherYcoordenate) / 2) + HigherYcoordenate) - 5);
 8001486:	88fa      	ldrh	r2, [r7, #6]
 8001488:	883b      	ldrh	r3, [r7, #0]
 800148a:	1ad3      	subs	r3, r2, r3
 800148c:	0fda      	lsrs	r2, r3, #31
 800148e:	4413      	add	r3, r2
 8001490:	105b      	asrs	r3, r3, #1
 8001492:	b29a      	uxth	r2, r3
 8001494:	883b      	ldrh	r3, [r7, #0]
 8001496:	4413      	add	r3, r2
 8001498:	b29b      	uxth	r3, r3
 800149a:	3b05      	subs	r3, #5
 800149c:	b29b      	uxth	r3, r3
 800149e:	4619      	mov	r1, r3
 80014a0:	2000      	movs	r0, #0
 80014a2:	f005 fb09 	bl	8006ab8 <SSD1306_GotoXY>
			SSD1306_Puts(YAxisPosition.MiddleBuffer, &Font_7x10, 1);
 80014a6:	2201      	movs	r2, #1
 80014a8:	4977      	ldr	r1, [pc, #476]	; (8001688 <Plot_mode+0x5b4>)
 80014aa:	4876      	ldr	r0, [pc, #472]	; (8001684 <Plot_mode+0x5b0>)
 80014ac:	f005 fb9a 	bl	8006be4 <SSD1306_Puts>
			///Line Prints
			SSD1306_DrawLine(YAxis_Offset, HigherYcoordenate, (CharsNumberFromInt(YAxisPosition.HigherRes, false) * 7) + 1, HigherYcoordenate, 1); //Higher Line
 80014b0:	4b71      	ldr	r3, [pc, #452]	; (8001678 <Plot_mode+0x5a4>)
 80014b2:	881b      	ldrh	r3, [r3, #0]
 80014b4:	2100      	movs	r1, #0
 80014b6:	4618      	mov	r0, r3
 80014b8:	f001 f826 	bl	8002508 <CharsNumberFromInt>
 80014bc:	4603      	mov	r3, r0
 80014be:	461a      	mov	r2, r3
 80014c0:	00d2      	lsls	r2, r2, #3
 80014c2:	1ad3      	subs	r3, r2, r3
 80014c4:	b29b      	uxth	r3, r3
 80014c6:	3301      	adds	r3, #1
 80014c8:	b29a      	uxth	r2, r3
 80014ca:	883b      	ldrh	r3, [r7, #0]
 80014cc:	8839      	ldrh	r1, [r7, #0]
 80014ce:	8878      	ldrh	r0, [r7, #2]
 80014d0:	2401      	movs	r4, #1
 80014d2:	9400      	str	r4, [sp, #0]
 80014d4:	f005 fbab 	bl	8006c2e <SSD1306_DrawLine>
			SSD1306_DrawLine(YAxis_Offset, (((YScreenRes - HigherYcoordenate) / 2) + HigherYcoordenate), (CharsNumberFromInt(YAxisPosition.MiddleRes, false) * 7) + 1, (((YScreenRes - HigherYcoordenate) / 2) + HigherYcoordenate), 1); //Middle Line
 80014d8:	88fa      	ldrh	r2, [r7, #6]
 80014da:	883b      	ldrh	r3, [r7, #0]
 80014dc:	1ad3      	subs	r3, r2, r3
 80014de:	0fda      	lsrs	r2, r3, #31
 80014e0:	4413      	add	r3, r2
 80014e2:	105b      	asrs	r3, r3, #1
 80014e4:	b29a      	uxth	r2, r3
 80014e6:	883b      	ldrh	r3, [r7, #0]
 80014e8:	4413      	add	r3, r2
 80014ea:	b29c      	uxth	r4, r3
 80014ec:	4b62      	ldr	r3, [pc, #392]	; (8001678 <Plot_mode+0x5a4>)
 80014ee:	889b      	ldrh	r3, [r3, #4]
 80014f0:	2100      	movs	r1, #0
 80014f2:	4618      	mov	r0, r3
 80014f4:	f001 f808 	bl	8002508 <CharsNumberFromInt>
 80014f8:	4603      	mov	r3, r0
 80014fa:	461a      	mov	r2, r3
 80014fc:	00d2      	lsls	r2, r2, #3
 80014fe:	1ad3      	subs	r3, r2, r3
 8001500:	b29b      	uxth	r3, r3
 8001502:	3301      	adds	r3, #1
 8001504:	b299      	uxth	r1, r3
 8001506:	88fa      	ldrh	r2, [r7, #6]
 8001508:	883b      	ldrh	r3, [r7, #0]
 800150a:	1ad3      	subs	r3, r2, r3
 800150c:	0fda      	lsrs	r2, r3, #31
 800150e:	4413      	add	r3, r2
 8001510:	105b      	asrs	r3, r3, #1
 8001512:	b29a      	uxth	r2, r3
 8001514:	883b      	ldrh	r3, [r7, #0]
 8001516:	4413      	add	r3, r2
 8001518:	b29b      	uxth	r3, r3
 800151a:	8878      	ldrh	r0, [r7, #2]
 800151c:	2201      	movs	r2, #1
 800151e:	9200      	str	r2, [sp, #0]
 8001520:	460a      	mov	r2, r1
 8001522:	4621      	mov	r1, r4
 8001524:	f005 fb83 	bl	8006c2e <SSD1306_DrawLine>
 8001528:	e06a      	b.n	8001600 <Plot_mode+0x52c>
		}
		else
		{
			//Text prints
			sprintf(YAxisPosition.HigherBuffer, "%d", (int) YAxisPosition.HigherRes);
 800152a:	4b53      	ldr	r3, [pc, #332]	; (8001678 <Plot_mode+0x5a4>)
 800152c:	881b      	ldrh	r3, [r3, #0]
 800152e:	461a      	mov	r2, r3
 8001530:	4952      	ldr	r1, [pc, #328]	; (800167c <Plot_mode+0x5a8>)
 8001532:	4853      	ldr	r0, [pc, #332]	; (8001680 <Plot_mode+0x5ac>)
 8001534:	f006 f8da 	bl	80076ec <siprintf>
			sprintf(YAxisPosition.MiddleBuffer, "%d", (int) YAxisPosition.MiddleRes);
 8001538:	4b4f      	ldr	r3, [pc, #316]	; (8001678 <Plot_mode+0x5a4>)
 800153a:	889b      	ldrh	r3, [r3, #4]
 800153c:	461a      	mov	r2, r3
 800153e:	494f      	ldr	r1, [pc, #316]	; (800167c <Plot_mode+0x5a8>)
 8001540:	4850      	ldr	r0, [pc, #320]	; (8001684 <Plot_mode+0x5b0>)
 8001542:	f006 f8d3 	bl	80076ec <siprintf>
			SSD1306_GotoXY(0, HigherYcoordenate - 5);
 8001546:	883b      	ldrh	r3, [r7, #0]
 8001548:	3b05      	subs	r3, #5
 800154a:	b29b      	uxth	r3, r3
 800154c:	4619      	mov	r1, r3
 800154e:	2000      	movs	r0, #0
 8001550:	f005 fab2 	bl	8006ab8 <SSD1306_GotoXY>
			SSD1306_Puts(YAxisPosition.HigherBuffer, &Font_7x10, 1);
 8001554:	2201      	movs	r2, #1
 8001556:	494c      	ldr	r1, [pc, #304]	; (8001688 <Plot_mode+0x5b4>)
 8001558:	4849      	ldr	r0, [pc, #292]	; (8001680 <Plot_mode+0x5ac>)
 800155a:	f005 fb43 	bl	8006be4 <SSD1306_Puts>
			SSD1306_GotoXY(0, (((XAxis_High - HigherYcoordenate) / 2) + HigherYcoordenate) - 5);
 800155e:	893a      	ldrh	r2, [r7, #8]
 8001560:	883b      	ldrh	r3, [r7, #0]
 8001562:	1ad3      	subs	r3, r2, r3
 8001564:	0fda      	lsrs	r2, r3, #31
 8001566:	4413      	add	r3, r2
 8001568:	105b      	asrs	r3, r3, #1
 800156a:	b29a      	uxth	r2, r3
 800156c:	883b      	ldrh	r3, [r7, #0]
 800156e:	4413      	add	r3, r2
 8001570:	b29b      	uxth	r3, r3
 8001572:	3b05      	subs	r3, #5
 8001574:	b29b      	uxth	r3, r3
 8001576:	4619      	mov	r1, r3
 8001578:	2000      	movs	r0, #0
 800157a:	f005 fa9d 	bl	8006ab8 <SSD1306_GotoXY>
			SSD1306_Puts(YAxisPosition.MiddleBuffer, &Font_7x10, 1);
 800157e:	2201      	movs	r2, #1
 8001580:	4941      	ldr	r1, [pc, #260]	; (8001688 <Plot_mode+0x5b4>)
 8001582:	4840      	ldr	r0, [pc, #256]	; (8001684 <Plot_mode+0x5b0>)
 8001584:	f005 fb2e 	bl	8006be4 <SSD1306_Puts>
			///Line Prints
			SSD1306_DrawLine(YAxis_Offset, HigherYcoordenate, (CharsNumberFromInt(YAxisPosition.HigherRes, false) * 7) + 1, HigherYcoordenate, 1); //Higher Line
 8001588:	4b3b      	ldr	r3, [pc, #236]	; (8001678 <Plot_mode+0x5a4>)
 800158a:	881b      	ldrh	r3, [r3, #0]
 800158c:	2100      	movs	r1, #0
 800158e:	4618      	mov	r0, r3
 8001590:	f000 ffba 	bl	8002508 <CharsNumberFromInt>
 8001594:	4603      	mov	r3, r0
 8001596:	461a      	mov	r2, r3
 8001598:	00d2      	lsls	r2, r2, #3
 800159a:	1ad3      	subs	r3, r2, r3
 800159c:	b29b      	uxth	r3, r3
 800159e:	3301      	adds	r3, #1
 80015a0:	b29a      	uxth	r2, r3
 80015a2:	883b      	ldrh	r3, [r7, #0]
 80015a4:	8839      	ldrh	r1, [r7, #0]
 80015a6:	8878      	ldrh	r0, [r7, #2]
 80015a8:	2401      	movs	r4, #1
 80015aa:	9400      	str	r4, [sp, #0]
 80015ac:	f005 fb3f 	bl	8006c2e <SSD1306_DrawLine>
			SSD1306_DrawLine(YAxis_Offset, (((XAxis_High - HigherYcoordenate) / 2) + HigherYcoordenate), (CharsNumberFromInt(YAxisPosition.MiddleRes, false) * 7) + 1, (((XAxis_High - HigherYcoordenate) / 2) + HigherYcoordenate), 1); //Middle Line
 80015b0:	893a      	ldrh	r2, [r7, #8]
 80015b2:	883b      	ldrh	r3, [r7, #0]
 80015b4:	1ad3      	subs	r3, r2, r3
 80015b6:	0fda      	lsrs	r2, r3, #31
 80015b8:	4413      	add	r3, r2
 80015ba:	105b      	asrs	r3, r3, #1
 80015bc:	b29a      	uxth	r2, r3
 80015be:	883b      	ldrh	r3, [r7, #0]
 80015c0:	4413      	add	r3, r2
 80015c2:	b29c      	uxth	r4, r3
 80015c4:	4b2c      	ldr	r3, [pc, #176]	; (8001678 <Plot_mode+0x5a4>)
 80015c6:	889b      	ldrh	r3, [r3, #4]
 80015c8:	2100      	movs	r1, #0
 80015ca:	4618      	mov	r0, r3
 80015cc:	f000 ff9c 	bl	8002508 <CharsNumberFromInt>
 80015d0:	4603      	mov	r3, r0
 80015d2:	461a      	mov	r2, r3
 80015d4:	00d2      	lsls	r2, r2, #3
 80015d6:	1ad3      	subs	r3, r2, r3
 80015d8:	b29b      	uxth	r3, r3
 80015da:	3301      	adds	r3, #1
 80015dc:	b299      	uxth	r1, r3
 80015de:	893a      	ldrh	r2, [r7, #8]
 80015e0:	883b      	ldrh	r3, [r7, #0]
 80015e2:	1ad3      	subs	r3, r2, r3
 80015e4:	0fda      	lsrs	r2, r3, #31
 80015e6:	4413      	add	r3, r2
 80015e8:	105b      	asrs	r3, r3, #1
 80015ea:	b29a      	uxth	r2, r3
 80015ec:	883b      	ldrh	r3, [r7, #0]
 80015ee:	4413      	add	r3, r2
 80015f0:	b29b      	uxth	r3, r3
 80015f2:	8878      	ldrh	r0, [r7, #2]
 80015f4:	2201      	movs	r2, #1
 80015f6:	9200      	str	r2, [sp, #0]
 80015f8:	460a      	mov	r2, r1
 80015fa:	4621      	mov	r1, r4
 80015fc:	f005 fb17 	bl	8006c2e <SSD1306_DrawLine>
		}
		//Y Arrow
		SSD1306_DrawFilledTriangle(YAxis_Offset-3, YAxis_LimitUP+5, YAxis_Offset+3, YAxis_LimitUP+5, YAxis_Offset, YAxis_LimitUP, 1);
 8001600:	887b      	ldrh	r3, [r7, #2]
 8001602:	3b03      	subs	r3, #3
 8001604:	b298      	uxth	r0, r3
 8001606:	89bb      	ldrh	r3, [r7, #12]
 8001608:	3305      	adds	r3, #5
 800160a:	b299      	uxth	r1, r3
 800160c:	887b      	ldrh	r3, [r7, #2]
 800160e:	3303      	adds	r3, #3
 8001610:	b29a      	uxth	r2, r3
 8001612:	89bb      	ldrh	r3, [r7, #12]
 8001614:	3305      	adds	r3, #5
 8001616:	b29c      	uxth	r4, r3
 8001618:	2301      	movs	r3, #1
 800161a:	9302      	str	r3, [sp, #8]
 800161c:	89bb      	ldrh	r3, [r7, #12]
 800161e:	9301      	str	r3, [sp, #4]
 8001620:	887b      	ldrh	r3, [r7, #2]
 8001622:	9300      	str	r3, [sp, #0]
 8001624:	4623      	mov	r3, r4
 8001626:	f005 fc67 	bl	8006ef8 <SSD1306_DrawFilledTriangle>
		HAL_IWDG_Refresh(&hiwdg);
 800162a:	4818      	ldr	r0, [pc, #96]	; (800168c <Plot_mode+0x5b8>)
 800162c:	f004 f882 	bl	8005734 <HAL_IWDG_Refresh>
		SSD1306_UpdateScreen();
 8001630:	f005 f99e 	bl	8006970 <SSD1306_UpdateScreen>
		switch(GlobalConfigs.PlotType)
 8001634:	4b16      	ldr	r3, [pc, #88]	; (8001690 <Plot_mode+0x5bc>)
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d002      	beq.n	8001642 <Plot_mode+0x56e>
 800163c:	2b01      	cmp	r3, #1
 800163e:	d003      	beq.n	8001648 <Plot_mode+0x574>
 8001640:	e005      	b.n	800164e <Plot_mode+0x57a>
		{
			case BothAxis:
				YLimit = XAxis_High;
 8001642:	893b      	ldrh	r3, [r7, #8]
 8001644:	817b      	strh	r3, [r7, #10]
			break;
 8001646:	e002      	b.n	800164e <Plot_mode+0x57a>
			case YAxis:
				YLimit = YScreenRes;
 8001648:	88fb      	ldrh	r3, [r7, #6]
 800164a:	817b      	strh	r3, [r7, #10]
			break;
 800164c:	bf00      	nop
		}
		Print_OkToContinue(YAxis_Offset, YLimit);
 800164e:	897a      	ldrh	r2, [r7, #10]
 8001650:	887b      	ldrh	r3, [r7, #2]
 8001652:	4611      	mov	r1, r2
 8001654:	4618      	mov	r0, r3
 8001656:	f000 f821 	bl	800169c <Print_OkToContinue>
	}

	//Do the magic :D

	Configs.Last_Mode = Plot;
 800165a:	4b0e      	ldr	r3, [pc, #56]	; (8001694 <Plot_mode+0x5c0>)
 800165c:	2202      	movs	r2, #2
 800165e:	709a      	strb	r2, [r3, #2]
	comeFromMenu = false;
 8001660:	4b0d      	ldr	r3, [pc, #52]	; (8001698 <Plot_mode+0x5c4>)
 8001662:	2200      	movs	r2, #0
 8001664:	701a      	strb	r2, [r3, #0]
	HAL_IWDG_Refresh(&hiwdg);
 8001666:	4809      	ldr	r0, [pc, #36]	; (800168c <Plot_mode+0x5b8>)
 8001668:	f004 f864 	bl	8005734 <HAL_IWDG_Refresh>
	//Read value and put a point
}
 800166c:	bf00      	nop
 800166e:	3710      	adds	r7, #16
 8001670:	46bd      	mov	sp, r7
 8001672:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001676:	bf00      	nop
 8001678:	20000000 	.word	0x20000000
 800167c:	08007e58 	.word	0x08007e58
 8001680:	20000008 	.word	0x20000008
 8001684:	20000016 	.word	0x20000016
 8001688:	20000048 	.word	0x20000048
 800168c:	20000218 	.word	0x20000218
 8001690:	20000028 	.word	0x20000028
 8001694:	2000022c 	.word	0x2000022c
 8001698:	20000246 	.word	0x20000246

0800169c <Print_OkToContinue>:

//Plot Functions
void Print_OkToContinue(uint16_t XOffset, uint16_t YLimit)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b086      	sub	sp, #24
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	4603      	mov	r3, r0
 80016a4:	460a      	mov	r2, r1
 80016a6:	80fb      	strh	r3, [r7, #6]
 80016a8:	4613      	mov	r3, r2
 80016aa:	80bb      	strh	r3, [r7, #4]
	const uint16_t CharsX = 56;
 80016ac:	2338      	movs	r3, #56	; 0x38
 80016ae:	82fb      	strh	r3, [r7, #22]
	const uint16_t XCoordinate = (((128-CharsX) + XOffset)/2);
 80016b0:	8afb      	ldrh	r3, [r7, #22]
 80016b2:	f1c3 0280 	rsb	r2, r3, #128	; 0x80
 80016b6:	88fb      	ldrh	r3, [r7, #6]
 80016b8:	4413      	add	r3, r2
 80016ba:	0fda      	lsrs	r2, r3, #31
 80016bc:	4413      	add	r3, r2
 80016be:	105b      	asrs	r3, r3, #1
 80016c0:	82bb      	strh	r3, [r7, #20]
	const uint16_t CharsY = 33;
 80016c2:	2321      	movs	r3, #33	; 0x21
 80016c4:	827b      	strh	r3, [r7, #18]
	const uint16_t CharYDim = 10;
 80016c6:	230a      	movs	r3, #10
 80016c8:	823b      	strh	r3, [r7, #16]
	const uint16_t YPixelStep = 1;
 80016ca:	2301      	movs	r3, #1
 80016cc:	81fb      	strh	r3, [r7, #14]
	const uint16_t YInitialCoordinate = (YLimit - CharsY) / 2;
 80016ce:	88ba      	ldrh	r2, [r7, #4]
 80016d0:	8a7b      	ldrh	r3, [r7, #18]
 80016d2:	1ad3      	subs	r3, r2, r3
 80016d4:	0fda      	lsrs	r2, r3, #31
 80016d6:	4413      	add	r3, r2
 80016d8:	105b      	asrs	r3, r3, #1
 80016da:	81bb      	strh	r3, [r7, #12]

	SSD1306_GotoXY(XCoordinate, YInitialCoordinate);
 80016dc:	89ba      	ldrh	r2, [r7, #12]
 80016de:	8abb      	ldrh	r3, [r7, #20]
 80016e0:	4611      	mov	r1, r2
 80016e2:	4618      	mov	r0, r3
 80016e4:	f005 f9e8 	bl	8006ab8 <SSD1306_GotoXY>
	SSD1306_Puts("Press OK", &Font_7x10, 1);
 80016e8:	2201      	movs	r2, #1
 80016ea:	4931      	ldr	r1, [pc, #196]	; (80017b0 <Print_OkToContinue+0x114>)
 80016ec:	4831      	ldr	r0, [pc, #196]	; (80017b4 <Print_OkToContinue+0x118>)
 80016ee:	f005 fa79 	bl	8006be4 <SSD1306_Puts>
	SSD1306_GotoXY(XCoordinate, YInitialCoordinate + (CharYDim) + YPixelStep);
 80016f2:	89ba      	ldrh	r2, [r7, #12]
 80016f4:	8a3b      	ldrh	r3, [r7, #16]
 80016f6:	4413      	add	r3, r2
 80016f8:	b29a      	uxth	r2, r3
 80016fa:	89fb      	ldrh	r3, [r7, #14]
 80016fc:	4413      	add	r3, r2
 80016fe:	b29a      	uxth	r2, r3
 8001700:	8abb      	ldrh	r3, [r7, #20]
 8001702:	4611      	mov	r1, r2
 8001704:	4618      	mov	r0, r3
 8001706:	f005 f9d7 	bl	8006ab8 <SSD1306_GotoXY>
	SSD1306_Puts("to start", &Font_7x10, 1);
 800170a:	2201      	movs	r2, #1
 800170c:	4928      	ldr	r1, [pc, #160]	; (80017b0 <Print_OkToContinue+0x114>)
 800170e:	482a      	ldr	r0, [pc, #168]	; (80017b8 <Print_OkToContinue+0x11c>)
 8001710:	f005 fa68 	bl	8006be4 <SSD1306_Puts>
	SSD1306_GotoXY(XCoordinate, YInitialCoordinate + (CharYDim*2) + YPixelStep);
 8001714:	8a3b      	ldrh	r3, [r7, #16]
 8001716:	005b      	lsls	r3, r3, #1
 8001718:	b29a      	uxth	r2, r3
 800171a:	89bb      	ldrh	r3, [r7, #12]
 800171c:	4413      	add	r3, r2
 800171e:	b29a      	uxth	r2, r3
 8001720:	89fb      	ldrh	r3, [r7, #14]
 8001722:	4413      	add	r3, r2
 8001724:	b29a      	uxth	r2, r3
 8001726:	8abb      	ldrh	r3, [r7, #20]
 8001728:	4611      	mov	r1, r2
 800172a:	4618      	mov	r0, r3
 800172c:	f005 f9c4 	bl	8006ab8 <SSD1306_GotoXY>
	SSD1306_Puts("the plot", &Font_7x10, 1);
 8001730:	2201      	movs	r2, #1
 8001732:	491f      	ldr	r1, [pc, #124]	; (80017b0 <Print_OkToContinue+0x114>)
 8001734:	4821      	ldr	r0, [pc, #132]	; (80017bc <Print_OkToContinue+0x120>)
 8001736:	f005 fa55 	bl	8006be4 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 800173a:	f005 f919 	bl	8006970 <SSD1306_UpdateScreen>
	wait_until_press(Ok);
 800173e:	200f      	movs	r0, #15
 8001740:	f000 fe1e 	bl	8002380 <wait_until_press>
	SSD1306_GotoXY(XCoordinate, YInitialCoordinate);
 8001744:	89ba      	ldrh	r2, [r7, #12]
 8001746:	8abb      	ldrh	r3, [r7, #20]
 8001748:	4611      	mov	r1, r2
 800174a:	4618      	mov	r0, r3
 800174c:	f005 f9b4 	bl	8006ab8 <SSD1306_GotoXY>
	SSD1306_Puts("        ", &Font_7x10, 1);
 8001750:	2201      	movs	r2, #1
 8001752:	4917      	ldr	r1, [pc, #92]	; (80017b0 <Print_OkToContinue+0x114>)
 8001754:	481a      	ldr	r0, [pc, #104]	; (80017c0 <Print_OkToContinue+0x124>)
 8001756:	f005 fa45 	bl	8006be4 <SSD1306_Puts>
	SSD1306_GotoXY(XCoordinate, YInitialCoordinate + (CharYDim) + YPixelStep);
 800175a:	89ba      	ldrh	r2, [r7, #12]
 800175c:	8a3b      	ldrh	r3, [r7, #16]
 800175e:	4413      	add	r3, r2
 8001760:	b29a      	uxth	r2, r3
 8001762:	89fb      	ldrh	r3, [r7, #14]
 8001764:	4413      	add	r3, r2
 8001766:	b29a      	uxth	r2, r3
 8001768:	8abb      	ldrh	r3, [r7, #20]
 800176a:	4611      	mov	r1, r2
 800176c:	4618      	mov	r0, r3
 800176e:	f005 f9a3 	bl	8006ab8 <SSD1306_GotoXY>
	SSD1306_Puts("        ", &Font_7x10, 1);
 8001772:	2201      	movs	r2, #1
 8001774:	490e      	ldr	r1, [pc, #56]	; (80017b0 <Print_OkToContinue+0x114>)
 8001776:	4812      	ldr	r0, [pc, #72]	; (80017c0 <Print_OkToContinue+0x124>)
 8001778:	f005 fa34 	bl	8006be4 <SSD1306_Puts>
	SSD1306_GotoXY(XCoordinate, YInitialCoordinate + (CharYDim*2) + YPixelStep);
 800177c:	8a3b      	ldrh	r3, [r7, #16]
 800177e:	005b      	lsls	r3, r3, #1
 8001780:	b29a      	uxth	r2, r3
 8001782:	89bb      	ldrh	r3, [r7, #12]
 8001784:	4413      	add	r3, r2
 8001786:	b29a      	uxth	r2, r3
 8001788:	89fb      	ldrh	r3, [r7, #14]
 800178a:	4413      	add	r3, r2
 800178c:	b29a      	uxth	r2, r3
 800178e:	8abb      	ldrh	r3, [r7, #20]
 8001790:	4611      	mov	r1, r2
 8001792:	4618      	mov	r0, r3
 8001794:	f005 f990 	bl	8006ab8 <SSD1306_GotoXY>
	SSD1306_Puts("        ", &Font_7x10, 1);
 8001798:	2201      	movs	r2, #1
 800179a:	4905      	ldr	r1, [pc, #20]	; (80017b0 <Print_OkToContinue+0x114>)
 800179c:	4808      	ldr	r0, [pc, #32]	; (80017c0 <Print_OkToContinue+0x124>)
 800179e:	f005 fa21 	bl	8006be4 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 80017a2:	f005 f8e5 	bl	8006970 <SSD1306_UpdateScreen>
}
 80017a6:	bf00      	nop
 80017a8:	3718      	adds	r7, #24
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	20000048 	.word	0x20000048
 80017b4:	08007e5c 	.word	0x08007e5c
 80017b8:	08007e68 	.word	0x08007e68
 80017bc:	08007e74 	.word	0x08007e74
 80017c0:	08007e80 	.word	0x08007e80

080017c4 <Config_plot_mode>:

//@TODO Printing the rectangle menu, all the other stages
void Config_plot_mode(void)
{
 80017c4:	b5b0      	push	{r4, r5, r7, lr}
 80017c6:	b092      	sub	sp, #72	; 0x48
 80017c8:	af02      	add	r7, sp, #8
void Config_plot_mode(void)
 80017ca:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80017ce:	637b      	str	r3, [r7, #52]	; 0x34
		char Units[3];
		const char ResolutionPrint[10];
		const char SamplePrint[10];
		const char GraphicPrint[10];

	}GeneralBuffers = {
 80017d0:	1d3b      	adds	r3, r7, #4
 80017d2:	222c      	movs	r2, #44	; 0x2c
 80017d4:	2100      	movs	r1, #0
 80017d6:	4618      	mov	r0, r3
 80017d8:	f005 fe80 	bl	80074dc <memset>
 80017dc:	4ab5      	ldr	r2, [pc, #724]	; (8001ab4 <Config_plot_mode+0x2f0>)
 80017de:	f107 030c 	add.w	r3, r7, #12
 80017e2:	6812      	ldr	r2, [r2, #0]
 80017e4:	4611      	mov	r1, r2
 80017e6:	8019      	strh	r1, [r3, #0]
 80017e8:	3302      	adds	r3, #2
 80017ea:	0c12      	lsrs	r2, r2, #16
 80017ec:	701a      	strb	r2, [r3, #0]
 80017ee:	4ab2      	ldr	r2, [pc, #712]	; (8001ab8 <Config_plot_mode+0x2f4>)
 80017f0:	f107 030f 	add.w	r3, r7, #15
 80017f4:	6810      	ldr	r0, [r2, #0]
 80017f6:	6018      	str	r0, [r3, #0]
 80017f8:	f107 0313 	add.w	r3, r7, #19
 80017fc:	2200      	movs	r2, #0
 80017fe:	601a      	str	r2, [r3, #0]
 8001800:	809a      	strh	r2, [r3, #4]
 8001802:	4aae      	ldr	r2, [pc, #696]	; (8001abc <Config_plot_mode+0x2f8>)
 8001804:	f107 0319 	add.w	r3, r7, #25
 8001808:	6810      	ldr	r0, [r2, #0]
 800180a:	6018      	str	r0, [r3, #0]
 800180c:	8891      	ldrh	r1, [r2, #4]
 800180e:	7992      	ldrb	r2, [r2, #6]
 8001810:	8099      	strh	r1, [r3, #4]
 8001812:	719a      	strb	r2, [r3, #6]
 8001814:	f107 0320 	add.w	r3, r7, #32
 8001818:	2200      	movs	r2, #0
 800181a:	801a      	strh	r2, [r3, #0]
 800181c:	709a      	strb	r2, [r3, #2]
 800181e:	4ba8      	ldr	r3, [pc, #672]	; (8001ac0 <Config_plot_mode+0x2fc>)
 8001820:	f107 0223 	add.w	r2, r7, #35	; 0x23
 8001824:	cb03      	ldmia	r3!, {r0, r1}
 8001826:	6010      	str	r0, [r2, #0]
 8001828:	6051      	str	r1, [r2, #4]
 800182a:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800182e:	2200      	movs	r2, #0
 8001830:	801a      	strh	r2, [r3, #0]
			.ResolutionPrint = "Res",
			.SamplePrint = "Sample",
			.GraphicPrint = "Graphic"
	};

	const uint16_t XOffset = 10; //Minimum of 2
 8001832:	230a      	movs	r3, #10
 8001834:	867b      	strh	r3, [r7, #50]	; 0x32
	const uint16_t ResY = 13;
 8001836:	230d      	movs	r3, #13
 8001838:	863b      	strh	r3, [r7, #48]	; 0x30
	const uint16_t SampleY = 25;
 800183a:	2319      	movs	r3, #25
 800183c:	87fb      	strh	r3, [r7, #62]	; 0x3e
	const uint16_t GraphicY = 37;
 800183e:	2325      	movs	r3, #37	; 0x25
 8001840:	87bb      	strh	r3, [r7, #60]	; 0x3c
	static ConfigStage CurrentStage = Selecting;
	static ConfigStage Cursor = Resolution;
	static bool EnteredGraphic = false;
	static bool CursorMoved = false;
	bool ReprintInitialPrint = false;
 8001842:	2300      	movs	r3, #0
 8001844:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			SSD1306_DrawRectangle(XOffset - 2, ResY - 3, (NumberOfCharsUsed((char *) GeneralBuffers.ResolutionPrint, false) * 7) + 3, 13, 1);
		else
			SSD1306_DrawRectangle(XOffset - 2, ResY - 3, (NumberOfCharsUsed((char *) GeneralBuffers.ResolutionPrint, false) * 7) + 3, 13, 0);
	}

	HAL_IWDG_Refresh(&hiwdg);
 8001848:	489e      	ldr	r0, [pc, #632]	; (8001ac4 <Config_plot_mode+0x300>)
 800184a:	f003 ff73 	bl	8005734 <HAL_IWDG_Refresh>
	if(Configs.Last_Mode != Config_Plot || comeFromMenu || ReprintInitialPrint)
 800184e:	4b9e      	ldr	r3, [pc, #632]	; (8001ac8 <Config_plot_mode+0x304>)
 8001850:	789b      	ldrb	r3, [r3, #2]
 8001852:	2b03      	cmp	r3, #3
 8001854:	d108      	bne.n	8001868 <Config_plot_mode+0xa4>
 8001856:	4b9d      	ldr	r3, [pc, #628]	; (8001acc <Config_plot_mode+0x308>)
 8001858:	781b      	ldrb	r3, [r3, #0]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d104      	bne.n	8001868 <Config_plot_mode+0xa4>
 800185e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001862:	2b00      	cmp	r3, #0
 8001864:	f000 80d9 	beq.w	8001a1a <Config_plot_mode+0x256>
	{
		SSD1306_Clear();
 8001868:	f005 fc08 	bl	800707c <SSD1306_Clear>
		LocalBuffers.PlotType = GlobalConfigs.PlotType;
 800186c:	4b98      	ldr	r3, [pc, #608]	; (8001ad0 <Config_plot_mode+0x30c>)
 800186e:	781a      	ldrb	r2, [r3, #0]
 8001870:	4b98      	ldr	r3, [pc, #608]	; (8001ad4 <Config_plot_mode+0x310>)
 8001872:	701a      	strb	r2, [r3, #0]
		LocalBuffers.SampleTime = GlobalConfigs.SampleTime;
 8001874:	4b96      	ldr	r3, [pc, #600]	; (8001ad0 <Config_plot_mode+0x30c>)
 8001876:	885a      	ldrh	r2, [r3, #2]
 8001878:	4b96      	ldr	r3, [pc, #600]	; (8001ad4 <Config_plot_mode+0x310>)
 800187a:	805a      	strh	r2, [r3, #2]
		LocalBuffers.Resolution = GlobalConfigs.Resolution;
 800187c:	4b94      	ldr	r3, [pc, #592]	; (8001ad0 <Config_plot_mode+0x30c>)
 800187e:	889a      	ldrh	r2, [r3, #4]
 8001880:	4b94      	ldr	r3, [pc, #592]	; (8001ad4 <Config_plot_mode+0x310>)
 8001882:	809a      	strh	r2, [r3, #4]
		LocalBuffers.PrintLegends = GlobalConfigs.Resolution;
 8001884:	4b92      	ldr	r3, [pc, #584]	; (8001ad0 <Config_plot_mode+0x30c>)
 8001886:	889b      	ldrh	r3, [r3, #4]
 8001888:	b2da      	uxtb	r2, r3
 800188a:	4b92      	ldr	r3, [pc, #584]	; (8001ad4 <Config_plot_mode+0x310>)
 800188c:	719a      	strb	r2, [r3, #6]
		GeneralBuffers.ResBuffer = (char *) calloc(CharsNumberFromInt(LocalBuffers.Resolution, false), sizeof(char));
 800188e:	4b91      	ldr	r3, [pc, #580]	; (8001ad4 <Config_plot_mode+0x310>)
 8001890:	889b      	ldrh	r3, [r3, #4]
 8001892:	2100      	movs	r1, #0
 8001894:	4618      	mov	r0, r3
 8001896:	f000 fe37 	bl	8002508 <CharsNumberFromInt>
 800189a:	4603      	mov	r3, r0
 800189c:	2101      	movs	r1, #1
 800189e:	4618      	mov	r0, r3
 80018a0:	f005 fde2 	bl	8007468 <calloc>
 80018a4:	4603      	mov	r3, r0
 80018a6:	607b      	str	r3, [r7, #4]

		if(GeneralBuffers.ResBuffer == NULL)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d117      	bne.n	80018de <Config_plot_mode+0x11a>
		{
			//Send error message || Code error 0xAF
			SSD1306_Clear();
 80018ae:	f005 fbe5 	bl	800707c <SSD1306_Clear>
			SSD1306_GotoXY(CenterXPrint("Fatal Error, code: 0xAF", 0, 128, Font_11x18), 20);
 80018b2:	4b89      	ldr	r3, [pc, #548]	; (8001ad8 <Config_plot_mode+0x314>)
 80018b4:	685a      	ldr	r2, [r3, #4]
 80018b6:	9200      	str	r2, [sp, #0]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	2280      	movs	r2, #128	; 0x80
 80018bc:	2100      	movs	r1, #0
 80018be:	4887      	ldr	r0, [pc, #540]	; (8001adc <Config_plot_mode+0x318>)
 80018c0:	f000 fdfc 	bl	80024bc <CenterXPrint>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2114      	movs	r1, #20
 80018c8:	4618      	mov	r0, r3
 80018ca:	f005 f8f5 	bl	8006ab8 <SSD1306_GotoXY>
			SSD1306_Puts("Fatal Error, code: 0xAF", &Font_11x18, 1);
 80018ce:	2201      	movs	r2, #1
 80018d0:	4981      	ldr	r1, [pc, #516]	; (8001ad8 <Config_plot_mode+0x314>)
 80018d2:	4882      	ldr	r0, [pc, #520]	; (8001adc <Config_plot_mode+0x318>)
 80018d4:	f005 f986 	bl	8006be4 <SSD1306_Puts>
			SSD1306_UpdateScreen();
 80018d8:	f005 f84a 	bl	8006970 <SSD1306_UpdateScreen>
			return;
 80018dc:	e210      	b.n	8001d00 <Config_plot_mode+0x53c>
		}
		else
		{
			sprintf(GeneralBuffers.ResBuffer, "%d", (int) LocalBuffers.Resolution);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	4a7c      	ldr	r2, [pc, #496]	; (8001ad4 <Config_plot_mode+0x310>)
 80018e2:	8892      	ldrh	r2, [r2, #4]
 80018e4:	497e      	ldr	r1, [pc, #504]	; (8001ae0 <Config_plot_mode+0x31c>)
 80018e6:	4618      	mov	r0, r3
 80018e8:	f005 ff00 	bl	80076ec <siprintf>
		}

		GeneralBuffers.SampleBuffer = (char *) calloc(CharsNumberFromInt(LocalBuffers.SampleTime, false), sizeof(char));
 80018ec:	4b79      	ldr	r3, [pc, #484]	; (8001ad4 <Config_plot_mode+0x310>)
 80018ee:	885b      	ldrh	r3, [r3, #2]
 80018f0:	2100      	movs	r1, #0
 80018f2:	4618      	mov	r0, r3
 80018f4:	f000 fe08 	bl	8002508 <CharsNumberFromInt>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2101      	movs	r1, #1
 80018fc:	4618      	mov	r0, r3
 80018fe:	f005 fdb3 	bl	8007468 <calloc>
 8001902:	4603      	mov	r3, r0
 8001904:	60bb      	str	r3, [r7, #8]

		if(GeneralBuffers.SampleBuffer == NULL)
 8001906:	68bb      	ldr	r3, [r7, #8]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d117      	bne.n	800193c <Config_plot_mode+0x178>
		{
			//Send error message || Code error 0xAA
			SSD1306_Clear();
 800190c:	f005 fbb6 	bl	800707c <SSD1306_Clear>
			SSD1306_GotoXY(CenterXPrint("Fatal Error, code: 0xAA", 0, 128, Font_11x18), 20);
 8001910:	4b71      	ldr	r3, [pc, #452]	; (8001ad8 <Config_plot_mode+0x314>)
 8001912:	685a      	ldr	r2, [r3, #4]
 8001914:	9200      	str	r2, [sp, #0]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	2280      	movs	r2, #128	; 0x80
 800191a:	2100      	movs	r1, #0
 800191c:	4871      	ldr	r0, [pc, #452]	; (8001ae4 <Config_plot_mode+0x320>)
 800191e:	f000 fdcd 	bl	80024bc <CenterXPrint>
 8001922:	4603      	mov	r3, r0
 8001924:	2114      	movs	r1, #20
 8001926:	4618      	mov	r0, r3
 8001928:	f005 f8c6 	bl	8006ab8 <SSD1306_GotoXY>
			SSD1306_Puts("Fatal Error, code: 0xAA", &Font_11x18, 1);
 800192c:	2201      	movs	r2, #1
 800192e:	496a      	ldr	r1, [pc, #424]	; (8001ad8 <Config_plot_mode+0x314>)
 8001930:	486c      	ldr	r0, [pc, #432]	; (8001ae4 <Config_plot_mode+0x320>)
 8001932:	f005 f957 	bl	8006be4 <SSD1306_Puts>
			SSD1306_UpdateScreen();
 8001936:	f005 f81b 	bl	8006970 <SSD1306_UpdateScreen>
			return;
 800193a:	e1e1      	b.n	8001d00 <Config_plot_mode+0x53c>
		}
		else
		{
			sprintf(GeneralBuffers.SampleBuffer, "%d", (int) LocalBuffers.SampleTime);
 800193c:	68bb      	ldr	r3, [r7, #8]
 800193e:	4a65      	ldr	r2, [pc, #404]	; (8001ad4 <Config_plot_mode+0x310>)
 8001940:	8852      	ldrh	r2, [r2, #2]
 8001942:	4967      	ldr	r1, [pc, #412]	; (8001ae0 <Config_plot_mode+0x31c>)
 8001944:	4618      	mov	r0, r3
 8001946:	f005 fed1 	bl	80076ec <siprintf>
		}
		HAL_IWDG_Refresh(&hiwdg);
 800194a:	485e      	ldr	r0, [pc, #376]	; (8001ac4 <Config_plot_mode+0x300>)
 800194c:	f003 fef2 	bl	8005734 <HAL_IWDG_Refresh>
		//List of configurations
		SSD1306_GotoXY(XOffset, ResY);
 8001950:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8001952:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8001954:	4611      	mov	r1, r2
 8001956:	4618      	mov	r0, r3
 8001958:	f005 f8ae 	bl	8006ab8 <SSD1306_GotoXY>
		SSD1306_Puts((char *) GeneralBuffers.ResolutionPrint, &Font_7x10, 1);
 800195c:	1d3b      	adds	r3, r7, #4
 800195e:	330b      	adds	r3, #11
 8001960:	2201      	movs	r2, #1
 8001962:	4961      	ldr	r1, [pc, #388]	; (8001ae8 <Config_plot_mode+0x324>)
 8001964:	4618      	mov	r0, r3
 8001966:	f005 f93d 	bl	8006be4 <SSD1306_Puts>
		SSD1306_GotoXY(XOffset, SampleY);
 800196a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800196c:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800196e:	4611      	mov	r1, r2
 8001970:	4618      	mov	r0, r3
 8001972:	f005 f8a1 	bl	8006ab8 <SSD1306_GotoXY>
		SSD1306_Puts((char *) GeneralBuffers.SamplePrint, &Font_7x10, 1);
 8001976:	1d3b      	adds	r3, r7, #4
 8001978:	3315      	adds	r3, #21
 800197a:	2201      	movs	r2, #1
 800197c:	495a      	ldr	r1, [pc, #360]	; (8001ae8 <Config_plot_mode+0x324>)
 800197e:	4618      	mov	r0, r3
 8001980:	f005 f930 	bl	8006be4 <SSD1306_Puts>
		SSD1306_GotoXY(XOffset, GraphicY);
 8001984:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8001986:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8001988:	4611      	mov	r1, r2
 800198a:	4618      	mov	r0, r3
 800198c:	f005 f894 	bl	8006ab8 <SSD1306_GotoXY>
		SSD1306_Puts((char *) GeneralBuffers.GraphicPrint, &Font_7x10, 1);
 8001990:	1d3b      	adds	r3, r7, #4
 8001992:	331f      	adds	r3, #31
 8001994:	2201      	movs	r2, #1
 8001996:	4954      	ldr	r1, [pc, #336]	; (8001ae8 <Config_plot_mode+0x324>)
 8001998:	4618      	mov	r0, r3
 800199a:	f005 f923 	bl	8006be4 <SSD1306_Puts>
		//Value Selected
		SSD1306_GotoXY(XOffset + (NumberOfCharsUsed((char *) GeneralBuffers.ResolutionPrint, false) * 7) + 5, 13);
 800199e:	1d3b      	adds	r3, r7, #4
 80019a0:	330b      	adds	r3, #11
 80019a2:	2100      	movs	r1, #0
 80019a4:	4618      	mov	r0, r3
 80019a6:	f000 fdd3 	bl	8002550 <NumberOfCharsUsed>
 80019aa:	4603      	mov	r3, r0
 80019ac:	461a      	mov	r2, r3
 80019ae:	00d2      	lsls	r2, r2, #3
 80019b0:	1ad3      	subs	r3, r2, r3
 80019b2:	b29b      	uxth	r3, r3
 80019b4:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 80019b6:	4413      	add	r3, r2
 80019b8:	b29b      	uxth	r3, r3
 80019ba:	3305      	adds	r3, #5
 80019bc:	b29b      	uxth	r3, r3
 80019be:	210d      	movs	r1, #13
 80019c0:	4618      	mov	r0, r3
 80019c2:	f005 f879 	bl	8006ab8 <SSD1306_GotoXY>
		SSD1306_Puts(GeneralBuffers.ResBuffer, &Font_7x10, 1);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2201      	movs	r2, #1
 80019ca:	4947      	ldr	r1, [pc, #284]	; (8001ae8 <Config_plot_mode+0x324>)
 80019cc:	4618      	mov	r0, r3
 80019ce:	f005 f909 	bl	8006be4 <SSD1306_Puts>
		SSD1306_GotoXY(XOffset + (NumberOfCharsUsed((char *) GeneralBuffers.SamplePrint, false) * 7) + 5, 25);
 80019d2:	1d3b      	adds	r3, r7, #4
 80019d4:	3315      	adds	r3, #21
 80019d6:	2100      	movs	r1, #0
 80019d8:	4618      	mov	r0, r3
 80019da:	f000 fdb9 	bl	8002550 <NumberOfCharsUsed>
 80019de:	4603      	mov	r3, r0
 80019e0:	461a      	mov	r2, r3
 80019e2:	00d2      	lsls	r2, r2, #3
 80019e4:	1ad3      	subs	r3, r2, r3
 80019e6:	b29b      	uxth	r3, r3
 80019e8:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 80019ea:	4413      	add	r3, r2
 80019ec:	b29b      	uxth	r3, r3
 80019ee:	3305      	adds	r3, #5
 80019f0:	b29b      	uxth	r3, r3
 80019f2:	2119      	movs	r1, #25
 80019f4:	4618      	mov	r0, r3
 80019f6:	f005 f85f 	bl	8006ab8 <SSD1306_GotoXY>
		SSD1306_Puts(GeneralBuffers.SampleBuffer, &Font_7x10, 1);
 80019fa:	68bb      	ldr	r3, [r7, #8]
 80019fc:	2201      	movs	r2, #1
 80019fe:	493a      	ldr	r1, [pc, #232]	; (8001ae8 <Config_plot_mode+0x324>)
 8001a00:	4618      	mov	r0, r3
 8001a02:	f005 f8ef 	bl	8006be4 <SSD1306_Puts>
		SSD1306_UpdateScreen();
 8001a06:	f004 ffb3 	bl	8006970 <SSD1306_UpdateScreen>
		free(GeneralBuffers.ResBuffer);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f005 fd5d 	bl	80074cc <free>
		free(GeneralBuffers.SampleBuffer);
 8001a12:	68bb      	ldr	r3, [r7, #8]
 8001a14:	4618      	mov	r0, r3
 8001a16:	f005 fd59 	bl	80074cc <free>
	}
	//Start the configuration
	HAL_IWDG_Refresh(&hiwdg);
 8001a1a:	482a      	ldr	r0, [pc, #168]	; (8001ac4 <Config_plot_mode+0x300>)
 8001a1c:	f003 fe8a 	bl	8005734 <HAL_IWDG_Refresh>
	switch(CurrentStage)
 8001a20:	4b32      	ldr	r3, [pc, #200]	; (8001aec <Config_plot_mode+0x328>)
 8001a22:	781b      	ldrb	r3, [r3, #0]
 8001a24:	3b01      	subs	r3, #1
 8001a26:	2b03      	cmp	r3, #3
 8001a28:	f200 8163 	bhi.w	8001cf2 <Config_plot_mode+0x52e>
 8001a2c:	a201      	add	r2, pc, #4	; (adr r2, 8001a34 <Config_plot_mode+0x270>)
 8001a2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a32:	bf00      	nop
 8001a34:	08001a45 	.word	0x08001a45
 8001a38:	08001cf3 	.word	0x08001cf3
 8001a3c:	08001cf3 	.word	0x08001cf3
 8001a40:	08001cf3 	.word	0x08001cf3
	{
		case Selecting:
			HAL_IWDG_Refresh(&hiwdg);
 8001a44:	481f      	ldr	r0, [pc, #124]	; (8001ac4 <Config_plot_mode+0x300>)
 8001a46:	f003 fe75 	bl	8005734 <HAL_IWDG_Refresh>
			IDR_Read = (GPIOA -> IDR & ReadMask);
 8001a4a:	4b29      	ldr	r3, [pc, #164]	; (8001af0 <Config_plot_mode+0x32c>)
 8001a4c:	689b      	ldr	r3, [r3, #8]
 8001a4e:	f003 031f 	and.w	r3, r3, #31
 8001a52:	4a28      	ldr	r2, [pc, #160]	; (8001af4 <Config_plot_mode+0x330>)
 8001a54:	6013      	str	r3, [r2, #0]
			switch(IDR_Read)
 8001a56:	4b27      	ldr	r3, [pc, #156]	; (8001af4 <Config_plot_mode+0x330>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	2b1e      	cmp	r3, #30
 8001a5c:	d006      	beq.n	8001a6c <Config_plot_mode+0x2a8>
 8001a5e:	2b1e      	cmp	r3, #30
 8001a60:	d85a      	bhi.n	8001b18 <Config_plot_mode+0x354>
 8001a62:	2b0f      	cmp	r3, #15
 8001a64:	d04c      	beq.n	8001b00 <Config_plot_mode+0x33c>
 8001a66:	2b1d      	cmp	r3, #29
 8001a68:	d012      	beq.n	8001a90 <Config_plot_mode+0x2cc>
						if(Cursor == Graphic)
							EnteredGraphic = true;
						//@TODO Select animation
				break;
				default:
				break;
 8001a6a:	e055      	b.n	8001b18 <Config_plot_mode+0x354>
					Cursor--;
 8001a6c:	4b22      	ldr	r3, [pc, #136]	; (8001af8 <Config_plot_mode+0x334>)
 8001a6e:	781b      	ldrb	r3, [r3, #0]
 8001a70:	3b01      	subs	r3, #1
 8001a72:	b2da      	uxtb	r2, r3
 8001a74:	4b20      	ldr	r3, [pc, #128]	; (8001af8 <Config_plot_mode+0x334>)
 8001a76:	701a      	strb	r2, [r3, #0]
					if(Cursor > Resolution)
 8001a78:	4b1f      	ldr	r3, [pc, #124]	; (8001af8 <Config_plot_mode+0x334>)
 8001a7a:	781b      	ldrb	r3, [r3, #0]
 8001a7c:	2b02      	cmp	r3, #2
 8001a7e:	d903      	bls.n	8001a88 <Config_plot_mode+0x2c4>
						Cursor = Resolution;
 8001a80:	4b1d      	ldr	r3, [pc, #116]	; (8001af8 <Config_plot_mode+0x334>)
 8001a82:	2202      	movs	r2, #2
 8001a84:	701a      	strb	r2, [r3, #0]
				break;
 8001a86:	e04a      	b.n	8001b1e <Config_plot_mode+0x35a>
						CursorMoved = true;
 8001a88:	4b1c      	ldr	r3, [pc, #112]	; (8001afc <Config_plot_mode+0x338>)
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	701a      	strb	r2, [r3, #0]
				break;
 8001a8e:	e046      	b.n	8001b1e <Config_plot_mode+0x35a>
					Cursor++;
 8001a90:	4b19      	ldr	r3, [pc, #100]	; (8001af8 <Config_plot_mode+0x334>)
 8001a92:	781b      	ldrb	r3, [r3, #0]
 8001a94:	3301      	adds	r3, #1
 8001a96:	b2da      	uxtb	r2, r3
 8001a98:	4b17      	ldr	r3, [pc, #92]	; (8001af8 <Config_plot_mode+0x334>)
 8001a9a:	701a      	strb	r2, [r3, #0]
					if(Cursor < Graphic)
 8001a9c:	4b16      	ldr	r3, [pc, #88]	; (8001af8 <Config_plot_mode+0x334>)
 8001a9e:	781b      	ldrb	r3, [r3, #0]
 8001aa0:	2b03      	cmp	r3, #3
 8001aa2:	d803      	bhi.n	8001aac <Config_plot_mode+0x2e8>
						Cursor = Graphic;
 8001aa4:	4b14      	ldr	r3, [pc, #80]	; (8001af8 <Config_plot_mode+0x334>)
 8001aa6:	2204      	movs	r2, #4
 8001aa8:	701a      	strb	r2, [r3, #0]
				break;
 8001aaa:	e038      	b.n	8001b1e <Config_plot_mode+0x35a>
						CursorMoved = true;
 8001aac:	4b13      	ldr	r3, [pc, #76]	; (8001afc <Config_plot_mode+0x338>)
 8001aae:	2201      	movs	r2, #1
 8001ab0:	701a      	strb	r2, [r3, #0]
				break;
 8001ab2:	e034      	b.n	8001b1e <Config_plot_mode+0x35a>
 8001ab4:	08007ebc 	.word	0x08007ebc
 8001ab8:	08007ec0 	.word	0x08007ec0
 8001abc:	08007ecc 	.word	0x08007ecc
 8001ac0:	08007ed8 	.word	0x08007ed8
 8001ac4:	20000218 	.word	0x20000218
 8001ac8:	2000022c 	.word	0x2000022c
 8001acc:	20000246 	.word	0x20000246
 8001ad0:	20000028 	.word	0x20000028
 8001ad4:	20000030 	.word	0x20000030
 8001ad8:	20000050 	.word	0x20000050
 8001adc:	08007e8c 	.word	0x08007e8c
 8001ae0:	08007e58 	.word	0x08007e58
 8001ae4:	08007ea4 	.word	0x08007ea4
 8001ae8:	20000048 	.word	0x20000048
 8001aec:	20000038 	.word	0x20000038
 8001af0:	40010800 	.word	0x40010800
 8001af4:	20000240 	.word	0x20000240
 8001af8:	20000039 	.word	0x20000039
 8001afc:	20000248 	.word	0x20000248
						CurrentStage = Cursor;
 8001b00:	4b81      	ldr	r3, [pc, #516]	; (8001d08 <Config_plot_mode+0x544>)
 8001b02:	781a      	ldrb	r2, [r3, #0]
 8001b04:	4b81      	ldr	r3, [pc, #516]	; (8001d0c <Config_plot_mode+0x548>)
 8001b06:	701a      	strb	r2, [r3, #0]
						if(Cursor == Graphic)
 8001b08:	4b7f      	ldr	r3, [pc, #508]	; (8001d08 <Config_plot_mode+0x544>)
 8001b0a:	781b      	ldrb	r3, [r3, #0]
 8001b0c:	2b04      	cmp	r3, #4
 8001b0e:	d105      	bne.n	8001b1c <Config_plot_mode+0x358>
							EnteredGraphic = true;
 8001b10:	4b7f      	ldr	r3, [pc, #508]	; (8001d10 <Config_plot_mode+0x54c>)
 8001b12:	2201      	movs	r2, #1
 8001b14:	701a      	strb	r2, [r3, #0]
				break;
 8001b16:	e001      	b.n	8001b1c <Config_plot_mode+0x358>
				break;
 8001b18:	bf00      	nop
 8001b1a:	e000      	b.n	8001b1e <Config_plot_mode+0x35a>
				break;
 8001b1c:	bf00      	nop
			}
			//Printing cursor
			switch(Cursor)
 8001b1e:	4b7a      	ldr	r3, [pc, #488]	; (8001d08 <Config_plot_mode+0x544>)
 8001b20:	781b      	ldrb	r3, [r3, #0]
 8001b22:	2b04      	cmp	r3, #4
 8001b24:	f000 80a4 	beq.w	8001c70 <Config_plot_mode+0x4ac>
 8001b28:	2b04      	cmp	r3, #4
 8001b2a:	f300 80de 	bgt.w	8001cea <Config_plot_mode+0x526>
 8001b2e:	2b02      	cmp	r3, #2
 8001b30:	d002      	beq.n	8001b38 <Config_plot_mode+0x374>
 8001b32:	2b03      	cmp	r3, #3
 8001b34:	d03d      	beq.n	8001bb2 <Config_plot_mode+0x3ee>

					else //Draw rectangle
						SSD1306_DrawRectangle(XOffset - 2, GraphicY - 1, (NumberOfCharsUsed((char *) GeneralBuffers.GraphicPrint, false) * 7) + 1, 11, 1);
				break;
				default:
				break;
 8001b36:	e0d8      	b.n	8001cea <Config_plot_mode+0x526>
					if(CursorMoved)
 8001b38:	4b76      	ldr	r3, [pc, #472]	; (8001d14 <Config_plot_mode+0x550>)
 8001b3a:	781b      	ldrb	r3, [r3, #0]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d01d      	beq.n	8001b7c <Config_plot_mode+0x3b8>
						SSD1306_DrawRectangle(XOffset - 2, SampleY - 1, (NumberOfCharsUsed((char *) GeneralBuffers.SamplePrint, false) * 7) + 1, 11, 0);
 8001b40:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8001b42:	3b02      	subs	r3, #2
 8001b44:	b29c      	uxth	r4, r3
 8001b46:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8001b48:	3b01      	subs	r3, #1
 8001b4a:	b29d      	uxth	r5, r3
 8001b4c:	1d3b      	adds	r3, r7, #4
 8001b4e:	3315      	adds	r3, #21
 8001b50:	2100      	movs	r1, #0
 8001b52:	4618      	mov	r0, r3
 8001b54:	f000 fcfc 	bl	8002550 <NumberOfCharsUsed>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	461a      	mov	r2, r3
 8001b5c:	00d2      	lsls	r2, r2, #3
 8001b5e:	1ad3      	subs	r3, r2, r3
 8001b60:	b29b      	uxth	r3, r3
 8001b62:	3301      	adds	r3, #1
 8001b64:	b29a      	uxth	r2, r3
 8001b66:	2300      	movs	r3, #0
 8001b68:	9300      	str	r3, [sp, #0]
 8001b6a:	230b      	movs	r3, #11
 8001b6c:	4629      	mov	r1, r5
 8001b6e:	4620      	mov	r0, r4
 8001b70:	f005 f958 	bl	8006e24 <SSD1306_DrawRectangle>
						CursorMoved = false;
 8001b74:	4b67      	ldr	r3, [pc, #412]	; (8001d14 <Config_plot_mode+0x550>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	701a      	strb	r2, [r3, #0]
				break;
 8001b7a:	e0b7      	b.n	8001cec <Config_plot_mode+0x528>
						SSD1306_DrawRectangle(XOffset - 2, ResY - 3, (NumberOfCharsUsed((char *) GeneralBuffers.ResolutionPrint, false) * 7) + 3, 13, 1);
 8001b7c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8001b7e:	3b02      	subs	r3, #2
 8001b80:	b29c      	uxth	r4, r3
 8001b82:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8001b84:	3b03      	subs	r3, #3
 8001b86:	b29d      	uxth	r5, r3
 8001b88:	1d3b      	adds	r3, r7, #4
 8001b8a:	330b      	adds	r3, #11
 8001b8c:	2100      	movs	r1, #0
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f000 fcde 	bl	8002550 <NumberOfCharsUsed>
 8001b94:	4603      	mov	r3, r0
 8001b96:	461a      	mov	r2, r3
 8001b98:	00d2      	lsls	r2, r2, #3
 8001b9a:	1ad3      	subs	r3, r2, r3
 8001b9c:	b29b      	uxth	r3, r3
 8001b9e:	3303      	adds	r3, #3
 8001ba0:	b29a      	uxth	r2, r3
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	9300      	str	r3, [sp, #0]
 8001ba6:	230d      	movs	r3, #13
 8001ba8:	4629      	mov	r1, r5
 8001baa:	4620      	mov	r0, r4
 8001bac:	f005 f93a 	bl	8006e24 <SSD1306_DrawRectangle>
				break;
 8001bb0:	e09c      	b.n	8001cec <Config_plot_mode+0x528>
					if(CursorMoved)
 8001bb2:	4b58      	ldr	r3, [pc, #352]	; (8001d14 <Config_plot_mode+0x550>)
 8001bb4:	781b      	ldrb	r3, [r3, #0]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d03f      	beq.n	8001c3a <Config_plot_mode+0x476>
						switch(IDR_Read)
 8001bba:	4b57      	ldr	r3, [pc, #348]	; (8001d18 <Config_plot_mode+0x554>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	2b1d      	cmp	r3, #29
 8001bc0:	d01c      	beq.n	8001bfc <Config_plot_mode+0x438>
 8001bc2:	2b1e      	cmp	r3, #30
 8001bc4:	d135      	bne.n	8001c32 <Config_plot_mode+0x46e>
								SSD1306_DrawRectangle(XOffset - 2, GraphicY - 1, (NumberOfCharsUsed((char *) GeneralBuffers.GraphicPrint, false) * 7) + 1, 11, 0);
 8001bc6:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8001bc8:	3b02      	subs	r3, #2
 8001bca:	b29c      	uxth	r4, r3
 8001bcc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001bce:	3b01      	subs	r3, #1
 8001bd0:	b29d      	uxth	r5, r3
 8001bd2:	1d3b      	adds	r3, r7, #4
 8001bd4:	331f      	adds	r3, #31
 8001bd6:	2100      	movs	r1, #0
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f000 fcb9 	bl	8002550 <NumberOfCharsUsed>
 8001bde:	4603      	mov	r3, r0
 8001be0:	461a      	mov	r2, r3
 8001be2:	00d2      	lsls	r2, r2, #3
 8001be4:	1ad3      	subs	r3, r2, r3
 8001be6:	b29b      	uxth	r3, r3
 8001be8:	3301      	adds	r3, #1
 8001bea:	b29a      	uxth	r2, r3
 8001bec:	2300      	movs	r3, #0
 8001bee:	9300      	str	r3, [sp, #0]
 8001bf0:	230b      	movs	r3, #11
 8001bf2:	4629      	mov	r1, r5
 8001bf4:	4620      	mov	r0, r4
 8001bf6:	f005 f915 	bl	8006e24 <SSD1306_DrawRectangle>
							break;
 8001bfa:	e01a      	b.n	8001c32 <Config_plot_mode+0x46e>
								SSD1306_DrawRectangle(XOffset - 2, ResY - 3, (NumberOfCharsUsed((char *) GeneralBuffers.ResolutionPrint, false) * 7) + 3, 13, 0);
 8001bfc:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8001bfe:	3b02      	subs	r3, #2
 8001c00:	b29c      	uxth	r4, r3
 8001c02:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8001c04:	3b03      	subs	r3, #3
 8001c06:	b29d      	uxth	r5, r3
 8001c08:	1d3b      	adds	r3, r7, #4
 8001c0a:	330b      	adds	r3, #11
 8001c0c:	2100      	movs	r1, #0
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f000 fc9e 	bl	8002550 <NumberOfCharsUsed>
 8001c14:	4603      	mov	r3, r0
 8001c16:	461a      	mov	r2, r3
 8001c18:	00d2      	lsls	r2, r2, #3
 8001c1a:	1ad3      	subs	r3, r2, r3
 8001c1c:	b29b      	uxth	r3, r3
 8001c1e:	3303      	adds	r3, #3
 8001c20:	b29a      	uxth	r2, r3
 8001c22:	2300      	movs	r3, #0
 8001c24:	9300      	str	r3, [sp, #0]
 8001c26:	230d      	movs	r3, #13
 8001c28:	4629      	mov	r1, r5
 8001c2a:	4620      	mov	r0, r4
 8001c2c:	f005 f8fa 	bl	8006e24 <SSD1306_DrawRectangle>
							break;
 8001c30:	bf00      	nop
						CursorMoved = false;
 8001c32:	4b38      	ldr	r3, [pc, #224]	; (8001d14 <Config_plot_mode+0x550>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	701a      	strb	r2, [r3, #0]
				break;
 8001c38:	e058      	b.n	8001cec <Config_plot_mode+0x528>
						SSD1306_DrawRectangle(XOffset - 2, SampleY - 1, (NumberOfCharsUsed((char *) GeneralBuffers.SamplePrint, false) * 7) + 1, 11, 1);
 8001c3a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8001c3c:	3b02      	subs	r3, #2
 8001c3e:	b29c      	uxth	r4, r3
 8001c40:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8001c42:	3b01      	subs	r3, #1
 8001c44:	b29d      	uxth	r5, r3
 8001c46:	1d3b      	adds	r3, r7, #4
 8001c48:	3315      	adds	r3, #21
 8001c4a:	2100      	movs	r1, #0
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f000 fc7f 	bl	8002550 <NumberOfCharsUsed>
 8001c52:	4603      	mov	r3, r0
 8001c54:	461a      	mov	r2, r3
 8001c56:	00d2      	lsls	r2, r2, #3
 8001c58:	1ad3      	subs	r3, r2, r3
 8001c5a:	b29b      	uxth	r3, r3
 8001c5c:	3301      	adds	r3, #1
 8001c5e:	b29a      	uxth	r2, r3
 8001c60:	2301      	movs	r3, #1
 8001c62:	9300      	str	r3, [sp, #0]
 8001c64:	230b      	movs	r3, #11
 8001c66:	4629      	mov	r1, r5
 8001c68:	4620      	mov	r0, r4
 8001c6a:	f005 f8db 	bl	8006e24 <SSD1306_DrawRectangle>
				break;
 8001c6e:	e03d      	b.n	8001cec <Config_plot_mode+0x528>
					if(CursorMoved)
 8001c70:	4b28      	ldr	r3, [pc, #160]	; (8001d14 <Config_plot_mode+0x550>)
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d01d      	beq.n	8001cb4 <Config_plot_mode+0x4f0>
						SSD1306_DrawRectangle(XOffset - 2, SampleY - 1, (NumberOfCharsUsed((char *) GeneralBuffers.SamplePrint, false) * 7) + 1, 11, 0);
 8001c78:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8001c7a:	3b02      	subs	r3, #2
 8001c7c:	b29c      	uxth	r4, r3
 8001c7e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8001c80:	3b01      	subs	r3, #1
 8001c82:	b29d      	uxth	r5, r3
 8001c84:	1d3b      	adds	r3, r7, #4
 8001c86:	3315      	adds	r3, #21
 8001c88:	2100      	movs	r1, #0
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f000 fc60 	bl	8002550 <NumberOfCharsUsed>
 8001c90:	4603      	mov	r3, r0
 8001c92:	461a      	mov	r2, r3
 8001c94:	00d2      	lsls	r2, r2, #3
 8001c96:	1ad3      	subs	r3, r2, r3
 8001c98:	b29b      	uxth	r3, r3
 8001c9a:	3301      	adds	r3, #1
 8001c9c:	b29a      	uxth	r2, r3
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	9300      	str	r3, [sp, #0]
 8001ca2:	230b      	movs	r3, #11
 8001ca4:	4629      	mov	r1, r5
 8001ca6:	4620      	mov	r0, r4
 8001ca8:	f005 f8bc 	bl	8006e24 <SSD1306_DrawRectangle>
						CursorMoved = false;
 8001cac:	4b19      	ldr	r3, [pc, #100]	; (8001d14 <Config_plot_mode+0x550>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	701a      	strb	r2, [r3, #0]
				break;
 8001cb2:	e01b      	b.n	8001cec <Config_plot_mode+0x528>
						SSD1306_DrawRectangle(XOffset - 2, GraphicY - 1, (NumberOfCharsUsed((char *) GeneralBuffers.GraphicPrint, false) * 7) + 1, 11, 1);
 8001cb4:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8001cb6:	3b02      	subs	r3, #2
 8001cb8:	b29c      	uxth	r4, r3
 8001cba:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001cbc:	3b01      	subs	r3, #1
 8001cbe:	b29d      	uxth	r5, r3
 8001cc0:	1d3b      	adds	r3, r7, #4
 8001cc2:	331f      	adds	r3, #31
 8001cc4:	2100      	movs	r1, #0
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f000 fc42 	bl	8002550 <NumberOfCharsUsed>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	461a      	mov	r2, r3
 8001cd0:	00d2      	lsls	r2, r2, #3
 8001cd2:	1ad3      	subs	r3, r2, r3
 8001cd4:	b29b      	uxth	r3, r3
 8001cd6:	3301      	adds	r3, #1
 8001cd8:	b29a      	uxth	r2, r3
 8001cda:	2301      	movs	r3, #1
 8001cdc:	9300      	str	r3, [sp, #0]
 8001cde:	230b      	movs	r3, #11
 8001ce0:	4629      	mov	r1, r5
 8001ce2:	4620      	mov	r0, r4
 8001ce4:	f005 f89e 	bl	8006e24 <SSD1306_DrawRectangle>
				break;
 8001ce8:	e000      	b.n	8001cec <Config_plot_mode+0x528>
				break;
 8001cea:	bf00      	nop
			}
			SSD1306_UpdateScreen();
 8001cec:	f004 fe40 	bl	8006970 <SSD1306_UpdateScreen>
		break;
 8001cf0:	e000      	b.n	8001cf4 <Config_plot_mode+0x530>
		case SampleTime:
		break;
		case Graphic:
		break;
		default:
		break;
 8001cf2:	bf00      	nop
	}
	Configs.Last_Mode = Config_Plot;
 8001cf4:	4b09      	ldr	r3, [pc, #36]	; (8001d1c <Config_plot_mode+0x558>)
 8001cf6:	2203      	movs	r2, #3
 8001cf8:	709a      	strb	r2, [r3, #2]
	comeFromMenu = false;
 8001cfa:	4b09      	ldr	r3, [pc, #36]	; (8001d20 <Config_plot_mode+0x55c>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	701a      	strb	r2, [r3, #0]




}
 8001d00:	3740      	adds	r7, #64	; 0x40
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bdb0      	pop	{r4, r5, r7, pc}
 8001d06:	bf00      	nop
 8001d08:	20000039 	.word	0x20000039
 8001d0c:	20000038 	.word	0x20000038
 8001d10:	20000249 	.word	0x20000249
 8001d14:	20000248 	.word	0x20000248
 8001d18:	20000240 	.word	0x20000240
 8001d1c:	2000022c 	.word	0x2000022c
 8001d20:	20000246 	.word	0x20000246

08001d24 <Reset_sensor_mode>:
void DrawGraphicRect(bool Draw);
//Configuration plot functions

//@TODO check error reset sensor mode
void Reset_sensor_mode(void)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	af00      	add	r7, sp, #0

	SSD1306_Clear();
 8001d28:	f005 f9a8 	bl	800707c <SSD1306_Clear>
	HAL_IWDG_Refresh(&hiwdg);
 8001d2c:	4821      	ldr	r0, [pc, #132]	; (8001db4 <Reset_sensor_mode+0x90>)
 8001d2e:	f003 fd01 	bl	8005734 <HAL_IWDG_Refresh>
	switch(Sensor)
 8001d32:	4b21      	ldr	r3, [pc, #132]	; (8001db8 <Reset_sensor_mode+0x94>)
 8001d34:	781b      	ldrb	r3, [r3, #0]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d001      	beq.n	8001d3e <Reset_sensor_mode+0x1a>
 8001d3a:	2b01      	cmp	r3, #1
		case _BH1750:
			if(BH1750_ReCalibrate(&BH1750) != Rojo_OK)
				Fatal_Error_BH1750();
		break;
		case _TSL2561:
		break;
 8001d3c:	e008      	b.n	8001d50 <Reset_sensor_mode+0x2c>
			if(BH1750_ReCalibrate(&BH1750) != Rojo_OK)
 8001d3e:	481f      	ldr	r0, [pc, #124]	; (8001dbc <Reset_sensor_mode+0x98>)
 8001d40:	f005 fb64 	bl	800740c <BH1750_ReCalibrate>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d001      	beq.n	8001d4e <Reset_sensor_mode+0x2a>
				Fatal_Error_BH1750();
 8001d4a:	f000 fa31 	bl	80021b0 <Fatal_Error_BH1750>
		break;
 8001d4e:	bf00      	nop
	}
	SSD1306_GotoXY(29, 5);
 8001d50:	2105      	movs	r1, #5
 8001d52:	201d      	movs	r0, #29
 8001d54:	f004 feb0 	bl	8006ab8 <SSD1306_GotoXY>
	SSD1306_Puts("The sensor", &Font_7x10, 1);
 8001d58:	2201      	movs	r2, #1
 8001d5a:	4919      	ldr	r1, [pc, #100]	; (8001dc0 <Reset_sensor_mode+0x9c>)
 8001d5c:	4819      	ldr	r0, [pc, #100]	; (8001dc4 <Reset_sensor_mode+0xa0>)
 8001d5e:	f004 ff41 	bl	8006be4 <SSD1306_Puts>
	SSD1306_GotoXY(8, 17);
 8001d62:	2111      	movs	r1, #17
 8001d64:	2008      	movs	r0, #8
 8001d66:	f004 fea7 	bl	8006ab8 <SSD1306_GotoXY>
	SSD1306_Puts("has been reseted", &Font_7x10, 1);
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	4914      	ldr	r1, [pc, #80]	; (8001dc0 <Reset_sensor_mode+0x9c>)
 8001d6e:	4816      	ldr	r0, [pc, #88]	; (8001dc8 <Reset_sensor_mode+0xa4>)
 8001d70:	f004 ff38 	bl	8006be4 <SSD1306_Puts>
	SSD1306_GotoXY(36, 29);
 8001d74:	211d      	movs	r1, #29
 8001d76:	2024      	movs	r0, #36	; 0x24
 8001d78:	f004 fe9e 	bl	8006ab8 <SSD1306_GotoXY>
	SSD1306_Puts("Press OK", &Font_7x10, 1);
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	4910      	ldr	r1, [pc, #64]	; (8001dc0 <Reset_sensor_mode+0x9c>)
 8001d80:	4812      	ldr	r0, [pc, #72]	; (8001dcc <Reset_sensor_mode+0xa8>)
 8001d82:	f004 ff2f 	bl	8006be4 <SSD1306_Puts>
	SSD1306_GotoXY(25, 41);
 8001d86:	2129      	movs	r1, #41	; 0x29
 8001d88:	2019      	movs	r0, #25
 8001d8a:	f004 fe95 	bl	8006ab8 <SSD1306_GotoXY>
	SSD1306_Puts("to continue", &Font_7x10, 1);
 8001d8e:	2201      	movs	r2, #1
 8001d90:	490b      	ldr	r1, [pc, #44]	; (8001dc0 <Reset_sensor_mode+0x9c>)
 8001d92:	480f      	ldr	r0, [pc, #60]	; (8001dd0 <Reset_sensor_mode+0xac>)
 8001d94:	f004 ff26 	bl	8006be4 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 8001d98:	f004 fdea 	bl	8006970 <SSD1306_UpdateScreen>
	wait_until_press(Ok);
 8001d9c:	200f      	movs	r0, #15
 8001d9e:	f000 faef 	bl	8002380 <wait_until_press>
	Configs.Mode = Configs.Last_Mode;
 8001da2:	4b0c      	ldr	r3, [pc, #48]	; (8001dd4 <Reset_sensor_mode+0xb0>)
 8001da4:	789a      	ldrb	r2, [r3, #2]
 8001da6:	4b0b      	ldr	r3, [pc, #44]	; (8001dd4 <Reset_sensor_mode+0xb0>)
 8001da8:	705a      	strb	r2, [r3, #1]
	Configs.Last_Mode = Reset_Sensor;
 8001daa:	4b0a      	ldr	r3, [pc, #40]	; (8001dd4 <Reset_sensor_mode+0xb0>)
 8001dac:	2205      	movs	r2, #5
 8001dae:	709a      	strb	r2, [r3, #2]
}
 8001db0:	bf00      	nop
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	20000218 	.word	0x20000218
 8001db8:	20000224 	.word	0x20000224
 8001dbc:	20000234 	.word	0x20000234
 8001dc0:	20000048 	.word	0x20000048
 8001dc4:	08007ee4 	.word	0x08007ee4
 8001dc8:	08007ef0 	.word	0x08007ef0
 8001dcc:	08007e5c 	.word	0x08007e5c
 8001dd0:	08007f04 	.word	0x08007f04
 8001dd4:	2000022c 	.word	0x2000022c

08001dd8 <MenuGUI>:
//@TODO All select diode sensor mode
void Select_diode_mode(void);


void MenuGUI(void)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b088      	sub	sp, #32
 8001ddc:	af04      	add	r7, sp, #16
	bool Not_Filled = true;
 8001dde:	2301      	movs	r3, #1
 8001de0:	73fb      	strb	r3, [r7, #15]
	int16_t Mode_Displayed = Continuous;
 8001de2:	2300      	movs	r3, #0
 8001de4:	807b      	strh	r3, [r7, #2]
	uint32_t Past_IDR_Read = 0xFF;
 8001de6:	23ff      	movs	r3, #255	; 0xff
 8001de8:	60bb      	str	r3, [r7, #8]
	const uint16_t animation_counts = 4;
 8001dea:	2304      	movs	r3, #4
 8001dec:	80bb      	strh	r3, [r7, #4]

	Timer_Delay_250ms(1);
 8001dee:	2001      	movs	r0, #1
 8001df0:	f000 faea 	bl	80023c8 <Timer_Delay_250ms>
	SSD1306_Clear();
 8001df4:	f005 f942 	bl	800707c <SSD1306_Clear>
	SSD1306_GotoXY(31, 5);
 8001df8:	2105      	movs	r1, #5
 8001dfa:	201f      	movs	r0, #31
 8001dfc:	f004 fe5c 	bl	8006ab8 <SSD1306_GotoXY>
	SSD1306_Puts("Mode", &Font_16x26, 1);
 8001e00:	2201      	movs	r2, #1
 8001e02:	49a3      	ldr	r1, [pc, #652]	; (8002090 <MenuGUI+0x2b8>)
 8001e04:	48a3      	ldr	r0, [pc, #652]	; (8002094 <MenuGUI+0x2bc>)
 8001e06:	f004 feed 	bl	8006be4 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 8001e0a:	f004 fdb1 	bl	8006970 <SSD1306_UpdateScreen>
	Mode_Displayed = Configs.Last_Mode;
 8001e0e:	4ba2      	ldr	r3, [pc, #648]	; (8002098 <MenuGUI+0x2c0>)
 8001e10:	789b      	ldrb	r3, [r3, #2]
 8001e12:	b21b      	sxth	r3, r3
 8001e14:	807b      	strh	r3, [r7, #2]
	HAL_IWDG_Refresh(&hiwdg);
 8001e16:	48a1      	ldr	r0, [pc, #644]	; (800209c <MenuGUI+0x2c4>)
 8001e18:	f003 fc8c 	bl	8005734 <HAL_IWDG_Refresh>
	do
	{
		HAL_IWDG_Refresh(&hiwdg);
 8001e1c:	489f      	ldr	r0, [pc, #636]	; (800209c <MenuGUI+0x2c4>)
 8001e1e:	f003 fc89 	bl	8005734 <HAL_IWDG_Refresh>
		IDR_Read = (GPIOA -> IDR & ReadMask);
 8001e22:	4b9f      	ldr	r3, [pc, #636]	; (80020a0 <MenuGUI+0x2c8>)
 8001e24:	689b      	ldr	r3, [r3, #8]
 8001e26:	f003 031f 	and.w	r3, r3, #31
 8001e2a:	4a9e      	ldr	r2, [pc, #632]	; (80020a4 <MenuGUI+0x2cc>)
 8001e2c:	6013      	str	r3, [r2, #0]
		//Displaying the selection
		if(Past_IDR_Read != IDR_Read)
 8001e2e:	4b9d      	ldr	r3, [pc, #628]	; (80020a4 <MenuGUI+0x2cc>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	68ba      	ldr	r2, [r7, #8]
 8001e34:	429a      	cmp	r2, r3
 8001e36:	f000 8114 	beq.w	8002062 <MenuGUI+0x28a>
		{
			switch(Mode_Displayed)
 8001e3a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001e3e:	2b06      	cmp	r3, #6
 8001e40:	f200 8084 	bhi.w	8001f4c <MenuGUI+0x174>
 8001e44:	a201      	add	r2, pc, #4	; (adr r2, 8001e4c <MenuGUI+0x74>)
 8001e46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e4a:	bf00      	nop
 8001e4c:	08001e69 	.word	0x08001e69
 8001e50:	08001e8f 	.word	0x08001e8f
 8001e54:	08001eb5 	.word	0x08001eb5
 8001e58:	08001edb 	.word	0x08001edb
 8001e5c:	08001f01 	.word	0x08001f01
 8001e60:	08001f27 	.word	0x08001f27
 8001e64:	08001f4d 	.word	0x08001f4d
			{
				case Continuous:
					SSD1306_GotoXY(3, 37);
 8001e68:	2125      	movs	r1, #37	; 0x25
 8001e6a:	2003      	movs	r0, #3
 8001e6c:	f004 fe24 	bl	8006ab8 <SSD1306_GotoXY>
					SSD1306_Puts("            ", &Font_11x18, 1);
 8001e70:	2201      	movs	r2, #1
 8001e72:	498d      	ldr	r1, [pc, #564]	; (80020a8 <MenuGUI+0x2d0>)
 8001e74:	488d      	ldr	r0, [pc, #564]	; (80020ac <MenuGUI+0x2d4>)
 8001e76:	f004 feb5 	bl	8006be4 <SSD1306_Puts>
					SSD1306_GotoXY(8, 37);
 8001e7a:	2125      	movs	r1, #37	; 0x25
 8001e7c:	2008      	movs	r0, #8
 8001e7e:	f004 fe1b 	bl	8006ab8 <SSD1306_GotoXY>
					SSD1306_Puts("Continuous", &Font_11x18, 1);
 8001e82:	2201      	movs	r2, #1
 8001e84:	4988      	ldr	r1, [pc, #544]	; (80020a8 <MenuGUI+0x2d0>)
 8001e86:	488a      	ldr	r0, [pc, #552]	; (80020b0 <MenuGUI+0x2d8>)
 8001e88:	f004 feac 	bl	8006be4 <SSD1306_Puts>
				break;
 8001e8c:	e05e      	b.n	8001f4c <MenuGUI+0x174>
				case Hold:
					SSD1306_GotoXY(3, 37);
 8001e8e:	2125      	movs	r1, #37	; 0x25
 8001e90:	2003      	movs	r0, #3
 8001e92:	f004 fe11 	bl	8006ab8 <SSD1306_GotoXY>
					SSD1306_Puts("             ", &Font_11x18, 1);
 8001e96:	2201      	movs	r2, #1
 8001e98:	4983      	ldr	r1, [pc, #524]	; (80020a8 <MenuGUI+0x2d0>)
 8001e9a:	4886      	ldr	r0, [pc, #536]	; (80020b4 <MenuGUI+0x2dc>)
 8001e9c:	f004 fea2 	bl	8006be4 <SSD1306_Puts>
					SSD1306_GotoXY(41, 37);
 8001ea0:	2125      	movs	r1, #37	; 0x25
 8001ea2:	2029      	movs	r0, #41	; 0x29
 8001ea4:	f004 fe08 	bl	8006ab8 <SSD1306_GotoXY>
					SSD1306_Puts("Hold", &Font_11x18, 1);
 8001ea8:	2201      	movs	r2, #1
 8001eaa:	497f      	ldr	r1, [pc, #508]	; (80020a8 <MenuGUI+0x2d0>)
 8001eac:	4882      	ldr	r0, [pc, #520]	; (80020b8 <MenuGUI+0x2e0>)
 8001eae:	f004 fe99 	bl	8006be4 <SSD1306_Puts>
				break;
 8001eb2:	e04b      	b.n	8001f4c <MenuGUI+0x174>
				case Plot:
					SSD1306_GotoXY(3, 37);
 8001eb4:	2125      	movs	r1, #37	; 0x25
 8001eb6:	2003      	movs	r0, #3
 8001eb8:	f004 fdfe 	bl	8006ab8 <SSD1306_GotoXY>
					SSD1306_Puts("             ", &Font_11x18, 1);
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	497a      	ldr	r1, [pc, #488]	; (80020a8 <MenuGUI+0x2d0>)
 8001ec0:	487c      	ldr	r0, [pc, #496]	; (80020b4 <MenuGUI+0x2dc>)
 8001ec2:	f004 fe8f 	bl	8006be4 <SSD1306_Puts>
					SSD1306_GotoXY(41, 37);
 8001ec6:	2125      	movs	r1, #37	; 0x25
 8001ec8:	2029      	movs	r0, #41	; 0x29
 8001eca:	f004 fdf5 	bl	8006ab8 <SSD1306_GotoXY>
					SSD1306_Puts("Plot", &Font_11x18, 1);
 8001ece:	2201      	movs	r2, #1
 8001ed0:	4975      	ldr	r1, [pc, #468]	; (80020a8 <MenuGUI+0x2d0>)
 8001ed2:	487a      	ldr	r0, [pc, #488]	; (80020bc <MenuGUI+0x2e4>)
 8001ed4:	f004 fe86 	bl	8006be4 <SSD1306_Puts>
				break;
 8001ed8:	e038      	b.n	8001f4c <MenuGUI+0x174>
				case Config_Plot:
					SSD1306_GotoXY(3, 37);
 8001eda:	2125      	movs	r1, #37	; 0x25
 8001edc:	2003      	movs	r0, #3
 8001ede:	f004 fdeb 	bl	8006ab8 <SSD1306_GotoXY>
					SSD1306_Puts("             ", &Font_11x18, 1);
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	4970      	ldr	r1, [pc, #448]	; (80020a8 <MenuGUI+0x2d0>)
 8001ee6:	4873      	ldr	r0, [pc, #460]	; (80020b4 <MenuGUI+0x2dc>)
 8001ee8:	f004 fe7c 	bl	8006be4 <SSD1306_Puts>
					SSD1306_GotoXY(3, 37);
 8001eec:	2125      	movs	r1, #37	; 0x25
 8001eee:	2003      	movs	r0, #3
 8001ef0:	f004 fde2 	bl	8006ab8 <SSD1306_GotoXY>
					SSD1306_Puts("Config Plot", &Font_11x18, 1);
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	496c      	ldr	r1, [pc, #432]	; (80020a8 <MenuGUI+0x2d0>)
 8001ef8:	4871      	ldr	r0, [pc, #452]	; (80020c0 <MenuGUI+0x2e8>)
 8001efa:	f004 fe73 	bl	8006be4 <SSD1306_Puts>
				break;
 8001efe:	e025      	b.n	8001f4c <MenuGUI+0x174>
				case Select_Sensor:
					SSD1306_GotoXY(3, 37);
 8001f00:	2125      	movs	r1, #37	; 0x25
 8001f02:	2003      	movs	r0, #3
 8001f04:	f004 fdd8 	bl	8006ab8 <SSD1306_GotoXY>
					SSD1306_Puts("             ", &Font_11x18, 1);
 8001f08:	2201      	movs	r2, #1
 8001f0a:	4967      	ldr	r1, [pc, #412]	; (80020a8 <MenuGUI+0x2d0>)
 8001f0c:	4869      	ldr	r0, [pc, #420]	; (80020b4 <MenuGUI+0x2dc>)
 8001f0e:	f004 fe69 	bl	8006be4 <SSD1306_Puts>
					SSD1306_GotoXY(9, 37);
 8001f12:	2125      	movs	r1, #37	; 0x25
 8001f14:	2009      	movs	r0, #9
 8001f16:	f004 fdcf 	bl	8006ab8 <SSD1306_GotoXY>
					SSD1306_Puts("Sel Sensor", &Font_11x18, 1);
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	4962      	ldr	r1, [pc, #392]	; (80020a8 <MenuGUI+0x2d0>)
 8001f1e:	4869      	ldr	r0, [pc, #420]	; (80020c4 <MenuGUI+0x2ec>)
 8001f20:	f004 fe60 	bl	8006be4 <SSD1306_Puts>
				break;
 8001f24:	e012      	b.n	8001f4c <MenuGUI+0x174>
				case Reset_Sensor:
					SSD1306_GotoXY(3, 37);
 8001f26:	2125      	movs	r1, #37	; 0x25
 8001f28:	2003      	movs	r0, #3
 8001f2a:	f004 fdc5 	bl	8006ab8 <SSD1306_GotoXY>
					SSD1306_Puts("             ", &Font_11x18, 1);
 8001f2e:	2201      	movs	r2, #1
 8001f30:	495d      	ldr	r1, [pc, #372]	; (80020a8 <MenuGUI+0x2d0>)
 8001f32:	4860      	ldr	r0, [pc, #384]	; (80020b4 <MenuGUI+0x2dc>)
 8001f34:	f004 fe56 	bl	8006be4 <SSD1306_Puts>
					SSD1306_GotoXY(3, 37);
 8001f38:	2125      	movs	r1, #37	; 0x25
 8001f3a:	2003      	movs	r0, #3
 8001f3c:	f004 fdbc 	bl	8006ab8 <SSD1306_GotoXY>
					SSD1306_Puts("Reset Sense", &Font_11x18, 1);
 8001f40:	2201      	movs	r2, #1
 8001f42:	4959      	ldr	r1, [pc, #356]	; (80020a8 <MenuGUI+0x2d0>)
 8001f44:	4860      	ldr	r0, [pc, #384]	; (80020c8 <MenuGUI+0x2f0>)
 8001f46:	f004 fe4d 	bl	8006be4 <SSD1306_Puts>
				break;
 8001f4a:	bf00      	nop
				case Idle:
				break;
			}
			SSD1306_UpdateScreen();
 8001f4c:	f004 fd10 	bl	8006970 <SSD1306_UpdateScreen>
			HAL_IWDG_Refresh(&hiwdg);
 8001f50:	4852      	ldr	r0, [pc, #328]	; (800209c <MenuGUI+0x2c4>)
 8001f52:	f003 fbef 	bl	8005734 <HAL_IWDG_Refresh>
			//Reading for the selection
			switch(IDR_Read)
 8001f56:	4b53      	ldr	r3, [pc, #332]	; (80020a4 <MenuGUI+0x2cc>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	2b1b      	cmp	r3, #27
 8001f5c:	d007      	beq.n	8001f6e <MenuGUI+0x196>
 8001f5e:	2b1b      	cmp	r3, #27
 8001f60:	f200 8086 	bhi.w	8002070 <MenuGUI+0x298>
 8001f64:	2b0f      	cmp	r3, #15
 8001f66:	d01e      	beq.n	8001fa6 <MenuGUI+0x1ce>
 8001f68:	2b17      	cmp	r3, #23
 8001f6a:	d00e      	beq.n	8001f8a <MenuGUI+0x1b2>
 8001f6c:	e080      	b.n	8002070 <MenuGUI+0x298>
			{
				case Right:
					Mode_Displayed++;
 8001f6e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001f72:	b29b      	uxth	r3, r3
 8001f74:	3301      	adds	r3, #1
 8001f76:	b29b      	uxth	r3, r3
 8001f78:	b21b      	sxth	r3, r3
 8001f7a:	807b      	strh	r3, [r7, #2]
					if(Mode_Displayed > Reset_Sensor)
 8001f7c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001f80:	2b05      	cmp	r3, #5
 8001f82:	dd72      	ble.n	800206a <MenuGUI+0x292>
						Mode_Displayed = Continuous;
 8001f84:	2300      	movs	r3, #0
 8001f86:	807b      	strh	r3, [r7, #2]
				break;
 8001f88:	e06f      	b.n	800206a <MenuGUI+0x292>
				case Left:
					Mode_Displayed--;
 8001f8a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001f8e:	b29b      	uxth	r3, r3
 8001f90:	3b01      	subs	r3, #1
 8001f92:	b29b      	uxth	r3, r3
 8001f94:	b21b      	sxth	r3, r3
 8001f96:	807b      	strh	r3, [r7, #2]
					if(Mode_Displayed < Continuous)
 8001f98:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	da66      	bge.n	800206e <MenuGUI+0x296>
						Mode_Displayed = Reset_Sensor;
 8001fa0:	2305      	movs	r3, #5
 8001fa2:	807b      	strh	r3, [r7, #2]
				break;
 8001fa4:	e063      	b.n	800206e <MenuGUI+0x296>
				case Ok:
					Configs.Mode = Mode_Displayed;
 8001fa6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001faa:	b2da      	uxtb	r2, r3
 8001fac:	4b3a      	ldr	r3, [pc, #232]	; (8002098 <MenuGUI+0x2c0>)
 8001fae:	705a      	strb	r2, [r3, #1]
					Not_Filled = false;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	73fb      	strb	r3, [r7, #15]
					HAL_I2C_Mem_Write(&hi2c1, EEPROM_ADDR, 0x1, 1, (uint8_t *) &Mode_Displayed, 1, 100);
 8001fb4:	2364      	movs	r3, #100	; 0x64
 8001fb6:	9302      	str	r3, [sp, #8]
 8001fb8:	2301      	movs	r3, #1
 8001fba:	9301      	str	r3, [sp, #4]
 8001fbc:	1cbb      	adds	r3, r7, #2
 8001fbe:	9300      	str	r3, [sp, #0]
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	21a0      	movs	r1, #160	; 0xa0
 8001fc6:	4841      	ldr	r0, [pc, #260]	; (80020cc <MenuGUI+0x2f4>)
 8001fc8:	f001 ff24 	bl	8003e14 <HAL_I2C_Mem_Write>
					HAL_IWDG_Refresh(&hiwdg);
 8001fcc:	4833      	ldr	r0, [pc, #204]	; (800209c <MenuGUI+0x2c4>)
 8001fce:	f003 fbb1 	bl	8005734 <HAL_IWDG_Refresh>
					for(uint16_t i = 0; i < animation_counts; i++)
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	80fb      	strh	r3, [r7, #6]
 8001fd6:	e03c      	b.n	8002052 <MenuGUI+0x27a>
					{
						switch(Mode_Displayed)
 8001fd8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001fdc:	2b06      	cmp	r3, #6
 8001fde:	d835      	bhi.n	800204c <MenuGUI+0x274>
 8001fe0:	a201      	add	r2, pc, #4	; (adr r2, 8001fe8 <MenuGUI+0x210>)
 8001fe2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fe6:	bf00      	nop
 8001fe8:	08002005 	.word	0x08002005
 8001fec:	08002011 	.word	0x08002011
 8001ff0:	0800201d 	.word	0x0800201d
 8001ff4:	08002029 	.word	0x08002029
 8001ff8:	08002035 	.word	0x08002035
 8001ffc:	08002041 	.word	0x08002041
 8002000:	0800204d 	.word	0x0800204d
						{
							case Continuous:
								Select_animation("Continuous ", 8, 37);
 8002004:	2225      	movs	r2, #37	; 0x25
 8002006:	2108      	movs	r1, #8
 8002008:	4831      	ldr	r0, [pc, #196]	; (80020d0 <MenuGUI+0x2f8>)
 800200a:	f000 f86b 	bl	80020e4 <Select_animation>
							break;
 800200e:	e01d      	b.n	800204c <MenuGUI+0x274>
							case Hold:
								Select_animation("Hold       ", 41, 37);
 8002010:	2225      	movs	r2, #37	; 0x25
 8002012:	2129      	movs	r1, #41	; 0x29
 8002014:	482f      	ldr	r0, [pc, #188]	; (80020d4 <MenuGUI+0x2fc>)
 8002016:	f000 f865 	bl	80020e4 <Select_animation>
							break;
 800201a:	e017      	b.n	800204c <MenuGUI+0x274>
							case Plot:
								Select_animation("Plot       ", 41, 37);
 800201c:	2225      	movs	r2, #37	; 0x25
 800201e:	2129      	movs	r1, #41	; 0x29
 8002020:	482d      	ldr	r0, [pc, #180]	; (80020d8 <MenuGUI+0x300>)
 8002022:	f000 f85f 	bl	80020e4 <Select_animation>
							break;
 8002026:	e011      	b.n	800204c <MenuGUI+0x274>
							case Config_Plot:
								Select_animation("Config Plot", 3, 37);
 8002028:	2225      	movs	r2, #37	; 0x25
 800202a:	2103      	movs	r1, #3
 800202c:	4824      	ldr	r0, [pc, #144]	; (80020c0 <MenuGUI+0x2e8>)
 800202e:	f000 f859 	bl	80020e4 <Select_animation>
							break;
 8002032:	e00b      	b.n	800204c <MenuGUI+0x274>
							case Select_Sensor:
								Select_animation("Sel Sensor ", 9, 37);
 8002034:	2225      	movs	r2, #37	; 0x25
 8002036:	2109      	movs	r1, #9
 8002038:	4828      	ldr	r0, [pc, #160]	; (80020dc <MenuGUI+0x304>)
 800203a:	f000 f853 	bl	80020e4 <Select_animation>
							break;
 800203e:	e005      	b.n	800204c <MenuGUI+0x274>
							case Reset_Sensor:
								Select_animation("Reset Sense", 3, 37);
 8002040:	2225      	movs	r2, #37	; 0x25
 8002042:	2103      	movs	r1, #3
 8002044:	4820      	ldr	r0, [pc, #128]	; (80020c8 <MenuGUI+0x2f0>)
 8002046:	f000 f84d 	bl	80020e4 <Select_animation>
							break;
 800204a:	bf00      	nop
					for(uint16_t i = 0; i < animation_counts; i++)
 800204c:	88fb      	ldrh	r3, [r7, #6]
 800204e:	3301      	adds	r3, #1
 8002050:	80fb      	strh	r3, [r7, #6]
 8002052:	88fa      	ldrh	r2, [r7, #6]
 8002054:	88bb      	ldrh	r3, [r7, #4]
 8002056:	429a      	cmp	r2, r3
 8002058:	d3be      	bcc.n	8001fd8 <MenuGUI+0x200>
							case Idle:
							break;
						}
					}
					Timer_Delay_250ms(1);
 800205a:	2001      	movs	r0, #1
 800205c:	f000 f9b4 	bl	80023c8 <Timer_Delay_250ms>
				break;
 8002060:	e006      	b.n	8002070 <MenuGUI+0x298>
			}
		}
		else
			HAL_IWDG_Refresh(&hiwdg);
 8002062:	480e      	ldr	r0, [pc, #56]	; (800209c <MenuGUI+0x2c4>)
 8002064:	f003 fb66 	bl	8005734 <HAL_IWDG_Refresh>
 8002068:	e002      	b.n	8002070 <MenuGUI+0x298>
				break;
 800206a:	bf00      	nop
 800206c:	e000      	b.n	8002070 <MenuGUI+0x298>
				break;
 800206e:	bf00      	nop
		Past_IDR_Read = IDR_Read;
 8002070:	4b0c      	ldr	r3, [pc, #48]	; (80020a4 <MenuGUI+0x2cc>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	60bb      	str	r3, [r7, #8]
	}while(Not_Filled && ISR == None);
 8002076:	7bfb      	ldrb	r3, [r7, #15]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d005      	beq.n	8002088 <MenuGUI+0x2b0>
 800207c:	4b18      	ldr	r3, [pc, #96]	; (80020e0 <MenuGUI+0x308>)
 800207e:	781b      	ldrb	r3, [r3, #0]
 8002080:	b2db      	uxtb	r3, r3
 8002082:	2b02      	cmp	r3, #2
 8002084:	f43f aeca 	beq.w	8001e1c <MenuGUI+0x44>
}
 8002088:	bf00      	nop
 800208a:	3710      	adds	r7, #16
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}
 8002090:	20000058 	.word	0x20000058
 8002094:	08007f10 	.word	0x08007f10
 8002098:	2000022c 	.word	0x2000022c
 800209c:	20000218 	.word	0x20000218
 80020a0:	40010800 	.word	0x40010800
 80020a4:	20000240 	.word	0x20000240
 80020a8:	20000050 	.word	0x20000050
 80020ac:	08007f18 	.word	0x08007f18
 80020b0:	08007e3c 	.word	0x08007e3c
 80020b4:	08007f28 	.word	0x08007f28
 80020b8:	08007e48 	.word	0x08007e48
 80020bc:	08007f38 	.word	0x08007f38
 80020c0:	08007f40 	.word	0x08007f40
 80020c4:	08007f4c 	.word	0x08007f4c
 80020c8:	08007f58 	.word	0x08007f58
 80020cc:	200000e0 	.word	0x200000e0
 80020d0:	08007f64 	.word	0x08007f64
 80020d4:	08007f70 	.word	0x08007f70
 80020d8:	08007f7c 	.word	0x08007f7c
 80020dc:	08007f88 	.word	0x08007f88
 80020e0:	20000225 	.word	0x20000225

080020e4 <Select_animation>:

//@TODO Code a fancy animation
void Select_animation(char String[], uint16_t x, uint16_t y)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b082      	sub	sp, #8
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
 80020ec:	460b      	mov	r3, r1
 80020ee:	807b      	strh	r3, [r7, #2]
 80020f0:	4613      	mov	r3, r2
 80020f2:	803b      	strh	r3, [r7, #0]
	static uint32_t i = 0;
	extern const uint16_t animation_counts;
	HAL_IWDG_Refresh(&hiwdg);
 80020f4:	4811      	ldr	r0, [pc, #68]	; (800213c <Select_animation+0x58>)
 80020f6:	f003 fb1d 	bl	8005734 <HAL_IWDG_Refresh>
	SSD1306_GotoXY(x, y);
 80020fa:	883a      	ldrh	r2, [r7, #0]
 80020fc:	887b      	ldrh	r3, [r7, #2]
 80020fe:	4611      	mov	r1, r2
 8002100:	4618      	mov	r0, r3
 8002102:	f004 fcd9 	bl	8006ab8 <SSD1306_GotoXY>
	SSD1306_Puts(String, &Font_11x18, 1);
 8002106:	2201      	movs	r2, #1
 8002108:	490d      	ldr	r1, [pc, #52]	; (8002140 <Select_animation+0x5c>)
 800210a:	6878      	ldr	r0, [r7, #4]
 800210c:	f004 fd6a 	bl	8006be4 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 8002110:	f004 fc2e 	bl	8006970 <SSD1306_UpdateScreen>
	//Timer_Delay_250ms(1);
	Timer_Delay_at_274PSC(30000, 1);
 8002114:	2101      	movs	r1, #1
 8002116:	f247 5030 	movw	r0, #30000	; 0x7530
 800211a:	f000 f965 	bl	80023e8 <Timer_Delay_at_274PSC>
	SSD1306_GotoXY(3, 37);
 800211e:	2125      	movs	r1, #37	; 0x25
 8002120:	2003      	movs	r0, #3
 8002122:	f004 fcc9 	bl	8006ab8 <SSD1306_GotoXY>
	SSD1306_Puts("            ", &Font_11x18, 1);
 8002126:	2201      	movs	r2, #1
 8002128:	4905      	ldr	r1, [pc, #20]	; (8002140 <Select_animation+0x5c>)
 800212a:	4806      	ldr	r0, [pc, #24]	; (8002144 <Select_animation+0x60>)
 800212c:	f004 fd5a 	bl	8006be4 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 8002130:	f004 fc1e 	bl	8006970 <SSD1306_UpdateScreen>
	if(i == animation_counts)
	{

	}

}
 8002134:	bf00      	nop
 8002136:	3708      	adds	r7, #8
 8002138:	46bd      	mov	sp, r7
 800213a:	bd80      	pop	{r7, pc}
 800213c:	20000218 	.word	0x20000218
 8002140:	20000050 	.word	0x20000050
 8002144:	08007f18 	.word	0x08007f18

08002148 <Fatal_Error_EEPROM>:

//Error handlers
void Fatal_Error_EEPROM(void)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	af00      	add	r7, sp, #0
	if(!Errors.EEPROM_Fatal)
 800214c:	4b13      	ldr	r3, [pc, #76]	; (800219c <Fatal_Error_EEPROM+0x54>)
 800214e:	781b      	ldrb	r3, [r3, #0]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d121      	bne.n	8002198 <Fatal_Error_EEPROM+0x50>
	{
		SSD1306_Clear();
 8002154:	f004 ff92 	bl	800707c <SSD1306_Clear>
		SSD1306_GotoXY(3, 18);
 8002158:	2112      	movs	r1, #18
 800215a:	2003      	movs	r0, #3
 800215c:	f004 fcac 	bl	8006ab8 <SSD1306_GotoXY>
		SSD1306_Puts("Fatal Error: EEPROM", &Font_7x10, 1);
 8002160:	2201      	movs	r2, #1
 8002162:	490f      	ldr	r1, [pc, #60]	; (80021a0 <Fatal_Error_EEPROM+0x58>)
 8002164:	480f      	ldr	r0, [pc, #60]	; (80021a4 <Fatal_Error_EEPROM+0x5c>)
 8002166:	f004 fd3d 	bl	8006be4 <SSD1306_Puts>
		SSD1306_GotoXY(6, 33);
 800216a:	2121      	movs	r1, #33	; 0x21
 800216c:	2006      	movs	r0, #6
 800216e:	f004 fca3 	bl	8006ab8 <SSD1306_GotoXY>
		SSD1306_Puts("Press OK to continue", &Font_7x10, 1);
 8002172:	2201      	movs	r2, #1
 8002174:	490a      	ldr	r1, [pc, #40]	; (80021a0 <Fatal_Error_EEPROM+0x58>)
 8002176:	480c      	ldr	r0, [pc, #48]	; (80021a8 <Fatal_Error_EEPROM+0x60>)
 8002178:	f004 fd34 	bl	8006be4 <SSD1306_Puts>
		SSD1306_UpdateScreen();
 800217c:	f004 fbf8 	bl	8006970 <SSD1306_UpdateScreen>
		HAL_IWDG_Refresh(&hiwdg);
 8002180:	480a      	ldr	r0, [pc, #40]	; (80021ac <Fatal_Error_EEPROM+0x64>)
 8002182:	f003 fad7 	bl	8005734 <HAL_IWDG_Refresh>
		wait_until_press(Ok);
 8002186:	200f      	movs	r0, #15
 8002188:	f000 f8fa 	bl	8002380 <wait_until_press>
		Errors.EEPROM_Fatal = true;
 800218c:	4b03      	ldr	r3, [pc, #12]	; (800219c <Fatal_Error_EEPROM+0x54>)
 800218e:	2201      	movs	r2, #1
 8002190:	701a      	strb	r2, [r3, #0]
		HAL_IWDG_Refresh(&hiwdg);
 8002192:	4806      	ldr	r0, [pc, #24]	; (80021ac <Fatal_Error_EEPROM+0x64>)
 8002194:	f003 face 	bl	8005734 <HAL_IWDG_Refresh>
	}
}
 8002198:	bf00      	nop
 800219a:	bd80      	pop	{r7, pc}
 800219c:	20000228 	.word	0x20000228
 80021a0:	20000048 	.word	0x20000048
 80021a4:	08007f94 	.word	0x08007f94
 80021a8:	08007fa8 	.word	0x08007fa8
 80021ac:	20000218 	.word	0x20000218

080021b0 <Fatal_Error_BH1750>:

void Fatal_Error_BH1750(void)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	af00      	add	r7, sp, #0
	if(!Errors.BH1750_Fatal)
 80021b4:	4b13      	ldr	r3, [pc, #76]	; (8002204 <Fatal_Error_BH1750+0x54>)
 80021b6:	785b      	ldrb	r3, [r3, #1]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d121      	bne.n	8002200 <Fatal_Error_BH1750+0x50>
	{
		SSD1306_Clear();
 80021bc:	f004 ff5e 	bl	800707c <SSD1306_Clear>
		SSD1306_GotoXY(3, 18);
 80021c0:	2112      	movs	r1, #18
 80021c2:	2003      	movs	r0, #3
 80021c4:	f004 fc78 	bl	8006ab8 <SSD1306_GotoXY>
		SSD1306_Puts("Fatal Error: BH1750", &Font_7x10, 1);
 80021c8:	2201      	movs	r2, #1
 80021ca:	490f      	ldr	r1, [pc, #60]	; (8002208 <Fatal_Error_BH1750+0x58>)
 80021cc:	480f      	ldr	r0, [pc, #60]	; (800220c <Fatal_Error_BH1750+0x5c>)
 80021ce:	f004 fd09 	bl	8006be4 <SSD1306_Puts>
		SSD1306_GotoXY(6, 33);
 80021d2:	2121      	movs	r1, #33	; 0x21
 80021d4:	2006      	movs	r0, #6
 80021d6:	f004 fc6f 	bl	8006ab8 <SSD1306_GotoXY>
		SSD1306_Puts("Press OK to continue", &Font_7x10, 1);
 80021da:	2201      	movs	r2, #1
 80021dc:	490a      	ldr	r1, [pc, #40]	; (8002208 <Fatal_Error_BH1750+0x58>)
 80021de:	480c      	ldr	r0, [pc, #48]	; (8002210 <Fatal_Error_BH1750+0x60>)
 80021e0:	f004 fd00 	bl	8006be4 <SSD1306_Puts>
		SSD1306_UpdateScreen();
 80021e4:	f004 fbc4 	bl	8006970 <SSD1306_UpdateScreen>
		HAL_IWDG_Refresh(&hiwdg);
 80021e8:	480a      	ldr	r0, [pc, #40]	; (8002214 <Fatal_Error_BH1750+0x64>)
 80021ea:	f003 faa3 	bl	8005734 <HAL_IWDG_Refresh>
		wait_until_press(Ok);
 80021ee:	200f      	movs	r0, #15
 80021f0:	f000 f8c6 	bl	8002380 <wait_until_press>
		Errors.BH1750_Fatal = true;
 80021f4:	4b03      	ldr	r3, [pc, #12]	; (8002204 <Fatal_Error_BH1750+0x54>)
 80021f6:	2201      	movs	r2, #1
 80021f8:	705a      	strb	r2, [r3, #1]
		HAL_IWDG_Refresh(&hiwdg);
 80021fa:	4806      	ldr	r0, [pc, #24]	; (8002214 <Fatal_Error_BH1750+0x64>)
 80021fc:	f003 fa9a 	bl	8005734 <HAL_IWDG_Refresh>
	}
}
 8002200:	bf00      	nop
 8002202:	bd80      	pop	{r7, pc}
 8002204:	20000228 	.word	0x20000228
 8002208:	20000048 	.word	0x20000048
 800220c:	08007fc0 	.word	0x08007fc0
 8002210:	08007fa8 	.word	0x08007fa8
 8002214:	20000218 	.word	0x20000218

08002218 <NoConnected_BH1750>:

//@TODO Bad prints, doesn't wait of the button ok
void NoConnected_BH1750(void)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	af00      	add	r7, sp, #0
	if(!Errors.BH1750_NoConn)
 800221c:	4b18      	ldr	r3, [pc, #96]	; (8002280 <NoConnected_BH1750+0x68>)
 800221e:	789b      	ldrb	r3, [r3, #2]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d12a      	bne.n	800227a <NoConnected_BH1750+0x62>
	{
		SSD1306_Clear();
 8002224:	f004 ff2a 	bl	800707c <SSD1306_Clear>
		SSD1306_GotoXY(3, 18);
 8002228:	2112      	movs	r1, #18
 800222a:	2003      	movs	r0, #3
 800222c:	f004 fc44 	bl	8006ab8 <SSD1306_GotoXY>
		SSD1306_Puts("BH1750", &Font_7x10, 1);
 8002230:	2201      	movs	r2, #1
 8002232:	4914      	ldr	r1, [pc, #80]	; (8002284 <NoConnected_BH1750+0x6c>)
 8002234:	4814      	ldr	r0, [pc, #80]	; (8002288 <NoConnected_BH1750+0x70>)
 8002236:	f004 fcd5 	bl	8006be4 <SSD1306_Puts>
		SSD1306_GotoXY(3, 18);
 800223a:	2112      	movs	r1, #18
 800223c:	2003      	movs	r0, #3
 800223e:	f004 fc3b 	bl	8006ab8 <SSD1306_GotoXY>
		SSD1306_Puts("No Connected", &Font_7x10, 1);
 8002242:	2201      	movs	r2, #1
 8002244:	490f      	ldr	r1, [pc, #60]	; (8002284 <NoConnected_BH1750+0x6c>)
 8002246:	4811      	ldr	r0, [pc, #68]	; (800228c <NoConnected_BH1750+0x74>)
 8002248:	f004 fccc 	bl	8006be4 <SSD1306_Puts>
		SSD1306_GotoXY(6, 33);
 800224c:	2121      	movs	r1, #33	; 0x21
 800224e:	2006      	movs	r0, #6
 8002250:	f004 fc32 	bl	8006ab8 <SSD1306_GotoXY>
		SSD1306_Puts("Press OK to continue", &Font_7x10, 1);
 8002254:	2201      	movs	r2, #1
 8002256:	490b      	ldr	r1, [pc, #44]	; (8002284 <NoConnected_BH1750+0x6c>)
 8002258:	480d      	ldr	r0, [pc, #52]	; (8002290 <NoConnected_BH1750+0x78>)
 800225a:	f004 fcc3 	bl	8006be4 <SSD1306_Puts>
		SSD1306_UpdateScreen();
 800225e:	f004 fb87 	bl	8006970 <SSD1306_UpdateScreen>
		//ISR = None;
		HAL_IWDG_Refresh(&hiwdg);
 8002262:	480c      	ldr	r0, [pc, #48]	; (8002294 <NoConnected_BH1750+0x7c>)
 8002264:	f003 fa66 	bl	8005734 <HAL_IWDG_Refresh>
		wait_until_press(Ok);
 8002268:	200f      	movs	r0, #15
 800226a:	f000 f889 	bl	8002380 <wait_until_press>
		Errors.BH1750_NoConn = true;
 800226e:	4b04      	ldr	r3, [pc, #16]	; (8002280 <NoConnected_BH1750+0x68>)
 8002270:	2201      	movs	r2, #1
 8002272:	709a      	strb	r2, [r3, #2]
		HAL_IWDG_Refresh(&hiwdg);
 8002274:	4807      	ldr	r0, [pc, #28]	; (8002294 <NoConnected_BH1750+0x7c>)
 8002276:	f003 fa5d 	bl	8005734 <HAL_IWDG_Refresh>
	}
}
 800227a:	bf00      	nop
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	20000228 	.word	0x20000228
 8002284:	20000048 	.word	0x20000048
 8002288:	08007fd4 	.word	0x08007fd4
 800228c:	08007fdc 	.word	0x08007fdc
 8002290:	08007fa8 	.word	0x08007fa8
 8002294:	20000218 	.word	0x20000218

08002298 <Print_Measure>:

//Auxiliar functions
//@TODO At Print_Measure print allways in the center, x left when big number
void Print_Measure(float Measure, uint16_t x, uint16_t y)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b088      	sub	sp, #32
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
 80022a0:	460b      	mov	r3, r1
 80022a2:	807b      	strh	r3, [r7, #2]
 80022a4:	4613      	mov	r3, r2
 80022a6:	803b      	strh	r3, [r7, #0]
	char Integer_part[5];
	char Fraccional_part[3];
	uint32_t Integer_measure;
	uint32_t Fraccional_measure;

	Integer_measure = (uint32_t) Measure;
 80022a8:	6878      	ldr	r0, [r7, #4]
 80022aa:	f7fe fd4f 	bl	8000d4c <__aeabi_f2uiz>
 80022ae:	4603      	mov	r3, r0
 80022b0:	61fb      	str	r3, [r7, #28]
	Integer_measure = (uint32_t) Measure;
 80022b2:	6878      	ldr	r0, [r7, #4]
 80022b4:	f7fe fd4a 	bl	8000d4c <__aeabi_f2uiz>
 80022b8:	4603      	mov	r3, r0
 80022ba:	61fb      	str	r3, [r7, #28]
	Fraccional_measure = (uint32_t) ((Measure - Integer_measure) * 100);
 80022bc:	69f8      	ldr	r0, [r7, #28]
 80022be:	f7fe fced 	bl	8000c9c <__aeabi_ui2f>
 80022c2:	4603      	mov	r3, r0
 80022c4:	4619      	mov	r1, r3
 80022c6:	6878      	ldr	r0, [r7, #4]
 80022c8:	f7fe fc36 	bl	8000b38 <__aeabi_fsub>
 80022cc:	4603      	mov	r3, r0
 80022ce:	4926      	ldr	r1, [pc, #152]	; (8002368 <Print_Measure+0xd0>)
 80022d0:	4618      	mov	r0, r3
 80022d2:	f7fd ff3b 	bl	800014c <__aeabi_fmul>
 80022d6:	4603      	mov	r3, r0
 80022d8:	4618      	mov	r0, r3
 80022da:	f7fe fd37 	bl	8000d4c <__aeabi_f2uiz>
 80022de:	4603      	mov	r3, r0
 80022e0:	61bb      	str	r3, [r7, #24]
	sprintf(Integer_part, "%d", (int)Integer_measure);
 80022e2:	69fa      	ldr	r2, [r7, #28]
 80022e4:	f107 0310 	add.w	r3, r7, #16
 80022e8:	4920      	ldr	r1, [pc, #128]	; (800236c <Print_Measure+0xd4>)
 80022ea:	4618      	mov	r0, r3
 80022ec:	f005 f9fe 	bl	80076ec <siprintf>
	sprintf(Fraccional_part, "%d", (int)Fraccional_measure);
 80022f0:	69ba      	ldr	r2, [r7, #24]
 80022f2:	f107 030c 	add.w	r3, r7, #12
 80022f6:	491d      	ldr	r1, [pc, #116]	; (800236c <Print_Measure+0xd4>)
 80022f8:	4618      	mov	r0, r3
 80022fa:	f005 f9f7 	bl	80076ec <siprintf>
	HAL_IWDG_Refresh(&hiwdg);
 80022fe:	481c      	ldr	r0, [pc, #112]	; (8002370 <Print_Measure+0xd8>)
 8002300:	f003 fa18 	bl	8005734 <HAL_IWDG_Refresh>

	SSD1306_GotoXY(x, y);
 8002304:	883a      	ldrh	r2, [r7, #0]
 8002306:	887b      	ldrh	r3, [r7, #2]
 8002308:	4611      	mov	r1, r2
 800230a:	4618      	mov	r0, r3
 800230c:	f004 fbd4 	bl	8006ab8 <SSD1306_GotoXY>
	SSD1306_Puts("         ", &Font_11x18, 1);
 8002310:	2201      	movs	r2, #1
 8002312:	4918      	ldr	r1, [pc, #96]	; (8002374 <Print_Measure+0xdc>)
 8002314:	4818      	ldr	r0, [pc, #96]	; (8002378 <Print_Measure+0xe0>)
 8002316:	f004 fc65 	bl	8006be4 <SSD1306_Puts>
	SSD1306_GotoXY(x, y);
 800231a:	883a      	ldrh	r2, [r7, #0]
 800231c:	887b      	ldrh	r3, [r7, #2]
 800231e:	4611      	mov	r1, r2
 8002320:	4618      	mov	r0, r3
 8002322:	f004 fbc9 	bl	8006ab8 <SSD1306_GotoXY>
	SSD1306_Puts(Integer_part, &Font_11x18, 1);
 8002326:	f107 0310 	add.w	r3, r7, #16
 800232a:	2201      	movs	r2, #1
 800232c:	4911      	ldr	r1, [pc, #68]	; (8002374 <Print_Measure+0xdc>)
 800232e:	4618      	mov	r0, r3
 8002330:	f004 fc58 	bl	8006be4 <SSD1306_Puts>
	SSD1306_Putc('.', &Font_11x18, 1);
 8002334:	2201      	movs	r2, #1
 8002336:	490f      	ldr	r1, [pc, #60]	; (8002374 <Print_Measure+0xdc>)
 8002338:	202e      	movs	r0, #46	; 0x2e
 800233a:	f004 fbd3 	bl	8006ae4 <SSD1306_Putc>
	SSD1306_Puts(Fraccional_part, &Font_11x18, 1);
 800233e:	f107 030c 	add.w	r3, r7, #12
 8002342:	2201      	movs	r2, #1
 8002344:	490b      	ldr	r1, [pc, #44]	; (8002374 <Print_Measure+0xdc>)
 8002346:	4618      	mov	r0, r3
 8002348:	f004 fc4c 	bl	8006be4 <SSD1306_Puts>
	SSD1306_Puts("lx", &Font_11x18, 1);
 800234c:	2201      	movs	r2, #1
 800234e:	4909      	ldr	r1, [pc, #36]	; (8002374 <Print_Measure+0xdc>)
 8002350:	480a      	ldr	r0, [pc, #40]	; (800237c <Print_Measure+0xe4>)
 8002352:	f004 fc47 	bl	8006be4 <SSD1306_Puts>
	HAL_IWDG_Refresh(&hiwdg);
 8002356:	4806      	ldr	r0, [pc, #24]	; (8002370 <Print_Measure+0xd8>)
 8002358:	f003 f9ec 	bl	8005734 <HAL_IWDG_Refresh>
	SSD1306_UpdateScreen();
 800235c:	f004 fb08 	bl	8006970 <SSD1306_UpdateScreen>
}
 8002360:	bf00      	nop
 8002362:	3720      	adds	r7, #32
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}
 8002368:	42c80000 	.word	0x42c80000
 800236c:	08007e58 	.word	0x08007e58
 8002370:	20000218 	.word	0x20000218
 8002374:	20000050 	.word	0x20000050
 8002378:	08007fec 	.word	0x08007fec
 800237c:	08007e54 	.word	0x08007e54

08002380 <wait_until_press>:

void wait_until_press(Buttons Button)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b082      	sub	sp, #8
 8002384:	af00      	add	r7, sp, #0
 8002386:	4603      	mov	r3, r0
 8002388:	71fb      	strb	r3, [r7, #7]
	do{
		IDR_Read = (GPIOA -> IDR & ReadMask);
 800238a:	4b0b      	ldr	r3, [pc, #44]	; (80023b8 <wait_until_press+0x38>)
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	f003 031f 	and.w	r3, r3, #31
 8002392:	4a0a      	ldr	r2, [pc, #40]	; (80023bc <wait_until_press+0x3c>)
 8002394:	6013      	str	r3, [r2, #0]
		HAL_IWDG_Refresh(&hiwdg);
 8002396:	480a      	ldr	r0, [pc, #40]	; (80023c0 <wait_until_press+0x40>)
 8002398:	f003 f9cc 	bl	8005734 <HAL_IWDG_Refresh>
	}while(IDR_Read != Button && ISR == None);
 800239c:	79fa      	ldrb	r2, [r7, #7]
 800239e:	4b07      	ldr	r3, [pc, #28]	; (80023bc <wait_until_press+0x3c>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	429a      	cmp	r2, r3
 80023a4:	d004      	beq.n	80023b0 <wait_until_press+0x30>
 80023a6:	4b07      	ldr	r3, [pc, #28]	; (80023c4 <wait_until_press+0x44>)
 80023a8:	781b      	ldrb	r3, [r3, #0]
 80023aa:	b2db      	uxtb	r3, r3
 80023ac:	2b02      	cmp	r3, #2
 80023ae:	d0ec      	beq.n	800238a <wait_until_press+0xa>
}
 80023b0:	bf00      	nop
 80023b2:	3708      	adds	r7, #8
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}
 80023b8:	40010800 	.word	0x40010800
 80023bc:	20000240 	.word	0x20000240
 80023c0:	20000218 	.word	0x20000218
 80023c4:	20000225 	.word	0x20000225

080023c8 <Timer_Delay_250ms>:
			HAL_IWDG_Refresh(&hiwdg);
	}
}

void Timer_Delay_250ms(uint16_t Value)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b082      	sub	sp, #8
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	4603      	mov	r3, r0
 80023d0:	80fb      	strh	r3, [r7, #6]
	Timer_Delay_at_274PSC(EndOfCounts250ms, Value);
 80023d2:	88fb      	ldrh	r3, [r7, #6]
 80023d4:	4619      	mov	r1, r3
 80023d6:	f64f 70ae 	movw	r0, #65454	; 0xffae
 80023da:	f000 f805 	bl	80023e8 <Timer_Delay_at_274PSC>
}
 80023de:	bf00      	nop
 80023e0:	3708      	adds	r7, #8
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}
	...

080023e8 <Timer_Delay_at_274PSC>:

void Timer_Delay_at_274PSC(uint16_t Counts, uint16_t Overflows) //Period of 0.000003806
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b084      	sub	sp, #16
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	4603      	mov	r3, r0
 80023f0:	460a      	mov	r2, r1
 80023f2:	80fb      	strh	r3, [r7, #6]
 80023f4:	4613      	mov	r3, r2
 80023f6:	80bb      	strh	r3, [r7, #4]
	if(Overflows == 0)
 80023f8:	88bb      	ldrh	r3, [r7, #4]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d102      	bne.n	8002404 <Timer_Delay_at_274PSC+0x1c>
		Overflows++;
 80023fe:	88bb      	ldrh	r3, [r7, #4]
 8002400:	3301      	adds	r3, #1
 8002402:	80bb      	strh	r3, [r7, #4]
	bool Time_not_reached = true;
 8002404:	2301      	movs	r3, #1
 8002406:	73fb      	strb	r3, [r7, #15]
	uint32_t i = 0;
 8002408:	2300      	movs	r3, #0
 800240a:	60bb      	str	r3, [r7, #8]
	__HAL_TIM_SET_COUNTER(&htim4, 0);
 800240c:	4b10      	ldr	r3, [pc, #64]	; (8002450 <Timer_Delay_at_274PSC+0x68>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	2200      	movs	r2, #0
 8002412:	625a      	str	r2, [r3, #36]	; 0x24
	do{
		HAL_IWDG_Refresh(&hiwdg);
 8002414:	480f      	ldr	r0, [pc, #60]	; (8002454 <Timer_Delay_at_274PSC+0x6c>)
 8002416:	f003 f98d 	bl	8005734 <HAL_IWDG_Refresh>
		if(__HAL_TIM_GET_COUNTER(&htim4) == Counts)
 800241a:	4b0d      	ldr	r3, [pc, #52]	; (8002450 <Timer_Delay_at_274PSC+0x68>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002420:	88fb      	ldrh	r3, [r7, #6]
 8002422:	429a      	cmp	r2, r3
 8002424:	d106      	bne.n	8002434 <Timer_Delay_at_274PSC+0x4c>
		{
			__HAL_TIM_SET_COUNTER(&htim4, 0);
 8002426:	4b0a      	ldr	r3, [pc, #40]	; (8002450 <Timer_Delay_at_274PSC+0x68>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	2200      	movs	r2, #0
 800242c:	625a      	str	r2, [r3, #36]	; 0x24
			i++;
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	3301      	adds	r3, #1
 8002432:	60bb      	str	r3, [r7, #8]
		}
		if(i == Overflows)
 8002434:	88bb      	ldrh	r3, [r7, #4]
 8002436:	68ba      	ldr	r2, [r7, #8]
 8002438:	429a      	cmp	r2, r3
 800243a:	d101      	bne.n	8002440 <Timer_Delay_at_274PSC+0x58>
			Time_not_reached = false;
 800243c:	2300      	movs	r3, #0
 800243e:	73fb      	strb	r3, [r7, #15]
	}while(Time_not_reached);
 8002440:	7bfb      	ldrb	r3, [r7, #15]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d1e6      	bne.n	8002414 <Timer_Delay_at_274PSC+0x2c>
}
 8002446:	bf00      	nop
 8002448:	bf00      	nop
 800244a:	3710      	adds	r7, #16
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}
 8002450:	200001d0 	.word	0x200001d0
 8002454:	20000218 	.word	0x20000218

08002458 <MCU_Reset_Subrutine>:

void MCU_Reset_Subrutine(void)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	af00      	add	r7, sp, #0
	SSD1306_Clear();
 800245c:	f004 fe0e 	bl	800707c <SSD1306_Clear>
	SSD1306_GotoXY(23, 17);
 8002460:	2111      	movs	r1, #17
 8002462:	2017      	movs	r0, #23
 8002464:	f004 fb28 	bl	8006ab8 <SSD1306_GotoXY>
	SSD1306_Puts("Reset", &Font_16x26, 1);
 8002468:	2201      	movs	r2, #1
 800246a:	4905      	ldr	r1, [pc, #20]	; (8002480 <MCU_Reset_Subrutine+0x28>)
 800246c:	4805      	ldr	r0, [pc, #20]	; (8002484 <MCU_Reset_Subrutine+0x2c>)
 800246e:	f004 fbb9 	bl	8006be4 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 8002472:	f004 fa7d 	bl	8006970 <SSD1306_UpdateScreen>
	Timer_Delay_250ms(Seconds(1.5f));
 8002476:	2006      	movs	r0, #6
 8002478:	f7ff ffa6 	bl	80023c8 <Timer_Delay_250ms>
	NVIC_SystemReset(); //Reset de MCU
 800247c:	f7fe fc86 	bl	8000d8c <__NVIC_SystemReset>
 8002480:	20000058 	.word	0x20000058
 8002484:	08007ff8 	.word	0x08007ff8

08002488 <SensorRead>:
}

void SensorRead(void)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	af00      	add	r7, sp, #0
	switch(Sensor)
 800248c:	4b08      	ldr	r3, [pc, #32]	; (80024b0 <SensorRead+0x28>)
 800248e:	781b      	ldrb	r3, [r3, #0]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d001      	beq.n	8002498 <SensorRead+0x10>
 8002494:	2b01      	cmp	r3, #1
		case _BH1750:
			if(BH1750_Read(&BH1750, &Measure) != Rojo_OK) //Saving the value into a global
				NoConnected_BH1750();
		break;
		case _TSL2561:
		break;
 8002496:	e009      	b.n	80024ac <SensorRead+0x24>
			if(BH1750_Read(&BH1750, &Measure) != Rojo_OK) //Saving the value into a global
 8002498:	4906      	ldr	r1, [pc, #24]	; (80024b4 <SensorRead+0x2c>)
 800249a:	4807      	ldr	r0, [pc, #28]	; (80024b8 <SensorRead+0x30>)
 800249c:	f004 ff6e 	bl	800737c <BH1750_Read>
 80024a0:	4603      	mov	r3, r0
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d001      	beq.n	80024aa <SensorRead+0x22>
				NoConnected_BH1750();
 80024a6:	f7ff feb7 	bl	8002218 <NoConnected_BH1750>
		break;
 80024aa:	bf00      	nop
	}
}
 80024ac:	bf00      	nop
 80024ae:	bd80      	pop	{r7, pc}
 80024b0:	20000224 	.word	0x20000224
 80024b4:	20000230 	.word	0x20000230
 80024b8:	20000234 	.word	0x20000234

080024bc <CenterXPrint>:

uint16_t CenterXPrint(char *string, uint16_t InitialCoordinate, uint16_t LastCoordinate, FontDef_t Font)
{
 80024bc:	b082      	sub	sp, #8
 80024be:	b580      	push	{r7, lr}
 80024c0:	b084      	sub	sp, #16
 80024c2:	af00      	add	r7, sp, #0
 80024c4:	6078      	str	r0, [r7, #4]
 80024c6:	61fb      	str	r3, [r7, #28]
 80024c8:	460b      	mov	r3, r1
 80024ca:	807b      	strh	r3, [r7, #2]
 80024cc:	4613      	mov	r3, r2
 80024ce:	803b      	strh	r3, [r7, #0]
	uint16_t Chars = NumberOfCharsUsed(string, 0);
 80024d0:	2100      	movs	r1, #0
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	f000 f83c 	bl	8002550 <NumberOfCharsUsed>
 80024d8:	4603      	mov	r3, r0
 80024da:	81fb      	strh	r3, [r7, #14]

	Chars *= Font.FontWidth;
 80024dc:	7f3b      	ldrb	r3, [r7, #28]
 80024de:	b29b      	uxth	r3, r3
 80024e0:	89fa      	ldrh	r2, [r7, #14]
 80024e2:	fb02 f303 	mul.w	r3, r2, r3
 80024e6:	81fb      	strh	r3, [r7, #14]

	return (((LastCoordinate - Chars) + InitialCoordinate) / 2);
 80024e8:	883a      	ldrh	r2, [r7, #0]
 80024ea:	89fb      	ldrh	r3, [r7, #14]
 80024ec:	1ad2      	subs	r2, r2, r3
 80024ee:	887b      	ldrh	r3, [r7, #2]
 80024f0:	4413      	add	r3, r2
 80024f2:	0fda      	lsrs	r2, r3, #31
 80024f4:	4413      	add	r3, r2
 80024f6:	105b      	asrs	r3, r3, #1
 80024f8:	b29b      	uxth	r3, r3
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	3710      	adds	r7, #16
 80024fe:	46bd      	mov	sp, r7
 8002500:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002504:	b002      	add	sp, #8
 8002506:	4770      	bx	lr

08002508 <CharsNumberFromInt>:

uint16_t CharsNumberFromInt(uint32_t Number, uint16_t CountStringFinisher)
{
 8002508:	b480      	push	{r7}
 800250a:	b085      	sub	sp, #20
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
 8002510:	460b      	mov	r3, r1
 8002512:	807b      	strh	r3, [r7, #2]
    uint16_t NumberOfChars = 0;
 8002514:	2300      	movs	r3, #0
 8002516:	81fb      	strh	r3, [r7, #14]

    while (Number > 0)
 8002518:	e008      	b.n	800252c <CharsNumberFromInt+0x24>
    {
        Number /= 10;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	4a0b      	ldr	r2, [pc, #44]	; (800254c <CharsNumberFromInt+0x44>)
 800251e:	fba2 2303 	umull	r2, r3, r2, r3
 8002522:	08db      	lsrs	r3, r3, #3
 8002524:	607b      	str	r3, [r7, #4]
        NumberOfChars++;
 8002526:	89fb      	ldrh	r3, [r7, #14]
 8002528:	3301      	adds	r3, #1
 800252a:	81fb      	strh	r3, [r7, #14]
    while (Number > 0)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d1f3      	bne.n	800251a <CharsNumberFromInt+0x12>
    }
    if(CountStringFinisher)
 8002532:	887b      	ldrh	r3, [r7, #2]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d002      	beq.n	800253e <CharsNumberFromInt+0x36>
        NumberOfChars++;
 8002538:	89fb      	ldrh	r3, [r7, #14]
 800253a:	3301      	adds	r3, #1
 800253c:	81fb      	strh	r3, [r7, #14]
    return NumberOfChars;
 800253e:	89fb      	ldrh	r3, [r7, #14]
}
 8002540:	4618      	mov	r0, r3
 8002542:	3714      	adds	r7, #20
 8002544:	46bd      	mov	sp, r7
 8002546:	bc80      	pop	{r7}
 8002548:	4770      	bx	lr
 800254a:	bf00      	nop
 800254c:	cccccccd 	.word	0xcccccccd

08002550 <NumberOfCharsUsed>:
	*NumberOfIntegers = Integers;
	*NumberOfDecimals = Decimals;
}

uint16_t NumberOfCharsUsed(char *String, uint16_t CountStringFinisher)
{
 8002550:	b480      	push	{r7}
 8002552:	b085      	sub	sp, #20
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
 8002558:	460b      	mov	r3, r1
 800255a:	807b      	strh	r3, [r7, #2]
    uint16_t NumChars = 0;
 800255c:	2300      	movs	r3, #0
 800255e:	81fb      	strh	r3, [r7, #14]
    while(*String != 0)
 8002560:	e005      	b.n	800256e <NumberOfCharsUsed+0x1e>
    {
        NumChars++;
 8002562:	89fb      	ldrh	r3, [r7, #14]
 8002564:	3301      	adds	r3, #1
 8002566:	81fb      	strh	r3, [r7, #14]
        String++;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	3301      	adds	r3, #1
 800256c:	607b      	str	r3, [r7, #4]
    while(*String != 0)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	781b      	ldrb	r3, [r3, #0]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d1f5      	bne.n	8002562 <NumberOfCharsUsed+0x12>
    }
    if(CountStringFinisher)
 8002576:	887b      	ldrh	r3, [r7, #2]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d002      	beq.n	8002582 <NumberOfCharsUsed+0x32>
        NumChars++;
 800257c:	89fb      	ldrh	r3, [r7, #14]
 800257e:	3301      	adds	r3, #1
 8002580:	81fb      	strh	r3, [r7, #14]
    return NumChars;
 8002582:	89fb      	ldrh	r3, [r7, #14]
}
 8002584:	4618      	mov	r0, r3
 8002586:	3714      	adds	r7, #20
 8002588:	46bd      	mov	sp, r7
 800258a:	bc80      	pop	{r7}
 800258c:	4770      	bx	lr
	...

08002590 <Configs_init>:


//Configurations
void Configs_init(void)
{
 8002590:	b480      	push	{r7}
 8002592:	af00      	add	r7, sp, #0
	Configs.Factory_Values = 0;
 8002594:	4b07      	ldr	r3, [pc, #28]	; (80025b4 <Configs_init+0x24>)
 8002596:	2200      	movs	r2, #0
 8002598:	701a      	strb	r2, [r3, #0]
	Configs.Last_Mode = Idle;
 800259a:	4b06      	ldr	r3, [pc, #24]	; (80025b4 <Configs_init+0x24>)
 800259c:	2206      	movs	r2, #6
 800259e:	709a      	strb	r2, [r3, #2]
	Configs.Mode = Continuous;
 80025a0:	4b04      	ldr	r3, [pc, #16]	; (80025b4 <Configs_init+0x24>)
 80025a2:	2200      	movs	r2, #0
 80025a4:	705a      	strb	r2, [r3, #1]
	Configs.Resolution = Medium_Res;
 80025a6:	4b03      	ldr	r3, [pc, #12]	; (80025b4 <Configs_init+0x24>)
 80025a8:	2201      	movs	r2, #1
 80025aa:	70da      	strb	r2, [r3, #3]
}
 80025ac:	bf00      	nop
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bc80      	pop	{r7}
 80025b2:	4770      	bx	lr
 80025b4:	2000022c 	.word	0x2000022c

080025b8 <Flash_configs>:

//@TODO Flash configurations
void Flash_configs(void)
{
 80025b8:	b480      	push	{r7}
 80025ba:	af00      	add	r7, sp, #0

}
 80025bc:	bf00      	nop
 80025be:	46bd      	mov	sp, r7
 80025c0:	bc80      	pop	{r7}
 80025c2:	4770      	bx	lr

080025c4 <HAL_GPIO_EXTI_Callback>:

//ISR Handlers
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b083      	sub	sp, #12
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	4603      	mov	r3, r0
 80025cc:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_0)
 80025ce:	88fb      	ldrh	r3, [r7, #6]
 80025d0:	2b01      	cmp	r3, #1
 80025d2:	d107      	bne.n	80025e4 <HAL_GPIO_EXTI_Callback+0x20>
	{
		if(ISR == None)
 80025d4:	4b09      	ldr	r3, [pc, #36]	; (80025fc <HAL_GPIO_EXTI_Callback+0x38>)
 80025d6:	781b      	ldrb	r3, [r3, #0]
 80025d8:	b2db      	uxtb	r3, r3
 80025da:	2b02      	cmp	r3, #2
 80025dc:	d102      	bne.n	80025e4 <HAL_GPIO_EXTI_Callback+0x20>
			ISR = Menu;
 80025de:	4b07      	ldr	r3, [pc, #28]	; (80025fc <HAL_GPIO_EXTI_Callback+0x38>)
 80025e0:	2201      	movs	r2, #1
 80025e2:	701a      	strb	r2, [r3, #0]
	}
	if(GPIO_Pin == GPIO_PIN_1)
 80025e4:	88fb      	ldrh	r3, [r7, #6]
 80025e6:	2b02      	cmp	r3, #2
 80025e8:	d102      	bne.n	80025f0 <HAL_GPIO_EXTI_Callback+0x2c>
		ISR = MCU_Reset;
 80025ea:	4b04      	ldr	r3, [pc, #16]	; (80025fc <HAL_GPIO_EXTI_Callback+0x38>)
 80025ec:	2200      	movs	r2, #0
 80025ee:	701a      	strb	r2, [r3, #0]
}
 80025f0:	bf00      	nop
 80025f2:	370c      	adds	r7, #12
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bc80      	pop	{r7}
 80025f8:	4770      	bx	lr
 80025fa:	bf00      	nop
 80025fc:	20000225 	.word	0x20000225

08002600 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002600:	b480      	push	{r7}
 8002602:	b083      	sub	sp, #12
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
#ifdef USER_DEBUG
	//Breaks the while in the main function
	PauseFlag = false;
 8002608:	4b03      	ldr	r3, [pc, #12]	; (8002618 <HAL_TIM_PeriodElapsedCallback+0x18>)
 800260a:	2200      	movs	r2, #0
 800260c:	701a      	strb	r2, [r3, #0]
#endif
}
 800260e:	bf00      	nop
 8002610:	370c      	adds	r7, #12
 8002612:	46bd      	mov	sp, r7
 8002614:	bc80      	pop	{r7}
 8002616:	4770      	bx	lr
 8002618:	20000024 	.word	0x20000024

0800261c <HAL_I2C_ErrorCallback>:

void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800261c:	b480      	push	{r7}
 800261e:	b083      	sub	sp, #12
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002624:	bf00      	nop
 8002626:	370c      	adds	r7, #12
 8002628:	46bd      	mov	sp, r7
 800262a:	bc80      	pop	{r7}
 800262c:	4770      	bx	lr

0800262e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800262e:	b580      	push	{r7, lr}
 8002630:	b090      	sub	sp, #64	; 0x40
 8002632:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002634:	f107 0318 	add.w	r3, r7, #24
 8002638:	2228      	movs	r2, #40	; 0x28
 800263a:	2100      	movs	r1, #0
 800263c:	4618      	mov	r0, r3
 800263e:	f004 ff4d 	bl	80074dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002642:	1d3b      	adds	r3, r7, #4
 8002644:	2200      	movs	r2, #0
 8002646:	601a      	str	r2, [r3, #0]
 8002648:	605a      	str	r2, [r3, #4]
 800264a:	609a      	str	r2, [r3, #8]
 800264c:	60da      	str	r2, [r3, #12]
 800264e:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8002650:	2309      	movs	r3, #9
 8002652:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002654:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002658:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800265a:	2300      	movs	r3, #0
 800265c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800265e:	2301      	movs	r3, #1
 8002660:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002662:	2301      	movs	r3, #1
 8002664:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002666:	2302      	movs	r3, #2
 8002668:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800266a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800266e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002670:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002674:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002676:	f107 0318 	add.w	r3, r7, #24
 800267a:	4618      	mov	r0, r3
 800267c:	f003 f86a 	bl	8005754 <HAL_RCC_OscConfig>
 8002680:	4603      	mov	r3, r0
 8002682:	2b00      	cmp	r3, #0
 8002684:	d001      	beq.n	800268a <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8002686:	f000 f9b1 	bl	80029ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800268a:	230f      	movs	r3, #15
 800268c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800268e:	2302      	movs	r3, #2
 8002690:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002692:	2300      	movs	r3, #0
 8002694:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002696:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800269a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800269c:	2300      	movs	r3, #0
 800269e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80026a0:	1d3b      	adds	r3, r7, #4
 80026a2:	2102      	movs	r1, #2
 80026a4:	4618      	mov	r0, r3
 80026a6:	f003 fad7 	bl	8005c58 <HAL_RCC_ClockConfig>
 80026aa:	4603      	mov	r3, r0
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d001      	beq.n	80026b4 <SystemClock_Config+0x86>
  {
    Error_Handler();
 80026b0:	f000 f99c 	bl	80029ec <Error_Handler>
  }
}
 80026b4:	bf00      	nop
 80026b6:	3740      	adds	r7, #64	; 0x40
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}

080026bc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80026c0:	4b12      	ldr	r3, [pc, #72]	; (800270c <MX_I2C1_Init+0x50>)
 80026c2:	4a13      	ldr	r2, [pc, #76]	; (8002710 <MX_I2C1_Init+0x54>)
 80026c4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80026c6:	4b11      	ldr	r3, [pc, #68]	; (800270c <MX_I2C1_Init+0x50>)
 80026c8:	4a12      	ldr	r2, [pc, #72]	; (8002714 <MX_I2C1_Init+0x58>)
 80026ca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80026cc:	4b0f      	ldr	r3, [pc, #60]	; (800270c <MX_I2C1_Init+0x50>)
 80026ce:	2200      	movs	r2, #0
 80026d0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80026d2:	4b0e      	ldr	r3, [pc, #56]	; (800270c <MX_I2C1_Init+0x50>)
 80026d4:	2200      	movs	r2, #0
 80026d6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80026d8:	4b0c      	ldr	r3, [pc, #48]	; (800270c <MX_I2C1_Init+0x50>)
 80026da:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80026de:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80026e0:	4b0a      	ldr	r3, [pc, #40]	; (800270c <MX_I2C1_Init+0x50>)
 80026e2:	2200      	movs	r2, #0
 80026e4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80026e6:	4b09      	ldr	r3, [pc, #36]	; (800270c <MX_I2C1_Init+0x50>)
 80026e8:	2200      	movs	r2, #0
 80026ea:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80026ec:	4b07      	ldr	r3, [pc, #28]	; (800270c <MX_I2C1_Init+0x50>)
 80026ee:	2200      	movs	r2, #0
 80026f0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80026f2:	4b06      	ldr	r3, [pc, #24]	; (800270c <MX_I2C1_Init+0x50>)
 80026f4:	2200      	movs	r2, #0
 80026f6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80026f8:	4804      	ldr	r0, [pc, #16]	; (800270c <MX_I2C1_Init+0x50>)
 80026fa:	f000 fee9 	bl	80034d0 <HAL_I2C_Init>
 80026fe:	4603      	mov	r3, r0
 8002700:	2b00      	cmp	r3, #0
 8002702:	d001      	beq.n	8002708 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002704:	f000 f972 	bl	80029ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002708:	bf00      	nop
 800270a:	bd80      	pop	{r7, pc}
 800270c:	200000e0 	.word	0x200000e0
 8002710:	40005400 	.word	0x40005400
 8002714:	00061a80 	.word	0x00061a80

08002718 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800271c:	4b12      	ldr	r3, [pc, #72]	; (8002768 <MX_I2C2_Init+0x50>)
 800271e:	4a13      	ldr	r2, [pc, #76]	; (800276c <MX_I2C2_Init+0x54>)
 8002720:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8002722:	4b11      	ldr	r3, [pc, #68]	; (8002768 <MX_I2C2_Init+0x50>)
 8002724:	4a12      	ldr	r2, [pc, #72]	; (8002770 <MX_I2C2_Init+0x58>)
 8002726:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002728:	4b0f      	ldr	r3, [pc, #60]	; (8002768 <MX_I2C2_Init+0x50>)
 800272a:	2200      	movs	r2, #0
 800272c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800272e:	4b0e      	ldr	r3, [pc, #56]	; (8002768 <MX_I2C2_Init+0x50>)
 8002730:	2200      	movs	r2, #0
 8002732:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002734:	4b0c      	ldr	r3, [pc, #48]	; (8002768 <MX_I2C2_Init+0x50>)
 8002736:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800273a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800273c:	4b0a      	ldr	r3, [pc, #40]	; (8002768 <MX_I2C2_Init+0x50>)
 800273e:	2200      	movs	r2, #0
 8002740:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8002742:	4b09      	ldr	r3, [pc, #36]	; (8002768 <MX_I2C2_Init+0x50>)
 8002744:	2200      	movs	r2, #0
 8002746:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002748:	4b07      	ldr	r3, [pc, #28]	; (8002768 <MX_I2C2_Init+0x50>)
 800274a:	2200      	movs	r2, #0
 800274c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800274e:	4b06      	ldr	r3, [pc, #24]	; (8002768 <MX_I2C2_Init+0x50>)
 8002750:	2200      	movs	r2, #0
 8002752:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002754:	4804      	ldr	r0, [pc, #16]	; (8002768 <MX_I2C2_Init+0x50>)
 8002756:	f000 febb 	bl	80034d0 <HAL_I2C_Init>
 800275a:	4603      	mov	r3, r0
 800275c:	2b00      	cmp	r3, #0
 800275e:	d001      	beq.n	8002764 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8002760:	f000 f944 	bl	80029ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002764:	bf00      	nop
 8002766:	bd80      	pop	{r7, pc}
 8002768:	20000134 	.word	0x20000134
 800276c:	40005800 	.word	0x40005800
 8002770:	00061a80 	.word	0x00061a80

08002774 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8002778:	4b09      	ldr	r3, [pc, #36]	; (80027a0 <MX_IWDG_Init+0x2c>)
 800277a:	4a0a      	ldr	r2, [pc, #40]	; (80027a4 <MX_IWDG_Init+0x30>)
 800277c:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 800277e:	4b08      	ldr	r3, [pc, #32]	; (80027a0 <MX_IWDG_Init+0x2c>)
 8002780:	2200      	movs	r2, #0
 8002782:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 4000;
 8002784:	4b06      	ldr	r3, [pc, #24]	; (80027a0 <MX_IWDG_Init+0x2c>)
 8002786:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800278a:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 800278c:	4804      	ldr	r0, [pc, #16]	; (80027a0 <MX_IWDG_Init+0x2c>)
 800278e:	f002 ff8f 	bl	80056b0 <HAL_IWDG_Init>
 8002792:	4603      	mov	r3, r0
 8002794:	2b00      	cmp	r3, #0
 8002796:	d001      	beq.n	800279c <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 8002798:	f000 f928 	bl	80029ec <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 800279c:	bf00      	nop
 800279e:	bd80      	pop	{r7, pc}
 80027a0:	20000218 	.word	0x20000218
 80027a4:	40003000 	.word	0x40003000

080027a8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b086      	sub	sp, #24
 80027ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80027ae:	f107 0308 	add.w	r3, r7, #8
 80027b2:	2200      	movs	r2, #0
 80027b4:	601a      	str	r2, [r3, #0]
 80027b6:	605a      	str	r2, [r3, #4]
 80027b8:	609a      	str	r2, [r3, #8]
 80027ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027bc:	463b      	mov	r3, r7
 80027be:	2200      	movs	r2, #0
 80027c0:	601a      	str	r2, [r3, #0]
 80027c2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80027c4:	4b1d      	ldr	r3, [pc, #116]	; (800283c <MX_TIM3_Init+0x94>)
 80027c6:	4a1e      	ldr	r2, [pc, #120]	; (8002840 <MX_TIM3_Init+0x98>)
 80027c8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 10;
 80027ca:	4b1c      	ldr	r3, [pc, #112]	; (800283c <MX_TIM3_Init+0x94>)
 80027cc:	220a      	movs	r2, #10
 80027ce:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027d0:	4b1a      	ldr	r3, [pc, #104]	; (800283c <MX_TIM3_Init+0x94>)
 80027d2:	2200      	movs	r2, #0
 80027d4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65454;
 80027d6:	4b19      	ldr	r3, [pc, #100]	; (800283c <MX_TIM3_Init+0x94>)
 80027d8:	f64f 72ae 	movw	r2, #65454	; 0xffae
 80027dc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027de:	4b17      	ldr	r3, [pc, #92]	; (800283c <MX_TIM3_Init+0x94>)
 80027e0:	2200      	movs	r2, #0
 80027e2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80027e4:	4b15      	ldr	r3, [pc, #84]	; (800283c <MX_TIM3_Init+0x94>)
 80027e6:	2280      	movs	r2, #128	; 0x80
 80027e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80027ea:	4814      	ldr	r0, [pc, #80]	; (800283c <MX_TIM3_Init+0x94>)
 80027ec:	f003 fbb8 	bl	8005f60 <HAL_TIM_Base_Init>
 80027f0:	4603      	mov	r3, r0
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d001      	beq.n	80027fa <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80027f6:	f000 f8f9 	bl	80029ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80027fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027fe:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002800:	f107 0308 	add.w	r3, r7, #8
 8002804:	4619      	mov	r1, r3
 8002806:	480d      	ldr	r0, [pc, #52]	; (800283c <MX_TIM3_Init+0x94>)
 8002808:	f003 fd9e 	bl	8006348 <HAL_TIM_ConfigClockSource>
 800280c:	4603      	mov	r3, r0
 800280e:	2b00      	cmp	r3, #0
 8002810:	d001      	beq.n	8002816 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8002812:	f000 f8eb 	bl	80029ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002816:	2300      	movs	r3, #0
 8002818:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800281a:	2300      	movs	r3, #0
 800281c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800281e:	463b      	mov	r3, r7
 8002820:	4619      	mov	r1, r3
 8002822:	4806      	ldr	r0, [pc, #24]	; (800283c <MX_TIM3_Init+0x94>)
 8002824:	f003 ff70 	bl	8006708 <HAL_TIMEx_MasterConfigSynchronization>
 8002828:	4603      	mov	r3, r0
 800282a:	2b00      	cmp	r3, #0
 800282c:	d001      	beq.n	8002832 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800282e:	f000 f8dd 	bl	80029ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002832:	bf00      	nop
 8002834:	3718      	adds	r7, #24
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}
 800283a:	bf00      	nop
 800283c:	20000188 	.word	0x20000188
 8002840:	40000400 	.word	0x40000400

08002844 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b086      	sub	sp, #24
 8002848:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800284a:	f107 0308 	add.w	r3, r7, #8
 800284e:	2200      	movs	r2, #0
 8002850:	601a      	str	r2, [r3, #0]
 8002852:	605a      	str	r2, [r3, #4]
 8002854:	609a      	str	r2, [r3, #8]
 8002856:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002858:	463b      	mov	r3, r7
 800285a:	2200      	movs	r2, #0
 800285c:	601a      	str	r2, [r3, #0]
 800285e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002860:	4b1d      	ldr	r3, [pc, #116]	; (80028d8 <MX_TIM4_Init+0x94>)
 8002862:	4a1e      	ldr	r2, [pc, #120]	; (80028dc <MX_TIM4_Init+0x98>)
 8002864:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 274;
 8002866:	4b1c      	ldr	r3, [pc, #112]	; (80028d8 <MX_TIM4_Init+0x94>)
 8002868:	f44f 7289 	mov.w	r2, #274	; 0x112
 800286c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800286e:	4b1a      	ldr	r3, [pc, #104]	; (80028d8 <MX_TIM4_Init+0x94>)
 8002870:	2200      	movs	r2, #0
 8002872:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002874:	4b18      	ldr	r3, [pc, #96]	; (80028d8 <MX_TIM4_Init+0x94>)
 8002876:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800287a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800287c:	4b16      	ldr	r3, [pc, #88]	; (80028d8 <MX_TIM4_Init+0x94>)
 800287e:	2200      	movs	r2, #0
 8002880:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002882:	4b15      	ldr	r3, [pc, #84]	; (80028d8 <MX_TIM4_Init+0x94>)
 8002884:	2280      	movs	r2, #128	; 0x80
 8002886:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002888:	4813      	ldr	r0, [pc, #76]	; (80028d8 <MX_TIM4_Init+0x94>)
 800288a:	f003 fb69 	bl	8005f60 <HAL_TIM_Base_Init>
 800288e:	4603      	mov	r3, r0
 8002890:	2b00      	cmp	r3, #0
 8002892:	d001      	beq.n	8002898 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8002894:	f000 f8aa 	bl	80029ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002898:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800289c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800289e:	f107 0308 	add.w	r3, r7, #8
 80028a2:	4619      	mov	r1, r3
 80028a4:	480c      	ldr	r0, [pc, #48]	; (80028d8 <MX_TIM4_Init+0x94>)
 80028a6:	f003 fd4f 	bl	8006348 <HAL_TIM_ConfigClockSource>
 80028aa:	4603      	mov	r3, r0
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d001      	beq.n	80028b4 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 80028b0:	f000 f89c 	bl	80029ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80028b4:	2300      	movs	r3, #0
 80028b6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028b8:	2300      	movs	r3, #0
 80028ba:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80028bc:	463b      	mov	r3, r7
 80028be:	4619      	mov	r1, r3
 80028c0:	4805      	ldr	r0, [pc, #20]	; (80028d8 <MX_TIM4_Init+0x94>)
 80028c2:	f003 ff21 	bl	8006708 <HAL_TIMEx_MasterConfigSynchronization>
 80028c6:	4603      	mov	r3, r0
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d001      	beq.n	80028d0 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 80028cc:	f000 f88e 	bl	80029ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80028d0:	bf00      	nop
 80028d2:	3718      	adds	r7, #24
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}
 80028d8:	200001d0 	.word	0x200001d0
 80028dc:	40000800 	.word	0x40000800

080028e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b088      	sub	sp, #32
 80028e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028e6:	f107 0310 	add.w	r3, r7, #16
 80028ea:	2200      	movs	r2, #0
 80028ec:	601a      	str	r2, [r3, #0]
 80028ee:	605a      	str	r2, [r3, #4]
 80028f0:	609a      	str	r2, [r3, #8]
 80028f2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80028f4:	4b38      	ldr	r3, [pc, #224]	; (80029d8 <MX_GPIO_Init+0xf8>)
 80028f6:	699b      	ldr	r3, [r3, #24]
 80028f8:	4a37      	ldr	r2, [pc, #220]	; (80029d8 <MX_GPIO_Init+0xf8>)
 80028fa:	f043 0310 	orr.w	r3, r3, #16
 80028fe:	6193      	str	r3, [r2, #24]
 8002900:	4b35      	ldr	r3, [pc, #212]	; (80029d8 <MX_GPIO_Init+0xf8>)
 8002902:	699b      	ldr	r3, [r3, #24]
 8002904:	f003 0310 	and.w	r3, r3, #16
 8002908:	60fb      	str	r3, [r7, #12]
 800290a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800290c:	4b32      	ldr	r3, [pc, #200]	; (80029d8 <MX_GPIO_Init+0xf8>)
 800290e:	699b      	ldr	r3, [r3, #24]
 8002910:	4a31      	ldr	r2, [pc, #196]	; (80029d8 <MX_GPIO_Init+0xf8>)
 8002912:	f043 0320 	orr.w	r3, r3, #32
 8002916:	6193      	str	r3, [r2, #24]
 8002918:	4b2f      	ldr	r3, [pc, #188]	; (80029d8 <MX_GPIO_Init+0xf8>)
 800291a:	699b      	ldr	r3, [r3, #24]
 800291c:	f003 0320 	and.w	r3, r3, #32
 8002920:	60bb      	str	r3, [r7, #8]
 8002922:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002924:	4b2c      	ldr	r3, [pc, #176]	; (80029d8 <MX_GPIO_Init+0xf8>)
 8002926:	699b      	ldr	r3, [r3, #24]
 8002928:	4a2b      	ldr	r2, [pc, #172]	; (80029d8 <MX_GPIO_Init+0xf8>)
 800292a:	f043 0304 	orr.w	r3, r3, #4
 800292e:	6193      	str	r3, [r2, #24]
 8002930:	4b29      	ldr	r3, [pc, #164]	; (80029d8 <MX_GPIO_Init+0xf8>)
 8002932:	699b      	ldr	r3, [r3, #24]
 8002934:	f003 0304 	and.w	r3, r3, #4
 8002938:	607b      	str	r3, [r7, #4]
 800293a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800293c:	4b26      	ldr	r3, [pc, #152]	; (80029d8 <MX_GPIO_Init+0xf8>)
 800293e:	699b      	ldr	r3, [r3, #24]
 8002940:	4a25      	ldr	r2, [pc, #148]	; (80029d8 <MX_GPIO_Init+0xf8>)
 8002942:	f043 0308 	orr.w	r3, r3, #8
 8002946:	6193      	str	r3, [r2, #24]
 8002948:	4b23      	ldr	r3, [pc, #140]	; (80029d8 <MX_GPIO_Init+0xf8>)
 800294a:	699b      	ldr	r3, [r3, #24]
 800294c:	f003 0308 	and.w	r3, r3, #8
 8002950:	603b      	str	r3, [r7, #0]
 8002952:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8002954:	2200      	movs	r2, #0
 8002956:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800295a:	4820      	ldr	r0, [pc, #128]	; (80029dc <MX_GPIO_Init+0xfc>)
 800295c:	f000 fd88 	bl	8003470 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002960:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002964:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002966:	2301      	movs	r3, #1
 8002968:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800296a:	2300      	movs	r3, #0
 800296c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800296e:	2302      	movs	r3, #2
 8002970:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002972:	f107 0310 	add.w	r3, r7, #16
 8002976:	4619      	mov	r1, r3
 8002978:	4818      	ldr	r0, [pc, #96]	; (80029dc <MX_GPIO_Init+0xfc>)
 800297a:	f000 fbf5 	bl	8003168 <HAL_GPIO_Init>

  /*Configure GPIO pins : Arriba_Pin Abajo_Pin Derecha_Pin Izquierda_Pin
                           Ok_Pin WP_Pin */
  GPIO_InitStruct.Pin = Arriba_Pin|Abajo_Pin|Derecha_Pin|Izquierda_Pin
 800297e:	233f      	movs	r3, #63	; 0x3f
 8002980:	613b      	str	r3, [r7, #16]
                          |Ok_Pin|WP_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002982:	2300      	movs	r3, #0
 8002984:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002986:	2300      	movs	r3, #0
 8002988:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800298a:	f107 0310 	add.w	r3, r7, #16
 800298e:	4619      	mov	r1, r3
 8002990:	4813      	ldr	r0, [pc, #76]	; (80029e0 <MX_GPIO_Init+0x100>)
 8002992:	f000 fbe9 	bl	8003168 <HAL_GPIO_Init>

  /*Configure GPIO pins : Menu_IT_Pin Reset_IT_Pin */
  GPIO_InitStruct.Pin = Menu_IT_Pin|Reset_IT_Pin;
 8002996:	2303      	movs	r3, #3
 8002998:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800299a:	4b12      	ldr	r3, [pc, #72]	; (80029e4 <MX_GPIO_Init+0x104>)
 800299c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800299e:	2300      	movs	r3, #0
 80029a0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029a2:	f107 0310 	add.w	r3, r7, #16
 80029a6:	4619      	mov	r1, r3
 80029a8:	480f      	ldr	r0, [pc, #60]	; (80029e8 <MX_GPIO_Init+0x108>)
 80029aa:	f000 fbdd 	bl	8003168 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80029ae:	2200      	movs	r2, #0
 80029b0:	2100      	movs	r1, #0
 80029b2:	2006      	movs	r0, #6
 80029b4:	f000 fb2b 	bl	800300e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80029b8:	2006      	movs	r0, #6
 80029ba:	f000 fb44 	bl	8003046 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80029be:	2200      	movs	r2, #0
 80029c0:	2100      	movs	r1, #0
 80029c2:	2007      	movs	r0, #7
 80029c4:	f000 fb23 	bl	800300e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80029c8:	2007      	movs	r0, #7
 80029ca:	f000 fb3c 	bl	8003046 <HAL_NVIC_EnableIRQ>

}
 80029ce:	bf00      	nop
 80029d0:	3720      	adds	r7, #32
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop
 80029d8:	40021000 	.word	0x40021000
 80029dc:	40011000 	.word	0x40011000
 80029e0:	40010800 	.word	0x40010800
 80029e4:	10210000 	.word	0x10210000
 80029e8:	40010c00 	.word	0x40010c00

080029ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80029ec:	b480      	push	{r7}
 80029ee:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80029f0:	b672      	cpsid	i
}
 80029f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80029f4:	e7fe      	b.n	80029f4 <Error_Handler+0x8>
	...

080029f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b085      	sub	sp, #20
 80029fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80029fe:	4b15      	ldr	r3, [pc, #84]	; (8002a54 <HAL_MspInit+0x5c>)
 8002a00:	699b      	ldr	r3, [r3, #24]
 8002a02:	4a14      	ldr	r2, [pc, #80]	; (8002a54 <HAL_MspInit+0x5c>)
 8002a04:	f043 0301 	orr.w	r3, r3, #1
 8002a08:	6193      	str	r3, [r2, #24]
 8002a0a:	4b12      	ldr	r3, [pc, #72]	; (8002a54 <HAL_MspInit+0x5c>)
 8002a0c:	699b      	ldr	r3, [r3, #24]
 8002a0e:	f003 0301 	and.w	r3, r3, #1
 8002a12:	60bb      	str	r3, [r7, #8]
 8002a14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a16:	4b0f      	ldr	r3, [pc, #60]	; (8002a54 <HAL_MspInit+0x5c>)
 8002a18:	69db      	ldr	r3, [r3, #28]
 8002a1a:	4a0e      	ldr	r2, [pc, #56]	; (8002a54 <HAL_MspInit+0x5c>)
 8002a1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a20:	61d3      	str	r3, [r2, #28]
 8002a22:	4b0c      	ldr	r3, [pc, #48]	; (8002a54 <HAL_MspInit+0x5c>)
 8002a24:	69db      	ldr	r3, [r3, #28]
 8002a26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a2a:	607b      	str	r3, [r7, #4]
 8002a2c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002a2e:	4b0a      	ldr	r3, [pc, #40]	; (8002a58 <HAL_MspInit+0x60>)
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	60fb      	str	r3, [r7, #12]
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002a3a:	60fb      	str	r3, [r7, #12]
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002a42:	60fb      	str	r3, [r7, #12]
 8002a44:	4a04      	ldr	r2, [pc, #16]	; (8002a58 <HAL_MspInit+0x60>)
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a4a:	bf00      	nop
 8002a4c:	3714      	adds	r7, #20
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bc80      	pop	{r7}
 8002a52:	4770      	bx	lr
 8002a54:	40021000 	.word	0x40021000
 8002a58:	40010000 	.word	0x40010000

08002a5c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b08c      	sub	sp, #48	; 0x30
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a64:	f107 031c 	add.w	r3, r7, #28
 8002a68:	2200      	movs	r2, #0
 8002a6a:	601a      	str	r2, [r3, #0]
 8002a6c:	605a      	str	r2, [r3, #4]
 8002a6e:	609a      	str	r2, [r3, #8]
 8002a70:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a3a      	ldr	r2, [pc, #232]	; (8002b60 <HAL_I2C_MspInit+0x104>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d13b      	bne.n	8002af4 <HAL_I2C_MspInit+0x98>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a7c:	4b39      	ldr	r3, [pc, #228]	; (8002b64 <HAL_I2C_MspInit+0x108>)
 8002a7e:	699b      	ldr	r3, [r3, #24]
 8002a80:	4a38      	ldr	r2, [pc, #224]	; (8002b64 <HAL_I2C_MspInit+0x108>)
 8002a82:	f043 0308 	orr.w	r3, r3, #8
 8002a86:	6193      	str	r3, [r2, #24]
 8002a88:	4b36      	ldr	r3, [pc, #216]	; (8002b64 <HAL_I2C_MspInit+0x108>)
 8002a8a:	699b      	ldr	r3, [r3, #24]
 8002a8c:	f003 0308 	and.w	r3, r3, #8
 8002a90:	61bb      	str	r3, [r7, #24]
 8002a92:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002a94:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002a98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a9a:	2312      	movs	r3, #18
 8002a9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a9e:	2303      	movs	r3, #3
 8002aa0:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002aa2:	f107 031c 	add.w	r3, r7, #28
 8002aa6:	4619      	mov	r1, r3
 8002aa8:	482f      	ldr	r0, [pc, #188]	; (8002b68 <HAL_I2C_MspInit+0x10c>)
 8002aaa:	f000 fb5d 	bl	8003168 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8002aae:	4b2f      	ldr	r3, [pc, #188]	; (8002b6c <HAL_I2C_MspInit+0x110>)
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ab6:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002aba:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002abc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002abe:	f043 0302 	orr.w	r3, r3, #2
 8002ac2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ac4:	4a29      	ldr	r2, [pc, #164]	; (8002b6c <HAL_I2C_MspInit+0x110>)
 8002ac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ac8:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002aca:	4b26      	ldr	r3, [pc, #152]	; (8002b64 <HAL_I2C_MspInit+0x108>)
 8002acc:	69db      	ldr	r3, [r3, #28]
 8002ace:	4a25      	ldr	r2, [pc, #148]	; (8002b64 <HAL_I2C_MspInit+0x108>)
 8002ad0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002ad4:	61d3      	str	r3, [r2, #28]
 8002ad6:	4b23      	ldr	r3, [pc, #140]	; (8002b64 <HAL_I2C_MspInit+0x108>)
 8002ad8:	69db      	ldr	r3, [r3, #28]
 8002ada:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ade:	617b      	str	r3, [r7, #20]
 8002ae0:	697b      	ldr	r3, [r7, #20]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	2100      	movs	r1, #0
 8002ae6:	2020      	movs	r0, #32
 8002ae8:	f000 fa91 	bl	800300e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8002aec:	2020      	movs	r0, #32
 8002aee:	f000 faaa 	bl	8003046 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002af2:	e031      	b.n	8002b58 <HAL_I2C_MspInit+0xfc>
  else if(hi2c->Instance==I2C2)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a1d      	ldr	r2, [pc, #116]	; (8002b70 <HAL_I2C_MspInit+0x114>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d12c      	bne.n	8002b58 <HAL_I2C_MspInit+0xfc>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002afe:	4b19      	ldr	r3, [pc, #100]	; (8002b64 <HAL_I2C_MspInit+0x108>)
 8002b00:	699b      	ldr	r3, [r3, #24]
 8002b02:	4a18      	ldr	r2, [pc, #96]	; (8002b64 <HAL_I2C_MspInit+0x108>)
 8002b04:	f043 0308 	orr.w	r3, r3, #8
 8002b08:	6193      	str	r3, [r2, #24]
 8002b0a:	4b16      	ldr	r3, [pc, #88]	; (8002b64 <HAL_I2C_MspInit+0x108>)
 8002b0c:	699b      	ldr	r3, [r3, #24]
 8002b0e:	f003 0308 	and.w	r3, r3, #8
 8002b12:	613b      	str	r3, [r7, #16]
 8002b14:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002b16:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002b1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b1c:	2312      	movs	r3, #18
 8002b1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b20:	2303      	movs	r3, #3
 8002b22:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b24:	f107 031c 	add.w	r3, r7, #28
 8002b28:	4619      	mov	r1, r3
 8002b2a:	480f      	ldr	r0, [pc, #60]	; (8002b68 <HAL_I2C_MspInit+0x10c>)
 8002b2c:	f000 fb1c 	bl	8003168 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002b30:	4b0c      	ldr	r3, [pc, #48]	; (8002b64 <HAL_I2C_MspInit+0x108>)
 8002b32:	69db      	ldr	r3, [r3, #28]
 8002b34:	4a0b      	ldr	r2, [pc, #44]	; (8002b64 <HAL_I2C_MspInit+0x108>)
 8002b36:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002b3a:	61d3      	str	r3, [r2, #28]
 8002b3c:	4b09      	ldr	r3, [pc, #36]	; (8002b64 <HAL_I2C_MspInit+0x108>)
 8002b3e:	69db      	ldr	r3, [r3, #28]
 8002b40:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b44:	60fb      	str	r3, [r7, #12]
 8002b46:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8002b48:	2200      	movs	r2, #0
 8002b4a:	2100      	movs	r1, #0
 8002b4c:	2022      	movs	r0, #34	; 0x22
 8002b4e:	f000 fa5e 	bl	800300e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8002b52:	2022      	movs	r0, #34	; 0x22
 8002b54:	f000 fa77 	bl	8003046 <HAL_NVIC_EnableIRQ>
}
 8002b58:	bf00      	nop
 8002b5a:	3730      	adds	r7, #48	; 0x30
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}
 8002b60:	40005400 	.word	0x40005400
 8002b64:	40021000 	.word	0x40021000
 8002b68:	40010c00 	.word	0x40010c00
 8002b6c:	40010000 	.word	0x40010000
 8002b70:	40005800 	.word	0x40005800

08002b74 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b084      	sub	sp, #16
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a16      	ldr	r2, [pc, #88]	; (8002bdc <HAL_TIM_Base_MspInit+0x68>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d114      	bne.n	8002bb0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002b86:	4b16      	ldr	r3, [pc, #88]	; (8002be0 <HAL_TIM_Base_MspInit+0x6c>)
 8002b88:	69db      	ldr	r3, [r3, #28]
 8002b8a:	4a15      	ldr	r2, [pc, #84]	; (8002be0 <HAL_TIM_Base_MspInit+0x6c>)
 8002b8c:	f043 0302 	orr.w	r3, r3, #2
 8002b90:	61d3      	str	r3, [r2, #28]
 8002b92:	4b13      	ldr	r3, [pc, #76]	; (8002be0 <HAL_TIM_Base_MspInit+0x6c>)
 8002b94:	69db      	ldr	r3, [r3, #28]
 8002b96:	f003 0302 	and.w	r3, r3, #2
 8002b9a:	60fb      	str	r3, [r7, #12]
 8002b9c:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	2100      	movs	r1, #0
 8002ba2:	201d      	movs	r0, #29
 8002ba4:	f000 fa33 	bl	800300e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002ba8:	201d      	movs	r0, #29
 8002baa:	f000 fa4c 	bl	8003046 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002bae:	e010      	b.n	8002bd2 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM4)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a0b      	ldr	r2, [pc, #44]	; (8002be4 <HAL_TIM_Base_MspInit+0x70>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d10b      	bne.n	8002bd2 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002bba:	4b09      	ldr	r3, [pc, #36]	; (8002be0 <HAL_TIM_Base_MspInit+0x6c>)
 8002bbc:	69db      	ldr	r3, [r3, #28]
 8002bbe:	4a08      	ldr	r2, [pc, #32]	; (8002be0 <HAL_TIM_Base_MspInit+0x6c>)
 8002bc0:	f043 0304 	orr.w	r3, r3, #4
 8002bc4:	61d3      	str	r3, [r2, #28]
 8002bc6:	4b06      	ldr	r3, [pc, #24]	; (8002be0 <HAL_TIM_Base_MspInit+0x6c>)
 8002bc8:	69db      	ldr	r3, [r3, #28]
 8002bca:	f003 0304 	and.w	r3, r3, #4
 8002bce:	60bb      	str	r3, [r7, #8]
 8002bd0:	68bb      	ldr	r3, [r7, #8]
}
 8002bd2:	bf00      	nop
 8002bd4:	3710      	adds	r7, #16
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}
 8002bda:	bf00      	nop
 8002bdc:	40000400 	.word	0x40000400
 8002be0:	40021000 	.word	0x40021000
 8002be4:	40000800 	.word	0x40000800

08002be8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002be8:	b480      	push	{r7}
 8002bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002bec:	e7fe      	b.n	8002bec <NMI_Handler+0x4>

08002bee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002bee:	b480      	push	{r7}
 8002bf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002bf2:	e7fe      	b.n	8002bf2 <HardFault_Handler+0x4>

08002bf4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002bf8:	e7fe      	b.n	8002bf8 <MemManage_Handler+0x4>

08002bfa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002bfa:	b480      	push	{r7}
 8002bfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002bfe:	e7fe      	b.n	8002bfe <BusFault_Handler+0x4>

08002c00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c00:	b480      	push	{r7}
 8002c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c04:	e7fe      	b.n	8002c04 <UsageFault_Handler+0x4>

08002c06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c06:	b480      	push	{r7}
 8002c08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002c0a:	bf00      	nop
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bc80      	pop	{r7}
 8002c10:	4770      	bx	lr

08002c12 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c12:	b480      	push	{r7}
 8002c14:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c16:	bf00      	nop
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bc80      	pop	{r7}
 8002c1c:	4770      	bx	lr

08002c1e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c1e:	b480      	push	{r7}
 8002c20:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c22:	bf00      	nop
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bc80      	pop	{r7}
 8002c28:	4770      	bx	lr

08002c2a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c2a:	b580      	push	{r7, lr}
 8002c2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c2e:	f000 f8d7 	bl	8002de0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c32:	bf00      	nop
 8002c34:	bd80      	pop	{r7, pc}

08002c36 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002c36:	b580      	push	{r7, lr}
 8002c38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Menu_IT_Pin);
 8002c3a:	2001      	movs	r0, #1
 8002c3c:	f000 fc30 	bl	80034a0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002c40:	bf00      	nop
 8002c42:	bd80      	pop	{r7, pc}

08002c44 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Reset_IT_Pin);
 8002c48:	2002      	movs	r0, #2
 8002c4a:	f000 fc29 	bl	80034a0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002c4e:	bf00      	nop
 8002c50:	bd80      	pop	{r7, pc}
	...

08002c54 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002c58:	4802      	ldr	r0, [pc, #8]	; (8002c64 <TIM3_IRQHandler+0x10>)
 8002c5a:	f003 fa6d 	bl	8006138 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002c5e:	bf00      	nop
 8002c60:	bd80      	pop	{r7, pc}
 8002c62:	bf00      	nop
 8002c64:	20000188 	.word	0x20000188

08002c68 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8002c6c:	4802      	ldr	r0, [pc, #8]	; (8002c78 <I2C1_ER_IRQHandler+0x10>)
 8002c6e:	f001 fd61 	bl	8004734 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8002c72:	bf00      	nop
 8002c74:	bd80      	pop	{r7, pc}
 8002c76:	bf00      	nop
 8002c78:	200000e0 	.word	0x200000e0

08002c7c <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8002c80:	4802      	ldr	r0, [pc, #8]	; (8002c8c <I2C2_ER_IRQHandler+0x10>)
 8002c82:	f001 fd57 	bl	8004734 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8002c86:	bf00      	nop
 8002c88:	bd80      	pop	{r7, pc}
 8002c8a:	bf00      	nop
 8002c8c:	20000134 	.word	0x20000134

08002c90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b086      	sub	sp, #24
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c98:	4a14      	ldr	r2, [pc, #80]	; (8002cec <_sbrk+0x5c>)
 8002c9a:	4b15      	ldr	r3, [pc, #84]	; (8002cf0 <_sbrk+0x60>)
 8002c9c:	1ad3      	subs	r3, r2, r3
 8002c9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002ca4:	4b13      	ldr	r3, [pc, #76]	; (8002cf4 <_sbrk+0x64>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d102      	bne.n	8002cb2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002cac:	4b11      	ldr	r3, [pc, #68]	; (8002cf4 <_sbrk+0x64>)
 8002cae:	4a12      	ldr	r2, [pc, #72]	; (8002cf8 <_sbrk+0x68>)
 8002cb0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002cb2:	4b10      	ldr	r3, [pc, #64]	; (8002cf4 <_sbrk+0x64>)
 8002cb4:	681a      	ldr	r2, [r3, #0]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	4413      	add	r3, r2
 8002cba:	693a      	ldr	r2, [r7, #16]
 8002cbc:	429a      	cmp	r2, r3
 8002cbe:	d207      	bcs.n	8002cd0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002cc0:	f004 fbda 	bl	8007478 <__errno>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	220c      	movs	r2, #12
 8002cc8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002cca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002cce:	e009      	b.n	8002ce4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002cd0:	4b08      	ldr	r3, [pc, #32]	; (8002cf4 <_sbrk+0x64>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002cd6:	4b07      	ldr	r3, [pc, #28]	; (8002cf4 <_sbrk+0x64>)
 8002cd8:	681a      	ldr	r2, [r3, #0]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	4413      	add	r3, r2
 8002cde:	4a05      	ldr	r2, [pc, #20]	; (8002cf4 <_sbrk+0x64>)
 8002ce0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	3718      	adds	r7, #24
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}
 8002cec:	20005000 	.word	0x20005000
 8002cf0:	00000400 	.word	0x00000400
 8002cf4:	2000024c 	.word	0x2000024c
 8002cf8:	20000670 	.word	0x20000670

08002cfc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002d00:	bf00      	nop
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bc80      	pop	{r7}
 8002d06:	4770      	bx	lr

08002d08 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002d08:	480c      	ldr	r0, [pc, #48]	; (8002d3c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002d0a:	490d      	ldr	r1, [pc, #52]	; (8002d40 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002d0c:	4a0d      	ldr	r2, [pc, #52]	; (8002d44 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002d0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d10:	e002      	b.n	8002d18 <LoopCopyDataInit>

08002d12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d16:	3304      	adds	r3, #4

08002d18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d1c:	d3f9      	bcc.n	8002d12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d1e:	4a0a      	ldr	r2, [pc, #40]	; (8002d48 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002d20:	4c0a      	ldr	r4, [pc, #40]	; (8002d4c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002d22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d24:	e001      	b.n	8002d2a <LoopFillZerobss>

08002d26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d28:	3204      	adds	r2, #4

08002d2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d2c:	d3fb      	bcc.n	8002d26 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002d2e:	f7ff ffe5 	bl	8002cfc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002d32:	f004 fba7 	bl	8007484 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002d36:	f7fe f83f 	bl	8000db8 <main>
  bx lr
 8002d3a:	4770      	bx	lr
  ldr r0, =_sdata
 8002d3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d40:	200000c4 	.word	0x200000c4
  ldr r2, =_sidata
 8002d44:	0800a878 	.word	0x0800a878
  ldr r2, =_sbss
 8002d48:	200000c4 	.word	0x200000c4
  ldr r4, =_ebss
 8002d4c:	2000066c 	.word	0x2000066c

08002d50 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002d50:	e7fe      	b.n	8002d50 <ADC1_2_IRQHandler>
	...

08002d54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d58:	4b08      	ldr	r3, [pc, #32]	; (8002d7c <HAL_Init+0x28>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a07      	ldr	r2, [pc, #28]	; (8002d7c <HAL_Init+0x28>)
 8002d5e:	f043 0310 	orr.w	r3, r3, #16
 8002d62:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d64:	2003      	movs	r0, #3
 8002d66:	f000 f947 	bl	8002ff8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d6a:	200f      	movs	r0, #15
 8002d6c:	f000 f808 	bl	8002d80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002d70:	f7ff fe42 	bl	80029f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d74:	2300      	movs	r3, #0
}
 8002d76:	4618      	mov	r0, r3
 8002d78:	bd80      	pop	{r7, pc}
 8002d7a:	bf00      	nop
 8002d7c:	40022000 	.word	0x40022000

08002d80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b082      	sub	sp, #8
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002d88:	4b12      	ldr	r3, [pc, #72]	; (8002dd4 <HAL_InitTick+0x54>)
 8002d8a:	681a      	ldr	r2, [r3, #0]
 8002d8c:	4b12      	ldr	r3, [pc, #72]	; (8002dd8 <HAL_InitTick+0x58>)
 8002d8e:	781b      	ldrb	r3, [r3, #0]
 8002d90:	4619      	mov	r1, r3
 8002d92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d96:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f000 f95f 	bl	8003062 <HAL_SYSTICK_Config>
 8002da4:	4603      	mov	r3, r0
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d001      	beq.n	8002dae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002daa:	2301      	movs	r3, #1
 8002dac:	e00e      	b.n	8002dcc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2b0f      	cmp	r3, #15
 8002db2:	d80a      	bhi.n	8002dca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002db4:	2200      	movs	r2, #0
 8002db6:	6879      	ldr	r1, [r7, #4]
 8002db8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002dbc:	f000 f927 	bl	800300e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002dc0:	4a06      	ldr	r2, [pc, #24]	; (8002ddc <HAL_InitTick+0x5c>)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	e000      	b.n	8002dcc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	3708      	adds	r7, #8
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bd80      	pop	{r7, pc}
 8002dd4:	2000003c 	.word	0x2000003c
 8002dd8:	20000044 	.word	0x20000044
 8002ddc:	20000040 	.word	0x20000040

08002de0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002de0:	b480      	push	{r7}
 8002de2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002de4:	4b05      	ldr	r3, [pc, #20]	; (8002dfc <HAL_IncTick+0x1c>)
 8002de6:	781b      	ldrb	r3, [r3, #0]
 8002de8:	461a      	mov	r2, r3
 8002dea:	4b05      	ldr	r3, [pc, #20]	; (8002e00 <HAL_IncTick+0x20>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4413      	add	r3, r2
 8002df0:	4a03      	ldr	r2, [pc, #12]	; (8002e00 <HAL_IncTick+0x20>)
 8002df2:	6013      	str	r3, [r2, #0]
}
 8002df4:	bf00      	nop
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bc80      	pop	{r7}
 8002dfa:	4770      	bx	lr
 8002dfc:	20000044 	.word	0x20000044
 8002e00:	20000250 	.word	0x20000250

08002e04 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e04:	b480      	push	{r7}
 8002e06:	af00      	add	r7, sp, #0
  return uwTick;
 8002e08:	4b02      	ldr	r3, [pc, #8]	; (8002e14 <HAL_GetTick+0x10>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bc80      	pop	{r7}
 8002e12:	4770      	bx	lr
 8002e14:	20000250 	.word	0x20000250

08002e18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b084      	sub	sp, #16
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e20:	f7ff fff0 	bl	8002e04 <HAL_GetTick>
 8002e24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e30:	d005      	beq.n	8002e3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e32:	4b0a      	ldr	r3, [pc, #40]	; (8002e5c <HAL_Delay+0x44>)
 8002e34:	781b      	ldrb	r3, [r3, #0]
 8002e36:	461a      	mov	r2, r3
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	4413      	add	r3, r2
 8002e3c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002e3e:	bf00      	nop
 8002e40:	f7ff ffe0 	bl	8002e04 <HAL_GetTick>
 8002e44:	4602      	mov	r2, r0
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	1ad3      	subs	r3, r2, r3
 8002e4a:	68fa      	ldr	r2, [r7, #12]
 8002e4c:	429a      	cmp	r2, r3
 8002e4e:	d8f7      	bhi.n	8002e40 <HAL_Delay+0x28>
  {
  }
}
 8002e50:	bf00      	nop
 8002e52:	bf00      	nop
 8002e54:	3710      	adds	r7, #16
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}
 8002e5a:	bf00      	nop
 8002e5c:	20000044 	.word	0x20000044

08002e60 <__NVIC_SetPriorityGrouping>:
{
 8002e60:	b480      	push	{r7}
 8002e62:	b085      	sub	sp, #20
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	f003 0307 	and.w	r3, r3, #7
 8002e6e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e70:	4b0c      	ldr	r3, [pc, #48]	; (8002ea4 <__NVIC_SetPriorityGrouping+0x44>)
 8002e72:	68db      	ldr	r3, [r3, #12]
 8002e74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e76:	68ba      	ldr	r2, [r7, #8]
 8002e78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002e7c:	4013      	ands	r3, r2
 8002e7e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002e8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e92:	4a04      	ldr	r2, [pc, #16]	; (8002ea4 <__NVIC_SetPriorityGrouping+0x44>)
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	60d3      	str	r3, [r2, #12]
}
 8002e98:	bf00      	nop
 8002e9a:	3714      	adds	r7, #20
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bc80      	pop	{r7}
 8002ea0:	4770      	bx	lr
 8002ea2:	bf00      	nop
 8002ea4:	e000ed00 	.word	0xe000ed00

08002ea8 <__NVIC_GetPriorityGrouping>:
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002eac:	4b04      	ldr	r3, [pc, #16]	; (8002ec0 <__NVIC_GetPriorityGrouping+0x18>)
 8002eae:	68db      	ldr	r3, [r3, #12]
 8002eb0:	0a1b      	lsrs	r3, r3, #8
 8002eb2:	f003 0307 	and.w	r3, r3, #7
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bc80      	pop	{r7}
 8002ebc:	4770      	bx	lr
 8002ebe:	bf00      	nop
 8002ec0:	e000ed00 	.word	0xe000ed00

08002ec4 <__NVIC_EnableIRQ>:
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b083      	sub	sp, #12
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	4603      	mov	r3, r0
 8002ecc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ece:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	db0b      	blt.n	8002eee <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ed6:	79fb      	ldrb	r3, [r7, #7]
 8002ed8:	f003 021f 	and.w	r2, r3, #31
 8002edc:	4906      	ldr	r1, [pc, #24]	; (8002ef8 <__NVIC_EnableIRQ+0x34>)
 8002ede:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ee2:	095b      	lsrs	r3, r3, #5
 8002ee4:	2001      	movs	r0, #1
 8002ee6:	fa00 f202 	lsl.w	r2, r0, r2
 8002eea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002eee:	bf00      	nop
 8002ef0:	370c      	adds	r7, #12
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bc80      	pop	{r7}
 8002ef6:	4770      	bx	lr
 8002ef8:	e000e100 	.word	0xe000e100

08002efc <__NVIC_SetPriority>:
{
 8002efc:	b480      	push	{r7}
 8002efe:	b083      	sub	sp, #12
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	4603      	mov	r3, r0
 8002f04:	6039      	str	r1, [r7, #0]
 8002f06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	db0a      	blt.n	8002f26 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	b2da      	uxtb	r2, r3
 8002f14:	490c      	ldr	r1, [pc, #48]	; (8002f48 <__NVIC_SetPriority+0x4c>)
 8002f16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f1a:	0112      	lsls	r2, r2, #4
 8002f1c:	b2d2      	uxtb	r2, r2
 8002f1e:	440b      	add	r3, r1
 8002f20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002f24:	e00a      	b.n	8002f3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	b2da      	uxtb	r2, r3
 8002f2a:	4908      	ldr	r1, [pc, #32]	; (8002f4c <__NVIC_SetPriority+0x50>)
 8002f2c:	79fb      	ldrb	r3, [r7, #7]
 8002f2e:	f003 030f 	and.w	r3, r3, #15
 8002f32:	3b04      	subs	r3, #4
 8002f34:	0112      	lsls	r2, r2, #4
 8002f36:	b2d2      	uxtb	r2, r2
 8002f38:	440b      	add	r3, r1
 8002f3a:	761a      	strb	r2, [r3, #24]
}
 8002f3c:	bf00      	nop
 8002f3e:	370c      	adds	r7, #12
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bc80      	pop	{r7}
 8002f44:	4770      	bx	lr
 8002f46:	bf00      	nop
 8002f48:	e000e100 	.word	0xe000e100
 8002f4c:	e000ed00 	.word	0xe000ed00

08002f50 <NVIC_EncodePriority>:
{
 8002f50:	b480      	push	{r7}
 8002f52:	b089      	sub	sp, #36	; 0x24
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	60f8      	str	r0, [r7, #12]
 8002f58:	60b9      	str	r1, [r7, #8]
 8002f5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	f003 0307 	and.w	r3, r3, #7
 8002f62:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f64:	69fb      	ldr	r3, [r7, #28]
 8002f66:	f1c3 0307 	rsb	r3, r3, #7
 8002f6a:	2b04      	cmp	r3, #4
 8002f6c:	bf28      	it	cs
 8002f6e:	2304      	movcs	r3, #4
 8002f70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f72:	69fb      	ldr	r3, [r7, #28]
 8002f74:	3304      	adds	r3, #4
 8002f76:	2b06      	cmp	r3, #6
 8002f78:	d902      	bls.n	8002f80 <NVIC_EncodePriority+0x30>
 8002f7a:	69fb      	ldr	r3, [r7, #28]
 8002f7c:	3b03      	subs	r3, #3
 8002f7e:	e000      	b.n	8002f82 <NVIC_EncodePriority+0x32>
 8002f80:	2300      	movs	r3, #0
 8002f82:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f84:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002f88:	69bb      	ldr	r3, [r7, #24]
 8002f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f8e:	43da      	mvns	r2, r3
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	401a      	ands	r2, r3
 8002f94:	697b      	ldr	r3, [r7, #20]
 8002f96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f98:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	fa01 f303 	lsl.w	r3, r1, r3
 8002fa2:	43d9      	mvns	r1, r3
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fa8:	4313      	orrs	r3, r2
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	3724      	adds	r7, #36	; 0x24
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bc80      	pop	{r7}
 8002fb2:	4770      	bx	lr

08002fb4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b082      	sub	sp, #8
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	3b01      	subs	r3, #1
 8002fc0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002fc4:	d301      	bcc.n	8002fca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e00f      	b.n	8002fea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002fca:	4a0a      	ldr	r2, [pc, #40]	; (8002ff4 <SysTick_Config+0x40>)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	3b01      	subs	r3, #1
 8002fd0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002fd2:	210f      	movs	r1, #15
 8002fd4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002fd8:	f7ff ff90 	bl	8002efc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002fdc:	4b05      	ldr	r3, [pc, #20]	; (8002ff4 <SysTick_Config+0x40>)
 8002fde:	2200      	movs	r2, #0
 8002fe0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002fe2:	4b04      	ldr	r3, [pc, #16]	; (8002ff4 <SysTick_Config+0x40>)
 8002fe4:	2207      	movs	r2, #7
 8002fe6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002fe8:	2300      	movs	r3, #0
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	3708      	adds	r7, #8
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}
 8002ff2:	bf00      	nop
 8002ff4:	e000e010 	.word	0xe000e010

08002ff8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b082      	sub	sp, #8
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003000:	6878      	ldr	r0, [r7, #4]
 8003002:	f7ff ff2d 	bl	8002e60 <__NVIC_SetPriorityGrouping>
}
 8003006:	bf00      	nop
 8003008:	3708      	adds	r7, #8
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}

0800300e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800300e:	b580      	push	{r7, lr}
 8003010:	b086      	sub	sp, #24
 8003012:	af00      	add	r7, sp, #0
 8003014:	4603      	mov	r3, r0
 8003016:	60b9      	str	r1, [r7, #8]
 8003018:	607a      	str	r2, [r7, #4]
 800301a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800301c:	2300      	movs	r3, #0
 800301e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003020:	f7ff ff42 	bl	8002ea8 <__NVIC_GetPriorityGrouping>
 8003024:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003026:	687a      	ldr	r2, [r7, #4]
 8003028:	68b9      	ldr	r1, [r7, #8]
 800302a:	6978      	ldr	r0, [r7, #20]
 800302c:	f7ff ff90 	bl	8002f50 <NVIC_EncodePriority>
 8003030:	4602      	mov	r2, r0
 8003032:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003036:	4611      	mov	r1, r2
 8003038:	4618      	mov	r0, r3
 800303a:	f7ff ff5f 	bl	8002efc <__NVIC_SetPriority>
}
 800303e:	bf00      	nop
 8003040:	3718      	adds	r7, #24
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}

08003046 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003046:	b580      	push	{r7, lr}
 8003048:	b082      	sub	sp, #8
 800304a:	af00      	add	r7, sp, #0
 800304c:	4603      	mov	r3, r0
 800304e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003050:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003054:	4618      	mov	r0, r3
 8003056:	f7ff ff35 	bl	8002ec4 <__NVIC_EnableIRQ>
}
 800305a:	bf00      	nop
 800305c:	3708      	adds	r7, #8
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}

08003062 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003062:	b580      	push	{r7, lr}
 8003064:	b082      	sub	sp, #8
 8003066:	af00      	add	r7, sp, #0
 8003068:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800306a:	6878      	ldr	r0, [r7, #4]
 800306c:	f7ff ffa2 	bl	8002fb4 <SysTick_Config>
 8003070:	4603      	mov	r3, r0
}
 8003072:	4618      	mov	r0, r3
 8003074:	3708      	adds	r7, #8
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}
	...

0800307c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800307c:	b580      	push	{r7, lr}
 800307e:	b084      	sub	sp, #16
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003084:	2300      	movs	r3, #0
 8003086:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800308e:	2b02      	cmp	r3, #2
 8003090:	d005      	beq.n	800309e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2204      	movs	r2, #4
 8003096:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003098:	2301      	movs	r3, #1
 800309a:	73fb      	strb	r3, [r7, #15]
 800309c:	e051      	b.n	8003142 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	681a      	ldr	r2, [r3, #0]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f022 020e 	bic.w	r2, r2, #14
 80030ac:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f022 0201 	bic.w	r2, r2, #1
 80030bc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a22      	ldr	r2, [pc, #136]	; (800314c <HAL_DMA_Abort_IT+0xd0>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d029      	beq.n	800311c <HAL_DMA_Abort_IT+0xa0>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a20      	ldr	r2, [pc, #128]	; (8003150 <HAL_DMA_Abort_IT+0xd4>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d022      	beq.n	8003118 <HAL_DMA_Abort_IT+0x9c>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a1f      	ldr	r2, [pc, #124]	; (8003154 <HAL_DMA_Abort_IT+0xd8>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d01a      	beq.n	8003112 <HAL_DMA_Abort_IT+0x96>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a1d      	ldr	r2, [pc, #116]	; (8003158 <HAL_DMA_Abort_IT+0xdc>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d012      	beq.n	800310c <HAL_DMA_Abort_IT+0x90>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a1c      	ldr	r2, [pc, #112]	; (800315c <HAL_DMA_Abort_IT+0xe0>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d00a      	beq.n	8003106 <HAL_DMA_Abort_IT+0x8a>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a1a      	ldr	r2, [pc, #104]	; (8003160 <HAL_DMA_Abort_IT+0xe4>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d102      	bne.n	8003100 <HAL_DMA_Abort_IT+0x84>
 80030fa:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80030fe:	e00e      	b.n	800311e <HAL_DMA_Abort_IT+0xa2>
 8003100:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003104:	e00b      	b.n	800311e <HAL_DMA_Abort_IT+0xa2>
 8003106:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800310a:	e008      	b.n	800311e <HAL_DMA_Abort_IT+0xa2>
 800310c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003110:	e005      	b.n	800311e <HAL_DMA_Abort_IT+0xa2>
 8003112:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003116:	e002      	b.n	800311e <HAL_DMA_Abort_IT+0xa2>
 8003118:	2310      	movs	r3, #16
 800311a:	e000      	b.n	800311e <HAL_DMA_Abort_IT+0xa2>
 800311c:	2301      	movs	r3, #1
 800311e:	4a11      	ldr	r2, [pc, #68]	; (8003164 <HAL_DMA_Abort_IT+0xe8>)
 8003120:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2201      	movs	r2, #1
 8003126:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2200      	movs	r2, #0
 800312e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003136:	2b00      	cmp	r3, #0
 8003138:	d003      	beq.n	8003142 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800313e:	6878      	ldr	r0, [r7, #4]
 8003140:	4798      	blx	r3
    } 
  }
  return status;
 8003142:	7bfb      	ldrb	r3, [r7, #15]
}
 8003144:	4618      	mov	r0, r3
 8003146:	3710      	adds	r7, #16
 8003148:	46bd      	mov	sp, r7
 800314a:	bd80      	pop	{r7, pc}
 800314c:	40020008 	.word	0x40020008
 8003150:	4002001c 	.word	0x4002001c
 8003154:	40020030 	.word	0x40020030
 8003158:	40020044 	.word	0x40020044
 800315c:	40020058 	.word	0x40020058
 8003160:	4002006c 	.word	0x4002006c
 8003164:	40020000 	.word	0x40020000

08003168 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003168:	b480      	push	{r7}
 800316a:	b08b      	sub	sp, #44	; 0x2c
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
 8003170:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003172:	2300      	movs	r3, #0
 8003174:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003176:	2300      	movs	r3, #0
 8003178:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800317a:	e169      	b.n	8003450 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800317c:	2201      	movs	r2, #1
 800317e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003180:	fa02 f303 	lsl.w	r3, r2, r3
 8003184:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	69fa      	ldr	r2, [r7, #28]
 800318c:	4013      	ands	r3, r2
 800318e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003190:	69ba      	ldr	r2, [r7, #24]
 8003192:	69fb      	ldr	r3, [r7, #28]
 8003194:	429a      	cmp	r2, r3
 8003196:	f040 8158 	bne.w	800344a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	4a9a      	ldr	r2, [pc, #616]	; (8003408 <HAL_GPIO_Init+0x2a0>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d05e      	beq.n	8003262 <HAL_GPIO_Init+0xfa>
 80031a4:	4a98      	ldr	r2, [pc, #608]	; (8003408 <HAL_GPIO_Init+0x2a0>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d875      	bhi.n	8003296 <HAL_GPIO_Init+0x12e>
 80031aa:	4a98      	ldr	r2, [pc, #608]	; (800340c <HAL_GPIO_Init+0x2a4>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d058      	beq.n	8003262 <HAL_GPIO_Init+0xfa>
 80031b0:	4a96      	ldr	r2, [pc, #600]	; (800340c <HAL_GPIO_Init+0x2a4>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d86f      	bhi.n	8003296 <HAL_GPIO_Init+0x12e>
 80031b6:	4a96      	ldr	r2, [pc, #600]	; (8003410 <HAL_GPIO_Init+0x2a8>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d052      	beq.n	8003262 <HAL_GPIO_Init+0xfa>
 80031bc:	4a94      	ldr	r2, [pc, #592]	; (8003410 <HAL_GPIO_Init+0x2a8>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d869      	bhi.n	8003296 <HAL_GPIO_Init+0x12e>
 80031c2:	4a94      	ldr	r2, [pc, #592]	; (8003414 <HAL_GPIO_Init+0x2ac>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d04c      	beq.n	8003262 <HAL_GPIO_Init+0xfa>
 80031c8:	4a92      	ldr	r2, [pc, #584]	; (8003414 <HAL_GPIO_Init+0x2ac>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d863      	bhi.n	8003296 <HAL_GPIO_Init+0x12e>
 80031ce:	4a92      	ldr	r2, [pc, #584]	; (8003418 <HAL_GPIO_Init+0x2b0>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d046      	beq.n	8003262 <HAL_GPIO_Init+0xfa>
 80031d4:	4a90      	ldr	r2, [pc, #576]	; (8003418 <HAL_GPIO_Init+0x2b0>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d85d      	bhi.n	8003296 <HAL_GPIO_Init+0x12e>
 80031da:	2b12      	cmp	r3, #18
 80031dc:	d82a      	bhi.n	8003234 <HAL_GPIO_Init+0xcc>
 80031de:	2b12      	cmp	r3, #18
 80031e0:	d859      	bhi.n	8003296 <HAL_GPIO_Init+0x12e>
 80031e2:	a201      	add	r2, pc, #4	; (adr r2, 80031e8 <HAL_GPIO_Init+0x80>)
 80031e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031e8:	08003263 	.word	0x08003263
 80031ec:	0800323d 	.word	0x0800323d
 80031f0:	0800324f 	.word	0x0800324f
 80031f4:	08003291 	.word	0x08003291
 80031f8:	08003297 	.word	0x08003297
 80031fc:	08003297 	.word	0x08003297
 8003200:	08003297 	.word	0x08003297
 8003204:	08003297 	.word	0x08003297
 8003208:	08003297 	.word	0x08003297
 800320c:	08003297 	.word	0x08003297
 8003210:	08003297 	.word	0x08003297
 8003214:	08003297 	.word	0x08003297
 8003218:	08003297 	.word	0x08003297
 800321c:	08003297 	.word	0x08003297
 8003220:	08003297 	.word	0x08003297
 8003224:	08003297 	.word	0x08003297
 8003228:	08003297 	.word	0x08003297
 800322c:	08003245 	.word	0x08003245
 8003230:	08003259 	.word	0x08003259
 8003234:	4a79      	ldr	r2, [pc, #484]	; (800341c <HAL_GPIO_Init+0x2b4>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d013      	beq.n	8003262 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800323a:	e02c      	b.n	8003296 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	68db      	ldr	r3, [r3, #12]
 8003240:	623b      	str	r3, [r7, #32]
          break;
 8003242:	e029      	b.n	8003298 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	68db      	ldr	r3, [r3, #12]
 8003248:	3304      	adds	r3, #4
 800324a:	623b      	str	r3, [r7, #32]
          break;
 800324c:	e024      	b.n	8003298 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	68db      	ldr	r3, [r3, #12]
 8003252:	3308      	adds	r3, #8
 8003254:	623b      	str	r3, [r7, #32]
          break;
 8003256:	e01f      	b.n	8003298 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	68db      	ldr	r3, [r3, #12]
 800325c:	330c      	adds	r3, #12
 800325e:	623b      	str	r3, [r7, #32]
          break;
 8003260:	e01a      	b.n	8003298 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	689b      	ldr	r3, [r3, #8]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d102      	bne.n	8003270 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800326a:	2304      	movs	r3, #4
 800326c:	623b      	str	r3, [r7, #32]
          break;
 800326e:	e013      	b.n	8003298 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	689b      	ldr	r3, [r3, #8]
 8003274:	2b01      	cmp	r3, #1
 8003276:	d105      	bne.n	8003284 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003278:	2308      	movs	r3, #8
 800327a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	69fa      	ldr	r2, [r7, #28]
 8003280:	611a      	str	r2, [r3, #16]
          break;
 8003282:	e009      	b.n	8003298 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003284:	2308      	movs	r3, #8
 8003286:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	69fa      	ldr	r2, [r7, #28]
 800328c:	615a      	str	r2, [r3, #20]
          break;
 800328e:	e003      	b.n	8003298 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003290:	2300      	movs	r3, #0
 8003292:	623b      	str	r3, [r7, #32]
          break;
 8003294:	e000      	b.n	8003298 <HAL_GPIO_Init+0x130>
          break;
 8003296:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003298:	69bb      	ldr	r3, [r7, #24]
 800329a:	2bff      	cmp	r3, #255	; 0xff
 800329c:	d801      	bhi.n	80032a2 <HAL_GPIO_Init+0x13a>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	e001      	b.n	80032a6 <HAL_GPIO_Init+0x13e>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	3304      	adds	r3, #4
 80032a6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80032a8:	69bb      	ldr	r3, [r7, #24]
 80032aa:	2bff      	cmp	r3, #255	; 0xff
 80032ac:	d802      	bhi.n	80032b4 <HAL_GPIO_Init+0x14c>
 80032ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b0:	009b      	lsls	r3, r3, #2
 80032b2:	e002      	b.n	80032ba <HAL_GPIO_Init+0x152>
 80032b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b6:	3b08      	subs	r3, #8
 80032b8:	009b      	lsls	r3, r3, #2
 80032ba:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	681a      	ldr	r2, [r3, #0]
 80032c0:	210f      	movs	r1, #15
 80032c2:	693b      	ldr	r3, [r7, #16]
 80032c4:	fa01 f303 	lsl.w	r3, r1, r3
 80032c8:	43db      	mvns	r3, r3
 80032ca:	401a      	ands	r2, r3
 80032cc:	6a39      	ldr	r1, [r7, #32]
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	fa01 f303 	lsl.w	r3, r1, r3
 80032d4:	431a      	orrs	r2, r3
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	f000 80b1 	beq.w	800344a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80032e8:	4b4d      	ldr	r3, [pc, #308]	; (8003420 <HAL_GPIO_Init+0x2b8>)
 80032ea:	699b      	ldr	r3, [r3, #24]
 80032ec:	4a4c      	ldr	r2, [pc, #304]	; (8003420 <HAL_GPIO_Init+0x2b8>)
 80032ee:	f043 0301 	orr.w	r3, r3, #1
 80032f2:	6193      	str	r3, [r2, #24]
 80032f4:	4b4a      	ldr	r3, [pc, #296]	; (8003420 <HAL_GPIO_Init+0x2b8>)
 80032f6:	699b      	ldr	r3, [r3, #24]
 80032f8:	f003 0301 	and.w	r3, r3, #1
 80032fc:	60bb      	str	r3, [r7, #8]
 80032fe:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003300:	4a48      	ldr	r2, [pc, #288]	; (8003424 <HAL_GPIO_Init+0x2bc>)
 8003302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003304:	089b      	lsrs	r3, r3, #2
 8003306:	3302      	adds	r3, #2
 8003308:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800330c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800330e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003310:	f003 0303 	and.w	r3, r3, #3
 8003314:	009b      	lsls	r3, r3, #2
 8003316:	220f      	movs	r2, #15
 8003318:	fa02 f303 	lsl.w	r3, r2, r3
 800331c:	43db      	mvns	r3, r3
 800331e:	68fa      	ldr	r2, [r7, #12]
 8003320:	4013      	ands	r3, r2
 8003322:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	4a40      	ldr	r2, [pc, #256]	; (8003428 <HAL_GPIO_Init+0x2c0>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d013      	beq.n	8003354 <HAL_GPIO_Init+0x1ec>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	4a3f      	ldr	r2, [pc, #252]	; (800342c <HAL_GPIO_Init+0x2c4>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d00d      	beq.n	8003350 <HAL_GPIO_Init+0x1e8>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	4a3e      	ldr	r2, [pc, #248]	; (8003430 <HAL_GPIO_Init+0x2c8>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d007      	beq.n	800334c <HAL_GPIO_Init+0x1e4>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	4a3d      	ldr	r2, [pc, #244]	; (8003434 <HAL_GPIO_Init+0x2cc>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d101      	bne.n	8003348 <HAL_GPIO_Init+0x1e0>
 8003344:	2303      	movs	r3, #3
 8003346:	e006      	b.n	8003356 <HAL_GPIO_Init+0x1ee>
 8003348:	2304      	movs	r3, #4
 800334a:	e004      	b.n	8003356 <HAL_GPIO_Init+0x1ee>
 800334c:	2302      	movs	r3, #2
 800334e:	e002      	b.n	8003356 <HAL_GPIO_Init+0x1ee>
 8003350:	2301      	movs	r3, #1
 8003352:	e000      	b.n	8003356 <HAL_GPIO_Init+0x1ee>
 8003354:	2300      	movs	r3, #0
 8003356:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003358:	f002 0203 	and.w	r2, r2, #3
 800335c:	0092      	lsls	r2, r2, #2
 800335e:	4093      	lsls	r3, r2
 8003360:	68fa      	ldr	r2, [r7, #12]
 8003362:	4313      	orrs	r3, r2
 8003364:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003366:	492f      	ldr	r1, [pc, #188]	; (8003424 <HAL_GPIO_Init+0x2bc>)
 8003368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800336a:	089b      	lsrs	r3, r3, #2
 800336c:	3302      	adds	r3, #2
 800336e:	68fa      	ldr	r2, [r7, #12]
 8003370:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800337c:	2b00      	cmp	r3, #0
 800337e:	d006      	beq.n	800338e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003380:	4b2d      	ldr	r3, [pc, #180]	; (8003438 <HAL_GPIO_Init+0x2d0>)
 8003382:	681a      	ldr	r2, [r3, #0]
 8003384:	492c      	ldr	r1, [pc, #176]	; (8003438 <HAL_GPIO_Init+0x2d0>)
 8003386:	69bb      	ldr	r3, [r7, #24]
 8003388:	4313      	orrs	r3, r2
 800338a:	600b      	str	r3, [r1, #0]
 800338c:	e006      	b.n	800339c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800338e:	4b2a      	ldr	r3, [pc, #168]	; (8003438 <HAL_GPIO_Init+0x2d0>)
 8003390:	681a      	ldr	r2, [r3, #0]
 8003392:	69bb      	ldr	r3, [r7, #24]
 8003394:	43db      	mvns	r3, r3
 8003396:	4928      	ldr	r1, [pc, #160]	; (8003438 <HAL_GPIO_Init+0x2d0>)
 8003398:	4013      	ands	r3, r2
 800339a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d006      	beq.n	80033b6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80033a8:	4b23      	ldr	r3, [pc, #140]	; (8003438 <HAL_GPIO_Init+0x2d0>)
 80033aa:	685a      	ldr	r2, [r3, #4]
 80033ac:	4922      	ldr	r1, [pc, #136]	; (8003438 <HAL_GPIO_Init+0x2d0>)
 80033ae:	69bb      	ldr	r3, [r7, #24]
 80033b0:	4313      	orrs	r3, r2
 80033b2:	604b      	str	r3, [r1, #4]
 80033b4:	e006      	b.n	80033c4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80033b6:	4b20      	ldr	r3, [pc, #128]	; (8003438 <HAL_GPIO_Init+0x2d0>)
 80033b8:	685a      	ldr	r2, [r3, #4]
 80033ba:	69bb      	ldr	r3, [r7, #24]
 80033bc:	43db      	mvns	r3, r3
 80033be:	491e      	ldr	r1, [pc, #120]	; (8003438 <HAL_GPIO_Init+0x2d0>)
 80033c0:	4013      	ands	r3, r2
 80033c2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d006      	beq.n	80033de <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80033d0:	4b19      	ldr	r3, [pc, #100]	; (8003438 <HAL_GPIO_Init+0x2d0>)
 80033d2:	689a      	ldr	r2, [r3, #8]
 80033d4:	4918      	ldr	r1, [pc, #96]	; (8003438 <HAL_GPIO_Init+0x2d0>)
 80033d6:	69bb      	ldr	r3, [r7, #24]
 80033d8:	4313      	orrs	r3, r2
 80033da:	608b      	str	r3, [r1, #8]
 80033dc:	e006      	b.n	80033ec <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80033de:	4b16      	ldr	r3, [pc, #88]	; (8003438 <HAL_GPIO_Init+0x2d0>)
 80033e0:	689a      	ldr	r2, [r3, #8]
 80033e2:	69bb      	ldr	r3, [r7, #24]
 80033e4:	43db      	mvns	r3, r3
 80033e6:	4914      	ldr	r1, [pc, #80]	; (8003438 <HAL_GPIO_Init+0x2d0>)
 80033e8:	4013      	ands	r3, r2
 80033ea:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d021      	beq.n	800343c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80033f8:	4b0f      	ldr	r3, [pc, #60]	; (8003438 <HAL_GPIO_Init+0x2d0>)
 80033fa:	68da      	ldr	r2, [r3, #12]
 80033fc:	490e      	ldr	r1, [pc, #56]	; (8003438 <HAL_GPIO_Init+0x2d0>)
 80033fe:	69bb      	ldr	r3, [r7, #24]
 8003400:	4313      	orrs	r3, r2
 8003402:	60cb      	str	r3, [r1, #12]
 8003404:	e021      	b.n	800344a <HAL_GPIO_Init+0x2e2>
 8003406:	bf00      	nop
 8003408:	10320000 	.word	0x10320000
 800340c:	10310000 	.word	0x10310000
 8003410:	10220000 	.word	0x10220000
 8003414:	10210000 	.word	0x10210000
 8003418:	10120000 	.word	0x10120000
 800341c:	10110000 	.word	0x10110000
 8003420:	40021000 	.word	0x40021000
 8003424:	40010000 	.word	0x40010000
 8003428:	40010800 	.word	0x40010800
 800342c:	40010c00 	.word	0x40010c00
 8003430:	40011000 	.word	0x40011000
 8003434:	40011400 	.word	0x40011400
 8003438:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800343c:	4b0b      	ldr	r3, [pc, #44]	; (800346c <HAL_GPIO_Init+0x304>)
 800343e:	68da      	ldr	r2, [r3, #12]
 8003440:	69bb      	ldr	r3, [r7, #24]
 8003442:	43db      	mvns	r3, r3
 8003444:	4909      	ldr	r1, [pc, #36]	; (800346c <HAL_GPIO_Init+0x304>)
 8003446:	4013      	ands	r3, r2
 8003448:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800344a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800344c:	3301      	adds	r3, #1
 800344e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	681a      	ldr	r2, [r3, #0]
 8003454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003456:	fa22 f303 	lsr.w	r3, r2, r3
 800345a:	2b00      	cmp	r3, #0
 800345c:	f47f ae8e 	bne.w	800317c <HAL_GPIO_Init+0x14>
  }
}
 8003460:	bf00      	nop
 8003462:	bf00      	nop
 8003464:	372c      	adds	r7, #44	; 0x2c
 8003466:	46bd      	mov	sp, r7
 8003468:	bc80      	pop	{r7}
 800346a:	4770      	bx	lr
 800346c:	40010400 	.word	0x40010400

08003470 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003470:	b480      	push	{r7}
 8003472:	b083      	sub	sp, #12
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
 8003478:	460b      	mov	r3, r1
 800347a:	807b      	strh	r3, [r7, #2]
 800347c:	4613      	mov	r3, r2
 800347e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003480:	787b      	ldrb	r3, [r7, #1]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d003      	beq.n	800348e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003486:	887a      	ldrh	r2, [r7, #2]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800348c:	e003      	b.n	8003496 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800348e:	887b      	ldrh	r3, [r7, #2]
 8003490:	041a      	lsls	r2, r3, #16
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	611a      	str	r2, [r3, #16]
}
 8003496:	bf00      	nop
 8003498:	370c      	adds	r7, #12
 800349a:	46bd      	mov	sp, r7
 800349c:	bc80      	pop	{r7}
 800349e:	4770      	bx	lr

080034a0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b082      	sub	sp, #8
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	4603      	mov	r3, r0
 80034a8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80034aa:	4b08      	ldr	r3, [pc, #32]	; (80034cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80034ac:	695a      	ldr	r2, [r3, #20]
 80034ae:	88fb      	ldrh	r3, [r7, #6]
 80034b0:	4013      	ands	r3, r2
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d006      	beq.n	80034c4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80034b6:	4a05      	ldr	r2, [pc, #20]	; (80034cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80034b8:	88fb      	ldrh	r3, [r7, #6]
 80034ba:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80034bc:	88fb      	ldrh	r3, [r7, #6]
 80034be:	4618      	mov	r0, r3
 80034c0:	f7ff f880 	bl	80025c4 <HAL_GPIO_EXTI_Callback>
  }
}
 80034c4:	bf00      	nop
 80034c6:	3708      	adds	r7, #8
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bd80      	pop	{r7, pc}
 80034cc:	40010400 	.word	0x40010400

080034d0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b084      	sub	sp, #16
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d101      	bne.n	80034e2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	e12b      	b.n	800373a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034e8:	b2db      	uxtb	r3, r3
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d106      	bne.n	80034fc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2200      	movs	r2, #0
 80034f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	f7ff fab0 	bl	8002a5c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2224      	movs	r2, #36	; 0x24
 8003500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	681a      	ldr	r2, [r3, #0]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f022 0201 	bic.w	r2, r2, #1
 8003512:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	681a      	ldr	r2, [r3, #0]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003522:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003532:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003534:	f002 fce2 	bl	8005efc <HAL_RCC_GetPCLK1Freq>
 8003538:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	4a81      	ldr	r2, [pc, #516]	; (8003744 <HAL_I2C_Init+0x274>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d807      	bhi.n	8003554 <HAL_I2C_Init+0x84>
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	4a80      	ldr	r2, [pc, #512]	; (8003748 <HAL_I2C_Init+0x278>)
 8003548:	4293      	cmp	r3, r2
 800354a:	bf94      	ite	ls
 800354c:	2301      	movls	r3, #1
 800354e:	2300      	movhi	r3, #0
 8003550:	b2db      	uxtb	r3, r3
 8003552:	e006      	b.n	8003562 <HAL_I2C_Init+0x92>
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	4a7d      	ldr	r2, [pc, #500]	; (800374c <HAL_I2C_Init+0x27c>)
 8003558:	4293      	cmp	r3, r2
 800355a:	bf94      	ite	ls
 800355c:	2301      	movls	r3, #1
 800355e:	2300      	movhi	r3, #0
 8003560:	b2db      	uxtb	r3, r3
 8003562:	2b00      	cmp	r3, #0
 8003564:	d001      	beq.n	800356a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	e0e7      	b.n	800373a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	4a78      	ldr	r2, [pc, #480]	; (8003750 <HAL_I2C_Init+0x280>)
 800356e:	fba2 2303 	umull	r2, r3, r2, r3
 8003572:	0c9b      	lsrs	r3, r3, #18
 8003574:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	68ba      	ldr	r2, [r7, #8]
 8003586:	430a      	orrs	r2, r1
 8003588:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	6a1b      	ldr	r3, [r3, #32]
 8003590:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	4a6a      	ldr	r2, [pc, #424]	; (8003744 <HAL_I2C_Init+0x274>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d802      	bhi.n	80035a4 <HAL_I2C_Init+0xd4>
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	3301      	adds	r3, #1
 80035a2:	e009      	b.n	80035b8 <HAL_I2C_Init+0xe8>
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80035aa:	fb02 f303 	mul.w	r3, r2, r3
 80035ae:	4a69      	ldr	r2, [pc, #420]	; (8003754 <HAL_I2C_Init+0x284>)
 80035b0:	fba2 2303 	umull	r2, r3, r2, r3
 80035b4:	099b      	lsrs	r3, r3, #6
 80035b6:	3301      	adds	r3, #1
 80035b8:	687a      	ldr	r2, [r7, #4]
 80035ba:	6812      	ldr	r2, [r2, #0]
 80035bc:	430b      	orrs	r3, r1
 80035be:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	69db      	ldr	r3, [r3, #28]
 80035c6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80035ca:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	495c      	ldr	r1, [pc, #368]	; (8003744 <HAL_I2C_Init+0x274>)
 80035d4:	428b      	cmp	r3, r1
 80035d6:	d819      	bhi.n	800360c <HAL_I2C_Init+0x13c>
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	1e59      	subs	r1, r3, #1
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	005b      	lsls	r3, r3, #1
 80035e2:	fbb1 f3f3 	udiv	r3, r1, r3
 80035e6:	1c59      	adds	r1, r3, #1
 80035e8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80035ec:	400b      	ands	r3, r1
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d00a      	beq.n	8003608 <HAL_I2C_Init+0x138>
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	1e59      	subs	r1, r3, #1
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	005b      	lsls	r3, r3, #1
 80035fc:	fbb1 f3f3 	udiv	r3, r1, r3
 8003600:	3301      	adds	r3, #1
 8003602:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003606:	e051      	b.n	80036ac <HAL_I2C_Init+0x1dc>
 8003608:	2304      	movs	r3, #4
 800360a:	e04f      	b.n	80036ac <HAL_I2C_Init+0x1dc>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d111      	bne.n	8003638 <HAL_I2C_Init+0x168>
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	1e58      	subs	r0, r3, #1
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6859      	ldr	r1, [r3, #4]
 800361c:	460b      	mov	r3, r1
 800361e:	005b      	lsls	r3, r3, #1
 8003620:	440b      	add	r3, r1
 8003622:	fbb0 f3f3 	udiv	r3, r0, r3
 8003626:	3301      	adds	r3, #1
 8003628:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800362c:	2b00      	cmp	r3, #0
 800362e:	bf0c      	ite	eq
 8003630:	2301      	moveq	r3, #1
 8003632:	2300      	movne	r3, #0
 8003634:	b2db      	uxtb	r3, r3
 8003636:	e012      	b.n	800365e <HAL_I2C_Init+0x18e>
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	1e58      	subs	r0, r3, #1
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6859      	ldr	r1, [r3, #4]
 8003640:	460b      	mov	r3, r1
 8003642:	009b      	lsls	r3, r3, #2
 8003644:	440b      	add	r3, r1
 8003646:	0099      	lsls	r1, r3, #2
 8003648:	440b      	add	r3, r1
 800364a:	fbb0 f3f3 	udiv	r3, r0, r3
 800364e:	3301      	adds	r3, #1
 8003650:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003654:	2b00      	cmp	r3, #0
 8003656:	bf0c      	ite	eq
 8003658:	2301      	moveq	r3, #1
 800365a:	2300      	movne	r3, #0
 800365c:	b2db      	uxtb	r3, r3
 800365e:	2b00      	cmp	r3, #0
 8003660:	d001      	beq.n	8003666 <HAL_I2C_Init+0x196>
 8003662:	2301      	movs	r3, #1
 8003664:	e022      	b.n	80036ac <HAL_I2C_Init+0x1dc>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	689b      	ldr	r3, [r3, #8]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d10e      	bne.n	800368c <HAL_I2C_Init+0x1bc>
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	1e58      	subs	r0, r3, #1
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6859      	ldr	r1, [r3, #4]
 8003676:	460b      	mov	r3, r1
 8003678:	005b      	lsls	r3, r3, #1
 800367a:	440b      	add	r3, r1
 800367c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003680:	3301      	adds	r3, #1
 8003682:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003686:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800368a:	e00f      	b.n	80036ac <HAL_I2C_Init+0x1dc>
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	1e58      	subs	r0, r3, #1
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6859      	ldr	r1, [r3, #4]
 8003694:	460b      	mov	r3, r1
 8003696:	009b      	lsls	r3, r3, #2
 8003698:	440b      	add	r3, r1
 800369a:	0099      	lsls	r1, r3, #2
 800369c:	440b      	add	r3, r1
 800369e:	fbb0 f3f3 	udiv	r3, r0, r3
 80036a2:	3301      	adds	r3, #1
 80036a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036a8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80036ac:	6879      	ldr	r1, [r7, #4]
 80036ae:	6809      	ldr	r1, [r1, #0]
 80036b0:	4313      	orrs	r3, r2
 80036b2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	69da      	ldr	r2, [r3, #28]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6a1b      	ldr	r3, [r3, #32]
 80036c6:	431a      	orrs	r2, r3
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	430a      	orrs	r2, r1
 80036ce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	689b      	ldr	r3, [r3, #8]
 80036d6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80036da:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80036de:	687a      	ldr	r2, [r7, #4]
 80036e0:	6911      	ldr	r1, [r2, #16]
 80036e2:	687a      	ldr	r2, [r7, #4]
 80036e4:	68d2      	ldr	r2, [r2, #12]
 80036e6:	4311      	orrs	r1, r2
 80036e8:	687a      	ldr	r2, [r7, #4]
 80036ea:	6812      	ldr	r2, [r2, #0]
 80036ec:	430b      	orrs	r3, r1
 80036ee:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	68db      	ldr	r3, [r3, #12]
 80036f6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	695a      	ldr	r2, [r3, #20]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	699b      	ldr	r3, [r3, #24]
 8003702:	431a      	orrs	r2, r3
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	430a      	orrs	r2, r1
 800370a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	681a      	ldr	r2, [r3, #0]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f042 0201 	orr.w	r2, r2, #1
 800371a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2200      	movs	r2, #0
 8003720:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2220      	movs	r2, #32
 8003726:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2200      	movs	r2, #0
 800372e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2200      	movs	r2, #0
 8003734:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003738:	2300      	movs	r3, #0
}
 800373a:	4618      	mov	r0, r3
 800373c:	3710      	adds	r7, #16
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}
 8003742:	bf00      	nop
 8003744:	000186a0 	.word	0x000186a0
 8003748:	001e847f 	.word	0x001e847f
 800374c:	003d08ff 	.word	0x003d08ff
 8003750:	431bde83 	.word	0x431bde83
 8003754:	10624dd3 	.word	0x10624dd3

08003758 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b088      	sub	sp, #32
 800375c:	af02      	add	r7, sp, #8
 800375e:	60f8      	str	r0, [r7, #12]
 8003760:	607a      	str	r2, [r7, #4]
 8003762:	461a      	mov	r2, r3
 8003764:	460b      	mov	r3, r1
 8003766:	817b      	strh	r3, [r7, #10]
 8003768:	4613      	mov	r3, r2
 800376a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800376c:	f7ff fb4a 	bl	8002e04 <HAL_GetTick>
 8003770:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003778:	b2db      	uxtb	r3, r3
 800377a:	2b20      	cmp	r3, #32
 800377c:	f040 80e0 	bne.w	8003940 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003780:	697b      	ldr	r3, [r7, #20]
 8003782:	9300      	str	r3, [sp, #0]
 8003784:	2319      	movs	r3, #25
 8003786:	2201      	movs	r2, #1
 8003788:	4970      	ldr	r1, [pc, #448]	; (800394c <HAL_I2C_Master_Transmit+0x1f4>)
 800378a:	68f8      	ldr	r0, [r7, #12]
 800378c:	f001 fdb4 	bl	80052f8 <I2C_WaitOnFlagUntilTimeout>
 8003790:	4603      	mov	r3, r0
 8003792:	2b00      	cmp	r3, #0
 8003794:	d001      	beq.n	800379a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003796:	2302      	movs	r3, #2
 8003798:	e0d3      	b.n	8003942 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037a0:	2b01      	cmp	r3, #1
 80037a2:	d101      	bne.n	80037a8 <HAL_I2C_Master_Transmit+0x50>
 80037a4:	2302      	movs	r3, #2
 80037a6:	e0cc      	b.n	8003942 <HAL_I2C_Master_Transmit+0x1ea>
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	2201      	movs	r2, #1
 80037ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f003 0301 	and.w	r3, r3, #1
 80037ba:	2b01      	cmp	r3, #1
 80037bc:	d007      	beq.n	80037ce <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	681a      	ldr	r2, [r3, #0]
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f042 0201 	orr.w	r2, r2, #1
 80037cc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	681a      	ldr	r2, [r3, #0]
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80037dc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	2221      	movs	r2, #33	; 0x21
 80037e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	2210      	movs	r2, #16
 80037ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	2200      	movs	r2, #0
 80037f2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	687a      	ldr	r2, [r7, #4]
 80037f8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	893a      	ldrh	r2, [r7, #8]
 80037fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003804:	b29a      	uxth	r2, r3
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	4a50      	ldr	r2, [pc, #320]	; (8003950 <HAL_I2C_Master_Transmit+0x1f8>)
 800380e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003810:	8979      	ldrh	r1, [r7, #10]
 8003812:	697b      	ldr	r3, [r7, #20]
 8003814:	6a3a      	ldr	r2, [r7, #32]
 8003816:	68f8      	ldr	r0, [r7, #12]
 8003818:	f001 f9f8 	bl	8004c0c <I2C_MasterRequestWrite>
 800381c:	4603      	mov	r3, r0
 800381e:	2b00      	cmp	r3, #0
 8003820:	d001      	beq.n	8003826 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	e08d      	b.n	8003942 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003826:	2300      	movs	r3, #0
 8003828:	613b      	str	r3, [r7, #16]
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	695b      	ldr	r3, [r3, #20]
 8003830:	613b      	str	r3, [r7, #16]
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	699b      	ldr	r3, [r3, #24]
 8003838:	613b      	str	r3, [r7, #16]
 800383a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800383c:	e066      	b.n	800390c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800383e:	697a      	ldr	r2, [r7, #20]
 8003840:	6a39      	ldr	r1, [r7, #32]
 8003842:	68f8      	ldr	r0, [r7, #12]
 8003844:	f001 fe2e 	bl	80054a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003848:	4603      	mov	r3, r0
 800384a:	2b00      	cmp	r3, #0
 800384c:	d00d      	beq.n	800386a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003852:	2b04      	cmp	r3, #4
 8003854:	d107      	bne.n	8003866 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	681a      	ldr	r2, [r3, #0]
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003864:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003866:	2301      	movs	r3, #1
 8003868:	e06b      	b.n	8003942 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800386e:	781a      	ldrb	r2, [r3, #0]
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800387a:	1c5a      	adds	r2, r3, #1
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003884:	b29b      	uxth	r3, r3
 8003886:	3b01      	subs	r3, #1
 8003888:	b29a      	uxth	r2, r3
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003892:	3b01      	subs	r3, #1
 8003894:	b29a      	uxth	r2, r3
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	695b      	ldr	r3, [r3, #20]
 80038a0:	f003 0304 	and.w	r3, r3, #4
 80038a4:	2b04      	cmp	r3, #4
 80038a6:	d11b      	bne.n	80038e0 <HAL_I2C_Master_Transmit+0x188>
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d017      	beq.n	80038e0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b4:	781a      	ldrb	r2, [r3, #0]
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c0:	1c5a      	adds	r2, r3, #1
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038ca:	b29b      	uxth	r3, r3
 80038cc:	3b01      	subs	r3, #1
 80038ce:	b29a      	uxth	r2, r3
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038d8:	3b01      	subs	r3, #1
 80038da:	b29a      	uxth	r2, r3
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038e0:	697a      	ldr	r2, [r7, #20]
 80038e2:	6a39      	ldr	r1, [r7, #32]
 80038e4:	68f8      	ldr	r0, [r7, #12]
 80038e6:	f001 fe1e 	bl	8005526 <I2C_WaitOnBTFFlagUntilTimeout>
 80038ea:	4603      	mov	r3, r0
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d00d      	beq.n	800390c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f4:	2b04      	cmp	r3, #4
 80038f6:	d107      	bne.n	8003908 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	681a      	ldr	r2, [r3, #0]
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003906:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003908:	2301      	movs	r3, #1
 800390a:	e01a      	b.n	8003942 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003910:	2b00      	cmp	r3, #0
 8003912:	d194      	bne.n	800383e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	681a      	ldr	r2, [r3, #0]
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003922:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	2220      	movs	r2, #32
 8003928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	2200      	movs	r2, #0
 8003930:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	2200      	movs	r2, #0
 8003938:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800393c:	2300      	movs	r3, #0
 800393e:	e000      	b.n	8003942 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003940:	2302      	movs	r3, #2
  }
}
 8003942:	4618      	mov	r0, r3
 8003944:	3718      	adds	r7, #24
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}
 800394a:	bf00      	nop
 800394c:	00100002 	.word	0x00100002
 8003950:	ffff0000 	.word	0xffff0000

08003954 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b08c      	sub	sp, #48	; 0x30
 8003958:	af02      	add	r7, sp, #8
 800395a:	60f8      	str	r0, [r7, #12]
 800395c:	607a      	str	r2, [r7, #4]
 800395e:	461a      	mov	r2, r3
 8003960:	460b      	mov	r3, r1
 8003962:	817b      	strh	r3, [r7, #10]
 8003964:	4613      	mov	r3, r2
 8003966:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8003968:	2300      	movs	r3, #0
 800396a:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800396c:	f7ff fa4a 	bl	8002e04 <HAL_GetTick>
 8003970:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003978:	b2db      	uxtb	r3, r3
 800397a:	2b20      	cmp	r3, #32
 800397c:	f040 823f 	bne.w	8003dfe <HAL_I2C_Master_Receive+0x4aa>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003982:	9300      	str	r3, [sp, #0]
 8003984:	2319      	movs	r3, #25
 8003986:	2201      	movs	r2, #1
 8003988:	497f      	ldr	r1, [pc, #508]	; (8003b88 <HAL_I2C_Master_Receive+0x234>)
 800398a:	68f8      	ldr	r0, [r7, #12]
 800398c:	f001 fcb4 	bl	80052f8 <I2C_WaitOnFlagUntilTimeout>
 8003990:	4603      	mov	r3, r0
 8003992:	2b00      	cmp	r3, #0
 8003994:	d001      	beq.n	800399a <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8003996:	2302      	movs	r3, #2
 8003998:	e232      	b.n	8003e00 <HAL_I2C_Master_Receive+0x4ac>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039a0:	2b01      	cmp	r3, #1
 80039a2:	d101      	bne.n	80039a8 <HAL_I2C_Master_Receive+0x54>
 80039a4:	2302      	movs	r3, #2
 80039a6:	e22b      	b.n	8003e00 <HAL_I2C_Master_Receive+0x4ac>
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	2201      	movs	r2, #1
 80039ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f003 0301 	and.w	r3, r3, #1
 80039ba:	2b01      	cmp	r3, #1
 80039bc:	d007      	beq.n	80039ce <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	681a      	ldr	r2, [r3, #0]
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f042 0201 	orr.w	r2, r2, #1
 80039cc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	681a      	ldr	r2, [r3, #0]
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80039dc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	2222      	movs	r2, #34	; 0x22
 80039e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	2210      	movs	r2, #16
 80039ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	2200      	movs	r2, #0
 80039f2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	687a      	ldr	r2, [r7, #4]
 80039f8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	893a      	ldrh	r2, [r7, #8]
 80039fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a04:	b29a      	uxth	r2, r3
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	4a5f      	ldr	r2, [pc, #380]	; (8003b8c <HAL_I2C_Master_Receive+0x238>)
 8003a0e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003a10:	8979      	ldrh	r1, [r7, #10]
 8003a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a16:	68f8      	ldr	r0, [r7, #12]
 8003a18:	f001 f97a 	bl	8004d10 <I2C_MasterRequestRead>
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d001      	beq.n	8003a26 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8003a22:	2301      	movs	r3, #1
 8003a24:	e1ec      	b.n	8003e00 <HAL_I2C_Master_Receive+0x4ac>
    }

    if (hi2c->XferSize == 0U)
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d113      	bne.n	8003a56 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a2e:	2300      	movs	r3, #0
 8003a30:	61fb      	str	r3, [r7, #28]
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	695b      	ldr	r3, [r3, #20]
 8003a38:	61fb      	str	r3, [r7, #28]
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	699b      	ldr	r3, [r3, #24]
 8003a40:	61fb      	str	r3, [r7, #28]
 8003a42:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	681a      	ldr	r2, [r3, #0]
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a52:	601a      	str	r2, [r3, #0]
 8003a54:	e1c0      	b.n	8003dd8 <HAL_I2C_Master_Receive+0x484>
    }
    else if (hi2c->XferSize == 1U)
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a5a:	2b01      	cmp	r3, #1
 8003a5c:	d11e      	bne.n	8003a9c <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	681a      	ldr	r2, [r3, #0]
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a6c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003a6e:	b672      	cpsid	i
}
 8003a70:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a72:	2300      	movs	r3, #0
 8003a74:	61bb      	str	r3, [r7, #24]
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	695b      	ldr	r3, [r3, #20]
 8003a7c:	61bb      	str	r3, [r7, #24]
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	699b      	ldr	r3, [r3, #24]
 8003a84:	61bb      	str	r3, [r7, #24]
 8003a86:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	681a      	ldr	r2, [r3, #0]
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a96:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003a98:	b662      	cpsie	i
}
 8003a9a:	e035      	b.n	8003b08 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003aa0:	2b02      	cmp	r3, #2
 8003aa2:	d11e      	bne.n	8003ae2 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	681a      	ldr	r2, [r3, #0]
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ab2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003ab4:	b672      	cpsid	i
}
 8003ab6:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ab8:	2300      	movs	r3, #0
 8003aba:	617b      	str	r3, [r7, #20]
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	695b      	ldr	r3, [r3, #20]
 8003ac2:	617b      	str	r3, [r7, #20]
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	699b      	ldr	r3, [r3, #24]
 8003aca:	617b      	str	r3, [r7, #20]
 8003acc:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	681a      	ldr	r2, [r3, #0]
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003adc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003ade:	b662      	cpsie	i
}
 8003ae0:	e012      	b.n	8003b08 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	681a      	ldr	r2, [r3, #0]
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003af0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003af2:	2300      	movs	r3, #0
 8003af4:	613b      	str	r3, [r7, #16]
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	695b      	ldr	r3, [r3, #20]
 8003afc:	613b      	str	r3, [r7, #16]
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	699b      	ldr	r3, [r3, #24]
 8003b04:	613b      	str	r3, [r7, #16]
 8003b06:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003b08:	e166      	b.n	8003dd8 <HAL_I2C_Master_Receive+0x484>
    {
      if (hi2c->XferSize <= 3U)
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b0e:	2b03      	cmp	r3, #3
 8003b10:	f200 811f 	bhi.w	8003d52 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b18:	2b01      	cmp	r3, #1
 8003b1a:	d123      	bne.n	8003b64 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b1e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003b20:	68f8      	ldr	r0, [r7, #12]
 8003b22:	f001 fd41 	bl	80055a8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003b26:	4603      	mov	r3, r0
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d001      	beq.n	8003b30 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	e167      	b.n	8003e00 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	691a      	ldr	r2, [r3, #16]
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b3a:	b2d2      	uxtb	r2, r2
 8003b3c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b42:	1c5a      	adds	r2, r3, #1
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b4c:	3b01      	subs	r3, #1
 8003b4e:	b29a      	uxth	r2, r3
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b58:	b29b      	uxth	r3, r3
 8003b5a:	3b01      	subs	r3, #1
 8003b5c:	b29a      	uxth	r2, r3
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003b62:	e139      	b.n	8003dd8 <HAL_I2C_Master_Receive+0x484>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b68:	2b02      	cmp	r3, #2
 8003b6a:	d152      	bne.n	8003c12 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b6e:	9300      	str	r3, [sp, #0]
 8003b70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b72:	2200      	movs	r2, #0
 8003b74:	4906      	ldr	r1, [pc, #24]	; (8003b90 <HAL_I2C_Master_Receive+0x23c>)
 8003b76:	68f8      	ldr	r0, [r7, #12]
 8003b78:	f001 fbbe 	bl	80052f8 <I2C_WaitOnFlagUntilTimeout>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d008      	beq.n	8003b94 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	e13c      	b.n	8003e00 <HAL_I2C_Master_Receive+0x4ac>
 8003b86:	bf00      	nop
 8003b88:	00100002 	.word	0x00100002
 8003b8c:	ffff0000 	.word	0xffff0000
 8003b90:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003b94:	b672      	cpsid	i
}
 8003b96:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	681a      	ldr	r2, [r3, #0]
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ba6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	691a      	ldr	r2, [r3, #16]
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb2:	b2d2      	uxtb	r2, r2
 8003bb4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bba:	1c5a      	adds	r2, r3, #1
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bc4:	3b01      	subs	r3, #1
 8003bc6:	b29a      	uxth	r2, r3
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bd0:	b29b      	uxth	r3, r3
 8003bd2:	3b01      	subs	r3, #1
 8003bd4:	b29a      	uxth	r2, r3
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003bda:	b662      	cpsie	i
}
 8003bdc:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	691a      	ldr	r2, [r3, #16]
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be8:	b2d2      	uxtb	r2, r2
 8003bea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf0:	1c5a      	adds	r2, r3, #1
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bfa:	3b01      	subs	r3, #1
 8003bfc:	b29a      	uxth	r2, r3
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c06:	b29b      	uxth	r3, r3
 8003c08:	3b01      	subs	r3, #1
 8003c0a:	b29a      	uxth	r2, r3
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003c10:	e0e2      	b.n	8003dd8 <HAL_I2C_Master_Receive+0x484>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c14:	9300      	str	r3, [sp, #0]
 8003c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c18:	2200      	movs	r2, #0
 8003c1a:	497b      	ldr	r1, [pc, #492]	; (8003e08 <HAL_I2C_Master_Receive+0x4b4>)
 8003c1c:	68f8      	ldr	r0, [r7, #12]
 8003c1e:	f001 fb6b 	bl	80052f8 <I2C_WaitOnFlagUntilTimeout>
 8003c22:	4603      	mov	r3, r0
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d001      	beq.n	8003c2c <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	e0e9      	b.n	8003e00 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	681a      	ldr	r2, [r3, #0]
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c3a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003c3c:	b672      	cpsid	i
}
 8003c3e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	691a      	ldr	r2, [r3, #16]
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c4a:	b2d2      	uxtb	r2, r2
 8003c4c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c52:	1c5a      	adds	r2, r3, #1
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c5c:	3b01      	subs	r3, #1
 8003c5e:	b29a      	uxth	r2, r3
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c68:	b29b      	uxth	r3, r3
 8003c6a:	3b01      	subs	r3, #1
 8003c6c:	b29a      	uxth	r2, r3
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003c72:	4b66      	ldr	r3, [pc, #408]	; (8003e0c <HAL_I2C_Master_Receive+0x4b8>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	08db      	lsrs	r3, r3, #3
 8003c78:	4a65      	ldr	r2, [pc, #404]	; (8003e10 <HAL_I2C_Master_Receive+0x4bc>)
 8003c7a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c7e:	0a1a      	lsrs	r2, r3, #8
 8003c80:	4613      	mov	r3, r2
 8003c82:	009b      	lsls	r3, r3, #2
 8003c84:	4413      	add	r3, r2
 8003c86:	00da      	lsls	r2, r3, #3
 8003c88:	1ad3      	subs	r3, r2, r3
 8003c8a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003c8c:	6a3b      	ldr	r3, [r7, #32]
 8003c8e:	3b01      	subs	r3, #1
 8003c90:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003c92:	6a3b      	ldr	r3, [r7, #32]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d118      	bne.n	8003cca <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	2220      	movs	r2, #32
 8003ca2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb2:	f043 0220 	orr.w	r2, r3, #32
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003cba:	b662      	cpsie	i
}
 8003cbc:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	e09a      	b.n	8003e00 <HAL_I2C_Master_Receive+0x4ac>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	695b      	ldr	r3, [r3, #20]
 8003cd0:	f003 0304 	and.w	r3, r3, #4
 8003cd4:	2b04      	cmp	r3, #4
 8003cd6:	d1d9      	bne.n	8003c8c <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	681a      	ldr	r2, [r3, #0]
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ce6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	691a      	ldr	r2, [r3, #16]
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf2:	b2d2      	uxtb	r2, r2
 8003cf4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cfa:	1c5a      	adds	r2, r3, #1
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d04:	3b01      	subs	r3, #1
 8003d06:	b29a      	uxth	r2, r3
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d10:	b29b      	uxth	r3, r3
 8003d12:	3b01      	subs	r3, #1
 8003d14:	b29a      	uxth	r2, r3
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003d1a:	b662      	cpsie	i
}
 8003d1c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	691a      	ldr	r2, [r3, #16]
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d28:	b2d2      	uxtb	r2, r2
 8003d2a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d30:	1c5a      	adds	r2, r3, #1
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d3a:	3b01      	subs	r3, #1
 8003d3c:	b29a      	uxth	r2, r3
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d46:	b29b      	uxth	r3, r3
 8003d48:	3b01      	subs	r3, #1
 8003d4a:	b29a      	uxth	r2, r3
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003d50:	e042      	b.n	8003dd8 <HAL_I2C_Master_Receive+0x484>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d54:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003d56:	68f8      	ldr	r0, [r7, #12]
 8003d58:	f001 fc26 	bl	80055a8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d001      	beq.n	8003d66 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8003d62:	2301      	movs	r3, #1
 8003d64:	e04c      	b.n	8003e00 <HAL_I2C_Master_Receive+0x4ac>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	691a      	ldr	r2, [r3, #16]
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d70:	b2d2      	uxtb	r2, r2
 8003d72:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d78:	1c5a      	adds	r2, r3, #1
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d82:	3b01      	subs	r3, #1
 8003d84:	b29a      	uxth	r2, r3
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d8e:	b29b      	uxth	r3, r3
 8003d90:	3b01      	subs	r3, #1
 8003d92:	b29a      	uxth	r2, r3
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	695b      	ldr	r3, [r3, #20]
 8003d9e:	f003 0304 	and.w	r3, r3, #4
 8003da2:	2b04      	cmp	r3, #4
 8003da4:	d118      	bne.n	8003dd8 <HAL_I2C_Master_Receive+0x484>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	691a      	ldr	r2, [r3, #16]
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db0:	b2d2      	uxtb	r2, r2
 8003db2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db8:	1c5a      	adds	r2, r3, #1
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dc2:	3b01      	subs	r3, #1
 8003dc4:	b29a      	uxth	r2, r3
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dce:	b29b      	uxth	r3, r3
 8003dd0:	3b01      	subs	r3, #1
 8003dd2:	b29a      	uxth	r2, r3
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	f47f ae94 	bne.w	8003b0a <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	2220      	movs	r2, #32
 8003de6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	2200      	movs	r2, #0
 8003dee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	2200      	movs	r2, #0
 8003df6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	e000      	b.n	8003e00 <HAL_I2C_Master_Receive+0x4ac>
  }
  else
  {
    return HAL_BUSY;
 8003dfe:	2302      	movs	r3, #2
  }
}
 8003e00:	4618      	mov	r0, r3
 8003e02:	3728      	adds	r7, #40	; 0x28
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bd80      	pop	{r7, pc}
 8003e08:	00010004 	.word	0x00010004
 8003e0c:	2000003c 	.word	0x2000003c
 8003e10:	14f8b589 	.word	0x14f8b589

08003e14 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b088      	sub	sp, #32
 8003e18:	af02      	add	r7, sp, #8
 8003e1a:	60f8      	str	r0, [r7, #12]
 8003e1c:	4608      	mov	r0, r1
 8003e1e:	4611      	mov	r1, r2
 8003e20:	461a      	mov	r2, r3
 8003e22:	4603      	mov	r3, r0
 8003e24:	817b      	strh	r3, [r7, #10]
 8003e26:	460b      	mov	r3, r1
 8003e28:	813b      	strh	r3, [r7, #8]
 8003e2a:	4613      	mov	r3, r2
 8003e2c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003e2e:	f7fe ffe9 	bl	8002e04 <HAL_GetTick>
 8003e32:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e3a:	b2db      	uxtb	r3, r3
 8003e3c:	2b20      	cmp	r3, #32
 8003e3e:	f040 80d9 	bne.w	8003ff4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	9300      	str	r3, [sp, #0]
 8003e46:	2319      	movs	r3, #25
 8003e48:	2201      	movs	r2, #1
 8003e4a:	496d      	ldr	r1, [pc, #436]	; (8004000 <HAL_I2C_Mem_Write+0x1ec>)
 8003e4c:	68f8      	ldr	r0, [r7, #12]
 8003e4e:	f001 fa53 	bl	80052f8 <I2C_WaitOnFlagUntilTimeout>
 8003e52:	4603      	mov	r3, r0
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d001      	beq.n	8003e5c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003e58:	2302      	movs	r3, #2
 8003e5a:	e0cc      	b.n	8003ff6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e62:	2b01      	cmp	r3, #1
 8003e64:	d101      	bne.n	8003e6a <HAL_I2C_Mem_Write+0x56>
 8003e66:	2302      	movs	r3, #2
 8003e68:	e0c5      	b.n	8003ff6 <HAL_I2C_Mem_Write+0x1e2>
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	2201      	movs	r2, #1
 8003e6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f003 0301 	and.w	r3, r3, #1
 8003e7c:	2b01      	cmp	r3, #1
 8003e7e:	d007      	beq.n	8003e90 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	681a      	ldr	r2, [r3, #0]
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f042 0201 	orr.w	r2, r2, #1
 8003e8e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	681a      	ldr	r2, [r3, #0]
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e9e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	2221      	movs	r2, #33	; 0x21
 8003ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	2240      	movs	r2, #64	; 0x40
 8003eac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	6a3a      	ldr	r2, [r7, #32]
 8003eba:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003ec0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ec6:	b29a      	uxth	r2, r3
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	4a4d      	ldr	r2, [pc, #308]	; (8004004 <HAL_I2C_Mem_Write+0x1f0>)
 8003ed0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003ed2:	88f8      	ldrh	r0, [r7, #6]
 8003ed4:	893a      	ldrh	r2, [r7, #8]
 8003ed6:	8979      	ldrh	r1, [r7, #10]
 8003ed8:	697b      	ldr	r3, [r7, #20]
 8003eda:	9301      	str	r3, [sp, #4]
 8003edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ede:	9300      	str	r3, [sp, #0]
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	68f8      	ldr	r0, [r7, #12]
 8003ee4:	f000 ffe2 	bl	8004eac <I2C_RequestMemoryWrite>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d052      	beq.n	8003f94 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	e081      	b.n	8003ff6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ef2:	697a      	ldr	r2, [r7, #20]
 8003ef4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003ef6:	68f8      	ldr	r0, [r7, #12]
 8003ef8:	f001 fad4 	bl	80054a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003efc:	4603      	mov	r3, r0
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d00d      	beq.n	8003f1e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f06:	2b04      	cmp	r3, #4
 8003f08:	d107      	bne.n	8003f1a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	681a      	ldr	r2, [r3, #0]
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f18:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	e06b      	b.n	8003ff6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f22:	781a      	ldrb	r2, [r3, #0]
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f2e:	1c5a      	adds	r2, r3, #1
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f38:	3b01      	subs	r3, #1
 8003f3a:	b29a      	uxth	r2, r3
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f44:	b29b      	uxth	r3, r3
 8003f46:	3b01      	subs	r3, #1
 8003f48:	b29a      	uxth	r2, r3
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	695b      	ldr	r3, [r3, #20]
 8003f54:	f003 0304 	and.w	r3, r3, #4
 8003f58:	2b04      	cmp	r3, #4
 8003f5a:	d11b      	bne.n	8003f94 <HAL_I2C_Mem_Write+0x180>
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d017      	beq.n	8003f94 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f68:	781a      	ldrb	r2, [r3, #0]
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f74:	1c5a      	adds	r2, r3, #1
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f7e:	3b01      	subs	r3, #1
 8003f80:	b29a      	uxth	r2, r3
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f8a:	b29b      	uxth	r3, r3
 8003f8c:	3b01      	subs	r3, #1
 8003f8e:	b29a      	uxth	r2, r3
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d1aa      	bne.n	8003ef2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f9c:	697a      	ldr	r2, [r7, #20]
 8003f9e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003fa0:	68f8      	ldr	r0, [r7, #12]
 8003fa2:	f001 fac0 	bl	8005526 <I2C_WaitOnBTFFlagUntilTimeout>
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d00d      	beq.n	8003fc8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb0:	2b04      	cmp	r3, #4
 8003fb2:	d107      	bne.n	8003fc4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	681a      	ldr	r2, [r3, #0]
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fc2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	e016      	b.n	8003ff6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	681a      	ldr	r2, [r3, #0]
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fd6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	2220      	movs	r2, #32
 8003fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	2200      	movs	r2, #0
 8003fec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	e000      	b.n	8003ff6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003ff4:	2302      	movs	r3, #2
  }
}
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	3718      	adds	r7, #24
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bd80      	pop	{r7, pc}
 8003ffe:	bf00      	nop
 8004000:	00100002 	.word	0x00100002
 8004004:	ffff0000 	.word	0xffff0000

08004008 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b08c      	sub	sp, #48	; 0x30
 800400c:	af02      	add	r7, sp, #8
 800400e:	60f8      	str	r0, [r7, #12]
 8004010:	4608      	mov	r0, r1
 8004012:	4611      	mov	r1, r2
 8004014:	461a      	mov	r2, r3
 8004016:	4603      	mov	r3, r0
 8004018:	817b      	strh	r3, [r7, #10]
 800401a:	460b      	mov	r3, r1
 800401c:	813b      	strh	r3, [r7, #8]
 800401e:	4613      	mov	r3, r2
 8004020:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8004022:	2300      	movs	r3, #0
 8004024:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004026:	f7fe feed 	bl	8002e04 <HAL_GetTick>
 800402a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004032:	b2db      	uxtb	r3, r3
 8004034:	2b20      	cmp	r3, #32
 8004036:	f040 8244 	bne.w	80044c2 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800403a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800403c:	9300      	str	r3, [sp, #0]
 800403e:	2319      	movs	r3, #25
 8004040:	2201      	movs	r2, #1
 8004042:	4982      	ldr	r1, [pc, #520]	; (800424c <HAL_I2C_Mem_Read+0x244>)
 8004044:	68f8      	ldr	r0, [r7, #12]
 8004046:	f001 f957 	bl	80052f8 <I2C_WaitOnFlagUntilTimeout>
 800404a:	4603      	mov	r3, r0
 800404c:	2b00      	cmp	r3, #0
 800404e:	d001      	beq.n	8004054 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8004050:	2302      	movs	r3, #2
 8004052:	e237      	b.n	80044c4 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800405a:	2b01      	cmp	r3, #1
 800405c:	d101      	bne.n	8004062 <HAL_I2C_Mem_Read+0x5a>
 800405e:	2302      	movs	r3, #2
 8004060:	e230      	b.n	80044c4 <HAL_I2C_Mem_Read+0x4bc>
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	2201      	movs	r2, #1
 8004066:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f003 0301 	and.w	r3, r3, #1
 8004074:	2b01      	cmp	r3, #1
 8004076:	d007      	beq.n	8004088 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	681a      	ldr	r2, [r3, #0]
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f042 0201 	orr.w	r2, r2, #1
 8004086:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	681a      	ldr	r2, [r3, #0]
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004096:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	2222      	movs	r2, #34	; 0x22
 800409c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	2240      	movs	r2, #64	; 0x40
 80040a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	2200      	movs	r2, #0
 80040ac:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040b2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80040b8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040be:	b29a      	uxth	r2, r3
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	4a62      	ldr	r2, [pc, #392]	; (8004250 <HAL_I2C_Mem_Read+0x248>)
 80040c8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80040ca:	88f8      	ldrh	r0, [r7, #6]
 80040cc:	893a      	ldrh	r2, [r7, #8]
 80040ce:	8979      	ldrh	r1, [r7, #10]
 80040d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d2:	9301      	str	r3, [sp, #4]
 80040d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040d6:	9300      	str	r3, [sp, #0]
 80040d8:	4603      	mov	r3, r0
 80040da:	68f8      	ldr	r0, [r7, #12]
 80040dc:	f000 ff7c 	bl	8004fd8 <I2C_RequestMemoryRead>
 80040e0:	4603      	mov	r3, r0
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d001      	beq.n	80040ea <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80040e6:	2301      	movs	r3, #1
 80040e8:	e1ec      	b.n	80044c4 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d113      	bne.n	800411a <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040f2:	2300      	movs	r3, #0
 80040f4:	61fb      	str	r3, [r7, #28]
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	695b      	ldr	r3, [r3, #20]
 80040fc:	61fb      	str	r3, [r7, #28]
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	699b      	ldr	r3, [r3, #24]
 8004104:	61fb      	str	r3, [r7, #28]
 8004106:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	681a      	ldr	r2, [r3, #0]
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004116:	601a      	str	r2, [r3, #0]
 8004118:	e1c0      	b.n	800449c <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800411e:	2b01      	cmp	r3, #1
 8004120:	d11e      	bne.n	8004160 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	681a      	ldr	r2, [r3, #0]
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004130:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004132:	b672      	cpsid	i
}
 8004134:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004136:	2300      	movs	r3, #0
 8004138:	61bb      	str	r3, [r7, #24]
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	695b      	ldr	r3, [r3, #20]
 8004140:	61bb      	str	r3, [r7, #24]
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	699b      	ldr	r3, [r3, #24]
 8004148:	61bb      	str	r3, [r7, #24]
 800414a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	681a      	ldr	r2, [r3, #0]
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800415a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800415c:	b662      	cpsie	i
}
 800415e:	e035      	b.n	80041cc <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004164:	2b02      	cmp	r3, #2
 8004166:	d11e      	bne.n	80041a6 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	681a      	ldr	r2, [r3, #0]
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004176:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004178:	b672      	cpsid	i
}
 800417a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800417c:	2300      	movs	r3, #0
 800417e:	617b      	str	r3, [r7, #20]
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	695b      	ldr	r3, [r3, #20]
 8004186:	617b      	str	r3, [r7, #20]
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	699b      	ldr	r3, [r3, #24]
 800418e:	617b      	str	r3, [r7, #20]
 8004190:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	681a      	ldr	r2, [r3, #0]
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041a0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80041a2:	b662      	cpsie	i
}
 80041a4:	e012      	b.n	80041cc <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	681a      	ldr	r2, [r3, #0]
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80041b4:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041b6:	2300      	movs	r3, #0
 80041b8:	613b      	str	r3, [r7, #16]
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	695b      	ldr	r3, [r3, #20]
 80041c0:	613b      	str	r3, [r7, #16]
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	699b      	ldr	r3, [r3, #24]
 80041c8:	613b      	str	r3, [r7, #16]
 80041ca:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80041cc:	e166      	b.n	800449c <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041d2:	2b03      	cmp	r3, #3
 80041d4:	f200 811f 	bhi.w	8004416 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041dc:	2b01      	cmp	r3, #1
 80041de:	d123      	bne.n	8004228 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041e2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80041e4:	68f8      	ldr	r0, [r7, #12]
 80041e6:	f001 f9df 	bl	80055a8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80041ea:	4603      	mov	r3, r0
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d001      	beq.n	80041f4 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 80041f0:	2301      	movs	r3, #1
 80041f2:	e167      	b.n	80044c4 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	691a      	ldr	r2, [r3, #16]
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041fe:	b2d2      	uxtb	r2, r2
 8004200:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004206:	1c5a      	adds	r2, r3, #1
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004210:	3b01      	subs	r3, #1
 8004212:	b29a      	uxth	r2, r3
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800421c:	b29b      	uxth	r3, r3
 800421e:	3b01      	subs	r3, #1
 8004220:	b29a      	uxth	r2, r3
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004226:	e139      	b.n	800449c <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800422c:	2b02      	cmp	r3, #2
 800422e:	d152      	bne.n	80042d6 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004232:	9300      	str	r3, [sp, #0]
 8004234:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004236:	2200      	movs	r2, #0
 8004238:	4906      	ldr	r1, [pc, #24]	; (8004254 <HAL_I2C_Mem_Read+0x24c>)
 800423a:	68f8      	ldr	r0, [r7, #12]
 800423c:	f001 f85c 	bl	80052f8 <I2C_WaitOnFlagUntilTimeout>
 8004240:	4603      	mov	r3, r0
 8004242:	2b00      	cmp	r3, #0
 8004244:	d008      	beq.n	8004258 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8004246:	2301      	movs	r3, #1
 8004248:	e13c      	b.n	80044c4 <HAL_I2C_Mem_Read+0x4bc>
 800424a:	bf00      	nop
 800424c:	00100002 	.word	0x00100002
 8004250:	ffff0000 	.word	0xffff0000
 8004254:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8004258:	b672      	cpsid	i
}
 800425a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	681a      	ldr	r2, [r3, #0]
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800426a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	691a      	ldr	r2, [r3, #16]
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004276:	b2d2      	uxtb	r2, r2
 8004278:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800427e:	1c5a      	adds	r2, r3, #1
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004288:	3b01      	subs	r3, #1
 800428a:	b29a      	uxth	r2, r3
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004294:	b29b      	uxth	r3, r3
 8004296:	3b01      	subs	r3, #1
 8004298:	b29a      	uxth	r2, r3
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800429e:	b662      	cpsie	i
}
 80042a0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	691a      	ldr	r2, [r3, #16]
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ac:	b2d2      	uxtb	r2, r2
 80042ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b4:	1c5a      	adds	r2, r3, #1
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042be:	3b01      	subs	r3, #1
 80042c0:	b29a      	uxth	r2, r3
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042ca:	b29b      	uxth	r3, r3
 80042cc:	3b01      	subs	r3, #1
 80042ce:	b29a      	uxth	r2, r3
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80042d4:	e0e2      	b.n	800449c <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80042d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d8:	9300      	str	r3, [sp, #0]
 80042da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042dc:	2200      	movs	r2, #0
 80042de:	497b      	ldr	r1, [pc, #492]	; (80044cc <HAL_I2C_Mem_Read+0x4c4>)
 80042e0:	68f8      	ldr	r0, [r7, #12]
 80042e2:	f001 f809 	bl	80052f8 <I2C_WaitOnFlagUntilTimeout>
 80042e6:	4603      	mov	r3, r0
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d001      	beq.n	80042f0 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 80042ec:	2301      	movs	r3, #1
 80042ee:	e0e9      	b.n	80044c4 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	681a      	ldr	r2, [r3, #0]
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042fe:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004300:	b672      	cpsid	i
}
 8004302:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	691a      	ldr	r2, [r3, #16]
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800430e:	b2d2      	uxtb	r2, r2
 8004310:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004316:	1c5a      	adds	r2, r3, #1
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004320:	3b01      	subs	r3, #1
 8004322:	b29a      	uxth	r2, r3
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800432c:	b29b      	uxth	r3, r3
 800432e:	3b01      	subs	r3, #1
 8004330:	b29a      	uxth	r2, r3
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004336:	4b66      	ldr	r3, [pc, #408]	; (80044d0 <HAL_I2C_Mem_Read+0x4c8>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	08db      	lsrs	r3, r3, #3
 800433c:	4a65      	ldr	r2, [pc, #404]	; (80044d4 <HAL_I2C_Mem_Read+0x4cc>)
 800433e:	fba2 2303 	umull	r2, r3, r2, r3
 8004342:	0a1a      	lsrs	r2, r3, #8
 8004344:	4613      	mov	r3, r2
 8004346:	009b      	lsls	r3, r3, #2
 8004348:	4413      	add	r3, r2
 800434a:	00da      	lsls	r2, r3, #3
 800434c:	1ad3      	subs	r3, r2, r3
 800434e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8004350:	6a3b      	ldr	r3, [r7, #32]
 8004352:	3b01      	subs	r3, #1
 8004354:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8004356:	6a3b      	ldr	r3, [r7, #32]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d118      	bne.n	800438e <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	2200      	movs	r2, #0
 8004360:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	2220      	movs	r2, #32
 8004366:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	2200      	movs	r2, #0
 800436e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004376:	f043 0220 	orr.w	r2, r3, #32
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800437e:	b662      	cpsie	i
}
 8004380:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	2200      	movs	r2, #0
 8004386:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	e09a      	b.n	80044c4 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	695b      	ldr	r3, [r3, #20]
 8004394:	f003 0304 	and.w	r3, r3, #4
 8004398:	2b04      	cmp	r3, #4
 800439a:	d1d9      	bne.n	8004350 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	681a      	ldr	r2, [r3, #0]
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043aa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	691a      	ldr	r2, [r3, #16]
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b6:	b2d2      	uxtb	r2, r2
 80043b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043be:	1c5a      	adds	r2, r3, #1
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043c8:	3b01      	subs	r3, #1
 80043ca:	b29a      	uxth	r2, r3
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043d4:	b29b      	uxth	r3, r3
 80043d6:	3b01      	subs	r3, #1
 80043d8:	b29a      	uxth	r2, r3
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80043de:	b662      	cpsie	i
}
 80043e0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	691a      	ldr	r2, [r3, #16]
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ec:	b2d2      	uxtb	r2, r2
 80043ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f4:	1c5a      	adds	r2, r3, #1
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043fe:	3b01      	subs	r3, #1
 8004400:	b29a      	uxth	r2, r3
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800440a:	b29b      	uxth	r3, r3
 800440c:	3b01      	subs	r3, #1
 800440e:	b29a      	uxth	r2, r3
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004414:	e042      	b.n	800449c <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004416:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004418:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800441a:	68f8      	ldr	r0, [r7, #12]
 800441c:	f001 f8c4 	bl	80055a8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004420:	4603      	mov	r3, r0
 8004422:	2b00      	cmp	r3, #0
 8004424:	d001      	beq.n	800442a <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8004426:	2301      	movs	r3, #1
 8004428:	e04c      	b.n	80044c4 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	691a      	ldr	r2, [r3, #16]
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004434:	b2d2      	uxtb	r2, r2
 8004436:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800443c:	1c5a      	adds	r2, r3, #1
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004446:	3b01      	subs	r3, #1
 8004448:	b29a      	uxth	r2, r3
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004452:	b29b      	uxth	r3, r3
 8004454:	3b01      	subs	r3, #1
 8004456:	b29a      	uxth	r2, r3
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	695b      	ldr	r3, [r3, #20]
 8004462:	f003 0304 	and.w	r3, r3, #4
 8004466:	2b04      	cmp	r3, #4
 8004468:	d118      	bne.n	800449c <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	691a      	ldr	r2, [r3, #16]
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004474:	b2d2      	uxtb	r2, r2
 8004476:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800447c:	1c5a      	adds	r2, r3, #1
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004486:	3b01      	subs	r3, #1
 8004488:	b29a      	uxth	r2, r3
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004492:	b29b      	uxth	r3, r3
 8004494:	3b01      	subs	r3, #1
 8004496:	b29a      	uxth	r2, r3
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	f47f ae94 	bne.w	80041ce <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	2220      	movs	r2, #32
 80044aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	2200      	movs	r2, #0
 80044b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	2200      	movs	r2, #0
 80044ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80044be:	2300      	movs	r3, #0
 80044c0:	e000      	b.n	80044c4 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 80044c2:	2302      	movs	r3, #2
  }
}
 80044c4:	4618      	mov	r0, r3
 80044c6:	3728      	adds	r7, #40	; 0x28
 80044c8:	46bd      	mov	sp, r7
 80044ca:	bd80      	pop	{r7, pc}
 80044cc:	00010004 	.word	0x00010004
 80044d0:	2000003c 	.word	0x2000003c
 80044d4:	14f8b589 	.word	0x14f8b589

080044d8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b08a      	sub	sp, #40	; 0x28
 80044dc:	af02      	add	r7, sp, #8
 80044de:	60f8      	str	r0, [r7, #12]
 80044e0:	607a      	str	r2, [r7, #4]
 80044e2:	603b      	str	r3, [r7, #0]
 80044e4:	460b      	mov	r3, r1
 80044e6:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80044e8:	f7fe fc8c 	bl	8002e04 <HAL_GetTick>
 80044ec:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 80044ee:	2301      	movs	r3, #1
 80044f0:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044f8:	b2db      	uxtb	r3, r3
 80044fa:	2b20      	cmp	r3, #32
 80044fc:	f040 8111 	bne.w	8004722 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004500:	69fb      	ldr	r3, [r7, #28]
 8004502:	9300      	str	r3, [sp, #0]
 8004504:	2319      	movs	r3, #25
 8004506:	2201      	movs	r2, #1
 8004508:	4988      	ldr	r1, [pc, #544]	; (800472c <HAL_I2C_IsDeviceReady+0x254>)
 800450a:	68f8      	ldr	r0, [r7, #12]
 800450c:	f000 fef4 	bl	80052f8 <I2C_WaitOnFlagUntilTimeout>
 8004510:	4603      	mov	r3, r0
 8004512:	2b00      	cmp	r3, #0
 8004514:	d001      	beq.n	800451a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8004516:	2302      	movs	r3, #2
 8004518:	e104      	b.n	8004724 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004520:	2b01      	cmp	r3, #1
 8004522:	d101      	bne.n	8004528 <HAL_I2C_IsDeviceReady+0x50>
 8004524:	2302      	movs	r3, #2
 8004526:	e0fd      	b.n	8004724 <HAL_I2C_IsDeviceReady+0x24c>
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	2201      	movs	r2, #1
 800452c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f003 0301 	and.w	r3, r3, #1
 800453a:	2b01      	cmp	r3, #1
 800453c:	d007      	beq.n	800454e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	681a      	ldr	r2, [r3, #0]
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f042 0201 	orr.w	r2, r2, #1
 800454c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	681a      	ldr	r2, [r3, #0]
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800455c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	2224      	movs	r2, #36	; 0x24
 8004562:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	2200      	movs	r2, #0
 800456a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	4a70      	ldr	r2, [pc, #448]	; (8004730 <HAL_I2C_IsDeviceReady+0x258>)
 8004570:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	681a      	ldr	r2, [r3, #0]
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004580:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8004582:	69fb      	ldr	r3, [r7, #28]
 8004584:	9300      	str	r3, [sp, #0]
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	2200      	movs	r2, #0
 800458a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800458e:	68f8      	ldr	r0, [r7, #12]
 8004590:	f000 feb2 	bl	80052f8 <I2C_WaitOnFlagUntilTimeout>
 8004594:	4603      	mov	r3, r0
 8004596:	2b00      	cmp	r3, #0
 8004598:	d00d      	beq.n	80045b6 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045a8:	d103      	bne.n	80045b2 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80045b0:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80045b2:	2303      	movs	r3, #3
 80045b4:	e0b6      	b.n	8004724 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80045b6:	897b      	ldrh	r3, [r7, #10]
 80045b8:	b2db      	uxtb	r3, r3
 80045ba:	461a      	mov	r2, r3
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80045c4:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80045c6:	f7fe fc1d 	bl	8002e04 <HAL_GetTick>
 80045ca:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	695b      	ldr	r3, [r3, #20]
 80045d2:	f003 0302 	and.w	r3, r3, #2
 80045d6:	2b02      	cmp	r3, #2
 80045d8:	bf0c      	ite	eq
 80045da:	2301      	moveq	r3, #1
 80045dc:	2300      	movne	r3, #0
 80045de:	b2db      	uxtb	r3, r3
 80045e0:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	695b      	ldr	r3, [r3, #20]
 80045e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045f0:	bf0c      	ite	eq
 80045f2:	2301      	moveq	r3, #1
 80045f4:	2300      	movne	r3, #0
 80045f6:	b2db      	uxtb	r3, r3
 80045f8:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80045fa:	e025      	b.n	8004648 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80045fc:	f7fe fc02 	bl	8002e04 <HAL_GetTick>
 8004600:	4602      	mov	r2, r0
 8004602:	69fb      	ldr	r3, [r7, #28]
 8004604:	1ad3      	subs	r3, r2, r3
 8004606:	683a      	ldr	r2, [r7, #0]
 8004608:	429a      	cmp	r2, r3
 800460a:	d302      	bcc.n	8004612 <HAL_I2C_IsDeviceReady+0x13a>
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d103      	bne.n	800461a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	22a0      	movs	r2, #160	; 0xa0
 8004616:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	695b      	ldr	r3, [r3, #20]
 8004620:	f003 0302 	and.w	r3, r3, #2
 8004624:	2b02      	cmp	r3, #2
 8004626:	bf0c      	ite	eq
 8004628:	2301      	moveq	r3, #1
 800462a:	2300      	movne	r3, #0
 800462c:	b2db      	uxtb	r3, r3
 800462e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	695b      	ldr	r3, [r3, #20]
 8004636:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800463a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800463e:	bf0c      	ite	eq
 8004640:	2301      	moveq	r3, #1
 8004642:	2300      	movne	r3, #0
 8004644:	b2db      	uxtb	r3, r3
 8004646:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800464e:	b2db      	uxtb	r3, r3
 8004650:	2ba0      	cmp	r3, #160	; 0xa0
 8004652:	d005      	beq.n	8004660 <HAL_I2C_IsDeviceReady+0x188>
 8004654:	7dfb      	ldrb	r3, [r7, #23]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d102      	bne.n	8004660 <HAL_I2C_IsDeviceReady+0x188>
 800465a:	7dbb      	ldrb	r3, [r7, #22]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d0cd      	beq.n	80045fc <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	2220      	movs	r2, #32
 8004664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	695b      	ldr	r3, [r3, #20]
 800466e:	f003 0302 	and.w	r3, r3, #2
 8004672:	2b02      	cmp	r3, #2
 8004674:	d129      	bne.n	80046ca <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	681a      	ldr	r2, [r3, #0]
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004684:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004686:	2300      	movs	r3, #0
 8004688:	613b      	str	r3, [r7, #16]
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	695b      	ldr	r3, [r3, #20]
 8004690:	613b      	str	r3, [r7, #16]
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	699b      	ldr	r3, [r3, #24]
 8004698:	613b      	str	r3, [r7, #16]
 800469a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800469c:	69fb      	ldr	r3, [r7, #28]
 800469e:	9300      	str	r3, [sp, #0]
 80046a0:	2319      	movs	r3, #25
 80046a2:	2201      	movs	r2, #1
 80046a4:	4921      	ldr	r1, [pc, #132]	; (800472c <HAL_I2C_IsDeviceReady+0x254>)
 80046a6:	68f8      	ldr	r0, [r7, #12]
 80046a8:	f000 fe26 	bl	80052f8 <I2C_WaitOnFlagUntilTimeout>
 80046ac:	4603      	mov	r3, r0
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d001      	beq.n	80046b6 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80046b2:	2301      	movs	r3, #1
 80046b4:	e036      	b.n	8004724 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	2220      	movs	r2, #32
 80046ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	2200      	movs	r2, #0
 80046c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80046c6:	2300      	movs	r3, #0
 80046c8:	e02c      	b.n	8004724 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	681a      	ldr	r2, [r3, #0]
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046d8:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80046e2:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80046e4:	69fb      	ldr	r3, [r7, #28]
 80046e6:	9300      	str	r3, [sp, #0]
 80046e8:	2319      	movs	r3, #25
 80046ea:	2201      	movs	r2, #1
 80046ec:	490f      	ldr	r1, [pc, #60]	; (800472c <HAL_I2C_IsDeviceReady+0x254>)
 80046ee:	68f8      	ldr	r0, [r7, #12]
 80046f0:	f000 fe02 	bl	80052f8 <I2C_WaitOnFlagUntilTimeout>
 80046f4:	4603      	mov	r3, r0
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d001      	beq.n	80046fe <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80046fa:	2301      	movs	r3, #1
 80046fc:	e012      	b.n	8004724 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80046fe:	69bb      	ldr	r3, [r7, #24]
 8004700:	3301      	adds	r3, #1
 8004702:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8004704:	69ba      	ldr	r2, [r7, #24]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	429a      	cmp	r2, r3
 800470a:	f4ff af32 	bcc.w	8004572 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	2220      	movs	r2, #32
 8004712:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	2200      	movs	r2, #0
 800471a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800471e:	2301      	movs	r3, #1
 8004720:	e000      	b.n	8004724 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8004722:	2302      	movs	r3, #2
  }
}
 8004724:	4618      	mov	r0, r3
 8004726:	3720      	adds	r7, #32
 8004728:	46bd      	mov	sp, r7
 800472a:	bd80      	pop	{r7, pc}
 800472c:	00100002 	.word	0x00100002
 8004730:	ffff0000 	.word	0xffff0000

08004734 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b08a      	sub	sp, #40	; 0x28
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	695b      	ldr	r3, [r3, #20]
 8004742:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800474c:	2300      	movs	r3, #0
 800474e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004756:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004758:	6a3b      	ldr	r3, [r7, #32]
 800475a:	0a1b      	lsrs	r3, r3, #8
 800475c:	f003 0301 	and.w	r3, r3, #1
 8004760:	2b00      	cmp	r3, #0
 8004762:	d016      	beq.n	8004792 <HAL_I2C_ER_IRQHandler+0x5e>
 8004764:	69fb      	ldr	r3, [r7, #28]
 8004766:	0a1b      	lsrs	r3, r3, #8
 8004768:	f003 0301 	and.w	r3, r3, #1
 800476c:	2b00      	cmp	r3, #0
 800476e:	d010      	beq.n	8004792 <HAL_I2C_ER_IRQHandler+0x5e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8004770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004772:	f043 0301 	orr.w	r3, r3, #1
 8004776:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004780:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	681a      	ldr	r2, [r3, #0]
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004790:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004792:	6a3b      	ldr	r3, [r7, #32]
 8004794:	0a5b      	lsrs	r3, r3, #9
 8004796:	f003 0301 	and.w	r3, r3, #1
 800479a:	2b00      	cmp	r3, #0
 800479c:	d00e      	beq.n	80047bc <HAL_I2C_ER_IRQHandler+0x88>
 800479e:	69fb      	ldr	r3, [r7, #28]
 80047a0:	0a1b      	lsrs	r3, r3, #8
 80047a2:	f003 0301 	and.w	r3, r3, #1
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d008      	beq.n	80047bc <HAL_I2C_ER_IRQHandler+0x88>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80047aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ac:	f043 0302 	orr.w	r3, r3, #2
 80047b0:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80047ba:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80047bc:	6a3b      	ldr	r3, [r7, #32]
 80047be:	0a9b      	lsrs	r3, r3, #10
 80047c0:	f003 0301 	and.w	r3, r3, #1
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d03f      	beq.n	8004848 <HAL_I2C_ER_IRQHandler+0x114>
 80047c8:	69fb      	ldr	r3, [r7, #28]
 80047ca:	0a1b      	lsrs	r3, r3, #8
 80047cc:	f003 0301 	and.w	r3, r3, #1
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d039      	beq.n	8004848 <HAL_I2C_ER_IRQHandler+0x114>
  {
    tmp1 = CurrentMode;
 80047d4:	7efb      	ldrb	r3, [r7, #27]
 80047d6:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047dc:	b29b      	uxth	r3, r3
 80047de:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047e6:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ec:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80047ee:	7ebb      	ldrb	r3, [r7, #26]
 80047f0:	2b20      	cmp	r3, #32
 80047f2:	d112      	bne.n	800481a <HAL_I2C_ER_IRQHandler+0xe6>
 80047f4:	697b      	ldr	r3, [r7, #20]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d10f      	bne.n	800481a <HAL_I2C_ER_IRQHandler+0xe6>
 80047fa:	7cfb      	ldrb	r3, [r7, #19]
 80047fc:	2b21      	cmp	r3, #33	; 0x21
 80047fe:	d008      	beq.n	8004812 <HAL_I2C_ER_IRQHandler+0xde>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8004800:	7cfb      	ldrb	r3, [r7, #19]
 8004802:	2b29      	cmp	r3, #41	; 0x29
 8004804:	d005      	beq.n	8004812 <HAL_I2C_ER_IRQHandler+0xde>
 8004806:	7cfb      	ldrb	r3, [r7, #19]
 8004808:	2b28      	cmp	r3, #40	; 0x28
 800480a:	d106      	bne.n	800481a <HAL_I2C_ER_IRQHandler+0xe6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	2b21      	cmp	r3, #33	; 0x21
 8004810:	d103      	bne.n	800481a <HAL_I2C_ER_IRQHandler+0xe6>
    {
      I2C_Slave_AF(hi2c);
 8004812:	6878      	ldr	r0, [r7, #4]
 8004814:	f000 f858 	bl	80048c8 <I2C_Slave_AF>
 8004818:	e016      	b.n	8004848 <HAL_I2C_ER_IRQHandler+0x114>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004822:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8004824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004826:	f043 0304 	orr.w	r3, r3, #4
 800482a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800482c:	7efb      	ldrb	r3, [r7, #27]
 800482e:	2b10      	cmp	r3, #16
 8004830:	d002      	beq.n	8004838 <HAL_I2C_ER_IRQHandler+0x104>
 8004832:	7efb      	ldrb	r3, [r7, #27]
 8004834:	2b40      	cmp	r3, #64	; 0x40
 8004836:	d107      	bne.n	8004848 <HAL_I2C_ER_IRQHandler+0x114>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	681a      	ldr	r2, [r3, #0]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004846:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004848:	6a3b      	ldr	r3, [r7, #32]
 800484a:	0adb      	lsrs	r3, r3, #11
 800484c:	f003 0301 	and.w	r3, r3, #1
 8004850:	2b00      	cmp	r3, #0
 8004852:	d00e      	beq.n	8004872 <HAL_I2C_ER_IRQHandler+0x13e>
 8004854:	69fb      	ldr	r3, [r7, #28]
 8004856:	0a1b      	lsrs	r3, r3, #8
 8004858:	f003 0301 	and.w	r3, r3, #1
 800485c:	2b00      	cmp	r3, #0
 800485e:	d008      	beq.n	8004872 <HAL_I2C_ER_IRQHandler+0x13e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8004860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004862:	f043 0308 	orr.w	r3, r3, #8
 8004866:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8004870:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8004872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004874:	2b00      	cmp	r3, #0
 8004876:	d008      	beq.n	800488a <HAL_I2C_ER_IRQHandler+0x156>
  {
    hi2c->ErrorCode |= error;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800487c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800487e:	431a      	orrs	r2, r3
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8004884:	6878      	ldr	r0, [r7, #4]
 8004886:	f000 f88f 	bl	80049a8 <I2C_ITError>
  }
}
 800488a:	bf00      	nop
 800488c:	3728      	adds	r7, #40	; 0x28
 800488e:	46bd      	mov	sp, r7
 8004890:	bd80      	pop	{r7, pc}

08004892 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004892:	b480      	push	{r7}
 8004894:	b083      	sub	sp, #12
 8004896:	af00      	add	r7, sp, #0
 8004898:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800489a:	bf00      	nop
 800489c:	370c      	adds	r7, #12
 800489e:	46bd      	mov	sp, r7
 80048a0:	bc80      	pop	{r7}
 80048a2:	4770      	bx	lr

080048a4 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80048a4:	b480      	push	{r7}
 80048a6:	b083      	sub	sp, #12
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80048ac:	bf00      	nop
 80048ae:	370c      	adds	r7, #12
 80048b0:	46bd      	mov	sp, r7
 80048b2:	bc80      	pop	{r7}
 80048b4:	4770      	bx	lr

080048b6 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80048b6:	b480      	push	{r7}
 80048b8:	b083      	sub	sp, #12
 80048ba:	af00      	add	r7, sp, #0
 80048bc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80048be:	bf00      	nop
 80048c0:	370c      	adds	r7, #12
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bc80      	pop	{r7}
 80048c6:	4770      	bx	lr

080048c8 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b084      	sub	sp, #16
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048d6:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048dc:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	2b08      	cmp	r3, #8
 80048e2:	d002      	beq.n	80048ea <I2C_Slave_AF+0x22>
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	2b20      	cmp	r3, #32
 80048e8:	d129      	bne.n	800493e <I2C_Slave_AF+0x76>
 80048ea:	7bfb      	ldrb	r3, [r7, #15]
 80048ec:	2b28      	cmp	r3, #40	; 0x28
 80048ee:	d126      	bne.n	800493e <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	4a2c      	ldr	r2, [pc, #176]	; (80049a4 <I2C_Slave_AF+0xdc>)
 80048f4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	685a      	ldr	r2, [r3, #4]
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004904:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800490e:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	681a      	ldr	r2, [r3, #0]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800491e:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2200      	movs	r2, #0
 8004924:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2220      	movs	r2, #32
 800492a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2200      	movs	r2, #0
 8004932:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004936:	6878      	ldr	r0, [r7, #4]
 8004938:	f7ff ffb4 	bl	80048a4 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 800493c:	e02e      	b.n	800499c <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800493e:	7bfb      	ldrb	r3, [r7, #15]
 8004940:	2b21      	cmp	r3, #33	; 0x21
 8004942:	d126      	bne.n	8004992 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	4a17      	ldr	r2, [pc, #92]	; (80049a4 <I2C_Slave_AF+0xdc>)
 8004948:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2221      	movs	r2, #33	; 0x21
 800494e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2220      	movs	r2, #32
 8004954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2200      	movs	r2, #0
 800495c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	685a      	ldr	r2, [r3, #4]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800496e:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004978:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	681a      	ldr	r2, [r3, #0]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004988:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800498a:	6878      	ldr	r0, [r7, #4]
 800498c:	f7ff ff81 	bl	8004892 <HAL_I2C_SlaveTxCpltCallback>
}
 8004990:	e004      	b.n	800499c <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800499a:	615a      	str	r2, [r3, #20]
}
 800499c:	bf00      	nop
 800499e:	3710      	adds	r7, #16
 80049a0:	46bd      	mov	sp, r7
 80049a2:	bd80      	pop	{r7, pc}
 80049a4:	ffff0000 	.word	0xffff0000

080049a8 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b084      	sub	sp, #16
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049b6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80049be:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80049c0:	7bbb      	ldrb	r3, [r7, #14]
 80049c2:	2b10      	cmp	r3, #16
 80049c4:	d002      	beq.n	80049cc <I2C_ITError+0x24>
 80049c6:	7bbb      	ldrb	r3, [r7, #14]
 80049c8:	2b40      	cmp	r3, #64	; 0x40
 80049ca:	d10a      	bne.n	80049e2 <I2C_ITError+0x3a>
 80049cc:	7bfb      	ldrb	r3, [r7, #15]
 80049ce:	2b22      	cmp	r3, #34	; 0x22
 80049d0:	d107      	bne.n	80049e2 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	681a      	ldr	r2, [r3, #0]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80049e0:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80049e2:	7bfb      	ldrb	r3, [r7, #15]
 80049e4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80049e8:	2b28      	cmp	r3, #40	; 0x28
 80049ea:	d107      	bne.n	80049fc <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2200      	movs	r2, #0
 80049f0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2228      	movs	r2, #40	; 0x28
 80049f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80049fa:	e015      	b.n	8004a28 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a06:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a0a:	d00a      	beq.n	8004a22 <I2C_ITError+0x7a>
 8004a0c:	7bfb      	ldrb	r3, [r7, #15]
 8004a0e:	2b60      	cmp	r3, #96	; 0x60
 8004a10:	d007      	beq.n	8004a22 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2220      	movs	r2, #32
 8004a16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2200      	movs	r2, #0
 8004a26:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a32:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a36:	d161      	bne.n	8004afc <I2C_ITError+0x154>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	685a      	ldr	r2, [r3, #4]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a46:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a4c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004a50:	2b01      	cmp	r3, #1
 8004a52:	d020      	beq.n	8004a96 <I2C_ITError+0xee>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a58:	4a6a      	ldr	r2, [pc, #424]	; (8004c04 <I2C_ITError+0x25c>)
 8004a5a:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a60:	4618      	mov	r0, r3
 8004a62:	f7fe fb0b 	bl	800307c <HAL_DMA_Abort_IT>
 8004a66:	4603      	mov	r3, r0
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	f000 8089 	beq.w	8004b80 <I2C_ITError+0x1d8>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	681a      	ldr	r2, [r3, #0]
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f022 0201 	bic.w	r2, r2, #1
 8004a7c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2220      	movs	r2, #32
 8004a82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a8c:	687a      	ldr	r2, [r7, #4]
 8004a8e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004a90:	4610      	mov	r0, r2
 8004a92:	4798      	blx	r3
 8004a94:	e074      	b.n	8004b80 <I2C_ITError+0x1d8>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a9a:	4a5a      	ldr	r2, [pc, #360]	; (8004c04 <I2C_ITError+0x25c>)
 8004a9c:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	f7fe faea 	bl	800307c <HAL_DMA_Abort_IT>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d068      	beq.n	8004b80 <I2C_ITError+0x1d8>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	695b      	ldr	r3, [r3, #20]
 8004ab4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ab8:	2b40      	cmp	r3, #64	; 0x40
 8004aba:	d10b      	bne.n	8004ad4 <I2C_ITError+0x12c>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	691a      	ldr	r2, [r3, #16]
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac6:	b2d2      	uxtb	r2, r2
 8004ac8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ace:	1c5a      	adds	r2, r3, #1
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	681a      	ldr	r2, [r3, #0]
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f022 0201 	bic.w	r2, r2, #1
 8004ae2:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2220      	movs	r2, #32
 8004ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004af0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004af2:	687a      	ldr	r2, [r7, #4]
 8004af4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004af6:	4610      	mov	r0, r2
 8004af8:	4798      	blx	r3
 8004afa:	e041      	b.n	8004b80 <I2C_ITError+0x1d8>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b02:	b2db      	uxtb	r3, r3
 8004b04:	2b60      	cmp	r3, #96	; 0x60
 8004b06:	d125      	bne.n	8004b54 <I2C_ITError+0x1ac>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2220      	movs	r2, #32
 8004b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2200      	movs	r2, #0
 8004b14:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	695b      	ldr	r3, [r3, #20]
 8004b1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b20:	2b40      	cmp	r3, #64	; 0x40
 8004b22:	d10b      	bne.n	8004b3c <I2C_ITError+0x194>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	691a      	ldr	r2, [r3, #16]
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b2e:	b2d2      	uxtb	r2, r2
 8004b30:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b36:	1c5a      	adds	r2, r3, #1
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	681a      	ldr	r2, [r3, #0]
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f022 0201 	bic.w	r2, r2, #1
 8004b4a:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004b4c:	6878      	ldr	r0, [r7, #4]
 8004b4e:	f7ff feb2 	bl	80048b6 <HAL_I2C_AbortCpltCallback>
 8004b52:	e015      	b.n	8004b80 <I2C_ITError+0x1d8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	695b      	ldr	r3, [r3, #20]
 8004b5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b5e:	2b40      	cmp	r3, #64	; 0x40
 8004b60:	d10b      	bne.n	8004b7a <I2C_ITError+0x1d2>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	691a      	ldr	r2, [r3, #16]
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b6c:	b2d2      	uxtb	r2, r2
 8004b6e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b74:	1c5a      	adds	r2, r3, #1
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004b7a:	6878      	ldr	r0, [r7, #4]
 8004b7c:	f7fd fd4e 	bl	800261c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b84:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004b86:	68bb      	ldr	r3, [r7, #8]
 8004b88:	f003 0301 	and.w	r3, r3, #1
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d10e      	bne.n	8004bae <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d109      	bne.n	8004bae <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004b9a:	68bb      	ldr	r3, [r7, #8]
 8004b9c:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d104      	bne.n	8004bae <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d007      	beq.n	8004bbe <I2C_ITError+0x216>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	685a      	ldr	r2, [r3, #4]
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004bbc:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bc4:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bca:	f003 0304 	and.w	r3, r3, #4
 8004bce:	2b04      	cmp	r3, #4
 8004bd0:	d113      	bne.n	8004bfa <I2C_ITError+0x252>
 8004bd2:	7bfb      	ldrb	r3, [r7, #15]
 8004bd4:	2b28      	cmp	r3, #40	; 0x28
 8004bd6:	d110      	bne.n	8004bfa <I2C_ITError+0x252>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	4a0b      	ldr	r2, [pc, #44]	; (8004c08 <I2C_ITError+0x260>)
 8004bdc:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2200      	movs	r2, #0
 8004be2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2220      	movs	r2, #32
 8004be8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2200      	movs	r2, #0
 8004bf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004bf4:	6878      	ldr	r0, [r7, #4]
 8004bf6:	f7ff fe55 	bl	80048a4 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004bfa:	bf00      	nop
 8004bfc:	3710      	adds	r7, #16
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bd80      	pop	{r7, pc}
 8004c02:	bf00      	nop
 8004c04:	080051a9 	.word	0x080051a9
 8004c08:	ffff0000 	.word	0xffff0000

08004c0c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b088      	sub	sp, #32
 8004c10:	af02      	add	r7, sp, #8
 8004c12:	60f8      	str	r0, [r7, #12]
 8004c14:	607a      	str	r2, [r7, #4]
 8004c16:	603b      	str	r3, [r7, #0]
 8004c18:	460b      	mov	r3, r1
 8004c1a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c20:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004c22:	697b      	ldr	r3, [r7, #20]
 8004c24:	2b08      	cmp	r3, #8
 8004c26:	d006      	beq.n	8004c36 <I2C_MasterRequestWrite+0x2a>
 8004c28:	697b      	ldr	r3, [r7, #20]
 8004c2a:	2b01      	cmp	r3, #1
 8004c2c:	d003      	beq.n	8004c36 <I2C_MasterRequestWrite+0x2a>
 8004c2e:	697b      	ldr	r3, [r7, #20]
 8004c30:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004c34:	d108      	bne.n	8004c48 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	681a      	ldr	r2, [r3, #0]
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c44:	601a      	str	r2, [r3, #0]
 8004c46:	e00b      	b.n	8004c60 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c4c:	2b12      	cmp	r3, #18
 8004c4e:	d107      	bne.n	8004c60 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	681a      	ldr	r2, [r3, #0]
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c5e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	9300      	str	r3, [sp, #0]
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2200      	movs	r2, #0
 8004c68:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004c6c:	68f8      	ldr	r0, [r7, #12]
 8004c6e:	f000 fb43 	bl	80052f8 <I2C_WaitOnFlagUntilTimeout>
 8004c72:	4603      	mov	r3, r0
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d00d      	beq.n	8004c94 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c86:	d103      	bne.n	8004c90 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c8e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004c90:	2303      	movs	r3, #3
 8004c92:	e035      	b.n	8004d00 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	691b      	ldr	r3, [r3, #16]
 8004c98:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004c9c:	d108      	bne.n	8004cb0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004c9e:	897b      	ldrh	r3, [r7, #10]
 8004ca0:	b2db      	uxtb	r3, r3
 8004ca2:	461a      	mov	r2, r3
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004cac:	611a      	str	r2, [r3, #16]
 8004cae:	e01b      	b.n	8004ce8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004cb0:	897b      	ldrh	r3, [r7, #10]
 8004cb2:	11db      	asrs	r3, r3, #7
 8004cb4:	b2db      	uxtb	r3, r3
 8004cb6:	f003 0306 	and.w	r3, r3, #6
 8004cba:	b2db      	uxtb	r3, r3
 8004cbc:	f063 030f 	orn	r3, r3, #15
 8004cc0:	b2da      	uxtb	r2, r3
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	687a      	ldr	r2, [r7, #4]
 8004ccc:	490e      	ldr	r1, [pc, #56]	; (8004d08 <I2C_MasterRequestWrite+0xfc>)
 8004cce:	68f8      	ldr	r0, [r7, #12]
 8004cd0:	f000 fb69 	bl	80053a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d001      	beq.n	8004cde <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004cda:	2301      	movs	r3, #1
 8004cdc:	e010      	b.n	8004d00 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004cde:	897b      	ldrh	r3, [r7, #10]
 8004ce0:	b2da      	uxtb	r2, r3
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	687a      	ldr	r2, [r7, #4]
 8004cec:	4907      	ldr	r1, [pc, #28]	; (8004d0c <I2C_MasterRequestWrite+0x100>)
 8004cee:	68f8      	ldr	r0, [r7, #12]
 8004cf0:	f000 fb59 	bl	80053a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004cf4:	4603      	mov	r3, r0
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d001      	beq.n	8004cfe <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	e000      	b.n	8004d00 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004cfe:	2300      	movs	r3, #0
}
 8004d00:	4618      	mov	r0, r3
 8004d02:	3718      	adds	r7, #24
 8004d04:	46bd      	mov	sp, r7
 8004d06:	bd80      	pop	{r7, pc}
 8004d08:	00010008 	.word	0x00010008
 8004d0c:	00010002 	.word	0x00010002

08004d10 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b088      	sub	sp, #32
 8004d14:	af02      	add	r7, sp, #8
 8004d16:	60f8      	str	r0, [r7, #12]
 8004d18:	607a      	str	r2, [r7, #4]
 8004d1a:	603b      	str	r3, [r7, #0]
 8004d1c:	460b      	mov	r3, r1
 8004d1e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d24:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	681a      	ldr	r2, [r3, #0]
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004d34:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004d36:	697b      	ldr	r3, [r7, #20]
 8004d38:	2b08      	cmp	r3, #8
 8004d3a:	d006      	beq.n	8004d4a <I2C_MasterRequestRead+0x3a>
 8004d3c:	697b      	ldr	r3, [r7, #20]
 8004d3e:	2b01      	cmp	r3, #1
 8004d40:	d003      	beq.n	8004d4a <I2C_MasterRequestRead+0x3a>
 8004d42:	697b      	ldr	r3, [r7, #20]
 8004d44:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004d48:	d108      	bne.n	8004d5c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	681a      	ldr	r2, [r3, #0]
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d58:	601a      	str	r2, [r3, #0]
 8004d5a:	e00b      	b.n	8004d74 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d60:	2b11      	cmp	r3, #17
 8004d62:	d107      	bne.n	8004d74 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	681a      	ldr	r2, [r3, #0]
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d72:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	9300      	str	r3, [sp, #0]
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004d80:	68f8      	ldr	r0, [r7, #12]
 8004d82:	f000 fab9 	bl	80052f8 <I2C_WaitOnFlagUntilTimeout>
 8004d86:	4603      	mov	r3, r0
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d00d      	beq.n	8004da8 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d9a:	d103      	bne.n	8004da4 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004da2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004da4:	2303      	movs	r3, #3
 8004da6:	e079      	b.n	8004e9c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	691b      	ldr	r3, [r3, #16]
 8004dac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004db0:	d108      	bne.n	8004dc4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004db2:	897b      	ldrh	r3, [r7, #10]
 8004db4:	b2db      	uxtb	r3, r3
 8004db6:	f043 0301 	orr.w	r3, r3, #1
 8004dba:	b2da      	uxtb	r2, r3
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	611a      	str	r2, [r3, #16]
 8004dc2:	e05f      	b.n	8004e84 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004dc4:	897b      	ldrh	r3, [r7, #10]
 8004dc6:	11db      	asrs	r3, r3, #7
 8004dc8:	b2db      	uxtb	r3, r3
 8004dca:	f003 0306 	and.w	r3, r3, #6
 8004dce:	b2db      	uxtb	r3, r3
 8004dd0:	f063 030f 	orn	r3, r3, #15
 8004dd4:	b2da      	uxtb	r2, r3
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	687a      	ldr	r2, [r7, #4]
 8004de0:	4930      	ldr	r1, [pc, #192]	; (8004ea4 <I2C_MasterRequestRead+0x194>)
 8004de2:	68f8      	ldr	r0, [r7, #12]
 8004de4:	f000 fadf 	bl	80053a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004de8:	4603      	mov	r3, r0
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d001      	beq.n	8004df2 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004dee:	2301      	movs	r3, #1
 8004df0:	e054      	b.n	8004e9c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004df2:	897b      	ldrh	r3, [r7, #10]
 8004df4:	b2da      	uxtb	r2, r3
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	687a      	ldr	r2, [r7, #4]
 8004e00:	4929      	ldr	r1, [pc, #164]	; (8004ea8 <I2C_MasterRequestRead+0x198>)
 8004e02:	68f8      	ldr	r0, [r7, #12]
 8004e04:	f000 facf 	bl	80053a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004e08:	4603      	mov	r3, r0
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d001      	beq.n	8004e12 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004e0e:	2301      	movs	r3, #1
 8004e10:	e044      	b.n	8004e9c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e12:	2300      	movs	r3, #0
 8004e14:	613b      	str	r3, [r7, #16]
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	695b      	ldr	r3, [r3, #20]
 8004e1c:	613b      	str	r3, [r7, #16]
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	699b      	ldr	r3, [r3, #24]
 8004e24:	613b      	str	r3, [r7, #16]
 8004e26:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	681a      	ldr	r2, [r3, #0]
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e36:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	9300      	str	r3, [sp, #0]
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004e44:	68f8      	ldr	r0, [r7, #12]
 8004e46:	f000 fa57 	bl	80052f8 <I2C_WaitOnFlagUntilTimeout>
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d00d      	beq.n	8004e6c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e5e:	d103      	bne.n	8004e68 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004e66:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8004e68:	2303      	movs	r3, #3
 8004e6a:	e017      	b.n	8004e9c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004e6c:	897b      	ldrh	r3, [r7, #10]
 8004e6e:	11db      	asrs	r3, r3, #7
 8004e70:	b2db      	uxtb	r3, r3
 8004e72:	f003 0306 	and.w	r3, r3, #6
 8004e76:	b2db      	uxtb	r3, r3
 8004e78:	f063 030e 	orn	r3, r3, #14
 8004e7c:	b2da      	uxtb	r2, r3
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	687a      	ldr	r2, [r7, #4]
 8004e88:	4907      	ldr	r1, [pc, #28]	; (8004ea8 <I2C_MasterRequestRead+0x198>)
 8004e8a:	68f8      	ldr	r0, [r7, #12]
 8004e8c:	f000 fa8b 	bl	80053a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004e90:	4603      	mov	r3, r0
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d001      	beq.n	8004e9a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004e96:	2301      	movs	r3, #1
 8004e98:	e000      	b.n	8004e9c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004e9a:	2300      	movs	r3, #0
}
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	3718      	adds	r7, #24
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	bd80      	pop	{r7, pc}
 8004ea4:	00010008 	.word	0x00010008
 8004ea8:	00010002 	.word	0x00010002

08004eac <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b088      	sub	sp, #32
 8004eb0:	af02      	add	r7, sp, #8
 8004eb2:	60f8      	str	r0, [r7, #12]
 8004eb4:	4608      	mov	r0, r1
 8004eb6:	4611      	mov	r1, r2
 8004eb8:	461a      	mov	r2, r3
 8004eba:	4603      	mov	r3, r0
 8004ebc:	817b      	strh	r3, [r7, #10]
 8004ebe:	460b      	mov	r3, r1
 8004ec0:	813b      	strh	r3, [r7, #8]
 8004ec2:	4613      	mov	r3, r2
 8004ec4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	681a      	ldr	r2, [r3, #0]
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ed4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed8:	9300      	str	r3, [sp, #0]
 8004eda:	6a3b      	ldr	r3, [r7, #32]
 8004edc:	2200      	movs	r2, #0
 8004ede:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004ee2:	68f8      	ldr	r0, [r7, #12]
 8004ee4:	f000 fa08 	bl	80052f8 <I2C_WaitOnFlagUntilTimeout>
 8004ee8:	4603      	mov	r3, r0
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d00d      	beq.n	8004f0a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ef8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004efc:	d103      	bne.n	8004f06 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004f04:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004f06:	2303      	movs	r3, #3
 8004f08:	e05f      	b.n	8004fca <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004f0a:	897b      	ldrh	r3, [r7, #10]
 8004f0c:	b2db      	uxtb	r3, r3
 8004f0e:	461a      	mov	r2, r3
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004f18:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f1c:	6a3a      	ldr	r2, [r7, #32]
 8004f1e:	492d      	ldr	r1, [pc, #180]	; (8004fd4 <I2C_RequestMemoryWrite+0x128>)
 8004f20:	68f8      	ldr	r0, [r7, #12]
 8004f22:	f000 fa40 	bl	80053a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004f26:	4603      	mov	r3, r0
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d001      	beq.n	8004f30 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	e04c      	b.n	8004fca <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f30:	2300      	movs	r3, #0
 8004f32:	617b      	str	r3, [r7, #20]
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	695b      	ldr	r3, [r3, #20]
 8004f3a:	617b      	str	r3, [r7, #20]
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	699b      	ldr	r3, [r3, #24]
 8004f42:	617b      	str	r3, [r7, #20]
 8004f44:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f48:	6a39      	ldr	r1, [r7, #32]
 8004f4a:	68f8      	ldr	r0, [r7, #12]
 8004f4c:	f000 faaa 	bl	80054a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004f50:	4603      	mov	r3, r0
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d00d      	beq.n	8004f72 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f5a:	2b04      	cmp	r3, #4
 8004f5c:	d107      	bne.n	8004f6e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	681a      	ldr	r2, [r3, #0]
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f6c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004f6e:	2301      	movs	r3, #1
 8004f70:	e02b      	b.n	8004fca <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004f72:	88fb      	ldrh	r3, [r7, #6]
 8004f74:	2b01      	cmp	r3, #1
 8004f76:	d105      	bne.n	8004f84 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004f78:	893b      	ldrh	r3, [r7, #8]
 8004f7a:	b2da      	uxtb	r2, r3
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	611a      	str	r2, [r3, #16]
 8004f82:	e021      	b.n	8004fc8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004f84:	893b      	ldrh	r3, [r7, #8]
 8004f86:	0a1b      	lsrs	r3, r3, #8
 8004f88:	b29b      	uxth	r3, r3
 8004f8a:	b2da      	uxtb	r2, r3
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f94:	6a39      	ldr	r1, [r7, #32]
 8004f96:	68f8      	ldr	r0, [r7, #12]
 8004f98:	f000 fa84 	bl	80054a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004f9c:	4603      	mov	r3, r0
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d00d      	beq.n	8004fbe <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fa6:	2b04      	cmp	r3, #4
 8004fa8:	d107      	bne.n	8004fba <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	681a      	ldr	r2, [r3, #0]
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fb8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004fba:	2301      	movs	r3, #1
 8004fbc:	e005      	b.n	8004fca <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004fbe:	893b      	ldrh	r3, [r7, #8]
 8004fc0:	b2da      	uxtb	r2, r3
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004fc8:	2300      	movs	r3, #0
}
 8004fca:	4618      	mov	r0, r3
 8004fcc:	3718      	adds	r7, #24
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	bd80      	pop	{r7, pc}
 8004fd2:	bf00      	nop
 8004fd4:	00010002 	.word	0x00010002

08004fd8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b088      	sub	sp, #32
 8004fdc:	af02      	add	r7, sp, #8
 8004fde:	60f8      	str	r0, [r7, #12]
 8004fe0:	4608      	mov	r0, r1
 8004fe2:	4611      	mov	r1, r2
 8004fe4:	461a      	mov	r2, r3
 8004fe6:	4603      	mov	r3, r0
 8004fe8:	817b      	strh	r3, [r7, #10]
 8004fea:	460b      	mov	r3, r1
 8004fec:	813b      	strh	r3, [r7, #8]
 8004fee:	4613      	mov	r3, r2
 8004ff0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	681a      	ldr	r2, [r3, #0]
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005000:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	681a      	ldr	r2, [r3, #0]
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005010:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005014:	9300      	str	r3, [sp, #0]
 8005016:	6a3b      	ldr	r3, [r7, #32]
 8005018:	2200      	movs	r2, #0
 800501a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800501e:	68f8      	ldr	r0, [r7, #12]
 8005020:	f000 f96a 	bl	80052f8 <I2C_WaitOnFlagUntilTimeout>
 8005024:	4603      	mov	r3, r0
 8005026:	2b00      	cmp	r3, #0
 8005028:	d00d      	beq.n	8005046 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005034:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005038:	d103      	bne.n	8005042 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005040:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005042:	2303      	movs	r3, #3
 8005044:	e0aa      	b.n	800519c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005046:	897b      	ldrh	r3, [r7, #10]
 8005048:	b2db      	uxtb	r3, r3
 800504a:	461a      	mov	r2, r3
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005054:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005058:	6a3a      	ldr	r2, [r7, #32]
 800505a:	4952      	ldr	r1, [pc, #328]	; (80051a4 <I2C_RequestMemoryRead+0x1cc>)
 800505c:	68f8      	ldr	r0, [r7, #12]
 800505e:	f000 f9a2 	bl	80053a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005062:	4603      	mov	r3, r0
 8005064:	2b00      	cmp	r3, #0
 8005066:	d001      	beq.n	800506c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005068:	2301      	movs	r3, #1
 800506a:	e097      	b.n	800519c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800506c:	2300      	movs	r3, #0
 800506e:	617b      	str	r3, [r7, #20]
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	695b      	ldr	r3, [r3, #20]
 8005076:	617b      	str	r3, [r7, #20]
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	699b      	ldr	r3, [r3, #24]
 800507e:	617b      	str	r3, [r7, #20]
 8005080:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005082:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005084:	6a39      	ldr	r1, [r7, #32]
 8005086:	68f8      	ldr	r0, [r7, #12]
 8005088:	f000 fa0c 	bl	80054a4 <I2C_WaitOnTXEFlagUntilTimeout>
 800508c:	4603      	mov	r3, r0
 800508e:	2b00      	cmp	r3, #0
 8005090:	d00d      	beq.n	80050ae <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005096:	2b04      	cmp	r3, #4
 8005098:	d107      	bne.n	80050aa <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	681a      	ldr	r2, [r3, #0]
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050a8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80050aa:	2301      	movs	r3, #1
 80050ac:	e076      	b.n	800519c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80050ae:	88fb      	ldrh	r3, [r7, #6]
 80050b0:	2b01      	cmp	r3, #1
 80050b2:	d105      	bne.n	80050c0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80050b4:	893b      	ldrh	r3, [r7, #8]
 80050b6:	b2da      	uxtb	r2, r3
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	611a      	str	r2, [r3, #16]
 80050be:	e021      	b.n	8005104 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80050c0:	893b      	ldrh	r3, [r7, #8]
 80050c2:	0a1b      	lsrs	r3, r3, #8
 80050c4:	b29b      	uxth	r3, r3
 80050c6:	b2da      	uxtb	r2, r3
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80050ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050d0:	6a39      	ldr	r1, [r7, #32]
 80050d2:	68f8      	ldr	r0, [r7, #12]
 80050d4:	f000 f9e6 	bl	80054a4 <I2C_WaitOnTXEFlagUntilTimeout>
 80050d8:	4603      	mov	r3, r0
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d00d      	beq.n	80050fa <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050e2:	2b04      	cmp	r3, #4
 80050e4:	d107      	bne.n	80050f6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	681a      	ldr	r2, [r3, #0]
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050f4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80050f6:	2301      	movs	r3, #1
 80050f8:	e050      	b.n	800519c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80050fa:	893b      	ldrh	r3, [r7, #8]
 80050fc:	b2da      	uxtb	r2, r3
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005104:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005106:	6a39      	ldr	r1, [r7, #32]
 8005108:	68f8      	ldr	r0, [r7, #12]
 800510a:	f000 f9cb 	bl	80054a4 <I2C_WaitOnTXEFlagUntilTimeout>
 800510e:	4603      	mov	r3, r0
 8005110:	2b00      	cmp	r3, #0
 8005112:	d00d      	beq.n	8005130 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005118:	2b04      	cmp	r3, #4
 800511a:	d107      	bne.n	800512c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	681a      	ldr	r2, [r3, #0]
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800512a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800512c:	2301      	movs	r3, #1
 800512e:	e035      	b.n	800519c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	681a      	ldr	r2, [r3, #0]
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800513e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005142:	9300      	str	r3, [sp, #0]
 8005144:	6a3b      	ldr	r3, [r7, #32]
 8005146:	2200      	movs	r2, #0
 8005148:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800514c:	68f8      	ldr	r0, [r7, #12]
 800514e:	f000 f8d3 	bl	80052f8 <I2C_WaitOnFlagUntilTimeout>
 8005152:	4603      	mov	r3, r0
 8005154:	2b00      	cmp	r3, #0
 8005156:	d00d      	beq.n	8005174 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005162:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005166:	d103      	bne.n	8005170 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800516e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005170:	2303      	movs	r3, #3
 8005172:	e013      	b.n	800519c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005174:	897b      	ldrh	r3, [r7, #10]
 8005176:	b2db      	uxtb	r3, r3
 8005178:	f043 0301 	orr.w	r3, r3, #1
 800517c:	b2da      	uxtb	r2, r3
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005186:	6a3a      	ldr	r2, [r7, #32]
 8005188:	4906      	ldr	r1, [pc, #24]	; (80051a4 <I2C_RequestMemoryRead+0x1cc>)
 800518a:	68f8      	ldr	r0, [r7, #12]
 800518c:	f000 f90b 	bl	80053a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005190:	4603      	mov	r3, r0
 8005192:	2b00      	cmp	r3, #0
 8005194:	d001      	beq.n	800519a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005196:	2301      	movs	r3, #1
 8005198:	e000      	b.n	800519c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800519a:	2300      	movs	r3, #0
}
 800519c:	4618      	mov	r0, r3
 800519e:	3718      	adds	r7, #24
 80051a0:	46bd      	mov	sp, r7
 80051a2:	bd80      	pop	{r7, pc}
 80051a4:	00010002 	.word	0x00010002

080051a8 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b086      	sub	sp, #24
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80051b0:	2300      	movs	r3, #0
 80051b2:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051b8:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80051ba:	697b      	ldr	r3, [r7, #20]
 80051bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051c0:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80051c2:	4b4b      	ldr	r3, [pc, #300]	; (80052f0 <I2C_DMAAbort+0x148>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	08db      	lsrs	r3, r3, #3
 80051c8:	4a4a      	ldr	r2, [pc, #296]	; (80052f4 <I2C_DMAAbort+0x14c>)
 80051ca:	fba2 2303 	umull	r2, r3, r2, r3
 80051ce:	0a1a      	lsrs	r2, r3, #8
 80051d0:	4613      	mov	r3, r2
 80051d2:	009b      	lsls	r3, r3, #2
 80051d4:	4413      	add	r3, r2
 80051d6:	00da      	lsls	r2, r3, #3
 80051d8:	1ad3      	subs	r3, r2, r3
 80051da:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d106      	bne.n	80051f0 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80051e2:	697b      	ldr	r3, [r7, #20]
 80051e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051e6:	f043 0220 	orr.w	r2, r3, #32
 80051ea:	697b      	ldr	r3, [r7, #20]
 80051ec:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80051ee:	e00a      	b.n	8005206 <I2C_DMAAbort+0x5e>
    }
    count--;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	3b01      	subs	r3, #1
 80051f4:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80051f6:	697b      	ldr	r3, [r7, #20]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005200:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005204:	d0ea      	beq.n	80051dc <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005206:	697b      	ldr	r3, [r7, #20]
 8005208:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800520a:	2b00      	cmp	r3, #0
 800520c:	d003      	beq.n	8005216 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800520e:	697b      	ldr	r3, [r7, #20]
 8005210:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005212:	2200      	movs	r2, #0
 8005214:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 8005216:	697b      	ldr	r3, [r7, #20]
 8005218:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800521a:	2b00      	cmp	r3, #0
 800521c:	d003      	beq.n	8005226 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800521e:	697b      	ldr	r3, [r7, #20]
 8005220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005222:	2200      	movs	r2, #0
 8005224:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005226:	697b      	ldr	r3, [r7, #20]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	681a      	ldr	r2, [r3, #0]
 800522c:	697b      	ldr	r3, [r7, #20]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005234:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8005236:	697b      	ldr	r3, [r7, #20]
 8005238:	2200      	movs	r2, #0
 800523a:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800523c:	697b      	ldr	r3, [r7, #20]
 800523e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005240:	2b00      	cmp	r3, #0
 8005242:	d003      	beq.n	800524c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005244:	697b      	ldr	r3, [r7, #20]
 8005246:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005248:	2200      	movs	r2, #0
 800524a:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 800524c:	697b      	ldr	r3, [r7, #20]
 800524e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005250:	2b00      	cmp	r3, #0
 8005252:	d003      	beq.n	800525c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005254:	697b      	ldr	r3, [r7, #20]
 8005256:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005258:	2200      	movs	r2, #0
 800525a:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800525c:	697b      	ldr	r3, [r7, #20]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	681a      	ldr	r2, [r3, #0]
 8005262:	697b      	ldr	r3, [r7, #20]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f022 0201 	bic.w	r2, r2, #1
 800526a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800526c:	697b      	ldr	r3, [r7, #20]
 800526e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005272:	b2db      	uxtb	r3, r3
 8005274:	2b60      	cmp	r3, #96	; 0x60
 8005276:	d10e      	bne.n	8005296 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005278:	697b      	ldr	r3, [r7, #20]
 800527a:	2220      	movs	r2, #32
 800527c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005280:	697b      	ldr	r3, [r7, #20]
 8005282:	2200      	movs	r2, #0
 8005284:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005288:	697b      	ldr	r3, [r7, #20]
 800528a:	2200      	movs	r2, #0
 800528c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800528e:	6978      	ldr	r0, [r7, #20]
 8005290:	f7ff fb11 	bl	80048b6 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005294:	e027      	b.n	80052e6 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005296:	7cfb      	ldrb	r3, [r7, #19]
 8005298:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800529c:	2b28      	cmp	r3, #40	; 0x28
 800529e:	d117      	bne.n	80052d0 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80052a0:	697b      	ldr	r3, [r7, #20]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	681a      	ldr	r2, [r3, #0]
 80052a6:	697b      	ldr	r3, [r7, #20]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f042 0201 	orr.w	r2, r2, #1
 80052ae:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052b0:	697b      	ldr	r3, [r7, #20]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	681a      	ldr	r2, [r3, #0]
 80052b6:	697b      	ldr	r3, [r7, #20]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80052be:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80052c0:	697b      	ldr	r3, [r7, #20]
 80052c2:	2200      	movs	r2, #0
 80052c4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80052c6:	697b      	ldr	r3, [r7, #20]
 80052c8:	2228      	movs	r2, #40	; 0x28
 80052ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80052ce:	e007      	b.n	80052e0 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80052d0:	697b      	ldr	r3, [r7, #20]
 80052d2:	2220      	movs	r2, #32
 80052d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80052d8:	697b      	ldr	r3, [r7, #20]
 80052da:	2200      	movs	r2, #0
 80052dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80052e0:	6978      	ldr	r0, [r7, #20]
 80052e2:	f7fd f99b 	bl	800261c <HAL_I2C_ErrorCallback>
}
 80052e6:	bf00      	nop
 80052e8:	3718      	adds	r7, #24
 80052ea:	46bd      	mov	sp, r7
 80052ec:	bd80      	pop	{r7, pc}
 80052ee:	bf00      	nop
 80052f0:	2000003c 	.word	0x2000003c
 80052f4:	14f8b589 	.word	0x14f8b589

080052f8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b084      	sub	sp, #16
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	60f8      	str	r0, [r7, #12]
 8005300:	60b9      	str	r1, [r7, #8]
 8005302:	603b      	str	r3, [r7, #0]
 8005304:	4613      	mov	r3, r2
 8005306:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005308:	e025      	b.n	8005356 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005310:	d021      	beq.n	8005356 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005312:	f7fd fd77 	bl	8002e04 <HAL_GetTick>
 8005316:	4602      	mov	r2, r0
 8005318:	69bb      	ldr	r3, [r7, #24]
 800531a:	1ad3      	subs	r3, r2, r3
 800531c:	683a      	ldr	r2, [r7, #0]
 800531e:	429a      	cmp	r2, r3
 8005320:	d302      	bcc.n	8005328 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d116      	bne.n	8005356 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	2200      	movs	r2, #0
 800532c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	2220      	movs	r2, #32
 8005332:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	2200      	movs	r2, #0
 800533a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005342:	f043 0220 	orr.w	r2, r3, #32
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	2200      	movs	r2, #0
 800534e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005352:	2301      	movs	r3, #1
 8005354:	e023      	b.n	800539e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005356:	68bb      	ldr	r3, [r7, #8]
 8005358:	0c1b      	lsrs	r3, r3, #16
 800535a:	b2db      	uxtb	r3, r3
 800535c:	2b01      	cmp	r3, #1
 800535e:	d10d      	bne.n	800537c <I2C_WaitOnFlagUntilTimeout+0x84>
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	695b      	ldr	r3, [r3, #20]
 8005366:	43da      	mvns	r2, r3
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	4013      	ands	r3, r2
 800536c:	b29b      	uxth	r3, r3
 800536e:	2b00      	cmp	r3, #0
 8005370:	bf0c      	ite	eq
 8005372:	2301      	moveq	r3, #1
 8005374:	2300      	movne	r3, #0
 8005376:	b2db      	uxtb	r3, r3
 8005378:	461a      	mov	r2, r3
 800537a:	e00c      	b.n	8005396 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	699b      	ldr	r3, [r3, #24]
 8005382:	43da      	mvns	r2, r3
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	4013      	ands	r3, r2
 8005388:	b29b      	uxth	r3, r3
 800538a:	2b00      	cmp	r3, #0
 800538c:	bf0c      	ite	eq
 800538e:	2301      	moveq	r3, #1
 8005390:	2300      	movne	r3, #0
 8005392:	b2db      	uxtb	r3, r3
 8005394:	461a      	mov	r2, r3
 8005396:	79fb      	ldrb	r3, [r7, #7]
 8005398:	429a      	cmp	r2, r3
 800539a:	d0b6      	beq.n	800530a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800539c:	2300      	movs	r3, #0
}
 800539e:	4618      	mov	r0, r3
 80053a0:	3710      	adds	r7, #16
 80053a2:	46bd      	mov	sp, r7
 80053a4:	bd80      	pop	{r7, pc}

080053a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80053a6:	b580      	push	{r7, lr}
 80053a8:	b084      	sub	sp, #16
 80053aa:	af00      	add	r7, sp, #0
 80053ac:	60f8      	str	r0, [r7, #12]
 80053ae:	60b9      	str	r1, [r7, #8]
 80053b0:	607a      	str	r2, [r7, #4]
 80053b2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80053b4:	e051      	b.n	800545a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	695b      	ldr	r3, [r3, #20]
 80053bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053c4:	d123      	bne.n	800540e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	681a      	ldr	r2, [r3, #0]
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053d4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80053de:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	2200      	movs	r2, #0
 80053e4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	2220      	movs	r2, #32
 80053ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	2200      	movs	r2, #0
 80053f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053fa:	f043 0204 	orr.w	r2, r3, #4
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	2200      	movs	r2, #0
 8005406:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800540a:	2301      	movs	r3, #1
 800540c:	e046      	b.n	800549c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005414:	d021      	beq.n	800545a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005416:	f7fd fcf5 	bl	8002e04 <HAL_GetTick>
 800541a:	4602      	mov	r2, r0
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	1ad3      	subs	r3, r2, r3
 8005420:	687a      	ldr	r2, [r7, #4]
 8005422:	429a      	cmp	r2, r3
 8005424:	d302      	bcc.n	800542c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d116      	bne.n	800545a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	2200      	movs	r2, #0
 8005430:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	2220      	movs	r2, #32
 8005436:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	2200      	movs	r2, #0
 800543e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005446:	f043 0220 	orr.w	r2, r3, #32
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	2200      	movs	r2, #0
 8005452:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005456:	2301      	movs	r3, #1
 8005458:	e020      	b.n	800549c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800545a:	68bb      	ldr	r3, [r7, #8]
 800545c:	0c1b      	lsrs	r3, r3, #16
 800545e:	b2db      	uxtb	r3, r3
 8005460:	2b01      	cmp	r3, #1
 8005462:	d10c      	bne.n	800547e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	695b      	ldr	r3, [r3, #20]
 800546a:	43da      	mvns	r2, r3
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	4013      	ands	r3, r2
 8005470:	b29b      	uxth	r3, r3
 8005472:	2b00      	cmp	r3, #0
 8005474:	bf14      	ite	ne
 8005476:	2301      	movne	r3, #1
 8005478:	2300      	moveq	r3, #0
 800547a:	b2db      	uxtb	r3, r3
 800547c:	e00b      	b.n	8005496 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	699b      	ldr	r3, [r3, #24]
 8005484:	43da      	mvns	r2, r3
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	4013      	ands	r3, r2
 800548a:	b29b      	uxth	r3, r3
 800548c:	2b00      	cmp	r3, #0
 800548e:	bf14      	ite	ne
 8005490:	2301      	movne	r3, #1
 8005492:	2300      	moveq	r3, #0
 8005494:	b2db      	uxtb	r3, r3
 8005496:	2b00      	cmp	r3, #0
 8005498:	d18d      	bne.n	80053b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800549a:	2300      	movs	r3, #0
}
 800549c:	4618      	mov	r0, r3
 800549e:	3710      	adds	r7, #16
 80054a0:	46bd      	mov	sp, r7
 80054a2:	bd80      	pop	{r7, pc}

080054a4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b084      	sub	sp, #16
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	60f8      	str	r0, [r7, #12]
 80054ac:	60b9      	str	r1, [r7, #8]
 80054ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80054b0:	e02d      	b.n	800550e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80054b2:	68f8      	ldr	r0, [r7, #12]
 80054b4:	f000 f8ce 	bl	8005654 <I2C_IsAcknowledgeFailed>
 80054b8:	4603      	mov	r3, r0
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d001      	beq.n	80054c2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80054be:	2301      	movs	r3, #1
 80054c0:	e02d      	b.n	800551e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054c2:	68bb      	ldr	r3, [r7, #8]
 80054c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80054c8:	d021      	beq.n	800550e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054ca:	f7fd fc9b 	bl	8002e04 <HAL_GetTick>
 80054ce:	4602      	mov	r2, r0
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	1ad3      	subs	r3, r2, r3
 80054d4:	68ba      	ldr	r2, [r7, #8]
 80054d6:	429a      	cmp	r2, r3
 80054d8:	d302      	bcc.n	80054e0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80054da:	68bb      	ldr	r3, [r7, #8]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d116      	bne.n	800550e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	2200      	movs	r2, #0
 80054e4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	2220      	movs	r2, #32
 80054ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	2200      	movs	r2, #0
 80054f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054fa:	f043 0220 	orr.w	r2, r3, #32
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	2200      	movs	r2, #0
 8005506:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800550a:	2301      	movs	r3, #1
 800550c:	e007      	b.n	800551e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	695b      	ldr	r3, [r3, #20]
 8005514:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005518:	2b80      	cmp	r3, #128	; 0x80
 800551a:	d1ca      	bne.n	80054b2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800551c:	2300      	movs	r3, #0
}
 800551e:	4618      	mov	r0, r3
 8005520:	3710      	adds	r7, #16
 8005522:	46bd      	mov	sp, r7
 8005524:	bd80      	pop	{r7, pc}

08005526 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005526:	b580      	push	{r7, lr}
 8005528:	b084      	sub	sp, #16
 800552a:	af00      	add	r7, sp, #0
 800552c:	60f8      	str	r0, [r7, #12]
 800552e:	60b9      	str	r1, [r7, #8]
 8005530:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005532:	e02d      	b.n	8005590 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005534:	68f8      	ldr	r0, [r7, #12]
 8005536:	f000 f88d 	bl	8005654 <I2C_IsAcknowledgeFailed>
 800553a:	4603      	mov	r3, r0
 800553c:	2b00      	cmp	r3, #0
 800553e:	d001      	beq.n	8005544 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005540:	2301      	movs	r3, #1
 8005542:	e02d      	b.n	80055a0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005544:	68bb      	ldr	r3, [r7, #8]
 8005546:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800554a:	d021      	beq.n	8005590 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800554c:	f7fd fc5a 	bl	8002e04 <HAL_GetTick>
 8005550:	4602      	mov	r2, r0
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	1ad3      	subs	r3, r2, r3
 8005556:	68ba      	ldr	r2, [r7, #8]
 8005558:	429a      	cmp	r2, r3
 800555a:	d302      	bcc.n	8005562 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d116      	bne.n	8005590 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	2200      	movs	r2, #0
 8005566:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	2220      	movs	r2, #32
 800556c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	2200      	movs	r2, #0
 8005574:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800557c:	f043 0220 	orr.w	r2, r3, #32
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	2200      	movs	r2, #0
 8005588:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800558c:	2301      	movs	r3, #1
 800558e:	e007      	b.n	80055a0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	695b      	ldr	r3, [r3, #20]
 8005596:	f003 0304 	and.w	r3, r3, #4
 800559a:	2b04      	cmp	r3, #4
 800559c:	d1ca      	bne.n	8005534 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800559e:	2300      	movs	r3, #0
}
 80055a0:	4618      	mov	r0, r3
 80055a2:	3710      	adds	r7, #16
 80055a4:	46bd      	mov	sp, r7
 80055a6:	bd80      	pop	{r7, pc}

080055a8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b084      	sub	sp, #16
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	60f8      	str	r0, [r7, #12]
 80055b0:	60b9      	str	r1, [r7, #8]
 80055b2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80055b4:	e042      	b.n	800563c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	695b      	ldr	r3, [r3, #20]
 80055bc:	f003 0310 	and.w	r3, r3, #16
 80055c0:	2b10      	cmp	r3, #16
 80055c2:	d119      	bne.n	80055f8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f06f 0210 	mvn.w	r2, #16
 80055cc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	2200      	movs	r2, #0
 80055d2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	2220      	movs	r2, #32
 80055d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	2200      	movs	r2, #0
 80055e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	2200      	movs	r2, #0
 80055f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80055f4:	2301      	movs	r3, #1
 80055f6:	e029      	b.n	800564c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055f8:	f7fd fc04 	bl	8002e04 <HAL_GetTick>
 80055fc:	4602      	mov	r2, r0
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	1ad3      	subs	r3, r2, r3
 8005602:	68ba      	ldr	r2, [r7, #8]
 8005604:	429a      	cmp	r2, r3
 8005606:	d302      	bcc.n	800560e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d116      	bne.n	800563c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	2200      	movs	r2, #0
 8005612:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	2220      	movs	r2, #32
 8005618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	2200      	movs	r2, #0
 8005620:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005628:	f043 0220 	orr.w	r2, r3, #32
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	2200      	movs	r2, #0
 8005634:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005638:	2301      	movs	r3, #1
 800563a:	e007      	b.n	800564c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	695b      	ldr	r3, [r3, #20]
 8005642:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005646:	2b40      	cmp	r3, #64	; 0x40
 8005648:	d1b5      	bne.n	80055b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800564a:	2300      	movs	r3, #0
}
 800564c:	4618      	mov	r0, r3
 800564e:	3710      	adds	r7, #16
 8005650:	46bd      	mov	sp, r7
 8005652:	bd80      	pop	{r7, pc}

08005654 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005654:	b480      	push	{r7}
 8005656:	b083      	sub	sp, #12
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	695b      	ldr	r3, [r3, #20]
 8005662:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005666:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800566a:	d11b      	bne.n	80056a4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005674:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2200      	movs	r2, #0
 800567a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2220      	movs	r2, #32
 8005680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2200      	movs	r2, #0
 8005688:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005690:	f043 0204 	orr.w	r2, r3, #4
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2200      	movs	r2, #0
 800569c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80056a0:	2301      	movs	r3, #1
 80056a2:	e000      	b.n	80056a6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80056a4:	2300      	movs	r3, #0
}
 80056a6:	4618      	mov	r0, r3
 80056a8:	370c      	adds	r7, #12
 80056aa:	46bd      	mov	sp, r7
 80056ac:	bc80      	pop	{r7}
 80056ae:	4770      	bx	lr

080056b0 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b084      	sub	sp, #16
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d101      	bne.n	80056c2 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 80056be:	2301      	movs	r3, #1
 80056c0:	e034      	b.n	800572c <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 80056ca:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f245 5255 	movw	r2, #21845	; 0x5555
 80056d4:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	687a      	ldr	r2, [r7, #4]
 80056dc:	6852      	ldr	r2, [r2, #4]
 80056de:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	687a      	ldr	r2, [r7, #4]
 80056e6:	6892      	ldr	r2, [r2, #8]
 80056e8:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 80056ea:	f7fd fb8b 	bl	8002e04 <HAL_GetTick>
 80056ee:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80056f0:	e00f      	b.n	8005712 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 80056f2:	f7fd fb87 	bl	8002e04 <HAL_GetTick>
 80056f6:	4602      	mov	r2, r0
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	1ad3      	subs	r3, r2, r3
 80056fc:	2b27      	cmp	r3, #39	; 0x27
 80056fe:	d908      	bls.n	8005712 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	68db      	ldr	r3, [r3, #12]
 8005706:	f003 0303 	and.w	r3, r3, #3
 800570a:	2b00      	cmp	r3, #0
 800570c:	d001      	beq.n	8005712 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 800570e:	2303      	movs	r3, #3
 8005710:	e00c      	b.n	800572c <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	68db      	ldr	r3, [r3, #12]
 8005718:	f003 0303 	and.w	r3, r3, #3
 800571c:	2b00      	cmp	r3, #0
 800571e:	d1e8      	bne.n	80056f2 <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8005728:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800572a:	2300      	movs	r3, #0
}
 800572c:	4618      	mov	r0, r3
 800572e:	3710      	adds	r7, #16
 8005730:	46bd      	mov	sp, r7
 8005732:	bd80      	pop	{r7, pc}

08005734 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8005734:	b480      	push	{r7}
 8005736:	b083      	sub	sp, #12
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8005744:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005746:	2300      	movs	r3, #0
}
 8005748:	4618      	mov	r0, r3
 800574a:	370c      	adds	r7, #12
 800574c:	46bd      	mov	sp, r7
 800574e:	bc80      	pop	{r7}
 8005750:	4770      	bx	lr
	...

08005754 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b086      	sub	sp, #24
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d101      	bne.n	8005766 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005762:	2301      	movs	r3, #1
 8005764:	e272      	b.n	8005c4c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f003 0301 	and.w	r3, r3, #1
 800576e:	2b00      	cmp	r3, #0
 8005770:	f000 8087 	beq.w	8005882 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005774:	4b92      	ldr	r3, [pc, #584]	; (80059c0 <HAL_RCC_OscConfig+0x26c>)
 8005776:	685b      	ldr	r3, [r3, #4]
 8005778:	f003 030c 	and.w	r3, r3, #12
 800577c:	2b04      	cmp	r3, #4
 800577e:	d00c      	beq.n	800579a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005780:	4b8f      	ldr	r3, [pc, #572]	; (80059c0 <HAL_RCC_OscConfig+0x26c>)
 8005782:	685b      	ldr	r3, [r3, #4]
 8005784:	f003 030c 	and.w	r3, r3, #12
 8005788:	2b08      	cmp	r3, #8
 800578a:	d112      	bne.n	80057b2 <HAL_RCC_OscConfig+0x5e>
 800578c:	4b8c      	ldr	r3, [pc, #560]	; (80059c0 <HAL_RCC_OscConfig+0x26c>)
 800578e:	685b      	ldr	r3, [r3, #4]
 8005790:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005794:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005798:	d10b      	bne.n	80057b2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800579a:	4b89      	ldr	r3, [pc, #548]	; (80059c0 <HAL_RCC_OscConfig+0x26c>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d06c      	beq.n	8005880 <HAL_RCC_OscConfig+0x12c>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	685b      	ldr	r3, [r3, #4]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d168      	bne.n	8005880 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80057ae:	2301      	movs	r3, #1
 80057b0:	e24c      	b.n	8005c4c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	685b      	ldr	r3, [r3, #4]
 80057b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057ba:	d106      	bne.n	80057ca <HAL_RCC_OscConfig+0x76>
 80057bc:	4b80      	ldr	r3, [pc, #512]	; (80059c0 <HAL_RCC_OscConfig+0x26c>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4a7f      	ldr	r2, [pc, #508]	; (80059c0 <HAL_RCC_OscConfig+0x26c>)
 80057c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057c6:	6013      	str	r3, [r2, #0]
 80057c8:	e02e      	b.n	8005828 <HAL_RCC_OscConfig+0xd4>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	685b      	ldr	r3, [r3, #4]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d10c      	bne.n	80057ec <HAL_RCC_OscConfig+0x98>
 80057d2:	4b7b      	ldr	r3, [pc, #492]	; (80059c0 <HAL_RCC_OscConfig+0x26c>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	4a7a      	ldr	r2, [pc, #488]	; (80059c0 <HAL_RCC_OscConfig+0x26c>)
 80057d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80057dc:	6013      	str	r3, [r2, #0]
 80057de:	4b78      	ldr	r3, [pc, #480]	; (80059c0 <HAL_RCC_OscConfig+0x26c>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	4a77      	ldr	r2, [pc, #476]	; (80059c0 <HAL_RCC_OscConfig+0x26c>)
 80057e4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80057e8:	6013      	str	r3, [r2, #0]
 80057ea:	e01d      	b.n	8005828 <HAL_RCC_OscConfig+0xd4>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	685b      	ldr	r3, [r3, #4]
 80057f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80057f4:	d10c      	bne.n	8005810 <HAL_RCC_OscConfig+0xbc>
 80057f6:	4b72      	ldr	r3, [pc, #456]	; (80059c0 <HAL_RCC_OscConfig+0x26c>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4a71      	ldr	r2, [pc, #452]	; (80059c0 <HAL_RCC_OscConfig+0x26c>)
 80057fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005800:	6013      	str	r3, [r2, #0]
 8005802:	4b6f      	ldr	r3, [pc, #444]	; (80059c0 <HAL_RCC_OscConfig+0x26c>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	4a6e      	ldr	r2, [pc, #440]	; (80059c0 <HAL_RCC_OscConfig+0x26c>)
 8005808:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800580c:	6013      	str	r3, [r2, #0]
 800580e:	e00b      	b.n	8005828 <HAL_RCC_OscConfig+0xd4>
 8005810:	4b6b      	ldr	r3, [pc, #428]	; (80059c0 <HAL_RCC_OscConfig+0x26c>)
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	4a6a      	ldr	r2, [pc, #424]	; (80059c0 <HAL_RCC_OscConfig+0x26c>)
 8005816:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800581a:	6013      	str	r3, [r2, #0]
 800581c:	4b68      	ldr	r3, [pc, #416]	; (80059c0 <HAL_RCC_OscConfig+0x26c>)
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	4a67      	ldr	r2, [pc, #412]	; (80059c0 <HAL_RCC_OscConfig+0x26c>)
 8005822:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005826:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	685b      	ldr	r3, [r3, #4]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d013      	beq.n	8005858 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005830:	f7fd fae8 	bl	8002e04 <HAL_GetTick>
 8005834:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005836:	e008      	b.n	800584a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005838:	f7fd fae4 	bl	8002e04 <HAL_GetTick>
 800583c:	4602      	mov	r2, r0
 800583e:	693b      	ldr	r3, [r7, #16]
 8005840:	1ad3      	subs	r3, r2, r3
 8005842:	2b64      	cmp	r3, #100	; 0x64
 8005844:	d901      	bls.n	800584a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005846:	2303      	movs	r3, #3
 8005848:	e200      	b.n	8005c4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800584a:	4b5d      	ldr	r3, [pc, #372]	; (80059c0 <HAL_RCC_OscConfig+0x26c>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005852:	2b00      	cmp	r3, #0
 8005854:	d0f0      	beq.n	8005838 <HAL_RCC_OscConfig+0xe4>
 8005856:	e014      	b.n	8005882 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005858:	f7fd fad4 	bl	8002e04 <HAL_GetTick>
 800585c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800585e:	e008      	b.n	8005872 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005860:	f7fd fad0 	bl	8002e04 <HAL_GetTick>
 8005864:	4602      	mov	r2, r0
 8005866:	693b      	ldr	r3, [r7, #16]
 8005868:	1ad3      	subs	r3, r2, r3
 800586a:	2b64      	cmp	r3, #100	; 0x64
 800586c:	d901      	bls.n	8005872 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800586e:	2303      	movs	r3, #3
 8005870:	e1ec      	b.n	8005c4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005872:	4b53      	ldr	r3, [pc, #332]	; (80059c0 <HAL_RCC_OscConfig+0x26c>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800587a:	2b00      	cmp	r3, #0
 800587c:	d1f0      	bne.n	8005860 <HAL_RCC_OscConfig+0x10c>
 800587e:	e000      	b.n	8005882 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005880:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f003 0302 	and.w	r3, r3, #2
 800588a:	2b00      	cmp	r3, #0
 800588c:	d063      	beq.n	8005956 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800588e:	4b4c      	ldr	r3, [pc, #304]	; (80059c0 <HAL_RCC_OscConfig+0x26c>)
 8005890:	685b      	ldr	r3, [r3, #4]
 8005892:	f003 030c 	and.w	r3, r3, #12
 8005896:	2b00      	cmp	r3, #0
 8005898:	d00b      	beq.n	80058b2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800589a:	4b49      	ldr	r3, [pc, #292]	; (80059c0 <HAL_RCC_OscConfig+0x26c>)
 800589c:	685b      	ldr	r3, [r3, #4]
 800589e:	f003 030c 	and.w	r3, r3, #12
 80058a2:	2b08      	cmp	r3, #8
 80058a4:	d11c      	bne.n	80058e0 <HAL_RCC_OscConfig+0x18c>
 80058a6:	4b46      	ldr	r3, [pc, #280]	; (80059c0 <HAL_RCC_OscConfig+0x26c>)
 80058a8:	685b      	ldr	r3, [r3, #4]
 80058aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d116      	bne.n	80058e0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80058b2:	4b43      	ldr	r3, [pc, #268]	; (80059c0 <HAL_RCC_OscConfig+0x26c>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f003 0302 	and.w	r3, r3, #2
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d005      	beq.n	80058ca <HAL_RCC_OscConfig+0x176>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	691b      	ldr	r3, [r3, #16]
 80058c2:	2b01      	cmp	r3, #1
 80058c4:	d001      	beq.n	80058ca <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80058c6:	2301      	movs	r3, #1
 80058c8:	e1c0      	b.n	8005c4c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058ca:	4b3d      	ldr	r3, [pc, #244]	; (80059c0 <HAL_RCC_OscConfig+0x26c>)
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	695b      	ldr	r3, [r3, #20]
 80058d6:	00db      	lsls	r3, r3, #3
 80058d8:	4939      	ldr	r1, [pc, #228]	; (80059c0 <HAL_RCC_OscConfig+0x26c>)
 80058da:	4313      	orrs	r3, r2
 80058dc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80058de:	e03a      	b.n	8005956 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	691b      	ldr	r3, [r3, #16]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d020      	beq.n	800592a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80058e8:	4b36      	ldr	r3, [pc, #216]	; (80059c4 <HAL_RCC_OscConfig+0x270>)
 80058ea:	2201      	movs	r2, #1
 80058ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058ee:	f7fd fa89 	bl	8002e04 <HAL_GetTick>
 80058f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80058f4:	e008      	b.n	8005908 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80058f6:	f7fd fa85 	bl	8002e04 <HAL_GetTick>
 80058fa:	4602      	mov	r2, r0
 80058fc:	693b      	ldr	r3, [r7, #16]
 80058fe:	1ad3      	subs	r3, r2, r3
 8005900:	2b02      	cmp	r3, #2
 8005902:	d901      	bls.n	8005908 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005904:	2303      	movs	r3, #3
 8005906:	e1a1      	b.n	8005c4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005908:	4b2d      	ldr	r3, [pc, #180]	; (80059c0 <HAL_RCC_OscConfig+0x26c>)
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f003 0302 	and.w	r3, r3, #2
 8005910:	2b00      	cmp	r3, #0
 8005912:	d0f0      	beq.n	80058f6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005914:	4b2a      	ldr	r3, [pc, #168]	; (80059c0 <HAL_RCC_OscConfig+0x26c>)
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	695b      	ldr	r3, [r3, #20]
 8005920:	00db      	lsls	r3, r3, #3
 8005922:	4927      	ldr	r1, [pc, #156]	; (80059c0 <HAL_RCC_OscConfig+0x26c>)
 8005924:	4313      	orrs	r3, r2
 8005926:	600b      	str	r3, [r1, #0]
 8005928:	e015      	b.n	8005956 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800592a:	4b26      	ldr	r3, [pc, #152]	; (80059c4 <HAL_RCC_OscConfig+0x270>)
 800592c:	2200      	movs	r2, #0
 800592e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005930:	f7fd fa68 	bl	8002e04 <HAL_GetTick>
 8005934:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005936:	e008      	b.n	800594a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005938:	f7fd fa64 	bl	8002e04 <HAL_GetTick>
 800593c:	4602      	mov	r2, r0
 800593e:	693b      	ldr	r3, [r7, #16]
 8005940:	1ad3      	subs	r3, r2, r3
 8005942:	2b02      	cmp	r3, #2
 8005944:	d901      	bls.n	800594a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005946:	2303      	movs	r3, #3
 8005948:	e180      	b.n	8005c4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800594a:	4b1d      	ldr	r3, [pc, #116]	; (80059c0 <HAL_RCC_OscConfig+0x26c>)
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f003 0302 	and.w	r3, r3, #2
 8005952:	2b00      	cmp	r3, #0
 8005954:	d1f0      	bne.n	8005938 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f003 0308 	and.w	r3, r3, #8
 800595e:	2b00      	cmp	r3, #0
 8005960:	d03a      	beq.n	80059d8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	699b      	ldr	r3, [r3, #24]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d019      	beq.n	800599e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800596a:	4b17      	ldr	r3, [pc, #92]	; (80059c8 <HAL_RCC_OscConfig+0x274>)
 800596c:	2201      	movs	r2, #1
 800596e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005970:	f7fd fa48 	bl	8002e04 <HAL_GetTick>
 8005974:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005976:	e008      	b.n	800598a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005978:	f7fd fa44 	bl	8002e04 <HAL_GetTick>
 800597c:	4602      	mov	r2, r0
 800597e:	693b      	ldr	r3, [r7, #16]
 8005980:	1ad3      	subs	r3, r2, r3
 8005982:	2b02      	cmp	r3, #2
 8005984:	d901      	bls.n	800598a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005986:	2303      	movs	r3, #3
 8005988:	e160      	b.n	8005c4c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800598a:	4b0d      	ldr	r3, [pc, #52]	; (80059c0 <HAL_RCC_OscConfig+0x26c>)
 800598c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800598e:	f003 0302 	and.w	r3, r3, #2
 8005992:	2b00      	cmp	r3, #0
 8005994:	d0f0      	beq.n	8005978 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005996:	2001      	movs	r0, #1
 8005998:	f000 fac4 	bl	8005f24 <RCC_Delay>
 800599c:	e01c      	b.n	80059d8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800599e:	4b0a      	ldr	r3, [pc, #40]	; (80059c8 <HAL_RCC_OscConfig+0x274>)
 80059a0:	2200      	movs	r2, #0
 80059a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80059a4:	f7fd fa2e 	bl	8002e04 <HAL_GetTick>
 80059a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80059aa:	e00f      	b.n	80059cc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80059ac:	f7fd fa2a 	bl	8002e04 <HAL_GetTick>
 80059b0:	4602      	mov	r2, r0
 80059b2:	693b      	ldr	r3, [r7, #16]
 80059b4:	1ad3      	subs	r3, r2, r3
 80059b6:	2b02      	cmp	r3, #2
 80059b8:	d908      	bls.n	80059cc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80059ba:	2303      	movs	r3, #3
 80059bc:	e146      	b.n	8005c4c <HAL_RCC_OscConfig+0x4f8>
 80059be:	bf00      	nop
 80059c0:	40021000 	.word	0x40021000
 80059c4:	42420000 	.word	0x42420000
 80059c8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80059cc:	4b92      	ldr	r3, [pc, #584]	; (8005c18 <HAL_RCC_OscConfig+0x4c4>)
 80059ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059d0:	f003 0302 	and.w	r3, r3, #2
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d1e9      	bne.n	80059ac <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f003 0304 	and.w	r3, r3, #4
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	f000 80a6 	beq.w	8005b32 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80059e6:	2300      	movs	r3, #0
 80059e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80059ea:	4b8b      	ldr	r3, [pc, #556]	; (8005c18 <HAL_RCC_OscConfig+0x4c4>)
 80059ec:	69db      	ldr	r3, [r3, #28]
 80059ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d10d      	bne.n	8005a12 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80059f6:	4b88      	ldr	r3, [pc, #544]	; (8005c18 <HAL_RCC_OscConfig+0x4c4>)
 80059f8:	69db      	ldr	r3, [r3, #28]
 80059fa:	4a87      	ldr	r2, [pc, #540]	; (8005c18 <HAL_RCC_OscConfig+0x4c4>)
 80059fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a00:	61d3      	str	r3, [r2, #28]
 8005a02:	4b85      	ldr	r3, [pc, #532]	; (8005c18 <HAL_RCC_OscConfig+0x4c4>)
 8005a04:	69db      	ldr	r3, [r3, #28]
 8005a06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a0a:	60bb      	str	r3, [r7, #8]
 8005a0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005a0e:	2301      	movs	r3, #1
 8005a10:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a12:	4b82      	ldr	r3, [pc, #520]	; (8005c1c <HAL_RCC_OscConfig+0x4c8>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d118      	bne.n	8005a50 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005a1e:	4b7f      	ldr	r3, [pc, #508]	; (8005c1c <HAL_RCC_OscConfig+0x4c8>)
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	4a7e      	ldr	r2, [pc, #504]	; (8005c1c <HAL_RCC_OscConfig+0x4c8>)
 8005a24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a28:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005a2a:	f7fd f9eb 	bl	8002e04 <HAL_GetTick>
 8005a2e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a30:	e008      	b.n	8005a44 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a32:	f7fd f9e7 	bl	8002e04 <HAL_GetTick>
 8005a36:	4602      	mov	r2, r0
 8005a38:	693b      	ldr	r3, [r7, #16]
 8005a3a:	1ad3      	subs	r3, r2, r3
 8005a3c:	2b64      	cmp	r3, #100	; 0x64
 8005a3e:	d901      	bls.n	8005a44 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005a40:	2303      	movs	r3, #3
 8005a42:	e103      	b.n	8005c4c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a44:	4b75      	ldr	r3, [pc, #468]	; (8005c1c <HAL_RCC_OscConfig+0x4c8>)
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d0f0      	beq.n	8005a32 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	68db      	ldr	r3, [r3, #12]
 8005a54:	2b01      	cmp	r3, #1
 8005a56:	d106      	bne.n	8005a66 <HAL_RCC_OscConfig+0x312>
 8005a58:	4b6f      	ldr	r3, [pc, #444]	; (8005c18 <HAL_RCC_OscConfig+0x4c4>)
 8005a5a:	6a1b      	ldr	r3, [r3, #32]
 8005a5c:	4a6e      	ldr	r2, [pc, #440]	; (8005c18 <HAL_RCC_OscConfig+0x4c4>)
 8005a5e:	f043 0301 	orr.w	r3, r3, #1
 8005a62:	6213      	str	r3, [r2, #32]
 8005a64:	e02d      	b.n	8005ac2 <HAL_RCC_OscConfig+0x36e>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	68db      	ldr	r3, [r3, #12]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d10c      	bne.n	8005a88 <HAL_RCC_OscConfig+0x334>
 8005a6e:	4b6a      	ldr	r3, [pc, #424]	; (8005c18 <HAL_RCC_OscConfig+0x4c4>)
 8005a70:	6a1b      	ldr	r3, [r3, #32]
 8005a72:	4a69      	ldr	r2, [pc, #420]	; (8005c18 <HAL_RCC_OscConfig+0x4c4>)
 8005a74:	f023 0301 	bic.w	r3, r3, #1
 8005a78:	6213      	str	r3, [r2, #32]
 8005a7a:	4b67      	ldr	r3, [pc, #412]	; (8005c18 <HAL_RCC_OscConfig+0x4c4>)
 8005a7c:	6a1b      	ldr	r3, [r3, #32]
 8005a7e:	4a66      	ldr	r2, [pc, #408]	; (8005c18 <HAL_RCC_OscConfig+0x4c4>)
 8005a80:	f023 0304 	bic.w	r3, r3, #4
 8005a84:	6213      	str	r3, [r2, #32]
 8005a86:	e01c      	b.n	8005ac2 <HAL_RCC_OscConfig+0x36e>
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	68db      	ldr	r3, [r3, #12]
 8005a8c:	2b05      	cmp	r3, #5
 8005a8e:	d10c      	bne.n	8005aaa <HAL_RCC_OscConfig+0x356>
 8005a90:	4b61      	ldr	r3, [pc, #388]	; (8005c18 <HAL_RCC_OscConfig+0x4c4>)
 8005a92:	6a1b      	ldr	r3, [r3, #32]
 8005a94:	4a60      	ldr	r2, [pc, #384]	; (8005c18 <HAL_RCC_OscConfig+0x4c4>)
 8005a96:	f043 0304 	orr.w	r3, r3, #4
 8005a9a:	6213      	str	r3, [r2, #32]
 8005a9c:	4b5e      	ldr	r3, [pc, #376]	; (8005c18 <HAL_RCC_OscConfig+0x4c4>)
 8005a9e:	6a1b      	ldr	r3, [r3, #32]
 8005aa0:	4a5d      	ldr	r2, [pc, #372]	; (8005c18 <HAL_RCC_OscConfig+0x4c4>)
 8005aa2:	f043 0301 	orr.w	r3, r3, #1
 8005aa6:	6213      	str	r3, [r2, #32]
 8005aa8:	e00b      	b.n	8005ac2 <HAL_RCC_OscConfig+0x36e>
 8005aaa:	4b5b      	ldr	r3, [pc, #364]	; (8005c18 <HAL_RCC_OscConfig+0x4c4>)
 8005aac:	6a1b      	ldr	r3, [r3, #32]
 8005aae:	4a5a      	ldr	r2, [pc, #360]	; (8005c18 <HAL_RCC_OscConfig+0x4c4>)
 8005ab0:	f023 0301 	bic.w	r3, r3, #1
 8005ab4:	6213      	str	r3, [r2, #32]
 8005ab6:	4b58      	ldr	r3, [pc, #352]	; (8005c18 <HAL_RCC_OscConfig+0x4c4>)
 8005ab8:	6a1b      	ldr	r3, [r3, #32]
 8005aba:	4a57      	ldr	r2, [pc, #348]	; (8005c18 <HAL_RCC_OscConfig+0x4c4>)
 8005abc:	f023 0304 	bic.w	r3, r3, #4
 8005ac0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	68db      	ldr	r3, [r3, #12]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d015      	beq.n	8005af6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005aca:	f7fd f99b 	bl	8002e04 <HAL_GetTick>
 8005ace:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ad0:	e00a      	b.n	8005ae8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ad2:	f7fd f997 	bl	8002e04 <HAL_GetTick>
 8005ad6:	4602      	mov	r2, r0
 8005ad8:	693b      	ldr	r3, [r7, #16]
 8005ada:	1ad3      	subs	r3, r2, r3
 8005adc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d901      	bls.n	8005ae8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005ae4:	2303      	movs	r3, #3
 8005ae6:	e0b1      	b.n	8005c4c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ae8:	4b4b      	ldr	r3, [pc, #300]	; (8005c18 <HAL_RCC_OscConfig+0x4c4>)
 8005aea:	6a1b      	ldr	r3, [r3, #32]
 8005aec:	f003 0302 	and.w	r3, r3, #2
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d0ee      	beq.n	8005ad2 <HAL_RCC_OscConfig+0x37e>
 8005af4:	e014      	b.n	8005b20 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005af6:	f7fd f985 	bl	8002e04 <HAL_GetTick>
 8005afa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005afc:	e00a      	b.n	8005b14 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005afe:	f7fd f981 	bl	8002e04 <HAL_GetTick>
 8005b02:	4602      	mov	r2, r0
 8005b04:	693b      	ldr	r3, [r7, #16]
 8005b06:	1ad3      	subs	r3, r2, r3
 8005b08:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d901      	bls.n	8005b14 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005b10:	2303      	movs	r3, #3
 8005b12:	e09b      	b.n	8005c4c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005b14:	4b40      	ldr	r3, [pc, #256]	; (8005c18 <HAL_RCC_OscConfig+0x4c4>)
 8005b16:	6a1b      	ldr	r3, [r3, #32]
 8005b18:	f003 0302 	and.w	r3, r3, #2
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d1ee      	bne.n	8005afe <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005b20:	7dfb      	ldrb	r3, [r7, #23]
 8005b22:	2b01      	cmp	r3, #1
 8005b24:	d105      	bne.n	8005b32 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005b26:	4b3c      	ldr	r3, [pc, #240]	; (8005c18 <HAL_RCC_OscConfig+0x4c4>)
 8005b28:	69db      	ldr	r3, [r3, #28]
 8005b2a:	4a3b      	ldr	r2, [pc, #236]	; (8005c18 <HAL_RCC_OscConfig+0x4c4>)
 8005b2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b30:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	69db      	ldr	r3, [r3, #28]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	f000 8087 	beq.w	8005c4a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005b3c:	4b36      	ldr	r3, [pc, #216]	; (8005c18 <HAL_RCC_OscConfig+0x4c4>)
 8005b3e:	685b      	ldr	r3, [r3, #4]
 8005b40:	f003 030c 	and.w	r3, r3, #12
 8005b44:	2b08      	cmp	r3, #8
 8005b46:	d061      	beq.n	8005c0c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	69db      	ldr	r3, [r3, #28]
 8005b4c:	2b02      	cmp	r3, #2
 8005b4e:	d146      	bne.n	8005bde <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b50:	4b33      	ldr	r3, [pc, #204]	; (8005c20 <HAL_RCC_OscConfig+0x4cc>)
 8005b52:	2200      	movs	r2, #0
 8005b54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b56:	f7fd f955 	bl	8002e04 <HAL_GetTick>
 8005b5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005b5c:	e008      	b.n	8005b70 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b5e:	f7fd f951 	bl	8002e04 <HAL_GetTick>
 8005b62:	4602      	mov	r2, r0
 8005b64:	693b      	ldr	r3, [r7, #16]
 8005b66:	1ad3      	subs	r3, r2, r3
 8005b68:	2b02      	cmp	r3, #2
 8005b6a:	d901      	bls.n	8005b70 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005b6c:	2303      	movs	r3, #3
 8005b6e:	e06d      	b.n	8005c4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005b70:	4b29      	ldr	r3, [pc, #164]	; (8005c18 <HAL_RCC_OscConfig+0x4c4>)
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d1f0      	bne.n	8005b5e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6a1b      	ldr	r3, [r3, #32]
 8005b80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b84:	d108      	bne.n	8005b98 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005b86:	4b24      	ldr	r3, [pc, #144]	; (8005c18 <HAL_RCC_OscConfig+0x4c4>)
 8005b88:	685b      	ldr	r3, [r3, #4]
 8005b8a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	689b      	ldr	r3, [r3, #8]
 8005b92:	4921      	ldr	r1, [pc, #132]	; (8005c18 <HAL_RCC_OscConfig+0x4c4>)
 8005b94:	4313      	orrs	r3, r2
 8005b96:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005b98:	4b1f      	ldr	r3, [pc, #124]	; (8005c18 <HAL_RCC_OscConfig+0x4c4>)
 8005b9a:	685b      	ldr	r3, [r3, #4]
 8005b9c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6a19      	ldr	r1, [r3, #32]
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ba8:	430b      	orrs	r3, r1
 8005baa:	491b      	ldr	r1, [pc, #108]	; (8005c18 <HAL_RCC_OscConfig+0x4c4>)
 8005bac:	4313      	orrs	r3, r2
 8005bae:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005bb0:	4b1b      	ldr	r3, [pc, #108]	; (8005c20 <HAL_RCC_OscConfig+0x4cc>)
 8005bb2:	2201      	movs	r2, #1
 8005bb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bb6:	f7fd f925 	bl	8002e04 <HAL_GetTick>
 8005bba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005bbc:	e008      	b.n	8005bd0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005bbe:	f7fd f921 	bl	8002e04 <HAL_GetTick>
 8005bc2:	4602      	mov	r2, r0
 8005bc4:	693b      	ldr	r3, [r7, #16]
 8005bc6:	1ad3      	subs	r3, r2, r3
 8005bc8:	2b02      	cmp	r3, #2
 8005bca:	d901      	bls.n	8005bd0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005bcc:	2303      	movs	r3, #3
 8005bce:	e03d      	b.n	8005c4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005bd0:	4b11      	ldr	r3, [pc, #68]	; (8005c18 <HAL_RCC_OscConfig+0x4c4>)
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d0f0      	beq.n	8005bbe <HAL_RCC_OscConfig+0x46a>
 8005bdc:	e035      	b.n	8005c4a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005bde:	4b10      	ldr	r3, [pc, #64]	; (8005c20 <HAL_RCC_OscConfig+0x4cc>)
 8005be0:	2200      	movs	r2, #0
 8005be2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005be4:	f7fd f90e 	bl	8002e04 <HAL_GetTick>
 8005be8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005bea:	e008      	b.n	8005bfe <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005bec:	f7fd f90a 	bl	8002e04 <HAL_GetTick>
 8005bf0:	4602      	mov	r2, r0
 8005bf2:	693b      	ldr	r3, [r7, #16]
 8005bf4:	1ad3      	subs	r3, r2, r3
 8005bf6:	2b02      	cmp	r3, #2
 8005bf8:	d901      	bls.n	8005bfe <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005bfa:	2303      	movs	r3, #3
 8005bfc:	e026      	b.n	8005c4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005bfe:	4b06      	ldr	r3, [pc, #24]	; (8005c18 <HAL_RCC_OscConfig+0x4c4>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d1f0      	bne.n	8005bec <HAL_RCC_OscConfig+0x498>
 8005c0a:	e01e      	b.n	8005c4a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	69db      	ldr	r3, [r3, #28]
 8005c10:	2b01      	cmp	r3, #1
 8005c12:	d107      	bne.n	8005c24 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005c14:	2301      	movs	r3, #1
 8005c16:	e019      	b.n	8005c4c <HAL_RCC_OscConfig+0x4f8>
 8005c18:	40021000 	.word	0x40021000
 8005c1c:	40007000 	.word	0x40007000
 8005c20:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005c24:	4b0b      	ldr	r3, [pc, #44]	; (8005c54 <HAL_RCC_OscConfig+0x500>)
 8005c26:	685b      	ldr	r3, [r3, #4]
 8005c28:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6a1b      	ldr	r3, [r3, #32]
 8005c34:	429a      	cmp	r2, r3
 8005c36:	d106      	bne.n	8005c46 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c42:	429a      	cmp	r2, r3
 8005c44:	d001      	beq.n	8005c4a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8005c46:	2301      	movs	r3, #1
 8005c48:	e000      	b.n	8005c4c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8005c4a:	2300      	movs	r3, #0
}
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	3718      	adds	r7, #24
 8005c50:	46bd      	mov	sp, r7
 8005c52:	bd80      	pop	{r7, pc}
 8005c54:	40021000 	.word	0x40021000

08005c58 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b084      	sub	sp, #16
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
 8005c60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d101      	bne.n	8005c6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005c68:	2301      	movs	r3, #1
 8005c6a:	e0d0      	b.n	8005e0e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005c6c:	4b6a      	ldr	r3, [pc, #424]	; (8005e18 <HAL_RCC_ClockConfig+0x1c0>)
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f003 0307 	and.w	r3, r3, #7
 8005c74:	683a      	ldr	r2, [r7, #0]
 8005c76:	429a      	cmp	r2, r3
 8005c78:	d910      	bls.n	8005c9c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c7a:	4b67      	ldr	r3, [pc, #412]	; (8005e18 <HAL_RCC_ClockConfig+0x1c0>)
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f023 0207 	bic.w	r2, r3, #7
 8005c82:	4965      	ldr	r1, [pc, #404]	; (8005e18 <HAL_RCC_ClockConfig+0x1c0>)
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	4313      	orrs	r3, r2
 8005c88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c8a:	4b63      	ldr	r3, [pc, #396]	; (8005e18 <HAL_RCC_ClockConfig+0x1c0>)
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f003 0307 	and.w	r3, r3, #7
 8005c92:	683a      	ldr	r2, [r7, #0]
 8005c94:	429a      	cmp	r2, r3
 8005c96:	d001      	beq.n	8005c9c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005c98:	2301      	movs	r3, #1
 8005c9a:	e0b8      	b.n	8005e0e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f003 0302 	and.w	r3, r3, #2
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d020      	beq.n	8005cea <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f003 0304 	and.w	r3, r3, #4
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d005      	beq.n	8005cc0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005cb4:	4b59      	ldr	r3, [pc, #356]	; (8005e1c <HAL_RCC_ClockConfig+0x1c4>)
 8005cb6:	685b      	ldr	r3, [r3, #4]
 8005cb8:	4a58      	ldr	r2, [pc, #352]	; (8005e1c <HAL_RCC_ClockConfig+0x1c4>)
 8005cba:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005cbe:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f003 0308 	and.w	r3, r3, #8
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d005      	beq.n	8005cd8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005ccc:	4b53      	ldr	r3, [pc, #332]	; (8005e1c <HAL_RCC_ClockConfig+0x1c4>)
 8005cce:	685b      	ldr	r3, [r3, #4]
 8005cd0:	4a52      	ldr	r2, [pc, #328]	; (8005e1c <HAL_RCC_ClockConfig+0x1c4>)
 8005cd2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005cd6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005cd8:	4b50      	ldr	r3, [pc, #320]	; (8005e1c <HAL_RCC_ClockConfig+0x1c4>)
 8005cda:	685b      	ldr	r3, [r3, #4]
 8005cdc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	689b      	ldr	r3, [r3, #8]
 8005ce4:	494d      	ldr	r1, [pc, #308]	; (8005e1c <HAL_RCC_ClockConfig+0x1c4>)
 8005ce6:	4313      	orrs	r3, r2
 8005ce8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f003 0301 	and.w	r3, r3, #1
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d040      	beq.n	8005d78 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	685b      	ldr	r3, [r3, #4]
 8005cfa:	2b01      	cmp	r3, #1
 8005cfc:	d107      	bne.n	8005d0e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005cfe:	4b47      	ldr	r3, [pc, #284]	; (8005e1c <HAL_RCC_ClockConfig+0x1c4>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d115      	bne.n	8005d36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	e07f      	b.n	8005e0e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	685b      	ldr	r3, [r3, #4]
 8005d12:	2b02      	cmp	r3, #2
 8005d14:	d107      	bne.n	8005d26 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d16:	4b41      	ldr	r3, [pc, #260]	; (8005e1c <HAL_RCC_ClockConfig+0x1c4>)
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d109      	bne.n	8005d36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d22:	2301      	movs	r3, #1
 8005d24:	e073      	b.n	8005e0e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d26:	4b3d      	ldr	r3, [pc, #244]	; (8005e1c <HAL_RCC_ClockConfig+0x1c4>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f003 0302 	and.w	r3, r3, #2
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d101      	bne.n	8005d36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d32:	2301      	movs	r3, #1
 8005d34:	e06b      	b.n	8005e0e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005d36:	4b39      	ldr	r3, [pc, #228]	; (8005e1c <HAL_RCC_ClockConfig+0x1c4>)
 8005d38:	685b      	ldr	r3, [r3, #4]
 8005d3a:	f023 0203 	bic.w	r2, r3, #3
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	685b      	ldr	r3, [r3, #4]
 8005d42:	4936      	ldr	r1, [pc, #216]	; (8005e1c <HAL_RCC_ClockConfig+0x1c4>)
 8005d44:	4313      	orrs	r3, r2
 8005d46:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005d48:	f7fd f85c 	bl	8002e04 <HAL_GetTick>
 8005d4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d4e:	e00a      	b.n	8005d66 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d50:	f7fd f858 	bl	8002e04 <HAL_GetTick>
 8005d54:	4602      	mov	r2, r0
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	1ad3      	subs	r3, r2, r3
 8005d5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d901      	bls.n	8005d66 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005d62:	2303      	movs	r3, #3
 8005d64:	e053      	b.n	8005e0e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d66:	4b2d      	ldr	r3, [pc, #180]	; (8005e1c <HAL_RCC_ClockConfig+0x1c4>)
 8005d68:	685b      	ldr	r3, [r3, #4]
 8005d6a:	f003 020c 	and.w	r2, r3, #12
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	685b      	ldr	r3, [r3, #4]
 8005d72:	009b      	lsls	r3, r3, #2
 8005d74:	429a      	cmp	r2, r3
 8005d76:	d1eb      	bne.n	8005d50 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005d78:	4b27      	ldr	r3, [pc, #156]	; (8005e18 <HAL_RCC_ClockConfig+0x1c0>)
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f003 0307 	and.w	r3, r3, #7
 8005d80:	683a      	ldr	r2, [r7, #0]
 8005d82:	429a      	cmp	r2, r3
 8005d84:	d210      	bcs.n	8005da8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d86:	4b24      	ldr	r3, [pc, #144]	; (8005e18 <HAL_RCC_ClockConfig+0x1c0>)
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f023 0207 	bic.w	r2, r3, #7
 8005d8e:	4922      	ldr	r1, [pc, #136]	; (8005e18 <HAL_RCC_ClockConfig+0x1c0>)
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	4313      	orrs	r3, r2
 8005d94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d96:	4b20      	ldr	r3, [pc, #128]	; (8005e18 <HAL_RCC_ClockConfig+0x1c0>)
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f003 0307 	and.w	r3, r3, #7
 8005d9e:	683a      	ldr	r2, [r7, #0]
 8005da0:	429a      	cmp	r2, r3
 8005da2:	d001      	beq.n	8005da8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005da4:	2301      	movs	r3, #1
 8005da6:	e032      	b.n	8005e0e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f003 0304 	and.w	r3, r3, #4
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d008      	beq.n	8005dc6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005db4:	4b19      	ldr	r3, [pc, #100]	; (8005e1c <HAL_RCC_ClockConfig+0x1c4>)
 8005db6:	685b      	ldr	r3, [r3, #4]
 8005db8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	68db      	ldr	r3, [r3, #12]
 8005dc0:	4916      	ldr	r1, [pc, #88]	; (8005e1c <HAL_RCC_ClockConfig+0x1c4>)
 8005dc2:	4313      	orrs	r3, r2
 8005dc4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f003 0308 	and.w	r3, r3, #8
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d009      	beq.n	8005de6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005dd2:	4b12      	ldr	r3, [pc, #72]	; (8005e1c <HAL_RCC_ClockConfig+0x1c4>)
 8005dd4:	685b      	ldr	r3, [r3, #4]
 8005dd6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	691b      	ldr	r3, [r3, #16]
 8005dde:	00db      	lsls	r3, r3, #3
 8005de0:	490e      	ldr	r1, [pc, #56]	; (8005e1c <HAL_RCC_ClockConfig+0x1c4>)
 8005de2:	4313      	orrs	r3, r2
 8005de4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005de6:	f000 f821 	bl	8005e2c <HAL_RCC_GetSysClockFreq>
 8005dea:	4602      	mov	r2, r0
 8005dec:	4b0b      	ldr	r3, [pc, #44]	; (8005e1c <HAL_RCC_ClockConfig+0x1c4>)
 8005dee:	685b      	ldr	r3, [r3, #4]
 8005df0:	091b      	lsrs	r3, r3, #4
 8005df2:	f003 030f 	and.w	r3, r3, #15
 8005df6:	490a      	ldr	r1, [pc, #40]	; (8005e20 <HAL_RCC_ClockConfig+0x1c8>)
 8005df8:	5ccb      	ldrb	r3, [r1, r3]
 8005dfa:	fa22 f303 	lsr.w	r3, r2, r3
 8005dfe:	4a09      	ldr	r2, [pc, #36]	; (8005e24 <HAL_RCC_ClockConfig+0x1cc>)
 8005e00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005e02:	4b09      	ldr	r3, [pc, #36]	; (8005e28 <HAL_RCC_ClockConfig+0x1d0>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	4618      	mov	r0, r3
 8005e08:	f7fc ffba 	bl	8002d80 <HAL_InitTick>

  return HAL_OK;
 8005e0c:	2300      	movs	r3, #0
}
 8005e0e:	4618      	mov	r0, r3
 8005e10:	3710      	adds	r7, #16
 8005e12:	46bd      	mov	sp, r7
 8005e14:	bd80      	pop	{r7, pc}
 8005e16:	bf00      	nop
 8005e18:	40022000 	.word	0x40022000
 8005e1c:	40021000 	.word	0x40021000
 8005e20:	08008010 	.word	0x08008010
 8005e24:	2000003c 	.word	0x2000003c
 8005e28:	20000040 	.word	0x20000040

08005e2c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005e2c:	b490      	push	{r4, r7}
 8005e2e:	b08a      	sub	sp, #40	; 0x28
 8005e30:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8005e32:	4b29      	ldr	r3, [pc, #164]	; (8005ed8 <HAL_RCC_GetSysClockFreq+0xac>)
 8005e34:	1d3c      	adds	r4, r7, #4
 8005e36:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005e38:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8005e3c:	f240 2301 	movw	r3, #513	; 0x201
 8005e40:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005e42:	2300      	movs	r3, #0
 8005e44:	61fb      	str	r3, [r7, #28]
 8005e46:	2300      	movs	r3, #0
 8005e48:	61bb      	str	r3, [r7, #24]
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	627b      	str	r3, [r7, #36]	; 0x24
 8005e4e:	2300      	movs	r3, #0
 8005e50:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005e52:	2300      	movs	r3, #0
 8005e54:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005e56:	4b21      	ldr	r3, [pc, #132]	; (8005edc <HAL_RCC_GetSysClockFreq+0xb0>)
 8005e58:	685b      	ldr	r3, [r3, #4]
 8005e5a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005e5c:	69fb      	ldr	r3, [r7, #28]
 8005e5e:	f003 030c 	and.w	r3, r3, #12
 8005e62:	2b04      	cmp	r3, #4
 8005e64:	d002      	beq.n	8005e6c <HAL_RCC_GetSysClockFreq+0x40>
 8005e66:	2b08      	cmp	r3, #8
 8005e68:	d003      	beq.n	8005e72 <HAL_RCC_GetSysClockFreq+0x46>
 8005e6a:	e02b      	b.n	8005ec4 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005e6c:	4b1c      	ldr	r3, [pc, #112]	; (8005ee0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005e6e:	623b      	str	r3, [r7, #32]
      break;
 8005e70:	e02b      	b.n	8005eca <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005e72:	69fb      	ldr	r3, [r7, #28]
 8005e74:	0c9b      	lsrs	r3, r3, #18
 8005e76:	f003 030f 	and.w	r3, r3, #15
 8005e7a:	3328      	adds	r3, #40	; 0x28
 8005e7c:	443b      	add	r3, r7
 8005e7e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8005e82:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005e84:	69fb      	ldr	r3, [r7, #28]
 8005e86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d012      	beq.n	8005eb4 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005e8e:	4b13      	ldr	r3, [pc, #76]	; (8005edc <HAL_RCC_GetSysClockFreq+0xb0>)
 8005e90:	685b      	ldr	r3, [r3, #4]
 8005e92:	0c5b      	lsrs	r3, r3, #17
 8005e94:	f003 0301 	and.w	r3, r3, #1
 8005e98:	3328      	adds	r3, #40	; 0x28
 8005e9a:	443b      	add	r3, r7
 8005e9c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005ea0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005ea2:	697b      	ldr	r3, [r7, #20]
 8005ea4:	4a0e      	ldr	r2, [pc, #56]	; (8005ee0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005ea6:	fb03 f202 	mul.w	r2, r3, r2
 8005eaa:	69bb      	ldr	r3, [r7, #24]
 8005eac:	fbb2 f3f3 	udiv	r3, r2, r3
 8005eb0:	627b      	str	r3, [r7, #36]	; 0x24
 8005eb2:	e004      	b.n	8005ebe <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005eb4:	697b      	ldr	r3, [r7, #20]
 8005eb6:	4a0b      	ldr	r2, [pc, #44]	; (8005ee4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005eb8:	fb02 f303 	mul.w	r3, r2, r3
 8005ebc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8005ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ec0:	623b      	str	r3, [r7, #32]
      break;
 8005ec2:	e002      	b.n	8005eca <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005ec4:	4b06      	ldr	r3, [pc, #24]	; (8005ee0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005ec6:	623b      	str	r3, [r7, #32]
      break;
 8005ec8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005eca:	6a3b      	ldr	r3, [r7, #32]
}
 8005ecc:	4618      	mov	r0, r3
 8005ece:	3728      	adds	r7, #40	; 0x28
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	bc90      	pop	{r4, r7}
 8005ed4:	4770      	bx	lr
 8005ed6:	bf00      	nop
 8005ed8:	08008000 	.word	0x08008000
 8005edc:	40021000 	.word	0x40021000
 8005ee0:	007a1200 	.word	0x007a1200
 8005ee4:	003d0900 	.word	0x003d0900

08005ee8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005ee8:	b480      	push	{r7}
 8005eea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005eec:	4b02      	ldr	r3, [pc, #8]	; (8005ef8 <HAL_RCC_GetHCLKFreq+0x10>)
 8005eee:	681b      	ldr	r3, [r3, #0]
}
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	bc80      	pop	{r7}
 8005ef6:	4770      	bx	lr
 8005ef8:	2000003c 	.word	0x2000003c

08005efc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005f00:	f7ff fff2 	bl	8005ee8 <HAL_RCC_GetHCLKFreq>
 8005f04:	4602      	mov	r2, r0
 8005f06:	4b05      	ldr	r3, [pc, #20]	; (8005f1c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005f08:	685b      	ldr	r3, [r3, #4]
 8005f0a:	0a1b      	lsrs	r3, r3, #8
 8005f0c:	f003 0307 	and.w	r3, r3, #7
 8005f10:	4903      	ldr	r1, [pc, #12]	; (8005f20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005f12:	5ccb      	ldrb	r3, [r1, r3]
 8005f14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f18:	4618      	mov	r0, r3
 8005f1a:	bd80      	pop	{r7, pc}
 8005f1c:	40021000 	.word	0x40021000
 8005f20:	08008020 	.word	0x08008020

08005f24 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005f24:	b480      	push	{r7}
 8005f26:	b085      	sub	sp, #20
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005f2c:	4b0a      	ldr	r3, [pc, #40]	; (8005f58 <RCC_Delay+0x34>)
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	4a0a      	ldr	r2, [pc, #40]	; (8005f5c <RCC_Delay+0x38>)
 8005f32:	fba2 2303 	umull	r2, r3, r2, r3
 8005f36:	0a5b      	lsrs	r3, r3, #9
 8005f38:	687a      	ldr	r2, [r7, #4]
 8005f3a:	fb02 f303 	mul.w	r3, r2, r3
 8005f3e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005f40:	bf00      	nop
  }
  while (Delay --);
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	1e5a      	subs	r2, r3, #1
 8005f46:	60fa      	str	r2, [r7, #12]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d1f9      	bne.n	8005f40 <RCC_Delay+0x1c>
}
 8005f4c:	bf00      	nop
 8005f4e:	bf00      	nop
 8005f50:	3714      	adds	r7, #20
 8005f52:	46bd      	mov	sp, r7
 8005f54:	bc80      	pop	{r7}
 8005f56:	4770      	bx	lr
 8005f58:	2000003c 	.word	0x2000003c
 8005f5c:	10624dd3 	.word	0x10624dd3

08005f60 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b082      	sub	sp, #8
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d101      	bne.n	8005f72 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005f6e:	2301      	movs	r3, #1
 8005f70:	e041      	b.n	8005ff6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f78:	b2db      	uxtb	r3, r3
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d106      	bne.n	8005f8c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2200      	movs	r2, #0
 8005f82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005f86:	6878      	ldr	r0, [r7, #4]
 8005f88:	f7fc fdf4 	bl	8002b74 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2202      	movs	r2, #2
 8005f90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681a      	ldr	r2, [r3, #0]
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	3304      	adds	r3, #4
 8005f9c:	4619      	mov	r1, r3
 8005f9e:	4610      	mov	r0, r2
 8005fa0:	f000 faba 	bl	8006518 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2201      	movs	r2, #1
 8005fa8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2201      	movs	r2, #1
 8005fb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2201      	movs	r2, #1
 8005fb8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2201      	movs	r2, #1
 8005fc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2201      	movs	r2, #1
 8005fc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2201      	movs	r2, #1
 8005fd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2201      	movs	r2, #1
 8005fd8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2201      	movs	r2, #1
 8005fe0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2201      	movs	r2, #1
 8005fe8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2201      	movs	r2, #1
 8005ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005ff4:	2300      	movs	r3, #0
}
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	3708      	adds	r7, #8
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	bd80      	pop	{r7, pc}
	...

08006000 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006000:	b480      	push	{r7}
 8006002:	b085      	sub	sp, #20
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800600e:	b2db      	uxtb	r3, r3
 8006010:	2b01      	cmp	r3, #1
 8006012:	d001      	beq.n	8006018 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006014:	2301      	movs	r3, #1
 8006016:	e032      	b.n	800607e <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2202      	movs	r2, #2
 800601c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	4a18      	ldr	r2, [pc, #96]	; (8006088 <HAL_TIM_Base_Start+0x88>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d00e      	beq.n	8006048 <HAL_TIM_Base_Start+0x48>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006032:	d009      	beq.n	8006048 <HAL_TIM_Base_Start+0x48>
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	4a14      	ldr	r2, [pc, #80]	; (800608c <HAL_TIM_Base_Start+0x8c>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d004      	beq.n	8006048 <HAL_TIM_Base_Start+0x48>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	4a13      	ldr	r2, [pc, #76]	; (8006090 <HAL_TIM_Base_Start+0x90>)
 8006044:	4293      	cmp	r3, r2
 8006046:	d111      	bne.n	800606c <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	689b      	ldr	r3, [r3, #8]
 800604e:	f003 0307 	and.w	r3, r3, #7
 8006052:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	2b06      	cmp	r3, #6
 8006058:	d010      	beq.n	800607c <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	681a      	ldr	r2, [r3, #0]
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f042 0201 	orr.w	r2, r2, #1
 8006068:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800606a:	e007      	b.n	800607c <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	681a      	ldr	r2, [r3, #0]
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f042 0201 	orr.w	r2, r2, #1
 800607a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800607c:	2300      	movs	r3, #0
}
 800607e:	4618      	mov	r0, r3
 8006080:	3714      	adds	r7, #20
 8006082:	46bd      	mov	sp, r7
 8006084:	bc80      	pop	{r7}
 8006086:	4770      	bx	lr
 8006088:	40012c00 	.word	0x40012c00
 800608c:	40000400 	.word	0x40000400
 8006090:	40000800 	.word	0x40000800

08006094 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006094:	b480      	push	{r7}
 8006096:	b085      	sub	sp, #20
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060a2:	b2db      	uxtb	r3, r3
 80060a4:	2b01      	cmp	r3, #1
 80060a6:	d001      	beq.n	80060ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80060a8:	2301      	movs	r3, #1
 80060aa:	e03a      	b.n	8006122 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2202      	movs	r2, #2
 80060b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	68da      	ldr	r2, [r3, #12]
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f042 0201 	orr.w	r2, r2, #1
 80060c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	4a18      	ldr	r2, [pc, #96]	; (800612c <HAL_TIM_Base_Start_IT+0x98>)
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d00e      	beq.n	80060ec <HAL_TIM_Base_Start_IT+0x58>
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060d6:	d009      	beq.n	80060ec <HAL_TIM_Base_Start_IT+0x58>
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	4a14      	ldr	r2, [pc, #80]	; (8006130 <HAL_TIM_Base_Start_IT+0x9c>)
 80060de:	4293      	cmp	r3, r2
 80060e0:	d004      	beq.n	80060ec <HAL_TIM_Base_Start_IT+0x58>
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	4a13      	ldr	r2, [pc, #76]	; (8006134 <HAL_TIM_Base_Start_IT+0xa0>)
 80060e8:	4293      	cmp	r3, r2
 80060ea:	d111      	bne.n	8006110 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	689b      	ldr	r3, [r3, #8]
 80060f2:	f003 0307 	and.w	r3, r3, #7
 80060f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	2b06      	cmp	r3, #6
 80060fc:	d010      	beq.n	8006120 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	681a      	ldr	r2, [r3, #0]
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f042 0201 	orr.w	r2, r2, #1
 800610c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800610e:	e007      	b.n	8006120 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	681a      	ldr	r2, [r3, #0]
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f042 0201 	orr.w	r2, r2, #1
 800611e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006120:	2300      	movs	r3, #0
}
 8006122:	4618      	mov	r0, r3
 8006124:	3714      	adds	r7, #20
 8006126:	46bd      	mov	sp, r7
 8006128:	bc80      	pop	{r7}
 800612a:	4770      	bx	lr
 800612c:	40012c00 	.word	0x40012c00
 8006130:	40000400 	.word	0x40000400
 8006134:	40000800 	.word	0x40000800

08006138 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b082      	sub	sp, #8
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	691b      	ldr	r3, [r3, #16]
 8006146:	f003 0302 	and.w	r3, r3, #2
 800614a:	2b02      	cmp	r3, #2
 800614c:	d122      	bne.n	8006194 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	68db      	ldr	r3, [r3, #12]
 8006154:	f003 0302 	and.w	r3, r3, #2
 8006158:	2b02      	cmp	r3, #2
 800615a:	d11b      	bne.n	8006194 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f06f 0202 	mvn.w	r2, #2
 8006164:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2201      	movs	r2, #1
 800616a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	699b      	ldr	r3, [r3, #24]
 8006172:	f003 0303 	and.w	r3, r3, #3
 8006176:	2b00      	cmp	r3, #0
 8006178:	d003      	beq.n	8006182 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800617a:	6878      	ldr	r0, [r7, #4]
 800617c:	f000 f9b1 	bl	80064e2 <HAL_TIM_IC_CaptureCallback>
 8006180:	e005      	b.n	800618e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006182:	6878      	ldr	r0, [r7, #4]
 8006184:	f000 f9a4 	bl	80064d0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006188:	6878      	ldr	r0, [r7, #4]
 800618a:	f000 f9b3 	bl	80064f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2200      	movs	r2, #0
 8006192:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	691b      	ldr	r3, [r3, #16]
 800619a:	f003 0304 	and.w	r3, r3, #4
 800619e:	2b04      	cmp	r3, #4
 80061a0:	d122      	bne.n	80061e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	68db      	ldr	r3, [r3, #12]
 80061a8:	f003 0304 	and.w	r3, r3, #4
 80061ac:	2b04      	cmp	r3, #4
 80061ae:	d11b      	bne.n	80061e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f06f 0204 	mvn.w	r2, #4
 80061b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2202      	movs	r2, #2
 80061be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	699b      	ldr	r3, [r3, #24]
 80061c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d003      	beq.n	80061d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80061ce:	6878      	ldr	r0, [r7, #4]
 80061d0:	f000 f987 	bl	80064e2 <HAL_TIM_IC_CaptureCallback>
 80061d4:	e005      	b.n	80061e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061d6:	6878      	ldr	r0, [r7, #4]
 80061d8:	f000 f97a 	bl	80064d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061dc:	6878      	ldr	r0, [r7, #4]
 80061de:	f000 f989 	bl	80064f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	2200      	movs	r2, #0
 80061e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	691b      	ldr	r3, [r3, #16]
 80061ee:	f003 0308 	and.w	r3, r3, #8
 80061f2:	2b08      	cmp	r3, #8
 80061f4:	d122      	bne.n	800623c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	68db      	ldr	r3, [r3, #12]
 80061fc:	f003 0308 	and.w	r3, r3, #8
 8006200:	2b08      	cmp	r3, #8
 8006202:	d11b      	bne.n	800623c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f06f 0208 	mvn.w	r2, #8
 800620c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2204      	movs	r2, #4
 8006212:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	69db      	ldr	r3, [r3, #28]
 800621a:	f003 0303 	and.w	r3, r3, #3
 800621e:	2b00      	cmp	r3, #0
 8006220:	d003      	beq.n	800622a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006222:	6878      	ldr	r0, [r7, #4]
 8006224:	f000 f95d 	bl	80064e2 <HAL_TIM_IC_CaptureCallback>
 8006228:	e005      	b.n	8006236 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800622a:	6878      	ldr	r0, [r7, #4]
 800622c:	f000 f950 	bl	80064d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006230:	6878      	ldr	r0, [r7, #4]
 8006232:	f000 f95f 	bl	80064f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2200      	movs	r2, #0
 800623a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	691b      	ldr	r3, [r3, #16]
 8006242:	f003 0310 	and.w	r3, r3, #16
 8006246:	2b10      	cmp	r3, #16
 8006248:	d122      	bne.n	8006290 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	68db      	ldr	r3, [r3, #12]
 8006250:	f003 0310 	and.w	r3, r3, #16
 8006254:	2b10      	cmp	r3, #16
 8006256:	d11b      	bne.n	8006290 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f06f 0210 	mvn.w	r2, #16
 8006260:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	2208      	movs	r2, #8
 8006266:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	69db      	ldr	r3, [r3, #28]
 800626e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006272:	2b00      	cmp	r3, #0
 8006274:	d003      	beq.n	800627e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006276:	6878      	ldr	r0, [r7, #4]
 8006278:	f000 f933 	bl	80064e2 <HAL_TIM_IC_CaptureCallback>
 800627c:	e005      	b.n	800628a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800627e:	6878      	ldr	r0, [r7, #4]
 8006280:	f000 f926 	bl	80064d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006284:	6878      	ldr	r0, [r7, #4]
 8006286:	f000 f935 	bl	80064f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2200      	movs	r2, #0
 800628e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	691b      	ldr	r3, [r3, #16]
 8006296:	f003 0301 	and.w	r3, r3, #1
 800629a:	2b01      	cmp	r3, #1
 800629c:	d10e      	bne.n	80062bc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	68db      	ldr	r3, [r3, #12]
 80062a4:	f003 0301 	and.w	r3, r3, #1
 80062a8:	2b01      	cmp	r3, #1
 80062aa:	d107      	bne.n	80062bc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f06f 0201 	mvn.w	r2, #1
 80062b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80062b6:	6878      	ldr	r0, [r7, #4]
 80062b8:	f7fc f9a2 	bl	8002600 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	691b      	ldr	r3, [r3, #16]
 80062c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062c6:	2b80      	cmp	r3, #128	; 0x80
 80062c8:	d10e      	bne.n	80062e8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	68db      	ldr	r3, [r3, #12]
 80062d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062d4:	2b80      	cmp	r3, #128	; 0x80
 80062d6:	d107      	bne.n	80062e8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80062e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80062e2:	6878      	ldr	r0, [r7, #4]
 80062e4:	f000 fa77 	bl	80067d6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	691b      	ldr	r3, [r3, #16]
 80062ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062f2:	2b40      	cmp	r3, #64	; 0x40
 80062f4:	d10e      	bne.n	8006314 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	68db      	ldr	r3, [r3, #12]
 80062fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006300:	2b40      	cmp	r3, #64	; 0x40
 8006302:	d107      	bne.n	8006314 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800630c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800630e:	6878      	ldr	r0, [r7, #4]
 8006310:	f000 f8f9 	bl	8006506 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	691b      	ldr	r3, [r3, #16]
 800631a:	f003 0320 	and.w	r3, r3, #32
 800631e:	2b20      	cmp	r3, #32
 8006320:	d10e      	bne.n	8006340 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	68db      	ldr	r3, [r3, #12]
 8006328:	f003 0320 	and.w	r3, r3, #32
 800632c:	2b20      	cmp	r3, #32
 800632e:	d107      	bne.n	8006340 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f06f 0220 	mvn.w	r2, #32
 8006338:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800633a:	6878      	ldr	r0, [r7, #4]
 800633c:	f000 fa42 	bl	80067c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006340:	bf00      	nop
 8006342:	3708      	adds	r7, #8
 8006344:	46bd      	mov	sp, r7
 8006346:	bd80      	pop	{r7, pc}

08006348 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b084      	sub	sp, #16
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
 8006350:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006358:	2b01      	cmp	r3, #1
 800635a:	d101      	bne.n	8006360 <HAL_TIM_ConfigClockSource+0x18>
 800635c:	2302      	movs	r3, #2
 800635e:	e0b3      	b.n	80064c8 <HAL_TIM_ConfigClockSource+0x180>
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2201      	movs	r2, #1
 8006364:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2202      	movs	r2, #2
 800636c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	689b      	ldr	r3, [r3, #8]
 8006376:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800637e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006386:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	68fa      	ldr	r2, [r7, #12]
 800638e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006398:	d03e      	beq.n	8006418 <HAL_TIM_ConfigClockSource+0xd0>
 800639a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800639e:	f200 8087 	bhi.w	80064b0 <HAL_TIM_ConfigClockSource+0x168>
 80063a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063a6:	f000 8085 	beq.w	80064b4 <HAL_TIM_ConfigClockSource+0x16c>
 80063aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063ae:	d87f      	bhi.n	80064b0 <HAL_TIM_ConfigClockSource+0x168>
 80063b0:	2b70      	cmp	r3, #112	; 0x70
 80063b2:	d01a      	beq.n	80063ea <HAL_TIM_ConfigClockSource+0xa2>
 80063b4:	2b70      	cmp	r3, #112	; 0x70
 80063b6:	d87b      	bhi.n	80064b0 <HAL_TIM_ConfigClockSource+0x168>
 80063b8:	2b60      	cmp	r3, #96	; 0x60
 80063ba:	d050      	beq.n	800645e <HAL_TIM_ConfigClockSource+0x116>
 80063bc:	2b60      	cmp	r3, #96	; 0x60
 80063be:	d877      	bhi.n	80064b0 <HAL_TIM_ConfigClockSource+0x168>
 80063c0:	2b50      	cmp	r3, #80	; 0x50
 80063c2:	d03c      	beq.n	800643e <HAL_TIM_ConfigClockSource+0xf6>
 80063c4:	2b50      	cmp	r3, #80	; 0x50
 80063c6:	d873      	bhi.n	80064b0 <HAL_TIM_ConfigClockSource+0x168>
 80063c8:	2b40      	cmp	r3, #64	; 0x40
 80063ca:	d058      	beq.n	800647e <HAL_TIM_ConfigClockSource+0x136>
 80063cc:	2b40      	cmp	r3, #64	; 0x40
 80063ce:	d86f      	bhi.n	80064b0 <HAL_TIM_ConfigClockSource+0x168>
 80063d0:	2b30      	cmp	r3, #48	; 0x30
 80063d2:	d064      	beq.n	800649e <HAL_TIM_ConfigClockSource+0x156>
 80063d4:	2b30      	cmp	r3, #48	; 0x30
 80063d6:	d86b      	bhi.n	80064b0 <HAL_TIM_ConfigClockSource+0x168>
 80063d8:	2b20      	cmp	r3, #32
 80063da:	d060      	beq.n	800649e <HAL_TIM_ConfigClockSource+0x156>
 80063dc:	2b20      	cmp	r3, #32
 80063de:	d867      	bhi.n	80064b0 <HAL_TIM_ConfigClockSource+0x168>
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d05c      	beq.n	800649e <HAL_TIM_ConfigClockSource+0x156>
 80063e4:	2b10      	cmp	r3, #16
 80063e6:	d05a      	beq.n	800649e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80063e8:	e062      	b.n	80064b0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6818      	ldr	r0, [r3, #0]
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	6899      	ldr	r1, [r3, #8]
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	685a      	ldr	r2, [r3, #4]
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	68db      	ldr	r3, [r3, #12]
 80063fa:	f000 f966 	bl	80066ca <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	689b      	ldr	r3, [r3, #8]
 8006404:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800640c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	68fa      	ldr	r2, [r7, #12]
 8006414:	609a      	str	r2, [r3, #8]
      break;
 8006416:	e04e      	b.n	80064b6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	6818      	ldr	r0, [r3, #0]
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	6899      	ldr	r1, [r3, #8]
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	685a      	ldr	r2, [r3, #4]
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	68db      	ldr	r3, [r3, #12]
 8006428:	f000 f94f 	bl	80066ca <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	689a      	ldr	r2, [r3, #8]
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800643a:	609a      	str	r2, [r3, #8]
      break;
 800643c:	e03b      	b.n	80064b6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6818      	ldr	r0, [r3, #0]
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	6859      	ldr	r1, [r3, #4]
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	68db      	ldr	r3, [r3, #12]
 800644a:	461a      	mov	r2, r3
 800644c:	f000 f8c6 	bl	80065dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	2150      	movs	r1, #80	; 0x50
 8006456:	4618      	mov	r0, r3
 8006458:	f000 f91d 	bl	8006696 <TIM_ITRx_SetConfig>
      break;
 800645c:	e02b      	b.n	80064b6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6818      	ldr	r0, [r3, #0]
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	6859      	ldr	r1, [r3, #4]
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	68db      	ldr	r3, [r3, #12]
 800646a:	461a      	mov	r2, r3
 800646c:	f000 f8e4 	bl	8006638 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	2160      	movs	r1, #96	; 0x60
 8006476:	4618      	mov	r0, r3
 8006478:	f000 f90d 	bl	8006696 <TIM_ITRx_SetConfig>
      break;
 800647c:	e01b      	b.n	80064b6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6818      	ldr	r0, [r3, #0]
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	6859      	ldr	r1, [r3, #4]
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	68db      	ldr	r3, [r3, #12]
 800648a:	461a      	mov	r2, r3
 800648c:	f000 f8a6 	bl	80065dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	2140      	movs	r1, #64	; 0x40
 8006496:	4618      	mov	r0, r3
 8006498:	f000 f8fd 	bl	8006696 <TIM_ITRx_SetConfig>
      break;
 800649c:	e00b      	b.n	80064b6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681a      	ldr	r2, [r3, #0]
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	4619      	mov	r1, r3
 80064a8:	4610      	mov	r0, r2
 80064aa:	f000 f8f4 	bl	8006696 <TIM_ITRx_SetConfig>
        break;
 80064ae:	e002      	b.n	80064b6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80064b0:	bf00      	nop
 80064b2:	e000      	b.n	80064b6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80064b4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	2201      	movs	r2, #1
 80064ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2200      	movs	r2, #0
 80064c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80064c6:	2300      	movs	r3, #0
}
 80064c8:	4618      	mov	r0, r3
 80064ca:	3710      	adds	r7, #16
 80064cc:	46bd      	mov	sp, r7
 80064ce:	bd80      	pop	{r7, pc}

080064d0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80064d0:	b480      	push	{r7}
 80064d2:	b083      	sub	sp, #12
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80064d8:	bf00      	nop
 80064da:	370c      	adds	r7, #12
 80064dc:	46bd      	mov	sp, r7
 80064de:	bc80      	pop	{r7}
 80064e0:	4770      	bx	lr

080064e2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80064e2:	b480      	push	{r7}
 80064e4:	b083      	sub	sp, #12
 80064e6:	af00      	add	r7, sp, #0
 80064e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80064ea:	bf00      	nop
 80064ec:	370c      	adds	r7, #12
 80064ee:	46bd      	mov	sp, r7
 80064f0:	bc80      	pop	{r7}
 80064f2:	4770      	bx	lr

080064f4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80064f4:	b480      	push	{r7}
 80064f6:	b083      	sub	sp, #12
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80064fc:	bf00      	nop
 80064fe:	370c      	adds	r7, #12
 8006500:	46bd      	mov	sp, r7
 8006502:	bc80      	pop	{r7}
 8006504:	4770      	bx	lr

08006506 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006506:	b480      	push	{r7}
 8006508:	b083      	sub	sp, #12
 800650a:	af00      	add	r7, sp, #0
 800650c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800650e:	bf00      	nop
 8006510:	370c      	adds	r7, #12
 8006512:	46bd      	mov	sp, r7
 8006514:	bc80      	pop	{r7}
 8006516:	4770      	bx	lr

08006518 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006518:	b480      	push	{r7}
 800651a:	b085      	sub	sp, #20
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
 8006520:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	4a29      	ldr	r2, [pc, #164]	; (80065d0 <TIM_Base_SetConfig+0xb8>)
 800652c:	4293      	cmp	r3, r2
 800652e:	d00b      	beq.n	8006548 <TIM_Base_SetConfig+0x30>
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006536:	d007      	beq.n	8006548 <TIM_Base_SetConfig+0x30>
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	4a26      	ldr	r2, [pc, #152]	; (80065d4 <TIM_Base_SetConfig+0xbc>)
 800653c:	4293      	cmp	r3, r2
 800653e:	d003      	beq.n	8006548 <TIM_Base_SetConfig+0x30>
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	4a25      	ldr	r2, [pc, #148]	; (80065d8 <TIM_Base_SetConfig+0xc0>)
 8006544:	4293      	cmp	r3, r2
 8006546:	d108      	bne.n	800655a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800654e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	685b      	ldr	r3, [r3, #4]
 8006554:	68fa      	ldr	r2, [r7, #12]
 8006556:	4313      	orrs	r3, r2
 8006558:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	4a1c      	ldr	r2, [pc, #112]	; (80065d0 <TIM_Base_SetConfig+0xb8>)
 800655e:	4293      	cmp	r3, r2
 8006560:	d00b      	beq.n	800657a <TIM_Base_SetConfig+0x62>
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006568:	d007      	beq.n	800657a <TIM_Base_SetConfig+0x62>
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	4a19      	ldr	r2, [pc, #100]	; (80065d4 <TIM_Base_SetConfig+0xbc>)
 800656e:	4293      	cmp	r3, r2
 8006570:	d003      	beq.n	800657a <TIM_Base_SetConfig+0x62>
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	4a18      	ldr	r2, [pc, #96]	; (80065d8 <TIM_Base_SetConfig+0xc0>)
 8006576:	4293      	cmp	r3, r2
 8006578:	d108      	bne.n	800658c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006580:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	68db      	ldr	r3, [r3, #12]
 8006586:	68fa      	ldr	r2, [r7, #12]
 8006588:	4313      	orrs	r3, r2
 800658a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	695b      	ldr	r3, [r3, #20]
 8006596:	4313      	orrs	r3, r2
 8006598:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	68fa      	ldr	r2, [r7, #12]
 800659e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	689a      	ldr	r2, [r3, #8]
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	681a      	ldr	r2, [r3, #0]
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	4a07      	ldr	r2, [pc, #28]	; (80065d0 <TIM_Base_SetConfig+0xb8>)
 80065b4:	4293      	cmp	r3, r2
 80065b6:	d103      	bne.n	80065c0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	691a      	ldr	r2, [r3, #16]
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2201      	movs	r2, #1
 80065c4:	615a      	str	r2, [r3, #20]
}
 80065c6:	bf00      	nop
 80065c8:	3714      	adds	r7, #20
 80065ca:	46bd      	mov	sp, r7
 80065cc:	bc80      	pop	{r7}
 80065ce:	4770      	bx	lr
 80065d0:	40012c00 	.word	0x40012c00
 80065d4:	40000400 	.word	0x40000400
 80065d8:	40000800 	.word	0x40000800

080065dc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80065dc:	b480      	push	{r7}
 80065de:	b087      	sub	sp, #28
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	60f8      	str	r0, [r7, #12]
 80065e4:	60b9      	str	r1, [r7, #8]
 80065e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	6a1b      	ldr	r3, [r3, #32]
 80065ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	6a1b      	ldr	r3, [r3, #32]
 80065f2:	f023 0201 	bic.w	r2, r3, #1
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	699b      	ldr	r3, [r3, #24]
 80065fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006600:	693b      	ldr	r3, [r7, #16]
 8006602:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006606:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	011b      	lsls	r3, r3, #4
 800660c:	693a      	ldr	r2, [r7, #16]
 800660e:	4313      	orrs	r3, r2
 8006610:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006612:	697b      	ldr	r3, [r7, #20]
 8006614:	f023 030a 	bic.w	r3, r3, #10
 8006618:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800661a:	697a      	ldr	r2, [r7, #20]
 800661c:	68bb      	ldr	r3, [r7, #8]
 800661e:	4313      	orrs	r3, r2
 8006620:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	693a      	ldr	r2, [r7, #16]
 8006626:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	697a      	ldr	r2, [r7, #20]
 800662c:	621a      	str	r2, [r3, #32]
}
 800662e:	bf00      	nop
 8006630:	371c      	adds	r7, #28
 8006632:	46bd      	mov	sp, r7
 8006634:	bc80      	pop	{r7}
 8006636:	4770      	bx	lr

08006638 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006638:	b480      	push	{r7}
 800663a:	b087      	sub	sp, #28
 800663c:	af00      	add	r7, sp, #0
 800663e:	60f8      	str	r0, [r7, #12]
 8006640:	60b9      	str	r1, [r7, #8]
 8006642:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	6a1b      	ldr	r3, [r3, #32]
 8006648:	f023 0210 	bic.w	r2, r3, #16
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	699b      	ldr	r3, [r3, #24]
 8006654:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	6a1b      	ldr	r3, [r3, #32]
 800665a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800665c:	697b      	ldr	r3, [r7, #20]
 800665e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006662:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	031b      	lsls	r3, r3, #12
 8006668:	697a      	ldr	r2, [r7, #20]
 800666a:	4313      	orrs	r3, r2
 800666c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800666e:	693b      	ldr	r3, [r7, #16]
 8006670:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006674:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006676:	68bb      	ldr	r3, [r7, #8]
 8006678:	011b      	lsls	r3, r3, #4
 800667a:	693a      	ldr	r2, [r7, #16]
 800667c:	4313      	orrs	r3, r2
 800667e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	697a      	ldr	r2, [r7, #20]
 8006684:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	693a      	ldr	r2, [r7, #16]
 800668a:	621a      	str	r2, [r3, #32]
}
 800668c:	bf00      	nop
 800668e:	371c      	adds	r7, #28
 8006690:	46bd      	mov	sp, r7
 8006692:	bc80      	pop	{r7}
 8006694:	4770      	bx	lr

08006696 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006696:	b480      	push	{r7}
 8006698:	b085      	sub	sp, #20
 800669a:	af00      	add	r7, sp, #0
 800669c:	6078      	str	r0, [r7, #4]
 800669e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	689b      	ldr	r3, [r3, #8]
 80066a4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066ac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80066ae:	683a      	ldr	r2, [r7, #0]
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	4313      	orrs	r3, r2
 80066b4:	f043 0307 	orr.w	r3, r3, #7
 80066b8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	68fa      	ldr	r2, [r7, #12]
 80066be:	609a      	str	r2, [r3, #8]
}
 80066c0:	bf00      	nop
 80066c2:	3714      	adds	r7, #20
 80066c4:	46bd      	mov	sp, r7
 80066c6:	bc80      	pop	{r7}
 80066c8:	4770      	bx	lr

080066ca <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80066ca:	b480      	push	{r7}
 80066cc:	b087      	sub	sp, #28
 80066ce:	af00      	add	r7, sp, #0
 80066d0:	60f8      	str	r0, [r7, #12]
 80066d2:	60b9      	str	r1, [r7, #8]
 80066d4:	607a      	str	r2, [r7, #4]
 80066d6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	689b      	ldr	r3, [r3, #8]
 80066dc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80066de:	697b      	ldr	r3, [r7, #20]
 80066e0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80066e4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	021a      	lsls	r2, r3, #8
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	431a      	orrs	r2, r3
 80066ee:	68bb      	ldr	r3, [r7, #8]
 80066f0:	4313      	orrs	r3, r2
 80066f2:	697a      	ldr	r2, [r7, #20]
 80066f4:	4313      	orrs	r3, r2
 80066f6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	697a      	ldr	r2, [r7, #20]
 80066fc:	609a      	str	r2, [r3, #8]
}
 80066fe:	bf00      	nop
 8006700:	371c      	adds	r7, #28
 8006702:	46bd      	mov	sp, r7
 8006704:	bc80      	pop	{r7}
 8006706:	4770      	bx	lr

08006708 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006708:	b480      	push	{r7}
 800670a:	b085      	sub	sp, #20
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
 8006710:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006718:	2b01      	cmp	r3, #1
 800671a:	d101      	bne.n	8006720 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800671c:	2302      	movs	r3, #2
 800671e:	e046      	b.n	80067ae <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2201      	movs	r2, #1
 8006724:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2202      	movs	r2, #2
 800672c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	685b      	ldr	r3, [r3, #4]
 8006736:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	689b      	ldr	r3, [r3, #8]
 800673e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006746:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	68fa      	ldr	r2, [r7, #12]
 800674e:	4313      	orrs	r3, r2
 8006750:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	68fa      	ldr	r2, [r7, #12]
 8006758:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	4a16      	ldr	r2, [pc, #88]	; (80067b8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006760:	4293      	cmp	r3, r2
 8006762:	d00e      	beq.n	8006782 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800676c:	d009      	beq.n	8006782 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	4a12      	ldr	r2, [pc, #72]	; (80067bc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006774:	4293      	cmp	r3, r2
 8006776:	d004      	beq.n	8006782 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	4a10      	ldr	r2, [pc, #64]	; (80067c0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d10c      	bne.n	800679c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006782:	68bb      	ldr	r3, [r7, #8]
 8006784:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006788:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	685b      	ldr	r3, [r3, #4]
 800678e:	68ba      	ldr	r2, [r7, #8]
 8006790:	4313      	orrs	r3, r2
 8006792:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	68ba      	ldr	r2, [r7, #8]
 800679a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2201      	movs	r2, #1
 80067a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2200      	movs	r2, #0
 80067a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80067ac:	2300      	movs	r3, #0
}
 80067ae:	4618      	mov	r0, r3
 80067b0:	3714      	adds	r7, #20
 80067b2:	46bd      	mov	sp, r7
 80067b4:	bc80      	pop	{r7}
 80067b6:	4770      	bx	lr
 80067b8:	40012c00 	.word	0x40012c00
 80067bc:	40000400 	.word	0x40000400
 80067c0:	40000800 	.word	0x40000800

080067c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80067c4:	b480      	push	{r7}
 80067c6:	b083      	sub	sp, #12
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80067cc:	bf00      	nop
 80067ce:	370c      	adds	r7, #12
 80067d0:	46bd      	mov	sp, r7
 80067d2:	bc80      	pop	{r7}
 80067d4:	4770      	bx	lr

080067d6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80067d6:	b480      	push	{r7}
 80067d8:	b083      	sub	sp, #12
 80067da:	af00      	add	r7, sp, #0
 80067dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80067de:	bf00      	nop
 80067e0:	370c      	adds	r7, #12
 80067e2:	46bd      	mov	sp, r7
 80067e4:	bc80      	pop	{r7}
 80067e6:	4770      	bx	lr

080067e8 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b082      	sub	sp, #8
 80067ec:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 80067ee:	f000 fc4f 	bl	8007090 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 80067f2:	f644 6320 	movw	r3, #20000	; 0x4e20
 80067f6:	2201      	movs	r2, #1
 80067f8:	2178      	movs	r1, #120	; 0x78
 80067fa:	485b      	ldr	r0, [pc, #364]	; (8006968 <SSD1306_Init+0x180>)
 80067fc:	f7fd fe6c 	bl	80044d8 <HAL_I2C_IsDeviceReady>
 8006800:	4603      	mov	r3, r0
 8006802:	2b00      	cmp	r3, #0
 8006804:	d001      	beq.n	800680a <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8006806:	2300      	movs	r3, #0
 8006808:	e0a9      	b.n	800695e <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 800680a:	f640 13c4 	movw	r3, #2500	; 0x9c4
 800680e:	607b      	str	r3, [r7, #4]
	while(p>0)
 8006810:	e002      	b.n	8006818 <SSD1306_Init+0x30>
		p--;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	3b01      	subs	r3, #1
 8006816:	607b      	str	r3, [r7, #4]
	while(p>0)
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d1f9      	bne.n	8006812 <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 800681e:	22ae      	movs	r2, #174	; 0xae
 8006820:	2100      	movs	r1, #0
 8006822:	2078      	movs	r0, #120	; 0x78
 8006824:	f000 fcae 	bl	8007184 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8006828:	2220      	movs	r2, #32
 800682a:	2100      	movs	r1, #0
 800682c:	2078      	movs	r0, #120	; 0x78
 800682e:	f000 fca9 	bl	8007184 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8006832:	2210      	movs	r2, #16
 8006834:	2100      	movs	r1, #0
 8006836:	2078      	movs	r0, #120	; 0x78
 8006838:	f000 fca4 	bl	8007184 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 800683c:	22b0      	movs	r2, #176	; 0xb0
 800683e:	2100      	movs	r1, #0
 8006840:	2078      	movs	r0, #120	; 0x78
 8006842:	f000 fc9f 	bl	8007184 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8006846:	22c8      	movs	r2, #200	; 0xc8
 8006848:	2100      	movs	r1, #0
 800684a:	2078      	movs	r0, #120	; 0x78
 800684c:	f000 fc9a 	bl	8007184 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8006850:	2200      	movs	r2, #0
 8006852:	2100      	movs	r1, #0
 8006854:	2078      	movs	r0, #120	; 0x78
 8006856:	f000 fc95 	bl	8007184 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 800685a:	2210      	movs	r2, #16
 800685c:	2100      	movs	r1, #0
 800685e:	2078      	movs	r0, #120	; 0x78
 8006860:	f000 fc90 	bl	8007184 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8006864:	2240      	movs	r2, #64	; 0x40
 8006866:	2100      	movs	r1, #0
 8006868:	2078      	movs	r0, #120	; 0x78
 800686a:	f000 fc8b 	bl	8007184 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 800686e:	2281      	movs	r2, #129	; 0x81
 8006870:	2100      	movs	r1, #0
 8006872:	2078      	movs	r0, #120	; 0x78
 8006874:	f000 fc86 	bl	8007184 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8006878:	22ff      	movs	r2, #255	; 0xff
 800687a:	2100      	movs	r1, #0
 800687c:	2078      	movs	r0, #120	; 0x78
 800687e:	f000 fc81 	bl	8007184 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8006882:	22a1      	movs	r2, #161	; 0xa1
 8006884:	2100      	movs	r1, #0
 8006886:	2078      	movs	r0, #120	; 0x78
 8006888:	f000 fc7c 	bl	8007184 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 800688c:	22a6      	movs	r2, #166	; 0xa6
 800688e:	2100      	movs	r1, #0
 8006890:	2078      	movs	r0, #120	; 0x78
 8006892:	f000 fc77 	bl	8007184 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8006896:	22a8      	movs	r2, #168	; 0xa8
 8006898:	2100      	movs	r1, #0
 800689a:	2078      	movs	r0, #120	; 0x78
 800689c:	f000 fc72 	bl	8007184 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 80068a0:	223f      	movs	r2, #63	; 0x3f
 80068a2:	2100      	movs	r1, #0
 80068a4:	2078      	movs	r0, #120	; 0x78
 80068a6:	f000 fc6d 	bl	8007184 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80068aa:	22a4      	movs	r2, #164	; 0xa4
 80068ac:	2100      	movs	r1, #0
 80068ae:	2078      	movs	r0, #120	; 0x78
 80068b0:	f000 fc68 	bl	8007184 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 80068b4:	22d3      	movs	r2, #211	; 0xd3
 80068b6:	2100      	movs	r1, #0
 80068b8:	2078      	movs	r0, #120	; 0x78
 80068ba:	f000 fc63 	bl	8007184 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 80068be:	2200      	movs	r2, #0
 80068c0:	2100      	movs	r1, #0
 80068c2:	2078      	movs	r0, #120	; 0x78
 80068c4:	f000 fc5e 	bl	8007184 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 80068c8:	22d5      	movs	r2, #213	; 0xd5
 80068ca:	2100      	movs	r1, #0
 80068cc:	2078      	movs	r0, #120	; 0x78
 80068ce:	f000 fc59 	bl	8007184 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 80068d2:	22f0      	movs	r2, #240	; 0xf0
 80068d4:	2100      	movs	r1, #0
 80068d6:	2078      	movs	r0, #120	; 0x78
 80068d8:	f000 fc54 	bl	8007184 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 80068dc:	22d9      	movs	r2, #217	; 0xd9
 80068de:	2100      	movs	r1, #0
 80068e0:	2078      	movs	r0, #120	; 0x78
 80068e2:	f000 fc4f 	bl	8007184 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 80068e6:	2222      	movs	r2, #34	; 0x22
 80068e8:	2100      	movs	r1, #0
 80068ea:	2078      	movs	r0, #120	; 0x78
 80068ec:	f000 fc4a 	bl	8007184 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 80068f0:	22da      	movs	r2, #218	; 0xda
 80068f2:	2100      	movs	r1, #0
 80068f4:	2078      	movs	r0, #120	; 0x78
 80068f6:	f000 fc45 	bl	8007184 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 80068fa:	2212      	movs	r2, #18
 80068fc:	2100      	movs	r1, #0
 80068fe:	2078      	movs	r0, #120	; 0x78
 8006900:	f000 fc40 	bl	8007184 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8006904:	22db      	movs	r2, #219	; 0xdb
 8006906:	2100      	movs	r1, #0
 8006908:	2078      	movs	r0, #120	; 0x78
 800690a:	f000 fc3b 	bl	8007184 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 800690e:	2220      	movs	r2, #32
 8006910:	2100      	movs	r1, #0
 8006912:	2078      	movs	r0, #120	; 0x78
 8006914:	f000 fc36 	bl	8007184 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8006918:	228d      	movs	r2, #141	; 0x8d
 800691a:	2100      	movs	r1, #0
 800691c:	2078      	movs	r0, #120	; 0x78
 800691e:	f000 fc31 	bl	8007184 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8006922:	2214      	movs	r2, #20
 8006924:	2100      	movs	r1, #0
 8006926:	2078      	movs	r0, #120	; 0x78
 8006928:	f000 fc2c 	bl	8007184 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 800692c:	22af      	movs	r2, #175	; 0xaf
 800692e:	2100      	movs	r1, #0
 8006930:	2078      	movs	r0, #120	; 0x78
 8006932:	f000 fc27 	bl	8007184 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8006936:	222e      	movs	r2, #46	; 0x2e
 8006938:	2100      	movs	r1, #0
 800693a:	2078      	movs	r0, #120	; 0x78
 800693c:	f000 fc22 	bl	8007184 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8006940:	2000      	movs	r0, #0
 8006942:	f000 f843 	bl	80069cc <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8006946:	f000 f813 	bl	8006970 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 800694a:	4b08      	ldr	r3, [pc, #32]	; (800696c <SSD1306_Init+0x184>)
 800694c:	2200      	movs	r2, #0
 800694e:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8006950:	4b06      	ldr	r3, [pc, #24]	; (800696c <SSD1306_Init+0x184>)
 8006952:	2200      	movs	r2, #0
 8006954:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8006956:	4b05      	ldr	r3, [pc, #20]	; (800696c <SSD1306_Init+0x184>)
 8006958:	2201      	movs	r2, #1
 800695a:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 800695c:	2301      	movs	r3, #1
}
 800695e:	4618      	mov	r0, r3
 8006960:	3708      	adds	r7, #8
 8006962:	46bd      	mov	sp, r7
 8006964:	bd80      	pop	{r7, pc}
 8006966:	bf00      	nop
 8006968:	200000e0 	.word	0x200000e0
 800696c:	20000654 	.word	0x20000654

08006970 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8006970:	b580      	push	{r7, lr}
 8006972:	b082      	sub	sp, #8
 8006974:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8006976:	2300      	movs	r3, #0
 8006978:	71fb      	strb	r3, [r7, #7]
 800697a:	e01d      	b.n	80069b8 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 800697c:	79fb      	ldrb	r3, [r7, #7]
 800697e:	3b50      	subs	r3, #80	; 0x50
 8006980:	b2db      	uxtb	r3, r3
 8006982:	461a      	mov	r2, r3
 8006984:	2100      	movs	r1, #0
 8006986:	2078      	movs	r0, #120	; 0x78
 8006988:	f000 fbfc 	bl	8007184 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 800698c:	2200      	movs	r2, #0
 800698e:	2100      	movs	r1, #0
 8006990:	2078      	movs	r0, #120	; 0x78
 8006992:	f000 fbf7 	bl	8007184 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8006996:	2210      	movs	r2, #16
 8006998:	2100      	movs	r1, #0
 800699a:	2078      	movs	r0, #120	; 0x78
 800699c:	f000 fbf2 	bl	8007184 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 80069a0:	79fb      	ldrb	r3, [r7, #7]
 80069a2:	01db      	lsls	r3, r3, #7
 80069a4:	4a08      	ldr	r2, [pc, #32]	; (80069c8 <SSD1306_UpdateScreen+0x58>)
 80069a6:	441a      	add	r2, r3
 80069a8:	2380      	movs	r3, #128	; 0x80
 80069aa:	2140      	movs	r1, #64	; 0x40
 80069ac:	2078      	movs	r0, #120	; 0x78
 80069ae:	f000 fb83 	bl	80070b8 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 80069b2:	79fb      	ldrb	r3, [r7, #7]
 80069b4:	3301      	adds	r3, #1
 80069b6:	71fb      	strb	r3, [r7, #7]
 80069b8:	79fb      	ldrb	r3, [r7, #7]
 80069ba:	2b07      	cmp	r3, #7
 80069bc:	d9de      	bls.n	800697c <SSD1306_UpdateScreen+0xc>
	}
}
 80069be:	bf00      	nop
 80069c0:	bf00      	nop
 80069c2:	3708      	adds	r7, #8
 80069c4:	46bd      	mov	sp, r7
 80069c6:	bd80      	pop	{r7, pc}
 80069c8:	20000254 	.word	0x20000254

080069cc <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b082      	sub	sp, #8
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	4603      	mov	r3, r0
 80069d4:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80069d6:	79fb      	ldrb	r3, [r7, #7]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d101      	bne.n	80069e0 <SSD1306_Fill+0x14>
 80069dc:	2300      	movs	r3, #0
 80069de:	e000      	b.n	80069e2 <SSD1306_Fill+0x16>
 80069e0:	23ff      	movs	r3, #255	; 0xff
 80069e2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80069e6:	4619      	mov	r1, r3
 80069e8:	4803      	ldr	r0, [pc, #12]	; (80069f8 <SSD1306_Fill+0x2c>)
 80069ea:	f000 fd77 	bl	80074dc <memset>
}
 80069ee:	bf00      	nop
 80069f0:	3708      	adds	r7, #8
 80069f2:	46bd      	mov	sp, r7
 80069f4:	bd80      	pop	{r7, pc}
 80069f6:	bf00      	nop
 80069f8:	20000254 	.word	0x20000254

080069fc <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 80069fc:	b480      	push	{r7}
 80069fe:	b083      	sub	sp, #12
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	4603      	mov	r3, r0
 8006a04:	80fb      	strh	r3, [r7, #6]
 8006a06:	460b      	mov	r3, r1
 8006a08:	80bb      	strh	r3, [r7, #4]
 8006a0a:	4613      	mov	r3, r2
 8006a0c:	70fb      	strb	r3, [r7, #3]
	if (
 8006a0e:	88fb      	ldrh	r3, [r7, #6]
 8006a10:	2b7f      	cmp	r3, #127	; 0x7f
 8006a12:	d848      	bhi.n	8006aa6 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8006a14:	88bb      	ldrh	r3, [r7, #4]
 8006a16:	2b3f      	cmp	r3, #63	; 0x3f
 8006a18:	d845      	bhi.n	8006aa6 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8006a1a:	4b25      	ldr	r3, [pc, #148]	; (8006ab0 <SSD1306_DrawPixel+0xb4>)
 8006a1c:	791b      	ldrb	r3, [r3, #4]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d006      	beq.n	8006a30 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8006a22:	78fb      	ldrb	r3, [r7, #3]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	bf0c      	ite	eq
 8006a28:	2301      	moveq	r3, #1
 8006a2a:	2300      	movne	r3, #0
 8006a2c:	b2db      	uxtb	r3, r3
 8006a2e:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8006a30:	78fb      	ldrb	r3, [r7, #3]
 8006a32:	2b01      	cmp	r3, #1
 8006a34:	d11a      	bne.n	8006a6c <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8006a36:	88fa      	ldrh	r2, [r7, #6]
 8006a38:	88bb      	ldrh	r3, [r7, #4]
 8006a3a:	08db      	lsrs	r3, r3, #3
 8006a3c:	b298      	uxth	r0, r3
 8006a3e:	4603      	mov	r3, r0
 8006a40:	01db      	lsls	r3, r3, #7
 8006a42:	4413      	add	r3, r2
 8006a44:	4a1b      	ldr	r2, [pc, #108]	; (8006ab4 <SSD1306_DrawPixel+0xb8>)
 8006a46:	5cd3      	ldrb	r3, [r2, r3]
 8006a48:	b25a      	sxtb	r2, r3
 8006a4a:	88bb      	ldrh	r3, [r7, #4]
 8006a4c:	f003 0307 	and.w	r3, r3, #7
 8006a50:	2101      	movs	r1, #1
 8006a52:	fa01 f303 	lsl.w	r3, r1, r3
 8006a56:	b25b      	sxtb	r3, r3
 8006a58:	4313      	orrs	r3, r2
 8006a5a:	b259      	sxtb	r1, r3
 8006a5c:	88fa      	ldrh	r2, [r7, #6]
 8006a5e:	4603      	mov	r3, r0
 8006a60:	01db      	lsls	r3, r3, #7
 8006a62:	4413      	add	r3, r2
 8006a64:	b2c9      	uxtb	r1, r1
 8006a66:	4a13      	ldr	r2, [pc, #76]	; (8006ab4 <SSD1306_DrawPixel+0xb8>)
 8006a68:	54d1      	strb	r1, [r2, r3]
 8006a6a:	e01d      	b.n	8006aa8 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8006a6c:	88fa      	ldrh	r2, [r7, #6]
 8006a6e:	88bb      	ldrh	r3, [r7, #4]
 8006a70:	08db      	lsrs	r3, r3, #3
 8006a72:	b298      	uxth	r0, r3
 8006a74:	4603      	mov	r3, r0
 8006a76:	01db      	lsls	r3, r3, #7
 8006a78:	4413      	add	r3, r2
 8006a7a:	4a0e      	ldr	r2, [pc, #56]	; (8006ab4 <SSD1306_DrawPixel+0xb8>)
 8006a7c:	5cd3      	ldrb	r3, [r2, r3]
 8006a7e:	b25a      	sxtb	r2, r3
 8006a80:	88bb      	ldrh	r3, [r7, #4]
 8006a82:	f003 0307 	and.w	r3, r3, #7
 8006a86:	2101      	movs	r1, #1
 8006a88:	fa01 f303 	lsl.w	r3, r1, r3
 8006a8c:	b25b      	sxtb	r3, r3
 8006a8e:	43db      	mvns	r3, r3
 8006a90:	b25b      	sxtb	r3, r3
 8006a92:	4013      	ands	r3, r2
 8006a94:	b259      	sxtb	r1, r3
 8006a96:	88fa      	ldrh	r2, [r7, #6]
 8006a98:	4603      	mov	r3, r0
 8006a9a:	01db      	lsls	r3, r3, #7
 8006a9c:	4413      	add	r3, r2
 8006a9e:	b2c9      	uxtb	r1, r1
 8006aa0:	4a04      	ldr	r2, [pc, #16]	; (8006ab4 <SSD1306_DrawPixel+0xb8>)
 8006aa2:	54d1      	strb	r1, [r2, r3]
 8006aa4:	e000      	b.n	8006aa8 <SSD1306_DrawPixel+0xac>
		return;
 8006aa6:	bf00      	nop
	}
}
 8006aa8:	370c      	adds	r7, #12
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	bc80      	pop	{r7}
 8006aae:	4770      	bx	lr
 8006ab0:	20000654 	.word	0x20000654
 8006ab4:	20000254 	.word	0x20000254

08006ab8 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8006ab8:	b480      	push	{r7}
 8006aba:	b083      	sub	sp, #12
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	4603      	mov	r3, r0
 8006ac0:	460a      	mov	r2, r1
 8006ac2:	80fb      	strh	r3, [r7, #6]
 8006ac4:	4613      	mov	r3, r2
 8006ac6:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8006ac8:	4a05      	ldr	r2, [pc, #20]	; (8006ae0 <SSD1306_GotoXY+0x28>)
 8006aca:	88fb      	ldrh	r3, [r7, #6]
 8006acc:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8006ace:	4a04      	ldr	r2, [pc, #16]	; (8006ae0 <SSD1306_GotoXY+0x28>)
 8006ad0:	88bb      	ldrh	r3, [r7, #4]
 8006ad2:	8053      	strh	r3, [r2, #2]
}
 8006ad4:	bf00      	nop
 8006ad6:	370c      	adds	r7, #12
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	bc80      	pop	{r7}
 8006adc:	4770      	bx	lr
 8006ade:	bf00      	nop
 8006ae0:	20000654 	.word	0x20000654

08006ae4 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b086      	sub	sp, #24
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	4603      	mov	r3, r0
 8006aec:	6039      	str	r1, [r7, #0]
 8006aee:	71fb      	strb	r3, [r7, #7]
 8006af0:	4613      	mov	r3, r2
 8006af2:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8006af4:	4b3a      	ldr	r3, [pc, #232]	; (8006be0 <SSD1306_Putc+0xfc>)
 8006af6:	881b      	ldrh	r3, [r3, #0]
 8006af8:	461a      	mov	r2, r3
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	781b      	ldrb	r3, [r3, #0]
 8006afe:	4413      	add	r3, r2
	if (
 8006b00:	2b7f      	cmp	r3, #127	; 0x7f
 8006b02:	dc07      	bgt.n	8006b14 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8006b04:	4b36      	ldr	r3, [pc, #216]	; (8006be0 <SSD1306_Putc+0xfc>)
 8006b06:	885b      	ldrh	r3, [r3, #2]
 8006b08:	461a      	mov	r2, r3
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	785b      	ldrb	r3, [r3, #1]
 8006b0e:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8006b10:	2b3f      	cmp	r3, #63	; 0x3f
 8006b12:	dd01      	ble.n	8006b18 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8006b14:	2300      	movs	r3, #0
 8006b16:	e05e      	b.n	8006bd6 <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8006b18:	2300      	movs	r3, #0
 8006b1a:	617b      	str	r3, [r7, #20]
 8006b1c:	e04b      	b.n	8006bb6 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	685a      	ldr	r2, [r3, #4]
 8006b22:	79fb      	ldrb	r3, [r7, #7]
 8006b24:	3b20      	subs	r3, #32
 8006b26:	6839      	ldr	r1, [r7, #0]
 8006b28:	7849      	ldrb	r1, [r1, #1]
 8006b2a:	fb01 f303 	mul.w	r3, r1, r3
 8006b2e:	4619      	mov	r1, r3
 8006b30:	697b      	ldr	r3, [r7, #20]
 8006b32:	440b      	add	r3, r1
 8006b34:	005b      	lsls	r3, r3, #1
 8006b36:	4413      	add	r3, r2
 8006b38:	881b      	ldrh	r3, [r3, #0]
 8006b3a:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	613b      	str	r3, [r7, #16]
 8006b40:	e030      	b.n	8006ba4 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8006b42:	68fa      	ldr	r2, [r7, #12]
 8006b44:	693b      	ldr	r3, [r7, #16]
 8006b46:	fa02 f303 	lsl.w	r3, r2, r3
 8006b4a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d010      	beq.n	8006b74 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8006b52:	4b23      	ldr	r3, [pc, #140]	; (8006be0 <SSD1306_Putc+0xfc>)
 8006b54:	881a      	ldrh	r2, [r3, #0]
 8006b56:	693b      	ldr	r3, [r7, #16]
 8006b58:	b29b      	uxth	r3, r3
 8006b5a:	4413      	add	r3, r2
 8006b5c:	b298      	uxth	r0, r3
 8006b5e:	4b20      	ldr	r3, [pc, #128]	; (8006be0 <SSD1306_Putc+0xfc>)
 8006b60:	885a      	ldrh	r2, [r3, #2]
 8006b62:	697b      	ldr	r3, [r7, #20]
 8006b64:	b29b      	uxth	r3, r3
 8006b66:	4413      	add	r3, r2
 8006b68:	b29b      	uxth	r3, r3
 8006b6a:	79ba      	ldrb	r2, [r7, #6]
 8006b6c:	4619      	mov	r1, r3
 8006b6e:	f7ff ff45 	bl	80069fc <SSD1306_DrawPixel>
 8006b72:	e014      	b.n	8006b9e <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8006b74:	4b1a      	ldr	r3, [pc, #104]	; (8006be0 <SSD1306_Putc+0xfc>)
 8006b76:	881a      	ldrh	r2, [r3, #0]
 8006b78:	693b      	ldr	r3, [r7, #16]
 8006b7a:	b29b      	uxth	r3, r3
 8006b7c:	4413      	add	r3, r2
 8006b7e:	b298      	uxth	r0, r3
 8006b80:	4b17      	ldr	r3, [pc, #92]	; (8006be0 <SSD1306_Putc+0xfc>)
 8006b82:	885a      	ldrh	r2, [r3, #2]
 8006b84:	697b      	ldr	r3, [r7, #20]
 8006b86:	b29b      	uxth	r3, r3
 8006b88:	4413      	add	r3, r2
 8006b8a:	b299      	uxth	r1, r3
 8006b8c:	79bb      	ldrb	r3, [r7, #6]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	bf0c      	ite	eq
 8006b92:	2301      	moveq	r3, #1
 8006b94:	2300      	movne	r3, #0
 8006b96:	b2db      	uxtb	r3, r3
 8006b98:	461a      	mov	r2, r3
 8006b9a:	f7ff ff2f 	bl	80069fc <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8006b9e:	693b      	ldr	r3, [r7, #16]
 8006ba0:	3301      	adds	r3, #1
 8006ba2:	613b      	str	r3, [r7, #16]
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	781b      	ldrb	r3, [r3, #0]
 8006ba8:	461a      	mov	r2, r3
 8006baa:	693b      	ldr	r3, [r7, #16]
 8006bac:	4293      	cmp	r3, r2
 8006bae:	d3c8      	bcc.n	8006b42 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8006bb0:	697b      	ldr	r3, [r7, #20]
 8006bb2:	3301      	adds	r3, #1
 8006bb4:	617b      	str	r3, [r7, #20]
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	785b      	ldrb	r3, [r3, #1]
 8006bba:	461a      	mov	r2, r3
 8006bbc:	697b      	ldr	r3, [r7, #20]
 8006bbe:	4293      	cmp	r3, r2
 8006bc0:	d3ad      	bcc.n	8006b1e <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8006bc2:	4b07      	ldr	r3, [pc, #28]	; (8006be0 <SSD1306_Putc+0xfc>)
 8006bc4:	881a      	ldrh	r2, [r3, #0]
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	781b      	ldrb	r3, [r3, #0]
 8006bca:	b29b      	uxth	r3, r3
 8006bcc:	4413      	add	r3, r2
 8006bce:	b29a      	uxth	r2, r3
 8006bd0:	4b03      	ldr	r3, [pc, #12]	; (8006be0 <SSD1306_Putc+0xfc>)
 8006bd2:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8006bd4:	79fb      	ldrb	r3, [r7, #7]
}
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	3718      	adds	r7, #24
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	bd80      	pop	{r7, pc}
 8006bde:	bf00      	nop
 8006be0:	20000654 	.word	0x20000654

08006be4 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b084      	sub	sp, #16
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	60f8      	str	r0, [r7, #12]
 8006bec:	60b9      	str	r1, [r7, #8]
 8006bee:	4613      	mov	r3, r2
 8006bf0:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8006bf2:	e012      	b.n	8006c1a <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	781b      	ldrb	r3, [r3, #0]
 8006bf8:	79fa      	ldrb	r2, [r7, #7]
 8006bfa:	68b9      	ldr	r1, [r7, #8]
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	f7ff ff71 	bl	8006ae4 <SSD1306_Putc>
 8006c02:	4603      	mov	r3, r0
 8006c04:	461a      	mov	r2, r3
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	781b      	ldrb	r3, [r3, #0]
 8006c0a:	429a      	cmp	r2, r3
 8006c0c:	d002      	beq.n	8006c14 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	781b      	ldrb	r3, [r3, #0]
 8006c12:	e008      	b.n	8006c26 <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	3301      	adds	r3, #1
 8006c18:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	781b      	ldrb	r3, [r3, #0]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d1e8      	bne.n	8006bf4 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	781b      	ldrb	r3, [r3, #0]
}
 8006c26:	4618      	mov	r0, r3
 8006c28:	3710      	adds	r7, #16
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	bd80      	pop	{r7, pc}

08006c2e <SSD1306_DrawLine>:
 

void SSD1306_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, SSD1306_COLOR_t c) {
 8006c2e:	b590      	push	{r4, r7, lr}
 8006c30:	b087      	sub	sp, #28
 8006c32:	af00      	add	r7, sp, #0
 8006c34:	4604      	mov	r4, r0
 8006c36:	4608      	mov	r0, r1
 8006c38:	4611      	mov	r1, r2
 8006c3a:	461a      	mov	r2, r3
 8006c3c:	4623      	mov	r3, r4
 8006c3e:	80fb      	strh	r3, [r7, #6]
 8006c40:	4603      	mov	r3, r0
 8006c42:	80bb      	strh	r3, [r7, #4]
 8006c44:	460b      	mov	r3, r1
 8006c46:	807b      	strh	r3, [r7, #2]
 8006c48:	4613      	mov	r3, r2
 8006c4a:	803b      	strh	r3, [r7, #0]
	int16_t dx, dy, sx, sy, err, e2, i, tmp; 
	
	/* Check for overflow */
	if (x0 >= SSD1306_WIDTH) {
 8006c4c:	88fb      	ldrh	r3, [r7, #6]
 8006c4e:	2b7f      	cmp	r3, #127	; 0x7f
 8006c50:	d901      	bls.n	8006c56 <SSD1306_DrawLine+0x28>
		x0 = SSD1306_WIDTH - 1;
 8006c52:	237f      	movs	r3, #127	; 0x7f
 8006c54:	80fb      	strh	r3, [r7, #6]
	}
	if (x1 >= SSD1306_WIDTH) {
 8006c56:	887b      	ldrh	r3, [r7, #2]
 8006c58:	2b7f      	cmp	r3, #127	; 0x7f
 8006c5a:	d901      	bls.n	8006c60 <SSD1306_DrawLine+0x32>
		x1 = SSD1306_WIDTH - 1;
 8006c5c:	237f      	movs	r3, #127	; 0x7f
 8006c5e:	807b      	strh	r3, [r7, #2]
	}
	if (y0 >= SSD1306_HEIGHT) {
 8006c60:	88bb      	ldrh	r3, [r7, #4]
 8006c62:	2b3f      	cmp	r3, #63	; 0x3f
 8006c64:	d901      	bls.n	8006c6a <SSD1306_DrawLine+0x3c>
		y0 = SSD1306_HEIGHT - 1;
 8006c66:	233f      	movs	r3, #63	; 0x3f
 8006c68:	80bb      	strh	r3, [r7, #4]
	}
	if (y1 >= SSD1306_HEIGHT) {
 8006c6a:	883b      	ldrh	r3, [r7, #0]
 8006c6c:	2b3f      	cmp	r3, #63	; 0x3f
 8006c6e:	d901      	bls.n	8006c74 <SSD1306_DrawLine+0x46>
		y1 = SSD1306_HEIGHT - 1;
 8006c70:	233f      	movs	r3, #63	; 0x3f
 8006c72:	803b      	strh	r3, [r7, #0]
	}
	
	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1); 
 8006c74:	88fa      	ldrh	r2, [r7, #6]
 8006c76:	887b      	ldrh	r3, [r7, #2]
 8006c78:	429a      	cmp	r2, r3
 8006c7a:	d205      	bcs.n	8006c88 <SSD1306_DrawLine+0x5a>
 8006c7c:	887a      	ldrh	r2, [r7, #2]
 8006c7e:	88fb      	ldrh	r3, [r7, #6]
 8006c80:	1ad3      	subs	r3, r2, r3
 8006c82:	b29b      	uxth	r3, r3
 8006c84:	b21b      	sxth	r3, r3
 8006c86:	e004      	b.n	8006c92 <SSD1306_DrawLine+0x64>
 8006c88:	88fa      	ldrh	r2, [r7, #6]
 8006c8a:	887b      	ldrh	r3, [r7, #2]
 8006c8c:	1ad3      	subs	r3, r2, r3
 8006c8e:	b29b      	uxth	r3, r3
 8006c90:	b21b      	sxth	r3, r3
 8006c92:	827b      	strh	r3, [r7, #18]
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 8006c94:	88ba      	ldrh	r2, [r7, #4]
 8006c96:	883b      	ldrh	r3, [r7, #0]
 8006c98:	429a      	cmp	r2, r3
 8006c9a:	d205      	bcs.n	8006ca8 <SSD1306_DrawLine+0x7a>
 8006c9c:	883a      	ldrh	r2, [r7, #0]
 8006c9e:	88bb      	ldrh	r3, [r7, #4]
 8006ca0:	1ad3      	subs	r3, r2, r3
 8006ca2:	b29b      	uxth	r3, r3
 8006ca4:	b21b      	sxth	r3, r3
 8006ca6:	e004      	b.n	8006cb2 <SSD1306_DrawLine+0x84>
 8006ca8:	88ba      	ldrh	r2, [r7, #4]
 8006caa:	883b      	ldrh	r3, [r7, #0]
 8006cac:	1ad3      	subs	r3, r2, r3
 8006cae:	b29b      	uxth	r3, r3
 8006cb0:	b21b      	sxth	r3, r3
 8006cb2:	823b      	strh	r3, [r7, #16]
	sx = (x0 < x1) ? 1 : -1; 
 8006cb4:	88fa      	ldrh	r2, [r7, #6]
 8006cb6:	887b      	ldrh	r3, [r7, #2]
 8006cb8:	429a      	cmp	r2, r3
 8006cba:	d201      	bcs.n	8006cc0 <SSD1306_DrawLine+0x92>
 8006cbc:	2301      	movs	r3, #1
 8006cbe:	e001      	b.n	8006cc4 <SSD1306_DrawLine+0x96>
 8006cc0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006cc4:	81fb      	strh	r3, [r7, #14]
	sy = (y0 < y1) ? 1 : -1; 
 8006cc6:	88ba      	ldrh	r2, [r7, #4]
 8006cc8:	883b      	ldrh	r3, [r7, #0]
 8006cca:	429a      	cmp	r2, r3
 8006ccc:	d201      	bcs.n	8006cd2 <SSD1306_DrawLine+0xa4>
 8006cce:	2301      	movs	r3, #1
 8006cd0:	e001      	b.n	8006cd6 <SSD1306_DrawLine+0xa8>
 8006cd2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006cd6:	81bb      	strh	r3, [r7, #12]
	err = ((dx > dy) ? dx : -dy) / 2; 
 8006cd8:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8006cdc:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8006ce0:	429a      	cmp	r2, r3
 8006ce2:	dd06      	ble.n	8006cf2 <SSD1306_DrawLine+0xc4>
 8006ce4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006ce8:	0fda      	lsrs	r2, r3, #31
 8006cea:	4413      	add	r3, r2
 8006cec:	105b      	asrs	r3, r3, #1
 8006cee:	b21b      	sxth	r3, r3
 8006cf0:	e006      	b.n	8006d00 <SSD1306_DrawLine+0xd2>
 8006cf2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8006cf6:	0fda      	lsrs	r2, r3, #31
 8006cf8:	4413      	add	r3, r2
 8006cfa:	105b      	asrs	r3, r3, #1
 8006cfc:	425b      	negs	r3, r3
 8006cfe:	b21b      	sxth	r3, r3
 8006d00:	82fb      	strh	r3, [r7, #22]

	if (dx == 0) {
 8006d02:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d129      	bne.n	8006d5e <SSD1306_DrawLine+0x130>
		if (y1 < y0) {
 8006d0a:	883a      	ldrh	r2, [r7, #0]
 8006d0c:	88bb      	ldrh	r3, [r7, #4]
 8006d0e:	429a      	cmp	r2, r3
 8006d10:	d205      	bcs.n	8006d1e <SSD1306_DrawLine+0xf0>
			tmp = y1;
 8006d12:	883b      	ldrh	r3, [r7, #0]
 8006d14:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 8006d16:	88bb      	ldrh	r3, [r7, #4]
 8006d18:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 8006d1a:	893b      	ldrh	r3, [r7, #8]
 8006d1c:	80bb      	strh	r3, [r7, #4]
		}
		
		if (x1 < x0) {
 8006d1e:	887a      	ldrh	r2, [r7, #2]
 8006d20:	88fb      	ldrh	r3, [r7, #6]
 8006d22:	429a      	cmp	r2, r3
 8006d24:	d205      	bcs.n	8006d32 <SSD1306_DrawLine+0x104>
			tmp = x1;
 8006d26:	887b      	ldrh	r3, [r7, #2]
 8006d28:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 8006d2a:	88fb      	ldrh	r3, [r7, #6]
 8006d2c:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 8006d2e:	893b      	ldrh	r3, [r7, #8]
 8006d30:	80fb      	strh	r3, [r7, #6]
		}
		
		/* Vertical line */
		for (i = y0; i <= y1; i++) {
 8006d32:	88bb      	ldrh	r3, [r7, #4]
 8006d34:	82bb      	strh	r3, [r7, #20]
 8006d36:	e00c      	b.n	8006d52 <SSD1306_DrawLine+0x124>
			SSD1306_DrawPixel(x0, i, c);
 8006d38:	8ab9      	ldrh	r1, [r7, #20]
 8006d3a:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8006d3e:	88fb      	ldrh	r3, [r7, #6]
 8006d40:	4618      	mov	r0, r3
 8006d42:	f7ff fe5b 	bl	80069fc <SSD1306_DrawPixel>
		for (i = y0; i <= y1; i++) {
 8006d46:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8006d4a:	b29b      	uxth	r3, r3
 8006d4c:	3301      	adds	r3, #1
 8006d4e:	b29b      	uxth	r3, r3
 8006d50:	82bb      	strh	r3, [r7, #20]
 8006d52:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8006d56:	883b      	ldrh	r3, [r7, #0]
 8006d58:	429a      	cmp	r2, r3
 8006d5a:	dded      	ble.n	8006d38 <SSD1306_DrawLine+0x10a>
		}
		
		/* Return from function */
		return;
 8006d5c:	e05f      	b.n	8006e1e <SSD1306_DrawLine+0x1f0>
	}
	
	if (dy == 0) {
 8006d5e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d129      	bne.n	8006dba <SSD1306_DrawLine+0x18c>
		if (y1 < y0) {
 8006d66:	883a      	ldrh	r2, [r7, #0]
 8006d68:	88bb      	ldrh	r3, [r7, #4]
 8006d6a:	429a      	cmp	r2, r3
 8006d6c:	d205      	bcs.n	8006d7a <SSD1306_DrawLine+0x14c>
			tmp = y1;
 8006d6e:	883b      	ldrh	r3, [r7, #0]
 8006d70:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 8006d72:	88bb      	ldrh	r3, [r7, #4]
 8006d74:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 8006d76:	893b      	ldrh	r3, [r7, #8]
 8006d78:	80bb      	strh	r3, [r7, #4]
		}
		
		if (x1 < x0) {
 8006d7a:	887a      	ldrh	r2, [r7, #2]
 8006d7c:	88fb      	ldrh	r3, [r7, #6]
 8006d7e:	429a      	cmp	r2, r3
 8006d80:	d205      	bcs.n	8006d8e <SSD1306_DrawLine+0x160>
			tmp = x1;
 8006d82:	887b      	ldrh	r3, [r7, #2]
 8006d84:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 8006d86:	88fb      	ldrh	r3, [r7, #6]
 8006d88:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 8006d8a:	893b      	ldrh	r3, [r7, #8]
 8006d8c:	80fb      	strh	r3, [r7, #6]
		}
		
		/* Horizontal line */
		for (i = x0; i <= x1; i++) {
 8006d8e:	88fb      	ldrh	r3, [r7, #6]
 8006d90:	82bb      	strh	r3, [r7, #20]
 8006d92:	e00c      	b.n	8006dae <SSD1306_DrawLine+0x180>
			SSD1306_DrawPixel(i, y0, c);
 8006d94:	8abb      	ldrh	r3, [r7, #20]
 8006d96:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8006d9a:	88b9      	ldrh	r1, [r7, #4]
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	f7ff fe2d 	bl	80069fc <SSD1306_DrawPixel>
		for (i = x0; i <= x1; i++) {
 8006da2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8006da6:	b29b      	uxth	r3, r3
 8006da8:	3301      	adds	r3, #1
 8006daa:	b29b      	uxth	r3, r3
 8006dac:	82bb      	strh	r3, [r7, #20]
 8006dae:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8006db2:	887b      	ldrh	r3, [r7, #2]
 8006db4:	429a      	cmp	r2, r3
 8006db6:	dded      	ble.n	8006d94 <SSD1306_DrawLine+0x166>
		}
		
		/* Return from function */
		return;
 8006db8:	e031      	b.n	8006e1e <SSD1306_DrawLine+0x1f0>
	}
	
	while (1) {
		SSD1306_DrawPixel(x0, y0, c);
 8006dba:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8006dbe:	88b9      	ldrh	r1, [r7, #4]
 8006dc0:	88fb      	ldrh	r3, [r7, #6]
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	f7ff fe1a 	bl	80069fc <SSD1306_DrawPixel>
		if (x0 == x1 && y0 == y1) {
 8006dc8:	88fa      	ldrh	r2, [r7, #6]
 8006dca:	887b      	ldrh	r3, [r7, #2]
 8006dcc:	429a      	cmp	r2, r3
 8006dce:	d103      	bne.n	8006dd8 <SSD1306_DrawLine+0x1aa>
 8006dd0:	88ba      	ldrh	r2, [r7, #4]
 8006dd2:	883b      	ldrh	r3, [r7, #0]
 8006dd4:	429a      	cmp	r2, r3
 8006dd6:	d021      	beq.n	8006e1c <SSD1306_DrawLine+0x1ee>
			break;
		}
		e2 = err; 
 8006dd8:	8afb      	ldrh	r3, [r7, #22]
 8006dda:	817b      	strh	r3, [r7, #10]
		if (e2 > -dx) {
 8006ddc:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8006de0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006de4:	425b      	negs	r3, r3
 8006de6:	429a      	cmp	r2, r3
 8006de8:	dd08      	ble.n	8006dfc <SSD1306_DrawLine+0x1ce>
			err -= dy;
 8006dea:	8afa      	ldrh	r2, [r7, #22]
 8006dec:	8a3b      	ldrh	r3, [r7, #16]
 8006dee:	1ad3      	subs	r3, r2, r3
 8006df0:	b29b      	uxth	r3, r3
 8006df2:	82fb      	strh	r3, [r7, #22]
			x0 += sx;
 8006df4:	89fa      	ldrh	r2, [r7, #14]
 8006df6:	88fb      	ldrh	r3, [r7, #6]
 8006df8:	4413      	add	r3, r2
 8006dfa:	80fb      	strh	r3, [r7, #6]
		} 
		if (e2 < dy) {
 8006dfc:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8006e00:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8006e04:	429a      	cmp	r2, r3
 8006e06:	dad8      	bge.n	8006dba <SSD1306_DrawLine+0x18c>
			err += dx;
 8006e08:	8afa      	ldrh	r2, [r7, #22]
 8006e0a:	8a7b      	ldrh	r3, [r7, #18]
 8006e0c:	4413      	add	r3, r2
 8006e0e:	b29b      	uxth	r3, r3
 8006e10:	82fb      	strh	r3, [r7, #22]
			y0 += sy;
 8006e12:	89ba      	ldrh	r2, [r7, #12]
 8006e14:	88bb      	ldrh	r3, [r7, #4]
 8006e16:	4413      	add	r3, r2
 8006e18:	80bb      	strh	r3, [r7, #4]
		SSD1306_DrawPixel(x0, y0, c);
 8006e1a:	e7ce      	b.n	8006dba <SSD1306_DrawLine+0x18c>
			break;
 8006e1c:	bf00      	nop
		} 
	}
}
 8006e1e:	371c      	adds	r7, #28
 8006e20:	46bd      	mov	sp, r7
 8006e22:	bd90      	pop	{r4, r7, pc}

08006e24 <SSD1306_DrawRectangle>:

void SSD1306_DrawRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, SSD1306_COLOR_t c) {
 8006e24:	b590      	push	{r4, r7, lr}
 8006e26:	b085      	sub	sp, #20
 8006e28:	af02      	add	r7, sp, #8
 8006e2a:	4604      	mov	r4, r0
 8006e2c:	4608      	mov	r0, r1
 8006e2e:	4611      	mov	r1, r2
 8006e30:	461a      	mov	r2, r3
 8006e32:	4623      	mov	r3, r4
 8006e34:	80fb      	strh	r3, [r7, #6]
 8006e36:	4603      	mov	r3, r0
 8006e38:	80bb      	strh	r3, [r7, #4]
 8006e3a:	460b      	mov	r3, r1
 8006e3c:	807b      	strh	r3, [r7, #2]
 8006e3e:	4613      	mov	r3, r2
 8006e40:	803b      	strh	r3, [r7, #0]
	/* Check input parameters */
	if (
 8006e42:	88fb      	ldrh	r3, [r7, #6]
 8006e44:	2b7f      	cmp	r3, #127	; 0x7f
 8006e46:	d853      	bhi.n	8006ef0 <SSD1306_DrawRectangle+0xcc>
		x >= SSD1306_WIDTH ||
 8006e48:	88bb      	ldrh	r3, [r7, #4]
 8006e4a:	2b3f      	cmp	r3, #63	; 0x3f
 8006e4c:	d850      	bhi.n	8006ef0 <SSD1306_DrawRectangle+0xcc>
		/* Return error */
		return;
	}
	
	/* Check width and height */
	if ((x + w) >= SSD1306_WIDTH) {
 8006e4e:	88fa      	ldrh	r2, [r7, #6]
 8006e50:	887b      	ldrh	r3, [r7, #2]
 8006e52:	4413      	add	r3, r2
 8006e54:	2b7f      	cmp	r3, #127	; 0x7f
 8006e56:	dd03      	ble.n	8006e60 <SSD1306_DrawRectangle+0x3c>
		w = SSD1306_WIDTH - x;
 8006e58:	88fb      	ldrh	r3, [r7, #6]
 8006e5a:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8006e5e:	807b      	strh	r3, [r7, #2]
	}
	if ((y + h) >= SSD1306_HEIGHT) {
 8006e60:	88ba      	ldrh	r2, [r7, #4]
 8006e62:	883b      	ldrh	r3, [r7, #0]
 8006e64:	4413      	add	r3, r2
 8006e66:	2b3f      	cmp	r3, #63	; 0x3f
 8006e68:	dd03      	ble.n	8006e72 <SSD1306_DrawRectangle+0x4e>
		h = SSD1306_HEIGHT - y;
 8006e6a:	88bb      	ldrh	r3, [r7, #4]
 8006e6c:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8006e70:	803b      	strh	r3, [r7, #0]
	}
	
	/* Draw 4 lines */
	SSD1306_DrawLine(x, y, x + w, y, c);         /* Top line */
 8006e72:	88fa      	ldrh	r2, [r7, #6]
 8006e74:	887b      	ldrh	r3, [r7, #2]
 8006e76:	4413      	add	r3, r2
 8006e78:	b29a      	uxth	r2, r3
 8006e7a:	88bc      	ldrh	r4, [r7, #4]
 8006e7c:	88b9      	ldrh	r1, [r7, #4]
 8006e7e:	88f8      	ldrh	r0, [r7, #6]
 8006e80:	7e3b      	ldrb	r3, [r7, #24]
 8006e82:	9300      	str	r3, [sp, #0]
 8006e84:	4623      	mov	r3, r4
 8006e86:	f7ff fed2 	bl	8006c2e <SSD1306_DrawLine>
	SSD1306_DrawLine(x, y + h, x + w, y + h, c); /* Bottom line */
 8006e8a:	88ba      	ldrh	r2, [r7, #4]
 8006e8c:	883b      	ldrh	r3, [r7, #0]
 8006e8e:	4413      	add	r3, r2
 8006e90:	b299      	uxth	r1, r3
 8006e92:	88fa      	ldrh	r2, [r7, #6]
 8006e94:	887b      	ldrh	r3, [r7, #2]
 8006e96:	4413      	add	r3, r2
 8006e98:	b29c      	uxth	r4, r3
 8006e9a:	88ba      	ldrh	r2, [r7, #4]
 8006e9c:	883b      	ldrh	r3, [r7, #0]
 8006e9e:	4413      	add	r3, r2
 8006ea0:	b29a      	uxth	r2, r3
 8006ea2:	88f8      	ldrh	r0, [r7, #6]
 8006ea4:	7e3b      	ldrb	r3, [r7, #24]
 8006ea6:	9300      	str	r3, [sp, #0]
 8006ea8:	4613      	mov	r3, r2
 8006eaa:	4622      	mov	r2, r4
 8006eac:	f7ff febf 	bl	8006c2e <SSD1306_DrawLine>
	SSD1306_DrawLine(x, y, x, y + h, c);         /* Left line */
 8006eb0:	88ba      	ldrh	r2, [r7, #4]
 8006eb2:	883b      	ldrh	r3, [r7, #0]
 8006eb4:	4413      	add	r3, r2
 8006eb6:	b29c      	uxth	r4, r3
 8006eb8:	88fa      	ldrh	r2, [r7, #6]
 8006eba:	88b9      	ldrh	r1, [r7, #4]
 8006ebc:	88f8      	ldrh	r0, [r7, #6]
 8006ebe:	7e3b      	ldrb	r3, [r7, #24]
 8006ec0:	9300      	str	r3, [sp, #0]
 8006ec2:	4623      	mov	r3, r4
 8006ec4:	f7ff feb3 	bl	8006c2e <SSD1306_DrawLine>
	SSD1306_DrawLine(x + w, y, x + w, y + h, c); /* Right line */
 8006ec8:	88fa      	ldrh	r2, [r7, #6]
 8006eca:	887b      	ldrh	r3, [r7, #2]
 8006ecc:	4413      	add	r3, r2
 8006ece:	b298      	uxth	r0, r3
 8006ed0:	88fa      	ldrh	r2, [r7, #6]
 8006ed2:	887b      	ldrh	r3, [r7, #2]
 8006ed4:	4413      	add	r3, r2
 8006ed6:	b29c      	uxth	r4, r3
 8006ed8:	88ba      	ldrh	r2, [r7, #4]
 8006eda:	883b      	ldrh	r3, [r7, #0]
 8006edc:	4413      	add	r3, r2
 8006ede:	b29a      	uxth	r2, r3
 8006ee0:	88b9      	ldrh	r1, [r7, #4]
 8006ee2:	7e3b      	ldrb	r3, [r7, #24]
 8006ee4:	9300      	str	r3, [sp, #0]
 8006ee6:	4613      	mov	r3, r2
 8006ee8:	4622      	mov	r2, r4
 8006eea:	f7ff fea0 	bl	8006c2e <SSD1306_DrawLine>
 8006eee:	e000      	b.n	8006ef2 <SSD1306_DrawRectangle+0xce>
		return;
 8006ef0:	bf00      	nop
}
 8006ef2:	370c      	adds	r7, #12
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	bd90      	pop	{r4, r7, pc}

08006ef8 <SSD1306_DrawFilledTriangle>:
	SSD1306_DrawLine(x2, y2, x3, y3, color);
	SSD1306_DrawLine(x3, y3, x1, y1, color);
}


void SSD1306_DrawFilledTriangle(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t x3, uint16_t y3, SSD1306_COLOR_t color) {
 8006ef8:	b590      	push	{r4, r7, lr}
 8006efa:	b08d      	sub	sp, #52	; 0x34
 8006efc:	af02      	add	r7, sp, #8
 8006efe:	4604      	mov	r4, r0
 8006f00:	4608      	mov	r0, r1
 8006f02:	4611      	mov	r1, r2
 8006f04:	461a      	mov	r2, r3
 8006f06:	4623      	mov	r3, r4
 8006f08:	80fb      	strh	r3, [r7, #6]
 8006f0a:	4603      	mov	r3, r0
 8006f0c:	80bb      	strh	r3, [r7, #4]
 8006f0e:	460b      	mov	r3, r1
 8006f10:	807b      	strh	r3, [r7, #2]
 8006f12:	4613      	mov	r3, r2
 8006f14:	803b      	strh	r3, [r7, #0]
	int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0, 
 8006f16:	2300      	movs	r3, #0
 8006f18:	823b      	strh	r3, [r7, #16]
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	81fb      	strh	r3, [r7, #14]
 8006f1e:	2300      	movs	r3, #0
 8006f20:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006f22:	2300      	movs	r3, #0
 8006f24:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006f26:	2300      	movs	r3, #0
 8006f28:	847b      	strh	r3, [r7, #34]	; 0x22
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	843b      	strh	r3, [r7, #32]
	yinc1 = 0, yinc2 = 0, den = 0, num = 0, numadd = 0, numpixels = 0, 
 8006f2e:	2300      	movs	r3, #0
 8006f30:	83fb      	strh	r3, [r7, #30]
 8006f32:	2300      	movs	r3, #0
 8006f34:	83bb      	strh	r3, [r7, #28]
 8006f36:	2300      	movs	r3, #0
 8006f38:	837b      	strh	r3, [r7, #26]
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	833b      	strh	r3, [r7, #24]
 8006f3e:	2300      	movs	r3, #0
 8006f40:	82fb      	strh	r3, [r7, #22]
 8006f42:	2300      	movs	r3, #0
 8006f44:	82bb      	strh	r3, [r7, #20]
	curpixel = 0;
 8006f46:	2300      	movs	r3, #0
 8006f48:	827b      	strh	r3, [r7, #18]
	
	deltax = ABS(x2 - x1);
 8006f4a:	887a      	ldrh	r2, [r7, #2]
 8006f4c:	88fb      	ldrh	r3, [r7, #6]
 8006f4e:	1ad3      	subs	r3, r2, r3
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	bfb8      	it	lt
 8006f54:	425b      	neglt	r3, r3
 8006f56:	823b      	strh	r3, [r7, #16]
	deltay = ABS(y2 - y1);
 8006f58:	883a      	ldrh	r2, [r7, #0]
 8006f5a:	88bb      	ldrh	r3, [r7, #4]
 8006f5c:	1ad3      	subs	r3, r2, r3
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	bfb8      	it	lt
 8006f62:	425b      	neglt	r3, r3
 8006f64:	81fb      	strh	r3, [r7, #14]
	x = x1;
 8006f66:	88fb      	ldrh	r3, [r7, #6]
 8006f68:	84fb      	strh	r3, [r7, #38]	; 0x26
	y = y1;
 8006f6a:	88bb      	ldrh	r3, [r7, #4]
 8006f6c:	84bb      	strh	r3, [r7, #36]	; 0x24

	if (x2 >= x1) {
 8006f6e:	887a      	ldrh	r2, [r7, #2]
 8006f70:	88fb      	ldrh	r3, [r7, #6]
 8006f72:	429a      	cmp	r2, r3
 8006f74:	d304      	bcc.n	8006f80 <SSD1306_DrawFilledTriangle+0x88>
		xinc1 = 1;
 8006f76:	2301      	movs	r3, #1
 8006f78:	847b      	strh	r3, [r7, #34]	; 0x22
		xinc2 = 1;
 8006f7a:	2301      	movs	r3, #1
 8006f7c:	843b      	strh	r3, [r7, #32]
 8006f7e:	e005      	b.n	8006f8c <SSD1306_DrawFilledTriangle+0x94>
	} else {
		xinc1 = -1;
 8006f80:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006f84:	847b      	strh	r3, [r7, #34]	; 0x22
		xinc2 = -1;
 8006f86:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006f8a:	843b      	strh	r3, [r7, #32]
	}

	if (y2 >= y1) {
 8006f8c:	883a      	ldrh	r2, [r7, #0]
 8006f8e:	88bb      	ldrh	r3, [r7, #4]
 8006f90:	429a      	cmp	r2, r3
 8006f92:	d304      	bcc.n	8006f9e <SSD1306_DrawFilledTriangle+0xa6>
		yinc1 = 1;
 8006f94:	2301      	movs	r3, #1
 8006f96:	83fb      	strh	r3, [r7, #30]
		yinc2 = 1;
 8006f98:	2301      	movs	r3, #1
 8006f9a:	83bb      	strh	r3, [r7, #28]
 8006f9c:	e005      	b.n	8006faa <SSD1306_DrawFilledTriangle+0xb2>
	} else {
		yinc1 = -1;
 8006f9e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006fa2:	83fb      	strh	r3, [r7, #30]
		yinc2 = -1;
 8006fa4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006fa8:	83bb      	strh	r3, [r7, #28]
	}

	if (deltax >= deltay){
 8006faa:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8006fae:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006fb2:	429a      	cmp	r2, r3
 8006fb4:	db10      	blt.n	8006fd8 <SSD1306_DrawFilledTriangle+0xe0>
		xinc1 = 0;
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	847b      	strh	r3, [r7, #34]	; 0x22
		yinc2 = 0;
 8006fba:	2300      	movs	r3, #0
 8006fbc:	83bb      	strh	r3, [r7, #28]
		den = deltax;
 8006fbe:	8a3b      	ldrh	r3, [r7, #16]
 8006fc0:	837b      	strh	r3, [r7, #26]
		num = deltax / 2;
 8006fc2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8006fc6:	0fda      	lsrs	r2, r3, #31
 8006fc8:	4413      	add	r3, r2
 8006fca:	105b      	asrs	r3, r3, #1
 8006fcc:	833b      	strh	r3, [r7, #24]
		numadd = deltay;
 8006fce:	89fb      	ldrh	r3, [r7, #14]
 8006fd0:	82fb      	strh	r3, [r7, #22]
		numpixels = deltax;
 8006fd2:	8a3b      	ldrh	r3, [r7, #16]
 8006fd4:	82bb      	strh	r3, [r7, #20]
 8006fd6:	e00f      	b.n	8006ff8 <SSD1306_DrawFilledTriangle+0x100>
	} else {
		xinc2 = 0;
 8006fd8:	2300      	movs	r3, #0
 8006fda:	843b      	strh	r3, [r7, #32]
		yinc1 = 0;
 8006fdc:	2300      	movs	r3, #0
 8006fde:	83fb      	strh	r3, [r7, #30]
		den = deltay;
 8006fe0:	89fb      	ldrh	r3, [r7, #14]
 8006fe2:	837b      	strh	r3, [r7, #26]
		num = deltay / 2;
 8006fe4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006fe8:	0fda      	lsrs	r2, r3, #31
 8006fea:	4413      	add	r3, r2
 8006fec:	105b      	asrs	r3, r3, #1
 8006fee:	833b      	strh	r3, [r7, #24]
		numadd = deltax;
 8006ff0:	8a3b      	ldrh	r3, [r7, #16]
 8006ff2:	82fb      	strh	r3, [r7, #22]
		numpixels = deltay;
 8006ff4:	89fb      	ldrh	r3, [r7, #14]
 8006ff6:	82bb      	strh	r3, [r7, #20]
	}

	for (curpixel = 0; curpixel <= numpixels; curpixel++) {
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	827b      	strh	r3, [r7, #18]
 8006ffc:	e033      	b.n	8007066 <SSD1306_DrawFilledTriangle+0x16e>
		SSD1306_DrawLine(x, y, x3, y3, color);
 8006ffe:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 8007000:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8007002:	8fbc      	ldrh	r4, [r7, #60]	; 0x3c
 8007004:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8007006:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800700a:	9300      	str	r3, [sp, #0]
 800700c:	4623      	mov	r3, r4
 800700e:	f7ff fe0e 	bl	8006c2e <SSD1306_DrawLine>

		num += numadd;
 8007012:	8b3a      	ldrh	r2, [r7, #24]
 8007014:	8afb      	ldrh	r3, [r7, #22]
 8007016:	4413      	add	r3, r2
 8007018:	b29b      	uxth	r3, r3
 800701a:	833b      	strh	r3, [r7, #24]
		if (num >= den) {
 800701c:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8007020:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8007024:	429a      	cmp	r2, r3
 8007026:	db0e      	blt.n	8007046 <SSD1306_DrawFilledTriangle+0x14e>
			num -= den;
 8007028:	8b3a      	ldrh	r2, [r7, #24]
 800702a:	8b7b      	ldrh	r3, [r7, #26]
 800702c:	1ad3      	subs	r3, r2, r3
 800702e:	b29b      	uxth	r3, r3
 8007030:	833b      	strh	r3, [r7, #24]
			x += xinc1;
 8007032:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8007034:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007036:	4413      	add	r3, r2
 8007038:	b29b      	uxth	r3, r3
 800703a:	84fb      	strh	r3, [r7, #38]	; 0x26
			y += yinc1;
 800703c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800703e:	8bfb      	ldrh	r3, [r7, #30]
 8007040:	4413      	add	r3, r2
 8007042:	b29b      	uxth	r3, r3
 8007044:	84bb      	strh	r3, [r7, #36]	; 0x24
		}
		x += xinc2;
 8007046:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8007048:	8c3b      	ldrh	r3, [r7, #32]
 800704a:	4413      	add	r3, r2
 800704c:	b29b      	uxth	r3, r3
 800704e:	84fb      	strh	r3, [r7, #38]	; 0x26
		y += yinc2;
 8007050:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007052:	8bbb      	ldrh	r3, [r7, #28]
 8007054:	4413      	add	r3, r2
 8007056:	b29b      	uxth	r3, r3
 8007058:	84bb      	strh	r3, [r7, #36]	; 0x24
	for (curpixel = 0; curpixel <= numpixels; curpixel++) {
 800705a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800705e:	b29b      	uxth	r3, r3
 8007060:	3301      	adds	r3, #1
 8007062:	b29b      	uxth	r3, r3
 8007064:	827b      	strh	r3, [r7, #18]
 8007066:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800706a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800706e:	429a      	cmp	r2, r3
 8007070:	ddc5      	ble.n	8006ffe <SSD1306_DrawFilledTriangle+0x106>
	}
}
 8007072:	bf00      	nop
 8007074:	bf00      	nop
 8007076:	372c      	adds	r7, #44	; 0x2c
 8007078:	46bd      	mov	sp, r7
 800707a:	bd90      	pop	{r4, r7, pc}

0800707c <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 800707c:	b580      	push	{r7, lr}
 800707e:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8007080:	2000      	movs	r0, #0
 8007082:	f7ff fca3 	bl	80069cc <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8007086:	f7ff fc73 	bl	8006970 <SSD1306_UpdateScreen>
}
 800708a:	bf00      	nop
 800708c:	bd80      	pop	{r7, pc}
	...

08007090 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8007090:	b480      	push	{r7}
 8007092:	b083      	sub	sp, #12
 8007094:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8007096:	4b07      	ldr	r3, [pc, #28]	; (80070b4 <ssd1306_I2C_Init+0x24>)
 8007098:	607b      	str	r3, [r7, #4]
	while(p>0)
 800709a:	e002      	b.n	80070a2 <ssd1306_I2C_Init+0x12>
		p--;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	3b01      	subs	r3, #1
 80070a0:	607b      	str	r3, [r7, #4]
	while(p>0)
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d1f9      	bne.n	800709c <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 80070a8:	bf00      	nop
 80070aa:	bf00      	nop
 80070ac:	370c      	adds	r7, #12
 80070ae:	46bd      	mov	sp, r7
 80070b0:	bc80      	pop	{r7}
 80070b2:	4770      	bx	lr
 80070b4:	0003d090 	.word	0x0003d090

080070b8 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 80070b8:	b590      	push	{r4, r7, lr}
 80070ba:	b0c7      	sub	sp, #284	; 0x11c
 80070bc:	af02      	add	r7, sp, #8
 80070be:	4604      	mov	r4, r0
 80070c0:	4608      	mov	r0, r1
 80070c2:	f507 7188 	add.w	r1, r7, #272	; 0x110
 80070c6:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 80070ca:	600a      	str	r2, [r1, #0]
 80070cc:	4619      	mov	r1, r3
 80070ce:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80070d2:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 80070d6:	4622      	mov	r2, r4
 80070d8:	701a      	strb	r2, [r3, #0]
 80070da:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80070de:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 80070e2:	4602      	mov	r2, r0
 80070e4:	701a      	strb	r2, [r3, #0]
 80070e6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80070ea:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80070ee:	460a      	mov	r2, r1
 80070f0:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 80070f2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80070f6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80070fa:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80070fe:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 8007102:	7812      	ldrb	r2, [r2, #0]
 8007104:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8007106:	2300      	movs	r3, #0
 8007108:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 800710c:	e015      	b.n	800713a <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 800710e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8007112:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8007116:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 800711a:	6812      	ldr	r2, [r2, #0]
 800711c:	441a      	add	r2, r3
 800711e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8007122:	3301      	adds	r3, #1
 8007124:	7811      	ldrb	r1, [r2, #0]
 8007126:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800712a:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 800712e:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8007130:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8007134:	3301      	adds	r3, #1
 8007136:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 800713a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800713e:	b29b      	uxth	r3, r3
 8007140:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8007144:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8007148:	8812      	ldrh	r2, [r2, #0]
 800714a:	429a      	cmp	r2, r3
 800714c:	d8df      	bhi.n	800710e <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 800714e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007152:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8007156:	781b      	ldrb	r3, [r3, #0]
 8007158:	b299      	uxth	r1, r3
 800715a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800715e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007162:	881b      	ldrh	r3, [r3, #0]
 8007164:	3301      	adds	r3, #1
 8007166:	b29b      	uxth	r3, r3
 8007168:	f107 020c 	add.w	r2, r7, #12
 800716c:	200a      	movs	r0, #10
 800716e:	9000      	str	r0, [sp, #0]
 8007170:	4803      	ldr	r0, [pc, #12]	; (8007180 <ssd1306_I2C_WriteMulti+0xc8>)
 8007172:	f7fc faf1 	bl	8003758 <HAL_I2C_Master_Transmit>
}
 8007176:	bf00      	nop
 8007178:	f507 778a 	add.w	r7, r7, #276	; 0x114
 800717c:	46bd      	mov	sp, r7
 800717e:	bd90      	pop	{r4, r7, pc}
 8007180:	200000e0 	.word	0x200000e0

08007184 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8007184:	b580      	push	{r7, lr}
 8007186:	b086      	sub	sp, #24
 8007188:	af02      	add	r7, sp, #8
 800718a:	4603      	mov	r3, r0
 800718c:	71fb      	strb	r3, [r7, #7]
 800718e:	460b      	mov	r3, r1
 8007190:	71bb      	strb	r3, [r7, #6]
 8007192:	4613      	mov	r3, r2
 8007194:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8007196:	79bb      	ldrb	r3, [r7, #6]
 8007198:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 800719a:	797b      	ldrb	r3, [r7, #5]
 800719c:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 800719e:	79fb      	ldrb	r3, [r7, #7]
 80071a0:	b299      	uxth	r1, r3
 80071a2:	f107 020c 	add.w	r2, r7, #12
 80071a6:	230a      	movs	r3, #10
 80071a8:	9300      	str	r3, [sp, #0]
 80071aa:	2302      	movs	r3, #2
 80071ac:	4803      	ldr	r0, [pc, #12]	; (80071bc <ssd1306_I2C_Write+0x38>)
 80071ae:	f7fc fad3 	bl	8003758 <HAL_I2C_Master_Transmit>
}
 80071b2:	bf00      	nop
 80071b4:	3710      	adds	r7, #16
 80071b6:	46bd      	mov	sp, r7
 80071b8:	bd80      	pop	{r7, pc}
 80071ba:	bf00      	nop
 80071bc:	200000e0 	.word	0x200000e0

080071c0 <ResetCommand>:
 * 
 * @param Rojo_BH1750: Structture that handles the sensor
 * @return Rojo_Status 
 */
static Rojo_Status ResetCommand(Rojo_BH1750 *Rojo_BH1750)
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b084      	sub	sp, #16
 80071c4:	af02      	add	r7, sp, #8
 80071c6:	6078      	str	r0, [r7, #4]
	Buffer = Reset;
 80071c8:	4b0b      	ldr	r3, [pc, #44]	; (80071f8 <ResetCommand+0x38>)
 80071ca:	2207      	movs	r2, #7
 80071cc:	701a      	strb	r2, [r3, #0]
	if(HAL_I2C_Master_Transmit(Rojo_BH1750 -> I2C, Rojo_BH1750 -> Address, &Buffer, 1, 100) != HAL_OK)
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	6818      	ldr	r0, [r3, #0]
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	791b      	ldrb	r3, [r3, #4]
 80071d6:	b299      	uxth	r1, r3
 80071d8:	2364      	movs	r3, #100	; 0x64
 80071da:	9300      	str	r3, [sp, #0]
 80071dc:	2301      	movs	r3, #1
 80071de:	4a06      	ldr	r2, [pc, #24]	; (80071f8 <ResetCommand+0x38>)
 80071e0:	f7fc faba 	bl	8003758 <HAL_I2C_Master_Transmit>
 80071e4:	4603      	mov	r3, r0
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d001      	beq.n	80071ee <ResetCommand+0x2e>
		return Rojo_Error;
 80071ea:	2308      	movs	r3, #8
 80071ec:	e000      	b.n	80071f0 <ResetCommand+0x30>
	else
		return Rojo_OK;
 80071ee:	2300      	movs	r3, #0
}
 80071f0:	4618      	mov	r0, r3
 80071f2:	3708      	adds	r7, #8
 80071f4:	46bd      	mov	sp, r7
 80071f6:	bd80      	pop	{r7, pc}
 80071f8:	2000065a 	.word	0x2000065a

080071fc <PowerOnCommand>:
 * 
 * @param Rojo_BH1750: Structture that handles the sensor
 * @return Rojo_Status 
 */
static Rojo_Status PowerOnCommand(Rojo_BH1750 *Rojo_BH1750)
{
 80071fc:	b580      	push	{r7, lr}
 80071fe:	b084      	sub	sp, #16
 8007200:	af02      	add	r7, sp, #8
 8007202:	6078      	str	r0, [r7, #4]
	Buffer = PowerOn;
 8007204:	4b0b      	ldr	r3, [pc, #44]	; (8007234 <PowerOnCommand+0x38>)
 8007206:	2201      	movs	r2, #1
 8007208:	701a      	strb	r2, [r3, #0]
	if(HAL_I2C_Master_Transmit(Rojo_BH1750 -> I2C, Rojo_BH1750 -> Address, &Buffer, 1, 100) != HAL_OK)
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	6818      	ldr	r0, [r3, #0]
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	791b      	ldrb	r3, [r3, #4]
 8007212:	b299      	uxth	r1, r3
 8007214:	2364      	movs	r3, #100	; 0x64
 8007216:	9300      	str	r3, [sp, #0]
 8007218:	2301      	movs	r3, #1
 800721a:	4a06      	ldr	r2, [pc, #24]	; (8007234 <PowerOnCommand+0x38>)
 800721c:	f7fc fa9c 	bl	8003758 <HAL_I2C_Master_Transmit>
 8007220:	4603      	mov	r3, r0
 8007222:	2b00      	cmp	r3, #0
 8007224:	d001      	beq.n	800722a <PowerOnCommand+0x2e>
		return Rojo_Error;
 8007226:	2308      	movs	r3, #8
 8007228:	e000      	b.n	800722c <PowerOnCommand+0x30>
	else
		return Rojo_OK;
 800722a:	2300      	movs	r3, #0
}
 800722c:	4618      	mov	r0, r3
 800722e:	3708      	adds	r7, #8
 8007230:	46bd      	mov	sp, r7
 8007232:	bd80      	pop	{r7, pc}
 8007234:	2000065a 	.word	0x2000065a

08007238 <PowerDownCommand>:
 * 
 * @param Rojo_BH1750: Structture that handles the sensor
 * @return Rojo_Status 
 */
static Rojo_Status PowerDownCommand(Rojo_BH1750 *Rojo_BH1750)
{
 8007238:	b580      	push	{r7, lr}
 800723a:	b084      	sub	sp, #16
 800723c:	af02      	add	r7, sp, #8
 800723e:	6078      	str	r0, [r7, #4]
	Buffer = PowerDown;
 8007240:	4b0b      	ldr	r3, [pc, #44]	; (8007270 <PowerDownCommand+0x38>)
 8007242:	2200      	movs	r2, #0
 8007244:	701a      	strb	r2, [r3, #0]
	if(HAL_I2C_Master_Transmit(Rojo_BH1750 -> I2C, Rojo_BH1750 -> Address, &Buffer, 1, 100) != HAL_OK)
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	6818      	ldr	r0, [r3, #0]
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	791b      	ldrb	r3, [r3, #4]
 800724e:	b299      	uxth	r1, r3
 8007250:	2364      	movs	r3, #100	; 0x64
 8007252:	9300      	str	r3, [sp, #0]
 8007254:	2301      	movs	r3, #1
 8007256:	4a06      	ldr	r2, [pc, #24]	; (8007270 <PowerDownCommand+0x38>)
 8007258:	f7fc fa7e 	bl	8003758 <HAL_I2C_Master_Transmit>
 800725c:	4603      	mov	r3, r0
 800725e:	2b00      	cmp	r3, #0
 8007260:	d001      	beq.n	8007266 <PowerDownCommand+0x2e>
		return Rojo_Error;
 8007262:	2308      	movs	r3, #8
 8007264:	e000      	b.n	8007268 <PowerDownCommand+0x30>
	else
		return Rojo_OK;
 8007266:	2300      	movs	r3, #0
}
 8007268:	4618      	mov	r0, r3
 800726a:	3708      	adds	r7, #8
 800726c:	46bd      	mov	sp, r7
 800726e:	bd80      	pop	{r7, pc}
 8007270:	2000065a 	.word	0x2000065a

08007274 <Measure_Subrutine>:
 * 
 * @param Rojo_BH1750: Structture that handles the sensor
 * @return uint16_t: Value of the meausure in 16 bit code (Not luxes)
 */
static uint16_t Measure_Subrutine(Rojo_BH1750 *Rojo_BH1750)
{
 8007274:	b580      	push	{r7, lr}
 8007276:	b086      	sub	sp, #24
 8007278:	af02      	add	r7, sp, #8
 800727a:	6078      	str	r0, [r7, #4]
	uint8_t Data[2];
	switch(Rojo_BH1750 -> Resolution)
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	795b      	ldrb	r3, [r3, #5]
 8007280:	2b02      	cmp	r3, #2
 8007282:	d00e      	beq.n	80072a2 <Measure_Subrutine+0x2e>
 8007284:	2b02      	cmp	r3, #2
 8007286:	dc10      	bgt.n	80072aa <Measure_Subrutine+0x36>
 8007288:	2b00      	cmp	r3, #0
 800728a:	d002      	beq.n	8007292 <Measure_Subrutine+0x1e>
 800728c:	2b01      	cmp	r3, #1
 800728e:	d004      	beq.n	800729a <Measure_Subrutine+0x26>
 8007290:	e00b      	b.n	80072aa <Measure_Subrutine+0x36>
	{
		case High_Res:
			Buffer = Continuously_H_ResolutionMode2;
 8007292:	4b22      	ldr	r3, [pc, #136]	; (800731c <Measure_Subrutine+0xa8>)
 8007294:	2211      	movs	r2, #17
 8007296:	701a      	strb	r2, [r3, #0]
		break;
 8007298:	e009      	b.n	80072ae <Measure_Subrutine+0x3a>
		case Medium_Res:
			Buffer = Continuously_H_ResolutionMode;
 800729a:	4b20      	ldr	r3, [pc, #128]	; (800731c <Measure_Subrutine+0xa8>)
 800729c:	2210      	movs	r2, #16
 800729e:	701a      	strb	r2, [r3, #0]
		break;
 80072a0:	e005      	b.n	80072ae <Measure_Subrutine+0x3a>
		case Low_Res:
			Buffer = Continuously_L_ResolutionMode;
 80072a2:	4b1e      	ldr	r3, [pc, #120]	; (800731c <Measure_Subrutine+0xa8>)
 80072a4:	2213      	movs	r2, #19
 80072a6:	701a      	strb	r2, [r3, #0]
		break;
 80072a8:	e001      	b.n	80072ae <Measure_Subrutine+0x3a>
		default:
			return 0;
 80072aa:	2300      	movs	r3, #0
 80072ac:	e031      	b.n	8007312 <Measure_Subrutine+0x9e>
		break;
	}
	Rojo_BH1750 -> Status = Busy;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	2201      	movs	r2, #1
 80072b2:	719a      	strb	r2, [r3, #6]
	if(HAL_I2C_Master_Transmit(Rojo_BH1750 -> I2C, Rojo_BH1750 -> Address, &Buffer, 1, 100) != HAL_OK)
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	6818      	ldr	r0, [r3, #0]
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	791b      	ldrb	r3, [r3, #4]
 80072bc:	b299      	uxth	r1, r3
 80072be:	2364      	movs	r3, #100	; 0x64
 80072c0:	9300      	str	r3, [sp, #0]
 80072c2:	2301      	movs	r3, #1
 80072c4:	4a15      	ldr	r2, [pc, #84]	; (800731c <Measure_Subrutine+0xa8>)
 80072c6:	f7fc fa47 	bl	8003758 <HAL_I2C_Master_Transmit>
 80072ca:	4603      	mov	r3, r0
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d001      	beq.n	80072d4 <Measure_Subrutine+0x60>
		return 0;
 80072d0:	2300      	movs	r3, #0
 80072d2:	e01e      	b.n	8007312 <Measure_Subrutine+0x9e>
	HAL_Delay(120);
 80072d4:	2078      	movs	r0, #120	; 0x78
 80072d6:	f7fb fd9f 	bl	8002e18 <HAL_Delay>
	if(HAL_I2C_Master_Receive(Rojo_BH1750 -> I2C, Rojo_BH1750 -> Address, Data, 2, 100) != HAL_OK)
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6818      	ldr	r0, [r3, #0]
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	791b      	ldrb	r3, [r3, #4]
 80072e2:	b299      	uxth	r1, r3
 80072e4:	f107 020c 	add.w	r2, r7, #12
 80072e8:	2364      	movs	r3, #100	; 0x64
 80072ea:	9300      	str	r3, [sp, #0]
 80072ec:	2302      	movs	r3, #2
 80072ee:	f7fc fb31 	bl	8003954 <HAL_I2C_Master_Receive>
 80072f2:	4603      	mov	r3, r0
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d001      	beq.n	80072fc <Measure_Subrutine+0x88>
		return 0;
 80072f8:	2300      	movs	r3, #0
 80072fa:	e00a      	b.n	8007312 <Measure_Subrutine+0x9e>
	Rojo_BH1750 -> Status = Standby;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2200      	movs	r2, #0
 8007300:	719a      	strb	r2, [r3, #6]
	return (uint16_t) (Data[0] << 8 | Data[1]);
 8007302:	7b3b      	ldrb	r3, [r7, #12]
 8007304:	021b      	lsls	r3, r3, #8
 8007306:	b21a      	sxth	r2, r3
 8007308:	7b7b      	ldrb	r3, [r7, #13]
 800730a:	b21b      	sxth	r3, r3
 800730c:	4313      	orrs	r3, r2
 800730e:	b21b      	sxth	r3, r3
 8007310:	b29b      	uxth	r3, r3
}
 8007312:	4618      	mov	r0, r3
 8007314:	3710      	adds	r7, #16
 8007316:	46bd      	mov	sp, r7
 8007318:	bd80      	pop	{r7, pc}
 800731a:	bf00      	nop
 800731c:	2000065a 	.word	0x2000065a

08007320 <BH1750_Init>:

/*END OF STATIC ZONE*/

Rojo_Status BH1750_Init(Rojo_BH1750 *Rojo_BH1750, I2C_HandleTypeDef *hi2c, uint8_t Address)
{
 8007320:	b580      	push	{r7, lr}
 8007322:	b084      	sub	sp, #16
 8007324:	af00      	add	r7, sp, #0
 8007326:	60f8      	str	r0, [r7, #12]
 8007328:	60b9      	str	r1, [r7, #8]
 800732a:	4613      	mov	r3, r2
 800732c:	71fb      	strb	r3, [r7, #7]

	Rojo_BH1750 -> I2C = hi2c;
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	68ba      	ldr	r2, [r7, #8]
 8007332:	601a      	str	r2, [r3, #0]
	Rojo_BH1750 -> Address = Address;
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	79fa      	ldrb	r2, [r7, #7]
 8007338:	711a      	strb	r2, [r3, #4]
	Rojo_BH1750 -> Resolution = Medium_Res;
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	2201      	movs	r2, #1
 800733e:	715a      	strb	r2, [r3, #5]
	Rojo_BH1750 -> Status = Standby;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	2200      	movs	r2, #0
 8007344:	719a      	strb	r2, [r3, #6]
	Rojo_BH1750 -> Value = 0;
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	2200      	movs	r2, #0
 800734a:	811a      	strh	r2, [r3, #8]
	if(PowerOnCommand(Rojo_BH1750) != Rojo_OK) //Waking the sensor logic
 800734c:	68f8      	ldr	r0, [r7, #12]
 800734e:	f7ff ff55 	bl	80071fc <PowerOnCommand>
 8007352:	4603      	mov	r3, r0
 8007354:	2b00      	cmp	r3, #0
 8007356:	d001      	beq.n	800735c <BH1750_Init+0x3c>
		return Rojo_Error;
 8007358:	2308      	movs	r3, #8
 800735a:	e00b      	b.n	8007374 <BH1750_Init+0x54>
	HAL_Delay(10);
 800735c:	200a      	movs	r0, #10
 800735e:	f7fb fd5b 	bl	8002e18 <HAL_Delay>
	if(ResetCommand(Rojo_BH1750) != Rojo_OK) //Clearing all the register of the sensor
 8007362:	68f8      	ldr	r0, [r7, #12]
 8007364:	f7ff ff2c 	bl	80071c0 <ResetCommand>
 8007368:	4603      	mov	r3, r0
 800736a:	2b00      	cmp	r3, #0
 800736c:	d001      	beq.n	8007372 <BH1750_Init+0x52>
		return Rojo_Error;
 800736e:	2308      	movs	r3, #8
 8007370:	e000      	b.n	8007374 <BH1750_Init+0x54>
	return Rojo_OK;
 8007372:	2300      	movs	r3, #0
}
 8007374:	4618      	mov	r0, r3
 8007376:	3710      	adds	r7, #16
 8007378:	46bd      	mov	sp, r7
 800737a:	bd80      	pop	{r7, pc}

0800737c <BH1750_Read>:

Rojo_Status BH1750_Read(Rojo_BH1750 *Rojo_BH1750, float *Measure)
{
 800737c:	b580      	push	{r7, lr}
 800737e:	b084      	sub	sp, #16
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
 8007384:	6039      	str	r1, [r7, #0]
	uint16_t RegisterValue;
	switch(Rojo_BH1750 -> Status)
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	799b      	ldrb	r3, [r3, #6]
 800738a:	2b02      	cmp	r3, #2
 800738c:	d012      	beq.n	80073b4 <BH1750_Read+0x38>
 800738e:	2b02      	cmp	r3, #2
 8007390:	dc21      	bgt.n	80073d6 <BH1750_Read+0x5a>
 8007392:	2b00      	cmp	r3, #0
 8007394:	d008      	beq.n	80073a8 <BH1750_Read+0x2c>
 8007396:	2b01      	cmp	r3, #1
 8007398:	d11d      	bne.n	80073d6 <BH1750_Read+0x5a>
	{
		case Busy:
			RegisterValue = Rojo_BH1750 -> Value;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	891b      	ldrh	r3, [r3, #8]
 800739e:	81fb      	strh	r3, [r7, #14]
			Rojo_BH1750 -> Status = Standby;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2200      	movs	r2, #0
 80073a4:	719a      	strb	r2, [r3, #6]
		break;
 80073a6:	e018      	b.n	80073da <BH1750_Read+0x5e>
		case Standby:
			RegisterValue = Measure_Subrutine(Rojo_BH1750);
 80073a8:	6878      	ldr	r0, [r7, #4]
 80073aa:	f7ff ff63 	bl	8007274 <Measure_Subrutine>
 80073ae:	4603      	mov	r3, r0
 80073b0:	81fb      	strh	r3, [r7, #14]
		break;
 80073b2:	e012      	b.n	80073da <BH1750_Read+0x5e>
		case Sleep:
			if(PowerDownCommand(Rojo_BH1750) != Rojo_OK)
 80073b4:	6878      	ldr	r0, [r7, #4]
 80073b6:	f7ff ff3f 	bl	8007238 <PowerDownCommand>
 80073ba:	4603      	mov	r3, r0
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d001      	beq.n	80073c4 <BH1750_Read+0x48>
				return Rojo_Error;
 80073c0:	2308      	movs	r3, #8
 80073c2:	e01d      	b.n	8007400 <BH1750_Read+0x84>
			HAL_Delay(10);
 80073c4:	200a      	movs	r0, #10
 80073c6:	f7fb fd27 	bl	8002e18 <HAL_Delay>
			RegisterValue = Measure_Subrutine(Rojo_BH1750);
 80073ca:	6878      	ldr	r0, [r7, #4]
 80073cc:	f7ff ff52 	bl	8007274 <Measure_Subrutine>
 80073d0:	4603      	mov	r3, r0
 80073d2:	81fb      	strh	r3, [r7, #14]
		break;
 80073d4:	e001      	b.n	80073da <BH1750_Read+0x5e>
		default:
			return Rojo_Error;
 80073d6:	2308      	movs	r3, #8
 80073d8:	e012      	b.n	8007400 <BH1750_Read+0x84>
		break;
	}
	*Measure = RegisterValue / 1.2;
 80073da:	89fb      	ldrh	r3, [r7, #14]
 80073dc:	4618      	mov	r0, r3
 80073de:	f7f9 f8bb 	bl	8000558 <__aeabi_i2d>
 80073e2:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 80073e6:	4b08      	ldr	r3, [pc, #32]	; (8007408 <BH1750_Read+0x8c>)
 80073e8:	f7f9 fa4a 	bl	8000880 <__aeabi_ddiv>
 80073ec:	4602      	mov	r2, r0
 80073ee:	460b      	mov	r3, r1
 80073f0:	4610      	mov	r0, r2
 80073f2:	4619      	mov	r1, r3
 80073f4:	f7f9 fb4c 	bl	8000a90 <__aeabi_d2f>
 80073f8:	4602      	mov	r2, r0
 80073fa:	683b      	ldr	r3, [r7, #0]
 80073fc:	601a      	str	r2, [r3, #0]
	return Rojo_OK;
 80073fe:	2300      	movs	r3, #0
}
 8007400:	4618      	mov	r0, r3
 8007402:	3710      	adds	r7, #16
 8007404:	46bd      	mov	sp, r7
 8007406:	bd80      	pop	{r7, pc}
 8007408:	3ff33333 	.word	0x3ff33333

0800740c <BH1750_ReCalibrate>:

Rojo_Status BH1750_ReCalibrate(Rojo_BH1750 *Rojo_BH1750)
{
 800740c:	b580      	push	{r7, lr}
 800740e:	b082      	sub	sp, #8
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
	switch(Rojo_BH1750 -> Status)
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	799b      	ldrb	r3, [r3, #6]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d002      	beq.n	8007422 <BH1750_ReCalibrate+0x16>
 800741c:	2b02      	cmp	r3, #2
 800741e:	d008      	beq.n	8007432 <BH1750_ReCalibrate+0x26>
 8007420:	e017      	b.n	8007452 <BH1750_ReCalibrate+0x46>
	{
		case Standby:
			if(ResetCommand(Rojo_BH1750) != Rojo_OK) //Just making the reset
 8007422:	6878      	ldr	r0, [r7, #4]
 8007424:	f7ff fecc 	bl	80071c0 <ResetCommand>
 8007428:	4603      	mov	r3, r0
 800742a:	2b00      	cmp	r3, #0
 800742c:	d013      	beq.n	8007456 <BH1750_ReCalibrate+0x4a>
				return Rojo_Error;
 800742e:	2308      	movs	r3, #8
 8007430:	e015      	b.n	800745e <BH1750_ReCalibrate+0x52>
		break;
		case Sleep:
			if(PowerOnCommand(Rojo_BH1750) != Rojo_OK) //Waking up the sensor logic
 8007432:	6878      	ldr	r0, [r7, #4]
 8007434:	f7ff fee2 	bl	80071fc <PowerOnCommand>
 8007438:	4603      	mov	r3, r0
 800743a:	2b00      	cmp	r3, #0
 800743c:	d001      	beq.n	8007442 <BH1750_ReCalibrate+0x36>
				return Rojo_Error;
 800743e:	2308      	movs	r3, #8
 8007440:	e00d      	b.n	800745e <BH1750_ReCalibrate+0x52>
			if(ResetCommand(Rojo_BH1750) != Rojo_OK) //Making the reset
 8007442:	6878      	ldr	r0, [r7, #4]
 8007444:	f7ff febc 	bl	80071c0 <ResetCommand>
 8007448:	4603      	mov	r3, r0
 800744a:	2b00      	cmp	r3, #0
 800744c:	d005      	beq.n	800745a <BH1750_ReCalibrate+0x4e>
				return Rojo_Error;
 800744e:	2308      	movs	r3, #8
 8007450:	e005      	b.n	800745e <BH1750_ReCalibrate+0x52>
		break;
		default:
			return Rojo_Error;
 8007452:	2308      	movs	r3, #8
 8007454:	e003      	b.n	800745e <BH1750_ReCalibrate+0x52>
		break;
 8007456:	bf00      	nop
 8007458:	e000      	b.n	800745c <BH1750_ReCalibrate+0x50>
		break;
 800745a:	bf00      	nop
		break;
	}
	return Rojo_OK;
 800745c:	2300      	movs	r3, #0
}
 800745e:	4618      	mov	r0, r3
 8007460:	3708      	adds	r7, #8
 8007462:	46bd      	mov	sp, r7
 8007464:	bd80      	pop	{r7, pc}
	...

08007468 <calloc>:
 8007468:	4b02      	ldr	r3, [pc, #8]	; (8007474 <calloc+0xc>)
 800746a:	460a      	mov	r2, r1
 800746c:	4601      	mov	r1, r0
 800746e:	6818      	ldr	r0, [r3, #0]
 8007470:	f000 b83c 	b.w	80074ec <_calloc_r>
 8007474:	20000060 	.word	0x20000060

08007478 <__errno>:
 8007478:	4b01      	ldr	r3, [pc, #4]	; (8007480 <__errno+0x8>)
 800747a:	6818      	ldr	r0, [r3, #0]
 800747c:	4770      	bx	lr
 800747e:	bf00      	nop
 8007480:	20000060 	.word	0x20000060

08007484 <__libc_init_array>:
 8007484:	b570      	push	{r4, r5, r6, lr}
 8007486:	2600      	movs	r6, #0
 8007488:	4d0c      	ldr	r5, [pc, #48]	; (80074bc <__libc_init_array+0x38>)
 800748a:	4c0d      	ldr	r4, [pc, #52]	; (80074c0 <__libc_init_array+0x3c>)
 800748c:	1b64      	subs	r4, r4, r5
 800748e:	10a4      	asrs	r4, r4, #2
 8007490:	42a6      	cmp	r6, r4
 8007492:	d109      	bne.n	80074a8 <__libc_init_array+0x24>
 8007494:	f000 fcb8 	bl	8007e08 <_init>
 8007498:	2600      	movs	r6, #0
 800749a:	4d0a      	ldr	r5, [pc, #40]	; (80074c4 <__libc_init_array+0x40>)
 800749c:	4c0a      	ldr	r4, [pc, #40]	; (80074c8 <__libc_init_array+0x44>)
 800749e:	1b64      	subs	r4, r4, r5
 80074a0:	10a4      	asrs	r4, r4, #2
 80074a2:	42a6      	cmp	r6, r4
 80074a4:	d105      	bne.n	80074b2 <__libc_init_array+0x2e>
 80074a6:	bd70      	pop	{r4, r5, r6, pc}
 80074a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80074ac:	4798      	blx	r3
 80074ae:	3601      	adds	r6, #1
 80074b0:	e7ee      	b.n	8007490 <__libc_init_array+0xc>
 80074b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80074b6:	4798      	blx	r3
 80074b8:	3601      	adds	r6, #1
 80074ba:	e7f2      	b.n	80074a2 <__libc_init_array+0x1e>
 80074bc:	0800a870 	.word	0x0800a870
 80074c0:	0800a870 	.word	0x0800a870
 80074c4:	0800a870 	.word	0x0800a870
 80074c8:	0800a874 	.word	0x0800a874

080074cc <free>:
 80074cc:	4b02      	ldr	r3, [pc, #8]	; (80074d8 <free+0xc>)
 80074ce:	4601      	mov	r1, r0
 80074d0:	6818      	ldr	r0, [r3, #0]
 80074d2:	f000 b81f 	b.w	8007514 <_free_r>
 80074d6:	bf00      	nop
 80074d8:	20000060 	.word	0x20000060

080074dc <memset>:
 80074dc:	4603      	mov	r3, r0
 80074de:	4402      	add	r2, r0
 80074e0:	4293      	cmp	r3, r2
 80074e2:	d100      	bne.n	80074e6 <memset+0xa>
 80074e4:	4770      	bx	lr
 80074e6:	f803 1b01 	strb.w	r1, [r3], #1
 80074ea:	e7f9      	b.n	80074e0 <memset+0x4>

080074ec <_calloc_r>:
 80074ec:	b570      	push	{r4, r5, r6, lr}
 80074ee:	fba1 5402 	umull	r5, r4, r1, r2
 80074f2:	b934      	cbnz	r4, 8007502 <_calloc_r+0x16>
 80074f4:	4629      	mov	r1, r5
 80074f6:	f000 f875 	bl	80075e4 <_malloc_r>
 80074fa:	4606      	mov	r6, r0
 80074fc:	b928      	cbnz	r0, 800750a <_calloc_r+0x1e>
 80074fe:	4630      	mov	r0, r6
 8007500:	bd70      	pop	{r4, r5, r6, pc}
 8007502:	220c      	movs	r2, #12
 8007504:	2600      	movs	r6, #0
 8007506:	6002      	str	r2, [r0, #0]
 8007508:	e7f9      	b.n	80074fe <_calloc_r+0x12>
 800750a:	462a      	mov	r2, r5
 800750c:	4621      	mov	r1, r4
 800750e:	f7ff ffe5 	bl	80074dc <memset>
 8007512:	e7f4      	b.n	80074fe <_calloc_r+0x12>

08007514 <_free_r>:
 8007514:	b538      	push	{r3, r4, r5, lr}
 8007516:	4605      	mov	r5, r0
 8007518:	2900      	cmp	r1, #0
 800751a:	d040      	beq.n	800759e <_free_r+0x8a>
 800751c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007520:	1f0c      	subs	r4, r1, #4
 8007522:	2b00      	cmp	r3, #0
 8007524:	bfb8      	it	lt
 8007526:	18e4      	addlt	r4, r4, r3
 8007528:	f000 f900 	bl	800772c <__malloc_lock>
 800752c:	4a1c      	ldr	r2, [pc, #112]	; (80075a0 <_free_r+0x8c>)
 800752e:	6813      	ldr	r3, [r2, #0]
 8007530:	b933      	cbnz	r3, 8007540 <_free_r+0x2c>
 8007532:	6063      	str	r3, [r4, #4]
 8007534:	6014      	str	r4, [r2, #0]
 8007536:	4628      	mov	r0, r5
 8007538:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800753c:	f000 b8fc 	b.w	8007738 <__malloc_unlock>
 8007540:	42a3      	cmp	r3, r4
 8007542:	d908      	bls.n	8007556 <_free_r+0x42>
 8007544:	6820      	ldr	r0, [r4, #0]
 8007546:	1821      	adds	r1, r4, r0
 8007548:	428b      	cmp	r3, r1
 800754a:	bf01      	itttt	eq
 800754c:	6819      	ldreq	r1, [r3, #0]
 800754e:	685b      	ldreq	r3, [r3, #4]
 8007550:	1809      	addeq	r1, r1, r0
 8007552:	6021      	streq	r1, [r4, #0]
 8007554:	e7ed      	b.n	8007532 <_free_r+0x1e>
 8007556:	461a      	mov	r2, r3
 8007558:	685b      	ldr	r3, [r3, #4]
 800755a:	b10b      	cbz	r3, 8007560 <_free_r+0x4c>
 800755c:	42a3      	cmp	r3, r4
 800755e:	d9fa      	bls.n	8007556 <_free_r+0x42>
 8007560:	6811      	ldr	r1, [r2, #0]
 8007562:	1850      	adds	r0, r2, r1
 8007564:	42a0      	cmp	r0, r4
 8007566:	d10b      	bne.n	8007580 <_free_r+0x6c>
 8007568:	6820      	ldr	r0, [r4, #0]
 800756a:	4401      	add	r1, r0
 800756c:	1850      	adds	r0, r2, r1
 800756e:	4283      	cmp	r3, r0
 8007570:	6011      	str	r1, [r2, #0]
 8007572:	d1e0      	bne.n	8007536 <_free_r+0x22>
 8007574:	6818      	ldr	r0, [r3, #0]
 8007576:	685b      	ldr	r3, [r3, #4]
 8007578:	4401      	add	r1, r0
 800757a:	6011      	str	r1, [r2, #0]
 800757c:	6053      	str	r3, [r2, #4]
 800757e:	e7da      	b.n	8007536 <_free_r+0x22>
 8007580:	d902      	bls.n	8007588 <_free_r+0x74>
 8007582:	230c      	movs	r3, #12
 8007584:	602b      	str	r3, [r5, #0]
 8007586:	e7d6      	b.n	8007536 <_free_r+0x22>
 8007588:	6820      	ldr	r0, [r4, #0]
 800758a:	1821      	adds	r1, r4, r0
 800758c:	428b      	cmp	r3, r1
 800758e:	bf01      	itttt	eq
 8007590:	6819      	ldreq	r1, [r3, #0]
 8007592:	685b      	ldreq	r3, [r3, #4]
 8007594:	1809      	addeq	r1, r1, r0
 8007596:	6021      	streq	r1, [r4, #0]
 8007598:	6063      	str	r3, [r4, #4]
 800759a:	6054      	str	r4, [r2, #4]
 800759c:	e7cb      	b.n	8007536 <_free_r+0x22>
 800759e:	bd38      	pop	{r3, r4, r5, pc}
 80075a0:	2000065c 	.word	0x2000065c

080075a4 <sbrk_aligned>:
 80075a4:	b570      	push	{r4, r5, r6, lr}
 80075a6:	4e0e      	ldr	r6, [pc, #56]	; (80075e0 <sbrk_aligned+0x3c>)
 80075a8:	460c      	mov	r4, r1
 80075aa:	6831      	ldr	r1, [r6, #0]
 80075ac:	4605      	mov	r5, r0
 80075ae:	b911      	cbnz	r1, 80075b6 <sbrk_aligned+0x12>
 80075b0:	f000 f88c 	bl	80076cc <_sbrk_r>
 80075b4:	6030      	str	r0, [r6, #0]
 80075b6:	4621      	mov	r1, r4
 80075b8:	4628      	mov	r0, r5
 80075ba:	f000 f887 	bl	80076cc <_sbrk_r>
 80075be:	1c43      	adds	r3, r0, #1
 80075c0:	d00a      	beq.n	80075d8 <sbrk_aligned+0x34>
 80075c2:	1cc4      	adds	r4, r0, #3
 80075c4:	f024 0403 	bic.w	r4, r4, #3
 80075c8:	42a0      	cmp	r0, r4
 80075ca:	d007      	beq.n	80075dc <sbrk_aligned+0x38>
 80075cc:	1a21      	subs	r1, r4, r0
 80075ce:	4628      	mov	r0, r5
 80075d0:	f000 f87c 	bl	80076cc <_sbrk_r>
 80075d4:	3001      	adds	r0, #1
 80075d6:	d101      	bne.n	80075dc <sbrk_aligned+0x38>
 80075d8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80075dc:	4620      	mov	r0, r4
 80075de:	bd70      	pop	{r4, r5, r6, pc}
 80075e0:	20000660 	.word	0x20000660

080075e4 <_malloc_r>:
 80075e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075e8:	1ccd      	adds	r5, r1, #3
 80075ea:	f025 0503 	bic.w	r5, r5, #3
 80075ee:	3508      	adds	r5, #8
 80075f0:	2d0c      	cmp	r5, #12
 80075f2:	bf38      	it	cc
 80075f4:	250c      	movcc	r5, #12
 80075f6:	2d00      	cmp	r5, #0
 80075f8:	4607      	mov	r7, r0
 80075fa:	db01      	blt.n	8007600 <_malloc_r+0x1c>
 80075fc:	42a9      	cmp	r1, r5
 80075fe:	d905      	bls.n	800760c <_malloc_r+0x28>
 8007600:	230c      	movs	r3, #12
 8007602:	2600      	movs	r6, #0
 8007604:	603b      	str	r3, [r7, #0]
 8007606:	4630      	mov	r0, r6
 8007608:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800760c:	4e2e      	ldr	r6, [pc, #184]	; (80076c8 <_malloc_r+0xe4>)
 800760e:	f000 f88d 	bl	800772c <__malloc_lock>
 8007612:	6833      	ldr	r3, [r6, #0]
 8007614:	461c      	mov	r4, r3
 8007616:	bb34      	cbnz	r4, 8007666 <_malloc_r+0x82>
 8007618:	4629      	mov	r1, r5
 800761a:	4638      	mov	r0, r7
 800761c:	f7ff ffc2 	bl	80075a4 <sbrk_aligned>
 8007620:	1c43      	adds	r3, r0, #1
 8007622:	4604      	mov	r4, r0
 8007624:	d14d      	bne.n	80076c2 <_malloc_r+0xde>
 8007626:	6834      	ldr	r4, [r6, #0]
 8007628:	4626      	mov	r6, r4
 800762a:	2e00      	cmp	r6, #0
 800762c:	d140      	bne.n	80076b0 <_malloc_r+0xcc>
 800762e:	6823      	ldr	r3, [r4, #0]
 8007630:	4631      	mov	r1, r6
 8007632:	4638      	mov	r0, r7
 8007634:	eb04 0803 	add.w	r8, r4, r3
 8007638:	f000 f848 	bl	80076cc <_sbrk_r>
 800763c:	4580      	cmp	r8, r0
 800763e:	d13a      	bne.n	80076b6 <_malloc_r+0xd2>
 8007640:	6821      	ldr	r1, [r4, #0]
 8007642:	3503      	adds	r5, #3
 8007644:	1a6d      	subs	r5, r5, r1
 8007646:	f025 0503 	bic.w	r5, r5, #3
 800764a:	3508      	adds	r5, #8
 800764c:	2d0c      	cmp	r5, #12
 800764e:	bf38      	it	cc
 8007650:	250c      	movcc	r5, #12
 8007652:	4638      	mov	r0, r7
 8007654:	4629      	mov	r1, r5
 8007656:	f7ff ffa5 	bl	80075a4 <sbrk_aligned>
 800765a:	3001      	adds	r0, #1
 800765c:	d02b      	beq.n	80076b6 <_malloc_r+0xd2>
 800765e:	6823      	ldr	r3, [r4, #0]
 8007660:	442b      	add	r3, r5
 8007662:	6023      	str	r3, [r4, #0]
 8007664:	e00e      	b.n	8007684 <_malloc_r+0xa0>
 8007666:	6822      	ldr	r2, [r4, #0]
 8007668:	1b52      	subs	r2, r2, r5
 800766a:	d41e      	bmi.n	80076aa <_malloc_r+0xc6>
 800766c:	2a0b      	cmp	r2, #11
 800766e:	d916      	bls.n	800769e <_malloc_r+0xba>
 8007670:	1961      	adds	r1, r4, r5
 8007672:	42a3      	cmp	r3, r4
 8007674:	6025      	str	r5, [r4, #0]
 8007676:	bf18      	it	ne
 8007678:	6059      	strne	r1, [r3, #4]
 800767a:	6863      	ldr	r3, [r4, #4]
 800767c:	bf08      	it	eq
 800767e:	6031      	streq	r1, [r6, #0]
 8007680:	5162      	str	r2, [r4, r5]
 8007682:	604b      	str	r3, [r1, #4]
 8007684:	4638      	mov	r0, r7
 8007686:	f104 060b 	add.w	r6, r4, #11
 800768a:	f000 f855 	bl	8007738 <__malloc_unlock>
 800768e:	f026 0607 	bic.w	r6, r6, #7
 8007692:	1d23      	adds	r3, r4, #4
 8007694:	1af2      	subs	r2, r6, r3
 8007696:	d0b6      	beq.n	8007606 <_malloc_r+0x22>
 8007698:	1b9b      	subs	r3, r3, r6
 800769a:	50a3      	str	r3, [r4, r2]
 800769c:	e7b3      	b.n	8007606 <_malloc_r+0x22>
 800769e:	6862      	ldr	r2, [r4, #4]
 80076a0:	42a3      	cmp	r3, r4
 80076a2:	bf0c      	ite	eq
 80076a4:	6032      	streq	r2, [r6, #0]
 80076a6:	605a      	strne	r2, [r3, #4]
 80076a8:	e7ec      	b.n	8007684 <_malloc_r+0xa0>
 80076aa:	4623      	mov	r3, r4
 80076ac:	6864      	ldr	r4, [r4, #4]
 80076ae:	e7b2      	b.n	8007616 <_malloc_r+0x32>
 80076b0:	4634      	mov	r4, r6
 80076b2:	6876      	ldr	r6, [r6, #4]
 80076b4:	e7b9      	b.n	800762a <_malloc_r+0x46>
 80076b6:	230c      	movs	r3, #12
 80076b8:	4638      	mov	r0, r7
 80076ba:	603b      	str	r3, [r7, #0]
 80076bc:	f000 f83c 	bl	8007738 <__malloc_unlock>
 80076c0:	e7a1      	b.n	8007606 <_malloc_r+0x22>
 80076c2:	6025      	str	r5, [r4, #0]
 80076c4:	e7de      	b.n	8007684 <_malloc_r+0xa0>
 80076c6:	bf00      	nop
 80076c8:	2000065c 	.word	0x2000065c

080076cc <_sbrk_r>:
 80076cc:	b538      	push	{r3, r4, r5, lr}
 80076ce:	2300      	movs	r3, #0
 80076d0:	4d05      	ldr	r5, [pc, #20]	; (80076e8 <_sbrk_r+0x1c>)
 80076d2:	4604      	mov	r4, r0
 80076d4:	4608      	mov	r0, r1
 80076d6:	602b      	str	r3, [r5, #0]
 80076d8:	f7fb fada 	bl	8002c90 <_sbrk>
 80076dc:	1c43      	adds	r3, r0, #1
 80076de:	d102      	bne.n	80076e6 <_sbrk_r+0x1a>
 80076e0:	682b      	ldr	r3, [r5, #0]
 80076e2:	b103      	cbz	r3, 80076e6 <_sbrk_r+0x1a>
 80076e4:	6023      	str	r3, [r4, #0]
 80076e6:	bd38      	pop	{r3, r4, r5, pc}
 80076e8:	20000664 	.word	0x20000664

080076ec <siprintf>:
 80076ec:	b40e      	push	{r1, r2, r3}
 80076ee:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80076f2:	b500      	push	{lr}
 80076f4:	b09c      	sub	sp, #112	; 0x70
 80076f6:	ab1d      	add	r3, sp, #116	; 0x74
 80076f8:	9002      	str	r0, [sp, #8]
 80076fa:	9006      	str	r0, [sp, #24]
 80076fc:	9107      	str	r1, [sp, #28]
 80076fe:	9104      	str	r1, [sp, #16]
 8007700:	4808      	ldr	r0, [pc, #32]	; (8007724 <siprintf+0x38>)
 8007702:	4909      	ldr	r1, [pc, #36]	; (8007728 <siprintf+0x3c>)
 8007704:	f853 2b04 	ldr.w	r2, [r3], #4
 8007708:	9105      	str	r1, [sp, #20]
 800770a:	6800      	ldr	r0, [r0, #0]
 800770c:	a902      	add	r1, sp, #8
 800770e:	9301      	str	r3, [sp, #4]
 8007710:	f000 f874 	bl	80077fc <_svfiprintf_r>
 8007714:	2200      	movs	r2, #0
 8007716:	9b02      	ldr	r3, [sp, #8]
 8007718:	701a      	strb	r2, [r3, #0]
 800771a:	b01c      	add	sp, #112	; 0x70
 800771c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007720:	b003      	add	sp, #12
 8007722:	4770      	bx	lr
 8007724:	20000060 	.word	0x20000060
 8007728:	ffff0208 	.word	0xffff0208

0800772c <__malloc_lock>:
 800772c:	4801      	ldr	r0, [pc, #4]	; (8007734 <__malloc_lock+0x8>)
 800772e:	f000 bafb 	b.w	8007d28 <__retarget_lock_acquire_recursive>
 8007732:	bf00      	nop
 8007734:	20000668 	.word	0x20000668

08007738 <__malloc_unlock>:
 8007738:	4801      	ldr	r0, [pc, #4]	; (8007740 <__malloc_unlock+0x8>)
 800773a:	f000 baf6 	b.w	8007d2a <__retarget_lock_release_recursive>
 800773e:	bf00      	nop
 8007740:	20000668 	.word	0x20000668

08007744 <__ssputs_r>:
 8007744:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007748:	688e      	ldr	r6, [r1, #8]
 800774a:	4682      	mov	sl, r0
 800774c:	429e      	cmp	r6, r3
 800774e:	460c      	mov	r4, r1
 8007750:	4690      	mov	r8, r2
 8007752:	461f      	mov	r7, r3
 8007754:	d838      	bhi.n	80077c8 <__ssputs_r+0x84>
 8007756:	898a      	ldrh	r2, [r1, #12]
 8007758:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800775c:	d032      	beq.n	80077c4 <__ssputs_r+0x80>
 800775e:	6825      	ldr	r5, [r4, #0]
 8007760:	6909      	ldr	r1, [r1, #16]
 8007762:	3301      	adds	r3, #1
 8007764:	eba5 0901 	sub.w	r9, r5, r1
 8007768:	6965      	ldr	r5, [r4, #20]
 800776a:	444b      	add	r3, r9
 800776c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007770:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007774:	106d      	asrs	r5, r5, #1
 8007776:	429d      	cmp	r5, r3
 8007778:	bf38      	it	cc
 800777a:	461d      	movcc	r5, r3
 800777c:	0553      	lsls	r3, r2, #21
 800777e:	d531      	bpl.n	80077e4 <__ssputs_r+0xa0>
 8007780:	4629      	mov	r1, r5
 8007782:	f7ff ff2f 	bl	80075e4 <_malloc_r>
 8007786:	4606      	mov	r6, r0
 8007788:	b950      	cbnz	r0, 80077a0 <__ssputs_r+0x5c>
 800778a:	230c      	movs	r3, #12
 800778c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007790:	f8ca 3000 	str.w	r3, [sl]
 8007794:	89a3      	ldrh	r3, [r4, #12]
 8007796:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800779a:	81a3      	strh	r3, [r4, #12]
 800779c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077a0:	464a      	mov	r2, r9
 80077a2:	6921      	ldr	r1, [r4, #16]
 80077a4:	f000 fad0 	bl	8007d48 <memcpy>
 80077a8:	89a3      	ldrh	r3, [r4, #12]
 80077aa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80077ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077b2:	81a3      	strh	r3, [r4, #12]
 80077b4:	6126      	str	r6, [r4, #16]
 80077b6:	444e      	add	r6, r9
 80077b8:	6026      	str	r6, [r4, #0]
 80077ba:	463e      	mov	r6, r7
 80077bc:	6165      	str	r5, [r4, #20]
 80077be:	eba5 0509 	sub.w	r5, r5, r9
 80077c2:	60a5      	str	r5, [r4, #8]
 80077c4:	42be      	cmp	r6, r7
 80077c6:	d900      	bls.n	80077ca <__ssputs_r+0x86>
 80077c8:	463e      	mov	r6, r7
 80077ca:	4632      	mov	r2, r6
 80077cc:	4641      	mov	r1, r8
 80077ce:	6820      	ldr	r0, [r4, #0]
 80077d0:	f000 fac8 	bl	8007d64 <memmove>
 80077d4:	68a3      	ldr	r3, [r4, #8]
 80077d6:	2000      	movs	r0, #0
 80077d8:	1b9b      	subs	r3, r3, r6
 80077da:	60a3      	str	r3, [r4, #8]
 80077dc:	6823      	ldr	r3, [r4, #0]
 80077de:	4433      	add	r3, r6
 80077e0:	6023      	str	r3, [r4, #0]
 80077e2:	e7db      	b.n	800779c <__ssputs_r+0x58>
 80077e4:	462a      	mov	r2, r5
 80077e6:	f000 fad7 	bl	8007d98 <_realloc_r>
 80077ea:	4606      	mov	r6, r0
 80077ec:	2800      	cmp	r0, #0
 80077ee:	d1e1      	bne.n	80077b4 <__ssputs_r+0x70>
 80077f0:	4650      	mov	r0, sl
 80077f2:	6921      	ldr	r1, [r4, #16]
 80077f4:	f7ff fe8e 	bl	8007514 <_free_r>
 80077f8:	e7c7      	b.n	800778a <__ssputs_r+0x46>
	...

080077fc <_svfiprintf_r>:
 80077fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007800:	4698      	mov	r8, r3
 8007802:	898b      	ldrh	r3, [r1, #12]
 8007804:	4607      	mov	r7, r0
 8007806:	061b      	lsls	r3, r3, #24
 8007808:	460d      	mov	r5, r1
 800780a:	4614      	mov	r4, r2
 800780c:	b09d      	sub	sp, #116	; 0x74
 800780e:	d50e      	bpl.n	800782e <_svfiprintf_r+0x32>
 8007810:	690b      	ldr	r3, [r1, #16]
 8007812:	b963      	cbnz	r3, 800782e <_svfiprintf_r+0x32>
 8007814:	2140      	movs	r1, #64	; 0x40
 8007816:	f7ff fee5 	bl	80075e4 <_malloc_r>
 800781a:	6028      	str	r0, [r5, #0]
 800781c:	6128      	str	r0, [r5, #16]
 800781e:	b920      	cbnz	r0, 800782a <_svfiprintf_r+0x2e>
 8007820:	230c      	movs	r3, #12
 8007822:	603b      	str	r3, [r7, #0]
 8007824:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007828:	e0d1      	b.n	80079ce <_svfiprintf_r+0x1d2>
 800782a:	2340      	movs	r3, #64	; 0x40
 800782c:	616b      	str	r3, [r5, #20]
 800782e:	2300      	movs	r3, #0
 8007830:	9309      	str	r3, [sp, #36]	; 0x24
 8007832:	2320      	movs	r3, #32
 8007834:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007838:	2330      	movs	r3, #48	; 0x30
 800783a:	f04f 0901 	mov.w	r9, #1
 800783e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007842:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80079e8 <_svfiprintf_r+0x1ec>
 8007846:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800784a:	4623      	mov	r3, r4
 800784c:	469a      	mov	sl, r3
 800784e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007852:	b10a      	cbz	r2, 8007858 <_svfiprintf_r+0x5c>
 8007854:	2a25      	cmp	r2, #37	; 0x25
 8007856:	d1f9      	bne.n	800784c <_svfiprintf_r+0x50>
 8007858:	ebba 0b04 	subs.w	fp, sl, r4
 800785c:	d00b      	beq.n	8007876 <_svfiprintf_r+0x7a>
 800785e:	465b      	mov	r3, fp
 8007860:	4622      	mov	r2, r4
 8007862:	4629      	mov	r1, r5
 8007864:	4638      	mov	r0, r7
 8007866:	f7ff ff6d 	bl	8007744 <__ssputs_r>
 800786a:	3001      	adds	r0, #1
 800786c:	f000 80aa 	beq.w	80079c4 <_svfiprintf_r+0x1c8>
 8007870:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007872:	445a      	add	r2, fp
 8007874:	9209      	str	r2, [sp, #36]	; 0x24
 8007876:	f89a 3000 	ldrb.w	r3, [sl]
 800787a:	2b00      	cmp	r3, #0
 800787c:	f000 80a2 	beq.w	80079c4 <_svfiprintf_r+0x1c8>
 8007880:	2300      	movs	r3, #0
 8007882:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007886:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800788a:	f10a 0a01 	add.w	sl, sl, #1
 800788e:	9304      	str	r3, [sp, #16]
 8007890:	9307      	str	r3, [sp, #28]
 8007892:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007896:	931a      	str	r3, [sp, #104]	; 0x68
 8007898:	4654      	mov	r4, sl
 800789a:	2205      	movs	r2, #5
 800789c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80078a0:	4851      	ldr	r0, [pc, #324]	; (80079e8 <_svfiprintf_r+0x1ec>)
 80078a2:	f000 fa43 	bl	8007d2c <memchr>
 80078a6:	9a04      	ldr	r2, [sp, #16]
 80078a8:	b9d8      	cbnz	r0, 80078e2 <_svfiprintf_r+0xe6>
 80078aa:	06d0      	lsls	r0, r2, #27
 80078ac:	bf44      	itt	mi
 80078ae:	2320      	movmi	r3, #32
 80078b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80078b4:	0711      	lsls	r1, r2, #28
 80078b6:	bf44      	itt	mi
 80078b8:	232b      	movmi	r3, #43	; 0x2b
 80078ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80078be:	f89a 3000 	ldrb.w	r3, [sl]
 80078c2:	2b2a      	cmp	r3, #42	; 0x2a
 80078c4:	d015      	beq.n	80078f2 <_svfiprintf_r+0xf6>
 80078c6:	4654      	mov	r4, sl
 80078c8:	2000      	movs	r0, #0
 80078ca:	f04f 0c0a 	mov.w	ip, #10
 80078ce:	9a07      	ldr	r2, [sp, #28]
 80078d0:	4621      	mov	r1, r4
 80078d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80078d6:	3b30      	subs	r3, #48	; 0x30
 80078d8:	2b09      	cmp	r3, #9
 80078da:	d94e      	bls.n	800797a <_svfiprintf_r+0x17e>
 80078dc:	b1b0      	cbz	r0, 800790c <_svfiprintf_r+0x110>
 80078de:	9207      	str	r2, [sp, #28]
 80078e0:	e014      	b.n	800790c <_svfiprintf_r+0x110>
 80078e2:	eba0 0308 	sub.w	r3, r0, r8
 80078e6:	fa09 f303 	lsl.w	r3, r9, r3
 80078ea:	4313      	orrs	r3, r2
 80078ec:	46a2      	mov	sl, r4
 80078ee:	9304      	str	r3, [sp, #16]
 80078f0:	e7d2      	b.n	8007898 <_svfiprintf_r+0x9c>
 80078f2:	9b03      	ldr	r3, [sp, #12]
 80078f4:	1d19      	adds	r1, r3, #4
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	9103      	str	r1, [sp, #12]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	bfbb      	ittet	lt
 80078fe:	425b      	neglt	r3, r3
 8007900:	f042 0202 	orrlt.w	r2, r2, #2
 8007904:	9307      	strge	r3, [sp, #28]
 8007906:	9307      	strlt	r3, [sp, #28]
 8007908:	bfb8      	it	lt
 800790a:	9204      	strlt	r2, [sp, #16]
 800790c:	7823      	ldrb	r3, [r4, #0]
 800790e:	2b2e      	cmp	r3, #46	; 0x2e
 8007910:	d10c      	bne.n	800792c <_svfiprintf_r+0x130>
 8007912:	7863      	ldrb	r3, [r4, #1]
 8007914:	2b2a      	cmp	r3, #42	; 0x2a
 8007916:	d135      	bne.n	8007984 <_svfiprintf_r+0x188>
 8007918:	9b03      	ldr	r3, [sp, #12]
 800791a:	3402      	adds	r4, #2
 800791c:	1d1a      	adds	r2, r3, #4
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	9203      	str	r2, [sp, #12]
 8007922:	2b00      	cmp	r3, #0
 8007924:	bfb8      	it	lt
 8007926:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800792a:	9305      	str	r3, [sp, #20]
 800792c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80079ec <_svfiprintf_r+0x1f0>
 8007930:	2203      	movs	r2, #3
 8007932:	4650      	mov	r0, sl
 8007934:	7821      	ldrb	r1, [r4, #0]
 8007936:	f000 f9f9 	bl	8007d2c <memchr>
 800793a:	b140      	cbz	r0, 800794e <_svfiprintf_r+0x152>
 800793c:	2340      	movs	r3, #64	; 0x40
 800793e:	eba0 000a 	sub.w	r0, r0, sl
 8007942:	fa03 f000 	lsl.w	r0, r3, r0
 8007946:	9b04      	ldr	r3, [sp, #16]
 8007948:	3401      	adds	r4, #1
 800794a:	4303      	orrs	r3, r0
 800794c:	9304      	str	r3, [sp, #16]
 800794e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007952:	2206      	movs	r2, #6
 8007954:	4826      	ldr	r0, [pc, #152]	; (80079f0 <_svfiprintf_r+0x1f4>)
 8007956:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800795a:	f000 f9e7 	bl	8007d2c <memchr>
 800795e:	2800      	cmp	r0, #0
 8007960:	d038      	beq.n	80079d4 <_svfiprintf_r+0x1d8>
 8007962:	4b24      	ldr	r3, [pc, #144]	; (80079f4 <_svfiprintf_r+0x1f8>)
 8007964:	bb1b      	cbnz	r3, 80079ae <_svfiprintf_r+0x1b2>
 8007966:	9b03      	ldr	r3, [sp, #12]
 8007968:	3307      	adds	r3, #7
 800796a:	f023 0307 	bic.w	r3, r3, #7
 800796e:	3308      	adds	r3, #8
 8007970:	9303      	str	r3, [sp, #12]
 8007972:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007974:	4433      	add	r3, r6
 8007976:	9309      	str	r3, [sp, #36]	; 0x24
 8007978:	e767      	b.n	800784a <_svfiprintf_r+0x4e>
 800797a:	460c      	mov	r4, r1
 800797c:	2001      	movs	r0, #1
 800797e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007982:	e7a5      	b.n	80078d0 <_svfiprintf_r+0xd4>
 8007984:	2300      	movs	r3, #0
 8007986:	f04f 0c0a 	mov.w	ip, #10
 800798a:	4619      	mov	r1, r3
 800798c:	3401      	adds	r4, #1
 800798e:	9305      	str	r3, [sp, #20]
 8007990:	4620      	mov	r0, r4
 8007992:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007996:	3a30      	subs	r2, #48	; 0x30
 8007998:	2a09      	cmp	r2, #9
 800799a:	d903      	bls.n	80079a4 <_svfiprintf_r+0x1a8>
 800799c:	2b00      	cmp	r3, #0
 800799e:	d0c5      	beq.n	800792c <_svfiprintf_r+0x130>
 80079a0:	9105      	str	r1, [sp, #20]
 80079a2:	e7c3      	b.n	800792c <_svfiprintf_r+0x130>
 80079a4:	4604      	mov	r4, r0
 80079a6:	2301      	movs	r3, #1
 80079a8:	fb0c 2101 	mla	r1, ip, r1, r2
 80079ac:	e7f0      	b.n	8007990 <_svfiprintf_r+0x194>
 80079ae:	ab03      	add	r3, sp, #12
 80079b0:	9300      	str	r3, [sp, #0]
 80079b2:	462a      	mov	r2, r5
 80079b4:	4638      	mov	r0, r7
 80079b6:	4b10      	ldr	r3, [pc, #64]	; (80079f8 <_svfiprintf_r+0x1fc>)
 80079b8:	a904      	add	r1, sp, #16
 80079ba:	f3af 8000 	nop.w
 80079be:	1c42      	adds	r2, r0, #1
 80079c0:	4606      	mov	r6, r0
 80079c2:	d1d6      	bne.n	8007972 <_svfiprintf_r+0x176>
 80079c4:	89ab      	ldrh	r3, [r5, #12]
 80079c6:	065b      	lsls	r3, r3, #25
 80079c8:	f53f af2c 	bmi.w	8007824 <_svfiprintf_r+0x28>
 80079cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80079ce:	b01d      	add	sp, #116	; 0x74
 80079d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079d4:	ab03      	add	r3, sp, #12
 80079d6:	9300      	str	r3, [sp, #0]
 80079d8:	462a      	mov	r2, r5
 80079da:	4638      	mov	r0, r7
 80079dc:	4b06      	ldr	r3, [pc, #24]	; (80079f8 <_svfiprintf_r+0x1fc>)
 80079de:	a904      	add	r1, sp, #16
 80079e0:	f000 f87c 	bl	8007adc <_printf_i>
 80079e4:	e7eb      	b.n	80079be <_svfiprintf_r+0x1c2>
 80079e6:	bf00      	nop
 80079e8:	0800a83c 	.word	0x0800a83c
 80079ec:	0800a842 	.word	0x0800a842
 80079f0:	0800a846 	.word	0x0800a846
 80079f4:	00000000 	.word	0x00000000
 80079f8:	08007745 	.word	0x08007745

080079fc <_printf_common>:
 80079fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a00:	4616      	mov	r6, r2
 8007a02:	4699      	mov	r9, r3
 8007a04:	688a      	ldr	r2, [r1, #8]
 8007a06:	690b      	ldr	r3, [r1, #16]
 8007a08:	4607      	mov	r7, r0
 8007a0a:	4293      	cmp	r3, r2
 8007a0c:	bfb8      	it	lt
 8007a0e:	4613      	movlt	r3, r2
 8007a10:	6033      	str	r3, [r6, #0]
 8007a12:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007a16:	460c      	mov	r4, r1
 8007a18:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007a1c:	b10a      	cbz	r2, 8007a22 <_printf_common+0x26>
 8007a1e:	3301      	adds	r3, #1
 8007a20:	6033      	str	r3, [r6, #0]
 8007a22:	6823      	ldr	r3, [r4, #0]
 8007a24:	0699      	lsls	r1, r3, #26
 8007a26:	bf42      	ittt	mi
 8007a28:	6833      	ldrmi	r3, [r6, #0]
 8007a2a:	3302      	addmi	r3, #2
 8007a2c:	6033      	strmi	r3, [r6, #0]
 8007a2e:	6825      	ldr	r5, [r4, #0]
 8007a30:	f015 0506 	ands.w	r5, r5, #6
 8007a34:	d106      	bne.n	8007a44 <_printf_common+0x48>
 8007a36:	f104 0a19 	add.w	sl, r4, #25
 8007a3a:	68e3      	ldr	r3, [r4, #12]
 8007a3c:	6832      	ldr	r2, [r6, #0]
 8007a3e:	1a9b      	subs	r3, r3, r2
 8007a40:	42ab      	cmp	r3, r5
 8007a42:	dc28      	bgt.n	8007a96 <_printf_common+0x9a>
 8007a44:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007a48:	1e13      	subs	r3, r2, #0
 8007a4a:	6822      	ldr	r2, [r4, #0]
 8007a4c:	bf18      	it	ne
 8007a4e:	2301      	movne	r3, #1
 8007a50:	0692      	lsls	r2, r2, #26
 8007a52:	d42d      	bmi.n	8007ab0 <_printf_common+0xb4>
 8007a54:	4649      	mov	r1, r9
 8007a56:	4638      	mov	r0, r7
 8007a58:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007a5c:	47c0      	blx	r8
 8007a5e:	3001      	adds	r0, #1
 8007a60:	d020      	beq.n	8007aa4 <_printf_common+0xa8>
 8007a62:	6823      	ldr	r3, [r4, #0]
 8007a64:	68e5      	ldr	r5, [r4, #12]
 8007a66:	f003 0306 	and.w	r3, r3, #6
 8007a6a:	2b04      	cmp	r3, #4
 8007a6c:	bf18      	it	ne
 8007a6e:	2500      	movne	r5, #0
 8007a70:	6832      	ldr	r2, [r6, #0]
 8007a72:	f04f 0600 	mov.w	r6, #0
 8007a76:	68a3      	ldr	r3, [r4, #8]
 8007a78:	bf08      	it	eq
 8007a7a:	1aad      	subeq	r5, r5, r2
 8007a7c:	6922      	ldr	r2, [r4, #16]
 8007a7e:	bf08      	it	eq
 8007a80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007a84:	4293      	cmp	r3, r2
 8007a86:	bfc4      	itt	gt
 8007a88:	1a9b      	subgt	r3, r3, r2
 8007a8a:	18ed      	addgt	r5, r5, r3
 8007a8c:	341a      	adds	r4, #26
 8007a8e:	42b5      	cmp	r5, r6
 8007a90:	d11a      	bne.n	8007ac8 <_printf_common+0xcc>
 8007a92:	2000      	movs	r0, #0
 8007a94:	e008      	b.n	8007aa8 <_printf_common+0xac>
 8007a96:	2301      	movs	r3, #1
 8007a98:	4652      	mov	r2, sl
 8007a9a:	4649      	mov	r1, r9
 8007a9c:	4638      	mov	r0, r7
 8007a9e:	47c0      	blx	r8
 8007aa0:	3001      	adds	r0, #1
 8007aa2:	d103      	bne.n	8007aac <_printf_common+0xb0>
 8007aa4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007aa8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007aac:	3501      	adds	r5, #1
 8007aae:	e7c4      	b.n	8007a3a <_printf_common+0x3e>
 8007ab0:	2030      	movs	r0, #48	; 0x30
 8007ab2:	18e1      	adds	r1, r4, r3
 8007ab4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007ab8:	1c5a      	adds	r2, r3, #1
 8007aba:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007abe:	4422      	add	r2, r4
 8007ac0:	3302      	adds	r3, #2
 8007ac2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007ac6:	e7c5      	b.n	8007a54 <_printf_common+0x58>
 8007ac8:	2301      	movs	r3, #1
 8007aca:	4622      	mov	r2, r4
 8007acc:	4649      	mov	r1, r9
 8007ace:	4638      	mov	r0, r7
 8007ad0:	47c0      	blx	r8
 8007ad2:	3001      	adds	r0, #1
 8007ad4:	d0e6      	beq.n	8007aa4 <_printf_common+0xa8>
 8007ad6:	3601      	adds	r6, #1
 8007ad8:	e7d9      	b.n	8007a8e <_printf_common+0x92>
	...

08007adc <_printf_i>:
 8007adc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007ae0:	7e0f      	ldrb	r7, [r1, #24]
 8007ae2:	4691      	mov	r9, r2
 8007ae4:	2f78      	cmp	r7, #120	; 0x78
 8007ae6:	4680      	mov	r8, r0
 8007ae8:	460c      	mov	r4, r1
 8007aea:	469a      	mov	sl, r3
 8007aec:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007aee:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007af2:	d807      	bhi.n	8007b04 <_printf_i+0x28>
 8007af4:	2f62      	cmp	r7, #98	; 0x62
 8007af6:	d80a      	bhi.n	8007b0e <_printf_i+0x32>
 8007af8:	2f00      	cmp	r7, #0
 8007afa:	f000 80d9 	beq.w	8007cb0 <_printf_i+0x1d4>
 8007afe:	2f58      	cmp	r7, #88	; 0x58
 8007b00:	f000 80a4 	beq.w	8007c4c <_printf_i+0x170>
 8007b04:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007b08:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007b0c:	e03a      	b.n	8007b84 <_printf_i+0xa8>
 8007b0e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007b12:	2b15      	cmp	r3, #21
 8007b14:	d8f6      	bhi.n	8007b04 <_printf_i+0x28>
 8007b16:	a101      	add	r1, pc, #4	; (adr r1, 8007b1c <_printf_i+0x40>)
 8007b18:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007b1c:	08007b75 	.word	0x08007b75
 8007b20:	08007b89 	.word	0x08007b89
 8007b24:	08007b05 	.word	0x08007b05
 8007b28:	08007b05 	.word	0x08007b05
 8007b2c:	08007b05 	.word	0x08007b05
 8007b30:	08007b05 	.word	0x08007b05
 8007b34:	08007b89 	.word	0x08007b89
 8007b38:	08007b05 	.word	0x08007b05
 8007b3c:	08007b05 	.word	0x08007b05
 8007b40:	08007b05 	.word	0x08007b05
 8007b44:	08007b05 	.word	0x08007b05
 8007b48:	08007c97 	.word	0x08007c97
 8007b4c:	08007bb9 	.word	0x08007bb9
 8007b50:	08007c79 	.word	0x08007c79
 8007b54:	08007b05 	.word	0x08007b05
 8007b58:	08007b05 	.word	0x08007b05
 8007b5c:	08007cb9 	.word	0x08007cb9
 8007b60:	08007b05 	.word	0x08007b05
 8007b64:	08007bb9 	.word	0x08007bb9
 8007b68:	08007b05 	.word	0x08007b05
 8007b6c:	08007b05 	.word	0x08007b05
 8007b70:	08007c81 	.word	0x08007c81
 8007b74:	682b      	ldr	r3, [r5, #0]
 8007b76:	1d1a      	adds	r2, r3, #4
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	602a      	str	r2, [r5, #0]
 8007b7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007b80:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007b84:	2301      	movs	r3, #1
 8007b86:	e0a4      	b.n	8007cd2 <_printf_i+0x1f6>
 8007b88:	6820      	ldr	r0, [r4, #0]
 8007b8a:	6829      	ldr	r1, [r5, #0]
 8007b8c:	0606      	lsls	r6, r0, #24
 8007b8e:	f101 0304 	add.w	r3, r1, #4
 8007b92:	d50a      	bpl.n	8007baa <_printf_i+0xce>
 8007b94:	680e      	ldr	r6, [r1, #0]
 8007b96:	602b      	str	r3, [r5, #0]
 8007b98:	2e00      	cmp	r6, #0
 8007b9a:	da03      	bge.n	8007ba4 <_printf_i+0xc8>
 8007b9c:	232d      	movs	r3, #45	; 0x2d
 8007b9e:	4276      	negs	r6, r6
 8007ba0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007ba4:	230a      	movs	r3, #10
 8007ba6:	485e      	ldr	r0, [pc, #376]	; (8007d20 <_printf_i+0x244>)
 8007ba8:	e019      	b.n	8007bde <_printf_i+0x102>
 8007baa:	680e      	ldr	r6, [r1, #0]
 8007bac:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007bb0:	602b      	str	r3, [r5, #0]
 8007bb2:	bf18      	it	ne
 8007bb4:	b236      	sxthne	r6, r6
 8007bb6:	e7ef      	b.n	8007b98 <_printf_i+0xbc>
 8007bb8:	682b      	ldr	r3, [r5, #0]
 8007bba:	6820      	ldr	r0, [r4, #0]
 8007bbc:	1d19      	adds	r1, r3, #4
 8007bbe:	6029      	str	r1, [r5, #0]
 8007bc0:	0601      	lsls	r1, r0, #24
 8007bc2:	d501      	bpl.n	8007bc8 <_printf_i+0xec>
 8007bc4:	681e      	ldr	r6, [r3, #0]
 8007bc6:	e002      	b.n	8007bce <_printf_i+0xf2>
 8007bc8:	0646      	lsls	r6, r0, #25
 8007bca:	d5fb      	bpl.n	8007bc4 <_printf_i+0xe8>
 8007bcc:	881e      	ldrh	r6, [r3, #0]
 8007bce:	2f6f      	cmp	r7, #111	; 0x6f
 8007bd0:	bf0c      	ite	eq
 8007bd2:	2308      	moveq	r3, #8
 8007bd4:	230a      	movne	r3, #10
 8007bd6:	4852      	ldr	r0, [pc, #328]	; (8007d20 <_printf_i+0x244>)
 8007bd8:	2100      	movs	r1, #0
 8007bda:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007bde:	6865      	ldr	r5, [r4, #4]
 8007be0:	2d00      	cmp	r5, #0
 8007be2:	bfa8      	it	ge
 8007be4:	6821      	ldrge	r1, [r4, #0]
 8007be6:	60a5      	str	r5, [r4, #8]
 8007be8:	bfa4      	itt	ge
 8007bea:	f021 0104 	bicge.w	r1, r1, #4
 8007bee:	6021      	strge	r1, [r4, #0]
 8007bf0:	b90e      	cbnz	r6, 8007bf6 <_printf_i+0x11a>
 8007bf2:	2d00      	cmp	r5, #0
 8007bf4:	d04d      	beq.n	8007c92 <_printf_i+0x1b6>
 8007bf6:	4615      	mov	r5, r2
 8007bf8:	fbb6 f1f3 	udiv	r1, r6, r3
 8007bfc:	fb03 6711 	mls	r7, r3, r1, r6
 8007c00:	5dc7      	ldrb	r7, [r0, r7]
 8007c02:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007c06:	4637      	mov	r7, r6
 8007c08:	42bb      	cmp	r3, r7
 8007c0a:	460e      	mov	r6, r1
 8007c0c:	d9f4      	bls.n	8007bf8 <_printf_i+0x11c>
 8007c0e:	2b08      	cmp	r3, #8
 8007c10:	d10b      	bne.n	8007c2a <_printf_i+0x14e>
 8007c12:	6823      	ldr	r3, [r4, #0]
 8007c14:	07de      	lsls	r6, r3, #31
 8007c16:	d508      	bpl.n	8007c2a <_printf_i+0x14e>
 8007c18:	6923      	ldr	r3, [r4, #16]
 8007c1a:	6861      	ldr	r1, [r4, #4]
 8007c1c:	4299      	cmp	r1, r3
 8007c1e:	bfde      	ittt	le
 8007c20:	2330      	movle	r3, #48	; 0x30
 8007c22:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007c26:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8007c2a:	1b52      	subs	r2, r2, r5
 8007c2c:	6122      	str	r2, [r4, #16]
 8007c2e:	464b      	mov	r3, r9
 8007c30:	4621      	mov	r1, r4
 8007c32:	4640      	mov	r0, r8
 8007c34:	f8cd a000 	str.w	sl, [sp]
 8007c38:	aa03      	add	r2, sp, #12
 8007c3a:	f7ff fedf 	bl	80079fc <_printf_common>
 8007c3e:	3001      	adds	r0, #1
 8007c40:	d14c      	bne.n	8007cdc <_printf_i+0x200>
 8007c42:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007c46:	b004      	add	sp, #16
 8007c48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c4c:	4834      	ldr	r0, [pc, #208]	; (8007d20 <_printf_i+0x244>)
 8007c4e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007c52:	6829      	ldr	r1, [r5, #0]
 8007c54:	6823      	ldr	r3, [r4, #0]
 8007c56:	f851 6b04 	ldr.w	r6, [r1], #4
 8007c5a:	6029      	str	r1, [r5, #0]
 8007c5c:	061d      	lsls	r5, r3, #24
 8007c5e:	d514      	bpl.n	8007c8a <_printf_i+0x1ae>
 8007c60:	07df      	lsls	r7, r3, #31
 8007c62:	bf44      	itt	mi
 8007c64:	f043 0320 	orrmi.w	r3, r3, #32
 8007c68:	6023      	strmi	r3, [r4, #0]
 8007c6a:	b91e      	cbnz	r6, 8007c74 <_printf_i+0x198>
 8007c6c:	6823      	ldr	r3, [r4, #0]
 8007c6e:	f023 0320 	bic.w	r3, r3, #32
 8007c72:	6023      	str	r3, [r4, #0]
 8007c74:	2310      	movs	r3, #16
 8007c76:	e7af      	b.n	8007bd8 <_printf_i+0xfc>
 8007c78:	6823      	ldr	r3, [r4, #0]
 8007c7a:	f043 0320 	orr.w	r3, r3, #32
 8007c7e:	6023      	str	r3, [r4, #0]
 8007c80:	2378      	movs	r3, #120	; 0x78
 8007c82:	4828      	ldr	r0, [pc, #160]	; (8007d24 <_printf_i+0x248>)
 8007c84:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007c88:	e7e3      	b.n	8007c52 <_printf_i+0x176>
 8007c8a:	0659      	lsls	r1, r3, #25
 8007c8c:	bf48      	it	mi
 8007c8e:	b2b6      	uxthmi	r6, r6
 8007c90:	e7e6      	b.n	8007c60 <_printf_i+0x184>
 8007c92:	4615      	mov	r5, r2
 8007c94:	e7bb      	b.n	8007c0e <_printf_i+0x132>
 8007c96:	682b      	ldr	r3, [r5, #0]
 8007c98:	6826      	ldr	r6, [r4, #0]
 8007c9a:	1d18      	adds	r0, r3, #4
 8007c9c:	6961      	ldr	r1, [r4, #20]
 8007c9e:	6028      	str	r0, [r5, #0]
 8007ca0:	0635      	lsls	r5, r6, #24
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	d501      	bpl.n	8007caa <_printf_i+0x1ce>
 8007ca6:	6019      	str	r1, [r3, #0]
 8007ca8:	e002      	b.n	8007cb0 <_printf_i+0x1d4>
 8007caa:	0670      	lsls	r0, r6, #25
 8007cac:	d5fb      	bpl.n	8007ca6 <_printf_i+0x1ca>
 8007cae:	8019      	strh	r1, [r3, #0]
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	4615      	mov	r5, r2
 8007cb4:	6123      	str	r3, [r4, #16]
 8007cb6:	e7ba      	b.n	8007c2e <_printf_i+0x152>
 8007cb8:	682b      	ldr	r3, [r5, #0]
 8007cba:	2100      	movs	r1, #0
 8007cbc:	1d1a      	adds	r2, r3, #4
 8007cbe:	602a      	str	r2, [r5, #0]
 8007cc0:	681d      	ldr	r5, [r3, #0]
 8007cc2:	6862      	ldr	r2, [r4, #4]
 8007cc4:	4628      	mov	r0, r5
 8007cc6:	f000 f831 	bl	8007d2c <memchr>
 8007cca:	b108      	cbz	r0, 8007cd0 <_printf_i+0x1f4>
 8007ccc:	1b40      	subs	r0, r0, r5
 8007cce:	6060      	str	r0, [r4, #4]
 8007cd0:	6863      	ldr	r3, [r4, #4]
 8007cd2:	6123      	str	r3, [r4, #16]
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007cda:	e7a8      	b.n	8007c2e <_printf_i+0x152>
 8007cdc:	462a      	mov	r2, r5
 8007cde:	4649      	mov	r1, r9
 8007ce0:	4640      	mov	r0, r8
 8007ce2:	6923      	ldr	r3, [r4, #16]
 8007ce4:	47d0      	blx	sl
 8007ce6:	3001      	adds	r0, #1
 8007ce8:	d0ab      	beq.n	8007c42 <_printf_i+0x166>
 8007cea:	6823      	ldr	r3, [r4, #0]
 8007cec:	079b      	lsls	r3, r3, #30
 8007cee:	d413      	bmi.n	8007d18 <_printf_i+0x23c>
 8007cf0:	68e0      	ldr	r0, [r4, #12]
 8007cf2:	9b03      	ldr	r3, [sp, #12]
 8007cf4:	4298      	cmp	r0, r3
 8007cf6:	bfb8      	it	lt
 8007cf8:	4618      	movlt	r0, r3
 8007cfa:	e7a4      	b.n	8007c46 <_printf_i+0x16a>
 8007cfc:	2301      	movs	r3, #1
 8007cfe:	4632      	mov	r2, r6
 8007d00:	4649      	mov	r1, r9
 8007d02:	4640      	mov	r0, r8
 8007d04:	47d0      	blx	sl
 8007d06:	3001      	adds	r0, #1
 8007d08:	d09b      	beq.n	8007c42 <_printf_i+0x166>
 8007d0a:	3501      	adds	r5, #1
 8007d0c:	68e3      	ldr	r3, [r4, #12]
 8007d0e:	9903      	ldr	r1, [sp, #12]
 8007d10:	1a5b      	subs	r3, r3, r1
 8007d12:	42ab      	cmp	r3, r5
 8007d14:	dcf2      	bgt.n	8007cfc <_printf_i+0x220>
 8007d16:	e7eb      	b.n	8007cf0 <_printf_i+0x214>
 8007d18:	2500      	movs	r5, #0
 8007d1a:	f104 0619 	add.w	r6, r4, #25
 8007d1e:	e7f5      	b.n	8007d0c <_printf_i+0x230>
 8007d20:	0800a84d 	.word	0x0800a84d
 8007d24:	0800a85e 	.word	0x0800a85e

08007d28 <__retarget_lock_acquire_recursive>:
 8007d28:	4770      	bx	lr

08007d2a <__retarget_lock_release_recursive>:
 8007d2a:	4770      	bx	lr

08007d2c <memchr>:
 8007d2c:	4603      	mov	r3, r0
 8007d2e:	b510      	push	{r4, lr}
 8007d30:	b2c9      	uxtb	r1, r1
 8007d32:	4402      	add	r2, r0
 8007d34:	4293      	cmp	r3, r2
 8007d36:	4618      	mov	r0, r3
 8007d38:	d101      	bne.n	8007d3e <memchr+0x12>
 8007d3a:	2000      	movs	r0, #0
 8007d3c:	e003      	b.n	8007d46 <memchr+0x1a>
 8007d3e:	7804      	ldrb	r4, [r0, #0]
 8007d40:	3301      	adds	r3, #1
 8007d42:	428c      	cmp	r4, r1
 8007d44:	d1f6      	bne.n	8007d34 <memchr+0x8>
 8007d46:	bd10      	pop	{r4, pc}

08007d48 <memcpy>:
 8007d48:	440a      	add	r2, r1
 8007d4a:	4291      	cmp	r1, r2
 8007d4c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007d50:	d100      	bne.n	8007d54 <memcpy+0xc>
 8007d52:	4770      	bx	lr
 8007d54:	b510      	push	{r4, lr}
 8007d56:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007d5a:	4291      	cmp	r1, r2
 8007d5c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007d60:	d1f9      	bne.n	8007d56 <memcpy+0xe>
 8007d62:	bd10      	pop	{r4, pc}

08007d64 <memmove>:
 8007d64:	4288      	cmp	r0, r1
 8007d66:	b510      	push	{r4, lr}
 8007d68:	eb01 0402 	add.w	r4, r1, r2
 8007d6c:	d902      	bls.n	8007d74 <memmove+0x10>
 8007d6e:	4284      	cmp	r4, r0
 8007d70:	4623      	mov	r3, r4
 8007d72:	d807      	bhi.n	8007d84 <memmove+0x20>
 8007d74:	1e43      	subs	r3, r0, #1
 8007d76:	42a1      	cmp	r1, r4
 8007d78:	d008      	beq.n	8007d8c <memmove+0x28>
 8007d7a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007d7e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007d82:	e7f8      	b.n	8007d76 <memmove+0x12>
 8007d84:	4601      	mov	r1, r0
 8007d86:	4402      	add	r2, r0
 8007d88:	428a      	cmp	r2, r1
 8007d8a:	d100      	bne.n	8007d8e <memmove+0x2a>
 8007d8c:	bd10      	pop	{r4, pc}
 8007d8e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007d92:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007d96:	e7f7      	b.n	8007d88 <memmove+0x24>

08007d98 <_realloc_r>:
 8007d98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d9c:	4680      	mov	r8, r0
 8007d9e:	4614      	mov	r4, r2
 8007da0:	460e      	mov	r6, r1
 8007da2:	b921      	cbnz	r1, 8007dae <_realloc_r+0x16>
 8007da4:	4611      	mov	r1, r2
 8007da6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007daa:	f7ff bc1b 	b.w	80075e4 <_malloc_r>
 8007dae:	b92a      	cbnz	r2, 8007dbc <_realloc_r+0x24>
 8007db0:	f7ff fbb0 	bl	8007514 <_free_r>
 8007db4:	4625      	mov	r5, r4
 8007db6:	4628      	mov	r0, r5
 8007db8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007dbc:	f000 f81b 	bl	8007df6 <_malloc_usable_size_r>
 8007dc0:	4284      	cmp	r4, r0
 8007dc2:	4607      	mov	r7, r0
 8007dc4:	d802      	bhi.n	8007dcc <_realloc_r+0x34>
 8007dc6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007dca:	d812      	bhi.n	8007df2 <_realloc_r+0x5a>
 8007dcc:	4621      	mov	r1, r4
 8007dce:	4640      	mov	r0, r8
 8007dd0:	f7ff fc08 	bl	80075e4 <_malloc_r>
 8007dd4:	4605      	mov	r5, r0
 8007dd6:	2800      	cmp	r0, #0
 8007dd8:	d0ed      	beq.n	8007db6 <_realloc_r+0x1e>
 8007dda:	42bc      	cmp	r4, r7
 8007ddc:	4622      	mov	r2, r4
 8007dde:	4631      	mov	r1, r6
 8007de0:	bf28      	it	cs
 8007de2:	463a      	movcs	r2, r7
 8007de4:	f7ff ffb0 	bl	8007d48 <memcpy>
 8007de8:	4631      	mov	r1, r6
 8007dea:	4640      	mov	r0, r8
 8007dec:	f7ff fb92 	bl	8007514 <_free_r>
 8007df0:	e7e1      	b.n	8007db6 <_realloc_r+0x1e>
 8007df2:	4635      	mov	r5, r6
 8007df4:	e7df      	b.n	8007db6 <_realloc_r+0x1e>

08007df6 <_malloc_usable_size_r>:
 8007df6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007dfa:	1f18      	subs	r0, r3, #4
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	bfbc      	itt	lt
 8007e00:	580b      	ldrlt	r3, [r1, r0]
 8007e02:	18c0      	addlt	r0, r0, r3
 8007e04:	4770      	bx	lr
	...

08007e08 <_init>:
 8007e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e0a:	bf00      	nop
 8007e0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e0e:	bc08      	pop	{r3}
 8007e10:	469e      	mov	lr, r3
 8007e12:	4770      	bx	lr

08007e14 <_fini>:
 8007e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e16:	bf00      	nop
 8007e18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e1a:	bc08      	pop	{r3}
 8007e1c:	469e      	mov	lr, r3
 8007e1e:	4770      	bx	lr
